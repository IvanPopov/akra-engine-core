"use strict";
var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var akra;
(function (akra) {
    (function (ELogLevel) {
        ELogLevel._map = [];
        ELogLevel.NONE = 0;
        ELogLevel.LOG = 1;
        ELogLevel.INFORMATION = 2;
        ELogLevel.WARNING = 4;
        ELogLevel.ERROR = 8;
        ELogLevel.CRITICAL = 16;
        ELogLevel.ALL = 31;
    })(akra.ELogLevel || (akra.ELogLevel = {}));
    var ELogLevel = akra.ELogLevel;
})(akra || (akra = {}));
/*I ## */
/*I ## */
/*I ## */
/*I ## */
var akra;
(function (akra) {
    akra.DEBUG = true;
    akra.logger;
    akra.typeOf;
    akra.typeOf = function typeOf(x) {
        var s = typeof x;
        if(s === "object") {
            if(x) {
                if(x instanceof Array) {
                    return 'array';
                } else {
                    if(x instanceof Object) {
                        return s;
                    }
                }
                var sClassName = Object.prototype.toString.call(x);
                if(sClassName == '[object Window]') {
                    return 'object';
                }
                if((sClassName == '[object Array]' || typeof x.length == 'number' && typeof x.splice != 'undefined' && typeof x.propertyIsEnumerable != 'undefined' && !x.propertyIsEnumerable('splice'))) {
                    return 'array';
                }
                if((sClassName == '[object Function]' || typeof x.call != 'undefined' && typeof x.propertyIsEnumerable != 'undefined' && !x.propertyIsEnumerable('call'))) {
                    return 'function';
                }
            } else {
                return 'null';
            }
        } else {
            if(s == 'function' && typeof x.call == 'undefined') {
                return 'object';
            }
        }
        return s;
    };
    /** @inline */
    akra.isDef = function (x) {
        return x !== undefined;
    };
    /** @inline */
    akra.isEmpty = function (x) {
        return x.length == 0;
    };
    // Note that undefined == null.
    /** @inline */
    akra.isDefAndNotNull = function (x) {
        return x != null;
    };
    /** @inline */
    akra.isNull = function (x) {
        return x === null;
    };
    /** @inline */
    akra.isBoolean = function (x) {
        return typeof x === "boolean";
    };
    /** @inline */
    akra.isString = function (x) {
        return typeof x === "string";
    };
    /** @inline */
    akra.isNumber = function (x) {
        return typeof x === "number";
    };
    /** @inline */
    akra.isFloat = akra.isNumber;
    /** @inline */
    akra.isInt = akra.isNumber;
    /** @inline */
    akra.isFunction = function (x) {
        return akra.typeOf(x) === "function";
    };
    /** @inline */
    akra.isObject = function (x) {
        var type = akra.typeOf(x);
        return type == "object" || type == "array" || type == "function";
    };
    akra.isArrayBuffer = function (x) {
        return x instanceof ArrayBuffer;
    };
    akra.isTypedArray = function (x) {
        return typeof x === "object" && typeof x.byteOffset === "number";
    };
    /** @inline */
    akra.isArray = function (x) {
        return akra.typeOf(x) == "array";
    };
    ; ;
    // if (!isDef(console.assert)) {
    //     console.assert = function (isOK?: bool, ...pParams: any[]): void {
    //         if (!isOK) {
    //             trace('---------------------------');
    //             trace.apply(null, pParams);
    //             throw new Error("[assertion failed]");
    //         }
    //     }
    // }
    // export var trace = console.log.bind(console);
    // export var assert = console.assert.bind(console);
    // export var warning = console.warn.bind(console);
    // export var error = console.error.bind(console);
    // export var debug_print = (pArg:any, ...pParams: any[]): void => {
    //         trace.apply(null, arguments);
    // }
    // export var debug_assert = (isOK: bool, ...pParams: any[]): void => {
    //         assert.apply(null, arguments);
    // }
    // export var debug_warning = (pArg:any, ...pParams: any[]): void => {
    //         warning.apply(null, arguments);
    // }
    // export var debug_error = (pArg:any, ...pParams: any[]): void => {
    //         error.apply(null, arguments);
    // }
    function genArray(pType, nSize) {
        var tmp = new Array(nSize);
        for(var i = 0; i < nSize; ++i) {
            tmp[i] = (pType ? new pType() : null);
        }
        return tmp;
    }
    akra.genArray = genArray;
    akra.INVALID_INDEX = 65535;
    // (-2147483646);
    akra.MIN_INT32 = 4294967295;
    // ( 2147483647);
    akra.MAX_INT32 = 2147483647;
    // (-32768);
    akra.MIN_INT16 = 65535;
    // ( 32767);
    akra.MAX_INT16 = 32767;
    // (-128);
    akra.MIN_INT8 = 255;
    // ( 127);
    akra.MAX_INT8 = 127;
    akra.MIN_UINT32 = 0;
    akra.MAX_UINT32 = 4294967295;
    akra.MIN_UINT16 = 0;
    akra.MAX_UINT16 = 65535;
    akra.MIN_UINT8 = 0;
    akra.MAX_UINT8 = 255;
    akra.SIZE_FLOAT64 = 8;
    akra.SIZE_REAL64 = 8;
    akra.SIZE_FLOAT32 = 4;
    akra.SIZE_REAL32 = 4;
    akra.SIZE_INT32 = 4;
    akra.SIZE_UINT32 = 4;
    akra.SIZE_INT16 = 2;
    akra.SIZE_UINT16 = 2;
    akra.SIZE_INT8 = 1;
    akra.SIZE_UINT8 = 1;
    akra.SIZE_BYTE = 1;
    akra.SIZE_UBYTE = 1;
    //1.7976931348623157e+308
    akra.MAX_FLOAT64 = Number.MAX_VALUE;
    //-1.7976931348623157e+308
    akra.MIN_FLOAT64 = -Number.MAX_VALUE;
    //5e-324
    akra.TINY_FLOAT64 = Number.MIN_VALUE;
    //    export const MAX_REAL64: number = Number.MAX_VALUE;   //1.7976931348623157e+308
    //    export const MIN_REAL64: number = -Number.MAX_VALUE;  //-1.7976931348623157e+308
    //    export const TINY_REAL64: number = Number.MIN_VALUE;  //5e-324
    //3.4e38
    akra.MAX_FLOAT32 = 3.4e+38;
    //-3.4e38
    akra.MIN_FLOAT32 = -3.4e+38;
    //1.5e-45
    akra.TINY_FLOAT32 = 1.5e-45;
    //    export const MAX_REAL32: number = 3.4e38;     //3.4e38
    //    export const MIN_REAL32: number = -3.4e38;    //-3.4e38
    //    export const TINY_REAL32: number = 1.5e-45;   //1.5e-45
    akra.DEFAULT_MATERIAL_NAME = "default";
    (function (EDataTypes) {
        EDataTypes._map = [];
        EDataTypes.BYTE = 5120;
        EDataTypes.UNSIGNED_BYTE = 5121;
        EDataTypes.SHORT = 5122;
        EDataTypes.UNSIGNED_SHORT = 5123;
        EDataTypes.INT = 5124;
        EDataTypes.UNSIGNED_INT = 5125;
        EDataTypes.FLOAT = 5126;
    })(akra.EDataTypes || (akra.EDataTypes = {}));
    var EDataTypes = akra.EDataTypes;
    ; ;
    (function (EDataTypeSizes) {
        EDataTypeSizes._map = [];
        EDataTypeSizes.BYTES_PER_BYTE = 1;
        EDataTypeSizes.BYTES_PER_UNSIGNED_BYTE = 1;
        EDataTypeSizes.BYTES_PER_UBYTE = 1;
        EDataTypeSizes.BYTES_PER_SHORT = 2;
        EDataTypeSizes.BYTES_PER_UNSIGNED_SHORT = 2;
        EDataTypeSizes.BYTES_PER_USHORT = 2;
        EDataTypeSizes.BYTES_PER_INT = 4;
        EDataTypeSizes.BYTES_PER_UNSIGNED_INT = 4;
        EDataTypeSizes.BYTES_PER_UINT = 4;
        EDataTypeSizes.BYTES_PER_FLOAT = 4;
    })(akra.EDataTypeSizes || (akra.EDataTypeSizes = {}));
    var EDataTypeSizes = akra.EDataTypeSizes;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
        function getTypeSize(eType) {
        switch(eType) {
            case EDataTypes.BYTE:
            case EDataTypes.UNSIGNED_BYTE: {
                return 1;

            }
            case EDataTypes.SHORT:
            case EDataTypes.UNSIGNED_SHORT: {
                //case EImageTypes.UNSIGNED_SHORT_4_4_4_4:
                //case EImageTypes.UNSIGNED_SHORT_5_5_5_1:
                //case EImageTypes.UNSIGNED_SHORT_5_6_5:
                return 2;

            }
            case EDataTypes.INT:
            case EDataTypes.UNSIGNED_INT:
            case EDataTypes.FLOAT: {
                return 4;

            }
            default: {
                akra.logger.setSourceLocation("common.ts", 396);
                akra.logger.error('unknown data/image type used');
                ; ;

            }
        }
        return 0;
    }
    akra.getTypeSize = getTypeSize;
    akra.sid = function () {
        return (++akra.sid._iTotal);
    };
    akra.sid._iTotal = 0;
    function now() {
        return (new Date()).getTime();
    }
    akra.now = now;
    function memcpy(/**@inline*/ pDst, iDstOffset, pSrc, iSrcOffset, nLength) {
        var dstU8 = new Uint8Array(pDst, iDstOffset, nLength);
        var srcU8 = new Uint8Array(pSrc, iSrcOffset, nLength);
        dstU8.set(srcU8);
    }
    akra.memcpy = memcpy;
    ; ;
    //export function
    (window).URL = (window).URL ? (window).URL : (window).webkitURL ? (window).webkitURL : null;
    (window).BlobBuilder = (window).WebKitBlobBuilder || (window).MozBlobBuilder || (window).BlobBuilder;
    (window).requestFileSystem = (window).requestFileSystem || (window).webkitRequestFileSystem;
    (window).requestAnimationFrame = (window).requestAnimationFrame || (window).webkitRequestAnimationFrame || (window).mozRequestAnimationFrame;
    (window).WebSocket = (window).WebSocket || (window).MozWebSocket;
    (window).storageInfo = (window).storageInfo || (window).webkitStorageInfo;
    Worker.prototype.postMessage = (Worker).prototype.webkitPostMessage || Worker.prototype.postMessage;
})(akra || (akra = {}));
; ;
/**
* FLAG(x)
* Сдвиг единицы на @a x позиций влево.
*/
/**
* TEST_BIT(value, bit)
* Проверка того что у @a value бит под номером @a bit равен единице.
*/
/**
* TEST_ALL(value, set)
* Проверка того что у @a value равны единице все биты,
* которые равны единице у @a set.
*/
/**
* TEST_ANY(value, set)
* Проверка того что у @a value равны единице хотя бы какие то из битов,
* которые равны единице у @a set.
*/
/**
* SET_BIT(value, bit)
* Выставляет бит под номером @a bit у числа @a value равным единице
*/
/**
* CLEAR_BIT(value, bit)
* Выставляет бит под номером @a bit у числа @a value равным нулю
*/
/**
* SET_ALL(value, set)
* Выставляет все биты у числа @a value равными единице,
* которые равны единице у числа @a set
*/
/**
* CLEAR_ALL(value, set)
* Выставляет все биты у числа @a value равными нулю,
* которые равны единице у числа @a set
*/
//#define SET_ALL(value, set, setting) (setting ? SET_ALL(value, set) : CLEAR_ALL(value, set))
var akra;
(function (akra) {
    (function (bf) {
        /**
        * Сдвиг единицы на @a x позиций влево.
        * @inline
        */
        bf.flag = function (x) {
            return (1 << (x));
        };
        /**
        * Проверка того что у @a value бит под номером @a bit равен единице.
        * @inline
        */
        bf.testBit = function (value, bit) {
            return ((value & bf.flag(bit)) != 0);
        };
        /**
        * Проверка того что у @a value равны единице все биты,
        * которые равны единице у @a set.
        * @inline
        */
        bf.testAll = function (value, set) {
            return (((value) & (set)) == (set));
        };
        /**
        * Проверка того что у @a value равны единице хотя бы какие то из битов,
        * которые равны единице у @a set.
        * @inline
        */
        bf.testAny = function (value, set) {
            return (((value) & (set)) != 0);
        };
        /**
        * Выставляет бит под номером @a bit у числа @a value равным единице
        * @inline
        */
        bf.setBit = function (value, bit, setting) {
            if (typeof setting === "undefined") { setting = true; }
            return (setting ? ((value) |= bf.flag((bit))) : bf.clearBit(value, bit));
        };
        /**
        *
        * @inline
        */
        bf.clearBit = function (value, bit) {
            return ((value) &= ~bf.flag((bit)));
        };
        /**
        * Выставляет бит под номером @a bit у числа @a value равным нулю
        * @inline
        */
        bf.setAll = function (value, set, setting) {
            if (typeof setting === "undefined") { setting = true; }
            return (setting ? bf.setAll(value, set) : bf.clearAll(value, set));
        };
        /**
        * Выставляет все биты у числа @a value равными единице,
        * которые равны единице у числа @a set
        * @inline
        */
        bf.clearAll = function (value, set) {
            return ((value) &= ~(set));
        };
        /**
        * Выставляет все биты у числа @a value равными нулю,
        * которые равны единице у числа @a set
        * @inline
        */
        bf.equal = function (value, src) {
            value = src;
        };
        /**
        * Прирасваивает числу @a value число @a src
        * @inline
        */
        bf.isEqual = function (value, src) {
            return value == src;
        };
        /**
        * Если число @a value равно числу @a src возвращается true
        * @inline
        */
        bf.isNotEqaul = function (value, src) {
            return value != src;
        };
        /**
        * Прирасваивает числу @a value число @a src
        * @inline
        */
        bf.set = function (value, src) {
            value = src;
        };
        /**
        * Обнуляет число @a value
        * @inline
        */
        bf.clear = function (value) {
            value = 0;
        };
        /**
        * Выставляет все биты у числа @a value равными единице,
        * которые равны единице у числа @a src
        * @inline
        */
        bf.setFlags = function (value, src) {
            return (value |= src);
        };
        /**
        * Выставляет все биты у числа @a value равными нулю,
        * которые равны единице у числа @a src
        * @inline
        */
        bf.clearFlags = function (value, src) {
            return value &= ~src;
        };
        /**
        * Проверяет равно ли число @a value нулю. Если равно возвращает true.
        * Если не равно возвращает false.
        * @inline
        */
        bf.isEmpty = function (value) {
            return (value == 0);
        };
        /**
        * Возвращает общее количество бит числа @a value.
        * На самом деле возвращает всегда 32.
        * @inline
        */
        bf.totalBits = function (value) {
            return 32;
        };
        /**
        * Возвращает общее количество ненулевых бит числа @a value.
        * @inline
        */
        bf.totalSet = function (value) {
            var count = 0;
            var total = bf.totalBits(value);
            for(var i = total; i; --i) {
                count += (value & 1);
                value >>= 1;
            }
            return (count);
        };
        /**
        * Convert N bit colour channel value to P bits. It fills P bits with the
        * bit pattern repeated. (this is /((1<<n)-1) in fixed point)
        */
        function fixedToFixed(/**@inline*/ value, n, p) {
            if(n > p) {
                // Less bits required than available; this is easy
                value >>= n - p;
            } else {
                if(n < p) {
                    // More bits required than are there, do the fill
                    // Use old fashioned division, probably better than a loop
                    if(value == 0) {
                        value = 0;
                    } else {
                        if(value == ((1) << n) - 1) {
                            value = (1 << p) - 1;
                        } else {
                            value = value * (1 << p) / ((1 << n) - 1);
                        }
                    }
                }
            }
            return value;
        }
        bf.fixedToFixed = fixedToFixed;
        /**
        * Convert floating point colour channel value between 0.0 and 1.0 (otherwise clamped)
        * to integer of a certain number of bits. Works for any value of bits between 0 and 31.
        */
        function floatToFixed(/**@inline*/ value, bits) {
            if(value <= 0.0) {
                return 0;
            } else {
                if(value >= 1.0) {
                    return (1 << bits) - 1;
                } else {
                    return (value * (1 << bits));
                }
            }
        }
        bf.floatToFixed = floatToFixed;
        /**
        * Fixed point to float
        */
        function fixedToFloat(/**@inline*/ value, bits) {
            return value / ((1 << bits) - 1);
        }
        bf.fixedToFloat = fixedToFloat;
        /**
        * Write a n*8 bits integer value to memory in native endian.
        */
        function intWrite(/**@inline*/ pDest, n, value) {
            switch(n) {
                case 1: {
                    pDest[0] = value;
                    break;

                }
                case 2: {
                    pDest[1] = ((value >> 8) & 255);
                    pDest[0] = (value & 255);
                    break;

                }
                case 3: {
                    pDest[2] = ((value >> 16) & 255);
                    pDest[1] = ((value >> 8) & 255);
                    pDest[0] = (value & 255);
                    break;

                }
                case 4: {
                    pDest[3] = ((value >> 24) & 255);
                    pDest[2] = ((value >> 16) & 255);
                    pDest[1] = ((value >> 8) & 255);
                    pDest[0] = (value & 255);
                    break;

                }
            }
        }
        bf.intWrite = intWrite;
        /**
        * Read a n*8 bits integer value to memory in native endian.
        */
        function intRead(/**@inline*/ pSrc, n) {
            switch(n) {
                case 1: {
                    return pSrc[0];

                }
                case 2: {
                    return pSrc[0] | pSrc[1] << 8;

                }
                case 3: {
                    return pSrc[0] | pSrc[1] << 8 | pSrc[2] << 16;

                }
                case 4: {
                    return pSrc[0] | pSrc[1] << 8 | pSrc[2] << 16 | pSrc[3] << 32;

                }
            }
            return 0;
        }
        bf.intRead = intRead;
                //float32/uint32 union
        var _u32 = new Uint32Array(1);
        var _f32 = new Float32Array(_u32.buffer);
        function floatToHalf(/**@inline*/ f) {
            _f32[0] = f;
            return floatToHalfI(_u32[0]);
        }
        bf.floatToHalf = floatToHalf;
        function floatToHalfI(/**@inline*/ i) {
            var s = (i >> 16) & 32768;
            var e = ((i >> 23) & 255) - (127 - 15);
            var m = i & 8388607;
            if(e <= 0) {
                if(e < -10) {
                    return 0;
                }
                m = (m | 8388608) >> (1 - e);
                return (s | (m >> 13));
            } else {
                if(e == 255 - (127 - 15)) {
                    // Inf            if (m == 0)
                     {
                        return (s | 31744);
                    }
                    // NAN            else
                     {
                        m >>= 13;
                        return (s | 31744 | m | (m == 0));
                    }
                } else {
                    // Overflow            if (e > 30)
                     {
                        return (s | 31744);
                    }
                    return (s | (e << 10) | (m >> 13));
                }
            }
        }
        bf.floatToHalfI = floatToHalfI;
        /**
        * Convert a float16 (NV_half_float) to a float32
        * Courtesy of OpenEXR
        */
        function halfToFloat(/**@inline*/ y) {
            _u32[0] = halfToFloatI(y);
            return _f32[0];
        }
        bf.halfToFloat = halfToFloat;
        /** Converts a half in uint16 format to a float
        in uint32 format
        */
        function halfToFloatI(/**@inline*/ y) {
            var s = (y >> 15) & 1;
            var e = (y >> 10) & 31;
            var m = y & 1023;
            if(e == 0) {
                // Plus or minus zero
                if(m == 0) {
                    return s << 31;
                } else// Denormalized number -- renormalize it
                 {
                    while(!(m & 1024)) {
                        m <<= 1;
                        e -= 1;
                    }
                    e += 1;
                    m &= ~1024;
                }
            } else {
                if(e == 31) {
                    //Inf
                    if(m == 0) {
                        return (s << 31) | 2139095040;
                    } else//NaN
                     {
                        return (s << 31) | 2139095040 | (m << 13);
                    }
                }
            }
            e = e + (127 - 15);
            m = m << 13;
            return (s << 31) | (e << 23) | m;
        }
        bf.halfToFloatI = halfToFloatI;
    })(akra.bf || (akra.bf = {}));
    var bf = akra.bf;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var Singleton = (function () {
            function Singleton() {
                var _constructor = (this).constructor;
                akra.logger.setSourceLocation("Singleton.ts", 10);
                akra.logger.assert(!akra.isDef(_constructor._pInstance), 'Singleton class may be created only one time.');
                ; ;
                _constructor._pInstance = this;
            }
            return Singleton;
        })();
        util.Singleton = Singleton;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var Logger = (function (_super) {
            __extends(Logger, _super);
            function Logger() {
                        _super.call(this);
                this._eUnknownCode = 0;
                this._sUnknownMessage = "Unknown code";
                this._eLogLevel = akra.ELogLevel.ALL;
                this._pGeneralRoutineMap = {
                };
                this._pCurrentSourceLocation = {
                    file: "",
                    line: 0
                };
                this._pLastLogEntity = {
                    code: this._eUnknownCode,
                    location: this._pCurrentSourceLocation,
                    message: this._sUnknownMessage,
                    info: null
                };
                this._pCodeFamilyMap = {
                };
                this._pCodeFamilyList = [];
                this._pCodeInfoMap = {
                };
                this._pCodeFamilyRoutineDMap = {
                };
                this._nFamilyGenerator = 0;
            }
            Logger._sDefaultFamilyName = "CodeFamily";
            Logger.prototype.init = function () {
                //TODO: Load file
                return true;
            };
            Logger.prototype.setLogLevel = function (eLevel) {
                this._eLogLevel = eLevel;
            };
            Logger.prototype.getLogLevel = function () {
                return this._eLogLevel;
            };
            Logger.prototype.registerCode = function (eCode, sMessage) {
                if (typeof sMessage === "undefined") { sMessage = this._sUnknownMessage; }
                if(this.isUsedCode(eCode)) {
                    return false;
                }
                var sFamilyName = this.getFamilyName(eCode);
                if(akra.isNull(sFamilyName)) {
                    return false;
                }
                var pCodeInfo = {
                    code: eCode,
                    message: sMessage,
                    familyName: sFamilyName
                };
                this._pCodeInfoMap[eCode] = pCodeInfo;
                return true;
            };
            Logger.prototype.setUnknownCode = function (eCode, sMessage) {
                this._eUnknownCode = eCode;
                this._sUnknownMessage = sMessage;
            };
            Logger.prototype.registerCodeFamily = function (eCodeMin, eCodeMax, sFamilyName) {
                if(!akra.isDef(sFamilyName)) {
                    sFamilyName = this.generateFamilyName();
                }
                if(this.isUsedFamilyName(sFamilyName)) {
                    return false;
                }
                if(!this.isValidCodeInterval(eCodeMin, eCodeMax)) {
                    return false;
                }
                var pCodeFamily = {
                    familyName: sFamilyName,
                    codeMin: eCodeMin,
                    codeMax: eCodeMax
                };
                this._pCodeFamilyMap[sFamilyName] = pCodeFamily;
                this._pCodeFamilyList.push(pCodeFamily);
                return true;
            };
            Logger.prototype.getFamilyName = function (eCode) {
                var i = 0;
                var pCodeFamilyList = this._pCodeFamilyList;
                var pCodeFamily;
                for(i = 0; i < pCodeFamilyList.length; i++) {
                    pCodeFamily = pCodeFamilyList[i];
                    if(pCodeFamily.codeMin <= eCode && pCodeFamily.codeMax >= eCode) {
                        return pCodeFamily.familyName;
                    }
                }
                return null;
            };
            Logger.prototype.setCodeFamilyRoutine = function () {
                var sFamilyName;
                var fnLogRoutine;
                var eLevel;
                if(akra.isInt(arguments[0])) {
                    sFamilyName = this.getFamilyName(arguments[0]);
                    fnLogRoutine = arguments[1];
                    eLevel = arguments[2];
                    if(akra.isNull(sFamilyName)) {
                        return false;
                    }
                } else {
                    if(akra.isString(arguments[0])) {
                        sFamilyName = arguments[0];
                        fnLogRoutine = arguments[1];
                        eLevel = arguments[2];
                    }
                }
                if(!this.isUsedFamilyName(sFamilyName)) {
                    return false;
                }
                var pCodeFamilyRoutineMap = this._pCodeFamilyRoutineDMap[sFamilyName];
                if(!akra.isDef(pCodeFamilyRoutineMap)) {
                    pCodeFamilyRoutineMap = this._pCodeFamilyRoutineDMap[sFamilyName] = {
                    };
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.LOG)) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.LOG] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.INFORMATION)) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.INFORMATION] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.WARNING)) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.WARNING] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.ERROR)) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.ERROR] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.CRITICAL)) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.CRITICAL] = fnLogRoutine;
                }
                return true;
            };
            Logger.prototype.setLogRoutine = function (fnLogRoutine, eLevel) {
                if(akra.bf.testAll(eLevel, akra.ELogLevel.LOG)) {
                    this._pGeneralRoutineMap[akra.ELogLevel.LOG] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.INFORMATION)) {
                    this._pGeneralRoutineMap[akra.ELogLevel.INFORMATION] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.WARNING)) {
                    this._pGeneralRoutineMap[akra.ELogLevel.WARNING] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.ERROR)) {
                    this._pGeneralRoutineMap[akra.ELogLevel.ERROR] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.CRITICAL)) {
                    this._pGeneralRoutineMap[akra.ELogLevel.CRITICAL] = fnLogRoutine;
                }
            };
            Logger.prototype.setSourceLocation = function () {
                var sFile;
                var iLine;
                if(arguments.length === 2) {
                    sFile = arguments[0];
                    iLine = arguments[1];
                } else {
                    if(akra.isDef(arguments[0]) && !(akra.isNull(arguments[0]))) {
                        sFile = arguments[0].file;
                        iLine = arguments[0].line;
                    } else {
                        sFile = "";
                        iLine = 0;
                    }
                }
                this._pCurrentSourceLocation.file = sFile;
                this._pCurrentSourceLocation.line = iLine;
            };
            Logger.prototype.log = function () {
                var pArgs = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    pArgs[_i] = arguments[_i + 0];
                }
                if(!akra.bf.testAll(this._eLogLevel, akra.ELogLevel.LOG)) {
                    return;
                }
                var fnLogRoutine = this._pGeneralRoutineMap[akra.ELogLevel.LOG];
                if(!akra.isDef(fnLogRoutine)) {
                    return;
                }
                var pLogEntity = this._pLastLogEntity;
                pLogEntity.code = this._eUnknownCode;
                pLogEntity.location = this._pCurrentSourceLocation;
                pLogEntity.info = pArgs;
                pLogEntity.message = this._sUnknownMessage;
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.info = function () {
                if(!akra.bf.testAll(this._eLogLevel, akra.ELogLevel.INFORMATION)) {
                    return;
                }
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.INFORMATION);
                if(akra.isNull(fnLogRoutine)) {
                    return;
                }
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.warning = function () {
                if(!akra.bf.testAll(this._eLogLevel, akra.ELogLevel.WARNING)) {
                    return;
                }
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.WARNING);
                if(akra.isNull(fnLogRoutine)) {
                    return;
                }
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.error = function () {
                if(!akra.bf.testAll(this._eLogLevel, akra.ELogLevel.ERROR)) {
                    return;
                }
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.ERROR);
                if(akra.isNull(fnLogRoutine)) {
                    return;
                }
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.criticalError = function () {
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.CRITICAL);
                var sSystemMessage = "A Critical error has occured! Code: " + pLogEntity.code.toString();
                if(akra.bf.testAll(this._eLogLevel, akra.ELogLevel.CRITICAL) && !akra.isNull(fnLogRoutine)) {
                    fnLogRoutine.call(null, pLogEntity);
                }
                alert(sSystemMessage);
                throw new Error(sSystemMessage);
            };
            Logger.prototype.assert = function () {
                var bCondition = arguments[0];
                if(!bCondition) {
                    var pLogEntity;
                    var fnLogRoutine;
                    var pArgs = [];
                    for(var i = 1; i < arguments.length; i++) {
                        pArgs[i - 1] = arguments[i];
                    }
                    pLogEntity = this.prepareLogEntity.apply(this, pArgs);
                    fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.CRITICAL);
                    var sSystemMessage = "A error has occured! Code: " + pLogEntity.code.toString() + "\n Accept to exit, refuse to continue.";
                    if(akra.bf.testAll(this._eLogLevel, akra.ELogLevel.CRITICAL) && !akra.isNull(fnLogRoutine)) {
                        fnLogRoutine.call(null, pLogEntity);
                    }
                    if(confirm(sSystemMessage)) {
                        throw new Error(sSystemMessage);
                    }
                }
            };
            Logger.prototype.generateFamilyName = function () {
                var sSuffix = (this._nFamilyGenerator++);
                var sName = Logger._sDefaultFamilyName + sSuffix;
                if(this.isUsedFamilyName(sName)) {
                    return this.generateFamilyName();
                } else {
                    return sName;
                }
            };
            Logger.prototype.isValidCodeInterval = function (eCodeMin, eCodeMax) {
                if(eCodeMin > eCodeMax) {
                    return false;
                }
                var i = 0;
                var pCodeFamilyList = this._pCodeFamilyList;
                var pCodeFamily;
                for(i = 0; i < pCodeFamilyList.length; i++) {
                    pCodeFamily = pCodeFamilyList[i];
                    if((pCodeFamily.codeMin <= eCodeMin && pCodeFamily.codeMax >= eCodeMin) || (pCodeFamily.codeMin <= eCodeMax && pCodeFamily.codeMax >= eCodeMax)) {
                        return false;
                    }
                }
                return true;
            };
            Logger.prototype.isUsedFamilyName = /**@inline*/ function (sFamilyName) {
                return akra.isDef(this._pCodeFamilyMap[sFamilyName]);
            };
            Logger.prototype.isUsedCode = /**@inline*/ function (eCode) {
                return akra.isDef(this._pCodeInfoMap[eCode]);
            };
            Logger.prototype.isLogEntity = function (pObj) {
                if(akra.isObject(pObj) && akra.isDef(pObj.code) && akra.isDef(pObj.location)) {
                    return true;
                }
                return false;
            };
            Logger.prototype.isLogCode = /**@inline*/ function (eCode) {
                return akra.isInt(eCode);
            };
            Logger.prototype.prepareLogEntity = function () {
                var eCode = this._eUnknownCode;
                var sMessage = this._sUnknownMessage;
                var pInfo = null;
                if(arguments.length === 1 && this.isLogEntity(arguments[0])) {
                    var pEntity = arguments[0];
                    eCode = pEntity.code;
                    pInfo = pEntity.info;
                    this.setSourceLocation(pEntity.location);
                    if(!akra.isDef(pEntity.message)) {
                        var pCodeInfo = this._pCodeInfoMap[eCode];
                        if(akra.isDef(pCodeInfo)) {
                            sMessage = pCodeInfo.message;
                        }
                    }
                } else {
                    if(this.isLogCode(arguments[0])) {
                        eCode = arguments[0];
                        if(arguments.length > 1) {
                            pInfo = new Array(arguments.length - 1);
                            var i = 0;
                            for(i = 0; i < pInfo.length; i++) {
                                pInfo[i] = arguments[i + 1];
                            }
                        }
                    } else {
                        eCode = this._eUnknownCode;
                        if(arguments.length > 0) {
                            pInfo = new Array(arguments.length);
                            var i = 0;
                            for(i = 0; i < pInfo.length; i++) {
                                pInfo[i] = arguments[i];
                            }
                        } else {
                            pInfo = null;
                        }
                    }
                    var pCodeInfo = this._pCodeInfoMap[eCode];
                    if(akra.isDef(pCodeInfo)) {
                        sMessage = pCodeInfo.message;
                    }
                }
                var pLogEntity = this._pLastLogEntity;
                pLogEntity.code = eCode;
                pLogEntity.location = this._pCurrentSourceLocation;
                pLogEntity.message = sMessage;
                pLogEntity.info = pInfo;
                return pLogEntity;
            };
            Logger.prototype.getCodeRoutineFunc = function (eCode, eLevel) {
                var pCodeInfo = this._pCodeInfoMap[eCode];
                var fnLogRoutine;
                if(!akra.isDef(pCodeInfo)) {
                    fnLogRoutine = this._pGeneralRoutineMap[eLevel];
                    return akra.isDef(fnLogRoutine) ? fnLogRoutine : null;
                }
                var pCodeFamilyRoutineMap = this._pCodeFamilyRoutineDMap[pCodeInfo.familyName];
                if(!akra.isDef(pCodeFamilyRoutineMap) || !akra.isDef(pCodeFamilyRoutineMap[eLevel])) {
                    fnLogRoutine = this._pGeneralRoutineMap[eLevel];
                    return akra.isDef(fnLogRoutine) ? fnLogRoutine : null;
                }
                fnLogRoutine = pCodeFamilyRoutineMap[eLevel];
                return fnLogRoutine;
            };
            return Logger;
        })(util.Singleton);
        util.Logger = Logger;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        akra.logger = new util.Logger();
        akra.logger.init();
        akra.logger.setUnknownCode(0, "Unknown code.");
        akra.logger.setLogLevel(akra.ELogLevel.ALL);
        //Default code families
        akra.logger.registerCodeFamily(0, 100, "SystemCodes");
        akra.logger.registerCodeFamily(2000, 2199, "ParserSyntaxErrors");
        akra.logger.registerCodeFamily(2200, 2500, "EffectSyntaxErrors");
        //Default log routines
        function sourceLocationToString(pLocation) {
            var sLocation = "[" + pLocation.file + ":" + pLocation.line.toString() + "]: ";
            return sLocation;
        }
        function logRoutine(pLogEntity) {
            var pArgs = pLogEntity.info;
            pArgs.unshift(sourceLocationToString(pLogEntity.location));
            console["log"].apply(console, pArgs);
        }
        function warningRoutine(pLogEntity) {
            var pArgs = pLogEntity.info;
            pArgs.unshift("Code: " + pLogEntity.code.toString());
            pArgs.unshift(sourceLocationToString(pLogEntity.location));
            console["warning"].apply(console, pArgs);
        }
        function errorRoutine(pLogEntity) {
            var pArgs = pLogEntity.info;
            pArgs.unshift(pLogEntity.message);
            pArgs.unshift("Error code: " + pLogEntity.code.toString() + ".");
            pArgs.unshift(sourceLocationToString(pLogEntity.location));
            console["error"].apply(console, pArgs);
        }
        akra.logger.setLogRoutine(logRoutine, akra.ELogLevel.LOG | akra.ELogLevel.INFORMATION);
        akra.logger.setLogRoutine(warningRoutine, akra.ELogLevel.WARNING);
        akra.logger.setLogRoutine(errorRoutine, akra.ELogLevel.ERROR | akra.ELogLevel.CRITICAL);
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
function utf8_encode(argString) {
    // Encodes an ISO-8859-1 string to UTF-8
    //
    // version: 1109.2015
    // discuss at: http://phpjs.org/functions/utf8_encode
    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: sowberry
    // +    tweaked by: Jack
    // +   bugfixed by: Onno Marsman
    // +   improved by: Yves Sucaet
    // +   bugfixed by: Onno Marsman
    // +   bugfixed by: Ulrich
    // +   bugfixed by: Rafal Kukawski
    // *     example 1: utf8_encode('Kevin van Zonneveld');
    // *     returns 1: 'Kevin van Zonneveld'
    if(argString === null || typeof argString === "undefined") {
        return "";
    }
    // .replace(/\r\n/g, "\n").replace(/\r/g, "\n");
    var string = (argString + "");
    var utftext = "", start, end, stringl = 0;
    start = end = 0;
    stringl = string.length;
    for(var n = 0; n < stringl; n++) {
        var c1 = string.charCodeAt(n);
        var enc = null;
        if(c1 < 128) {
            end++;
        } else {
            if(c1 > 127 && c1 < 2048) {
                enc = String.fromCharCode((c1 >> 6) | 192) + String.fromCharCode((c1 & 63) | 128);
            } else {
                enc = String.fromCharCode((c1 >> 12) | 224) + String.fromCharCode(((c1 >> 6) & 63) | 128) + String.fromCharCode((c1 & 63) | 128);
            }
        }
        if(enc !== null) {
            if(end > start) {
                utftext += string.slice(start, end);
            }
            utftext += enc;
            start = end = n + 1;
        }
    }
    if(end > start) {
        utftext += string.slice(start, stringl);
    }
    return utftext;
}
function utf8_decode(str_data) {
    // http://kevin.vanzonneveld.net
    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
    // +      input by: Aman Gupta
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: Norman "zEh" Fuchs
    // +   bugfixed by: hitwork
    // +   bugfixed by: Onno Marsman
    // +      input by: Brett Zamir (http://brett-zamir.me)
    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // *     example 1: utf8_decode('Kevin van Zonneveld');
    // *     returns 1: 'Kevin van Zonneveld'
        var tmp_arr = [], i = 0, ac = 0, c1 = 0, c2 = 0, c3 = 0;
    str_data += "";
    while(i < str_data.length) {
        c1 = str_data.charCodeAt(i);
        if(c1 < 128) {
            tmp_arr[ac++] = String.fromCharCode(c1);
            i++;
        } else {
            if(c1 > 191 && c1 < 224) {
                c2 = str_data.charCodeAt(i + 1);
                tmp_arr[ac++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
                i += 2;
            } else {
                c2 = str_data.charCodeAt(i + 1);
                c3 = str_data.charCodeAt(i + 2);
                tmp_arr[ac++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }
        }
    }
    return tmp_arr.join("");
}
function crc32(str) {
    // http://kevin.vanzonneveld.net
    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
    // +   improved by: T0bsn
    // -    depends on: utf8_encode
    // *     example 1: crc32('Kevin van Zonneveld');
    // *     returns 1: 1249991249
    str = utf8_encode(str);
    var table = "00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D";
    var crc = 0;
    var x = 0;
    var y = 0;
    crc = crc ^ (-1);
    for(var i = 0, iTop = str.length; i < iTop; i++) {
        y = (crc ^ str.charCodeAt(i)) & 255;
        x = parseInt("0x" + table.substr(y * 9, 8));
        crc = (crc >>> 8) ^ x;
    }
    return String(crc ^ (-1));
}
function md5(str) {
    // http://kevin.vanzonneveld.net
    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
    // + namespaced by: Michael White (http://getsprink.com)
    // +    tweaked by: Jack
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +      input by: Brett Zamir (http://brett-zamir.me)
    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // -    depends on: utf8_encode
    // *     example 1: md5('Kevin van Zonneveld');
    // *     returns 1: '6e658d4bfcb59cc13f96c14450ac40b9'
        var xl, a, b, c, d, e;
    var rotateLeft = function (lValue, iShiftBits) {
        return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));
    };
    var addUnsigned = function (lX, lY) {
        var lX4, lY4, lX8, lY8, lResult;
        lX8 = (lX & 2147483648);
        lY8 = (lY & 2147483648);
        lX4 = (lX & 1073741824);
        lY4 = (lY & 1073741824);
        lResult = (lX & 1073741823) + (lY & 1073741823);
        if(lX4 & lY4) {
            return (lResult ^ 2147483648 ^ lX8 ^ lY8);
        }
        if(lX4 | lY4) {
            if(lResult & 1073741824) {
                return (lResult ^ 3221225472 ^ lX8 ^ lY8);
            } else {
                return (lResult ^ 1073741824 ^ lX8 ^ lY8);
            }
        } else {
            return (lResult ^ lX8 ^ lY8);
        }
    };
    var _F = function (x, y, z) {
        return (x & y) | ((~x) & z);
    };
    var _G = function (x, y, z) {
        return (x & z) | (y & (~z));
    };
    var _H = function (x, y, z) {
        return (x ^ y ^ z);
    };
    var _I = function (x, y, z) {
        return (y ^ (x | (~z)));
    };
    var _FF = function (a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(_F(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b);
    };
    var _GG = function (a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(_G(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b);
    };
    var _HH = function (a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(_H(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b);
    };
    var _II = function (a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(_I(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b);
    };
    var convertToWordArray = function (str) {
        var lWordCount;
        var lMessageLength = str.length;
        var lNumberOfWords_temp1 = lMessageLength + 8;
        var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
        var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
        var lWordArray = new Array(lNumberOfWords - 1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while(lByteCount < lMessageLength) {
            lWordCount = (lByteCount - (lByteCount % 4)) / 4;
            lBytePosition = (lByteCount % 4) * 8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount) << lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount - (lByteCount % 4)) / 4;
        lBytePosition = (lByteCount % 4) * 8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (128 << lBytePosition);
        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
        return lWordArray;
    };
    var wordToHex = function (lValue) {
        var wordToHexValue = "", wordToHexValue_temp = "", lByte, lCount;
        for(lCount = 0; lCount <= 3; lCount++) {
            lByte = (lValue >>> (lCount * 8)) & 255;
            wordToHexValue_temp = "0" + lByte.toString(16);
            wordToHexValue = wordToHexValue + wordToHexValue_temp.substr(wordToHexValue_temp.length - 2, 2);
        }
        return wordToHexValue;
    };
    var x = [], k, AA, BB, CC, DD, a, b, c, d, S11 = 7, S12 = 12, S13 = 17, S14 = 22, S21 = 5, S22 = 9, S23 = 14, S24 = 20, S31 = 4, S32 = 11, S33 = 16, S34 = 23, S41 = 6, S42 = 10, S43 = 15, S44 = 21;
    str = utf8_encode(str);
    x = convertToWordArray(str);
    a = 1732584193;
    b = 4023233417;
    c = 2562383102;
    d = 271733878;
    xl = x.length;
    for(k = 0; k < xl; k += 16) {
        AA = a;
        BB = b;
        CC = c;
        DD = d;
        a = _FF(a, b, c, d, x[k + 0], S11, 3614090360);
        d = _FF(d, a, b, c, x[k + 1], S12, 3905402710);
        c = _FF(c, d, a, b, x[k + 2], S13, 606105819);
        b = _FF(b, c, d, a, x[k + 3], S14, 3250441966);
        a = _FF(a, b, c, d, x[k + 4], S11, 4118548399);
        d = _FF(d, a, b, c, x[k + 5], S12, 1200080426);
        c = _FF(c, d, a, b, x[k + 6], S13, 2821735955);
        b = _FF(b, c, d, a, x[k + 7], S14, 4249261313);
        a = _FF(a, b, c, d, x[k + 8], S11, 1770035416);
        d = _FF(d, a, b, c, x[k + 9], S12, 2336552879);
        c = _FF(c, d, a, b, x[k + 10], S13, 4294925233);
        b = _FF(b, c, d, a, x[k + 11], S14, 2304563134);
        a = _FF(a, b, c, d, x[k + 12], S11, 1804603682);
        d = _FF(d, a, b, c, x[k + 13], S12, 4254626195);
        c = _FF(c, d, a, b, x[k + 14], S13, 2792965006);
        b = _FF(b, c, d, a, x[k + 15], S14, 1236535329);
        a = _GG(a, b, c, d, x[k + 1], S21, 4129170786);
        d = _GG(d, a, b, c, x[k + 6], S22, 3225465664);
        c = _GG(c, d, a, b, x[k + 11], S23, 643717713);
        b = _GG(b, c, d, a, x[k + 0], S24, 3921069994);
        a = _GG(a, b, c, d, x[k + 5], S21, 3593408605);
        d = _GG(d, a, b, c, x[k + 10], S22, 38016083);
        c = _GG(c, d, a, b, x[k + 15], S23, 3634488961);
        b = _GG(b, c, d, a, x[k + 4], S24, 3889429448);
        a = _GG(a, b, c, d, x[k + 9], S21, 568446438);
        d = _GG(d, a, b, c, x[k + 14], S22, 3275163606);
        c = _GG(c, d, a, b, x[k + 3], S23, 4107603335);
        b = _GG(b, c, d, a, x[k + 8], S24, 1163531501);
        a = _GG(a, b, c, d, x[k + 13], S21, 2850285829);
        d = _GG(d, a, b, c, x[k + 2], S22, 4243563512);
        c = _GG(c, d, a, b, x[k + 7], S23, 1735328473);
        b = _GG(b, c, d, a, x[k + 12], S24, 2368359562);
        a = _HH(a, b, c, d, x[k + 5], S31, 4294588738);
        d = _HH(d, a, b, c, x[k + 8], S32, 2272392833);
        c = _HH(c, d, a, b, x[k + 11], S33, 1839030562);
        b = _HH(b, c, d, a, x[k + 14], S34, 4259657740);
        a = _HH(a, b, c, d, x[k + 1], S31, 2763975236);
        d = _HH(d, a, b, c, x[k + 4], S32, 1272893353);
        c = _HH(c, d, a, b, x[k + 7], S33, 4139469664);
        b = _HH(b, c, d, a, x[k + 10], S34, 3200236656);
        a = _HH(a, b, c, d, x[k + 13], S31, 681279174);
        d = _HH(d, a, b, c, x[k + 0], S32, 3936430074);
        c = _HH(c, d, a, b, x[k + 3], S33, 3572445317);
        b = _HH(b, c, d, a, x[k + 6], S34, 76029189);
        a = _HH(a, b, c, d, x[k + 9], S31, 3654602809);
        d = _HH(d, a, b, c, x[k + 12], S32, 3873151461);
        c = _HH(c, d, a, b, x[k + 15], S33, 530742520);
        b = _HH(b, c, d, a, x[k + 2], S34, 3299628645);
        a = _II(a, b, c, d, x[k + 0], S41, 4096336452);
        d = _II(d, a, b, c, x[k + 7], S42, 1126891415);
        c = _II(c, d, a, b, x[k + 14], S43, 2878612391);
        b = _II(b, c, d, a, x[k + 5], S44, 4237533241);
        a = _II(a, b, c, d, x[k + 12], S41, 1700485571);
        d = _II(d, a, b, c, x[k + 3], S42, 2399980690);
        c = _II(c, d, a, b, x[k + 10], S43, 4293915773);
        b = _II(b, c, d, a, x[k + 1], S44, 2240044497);
        a = _II(a, b, c, d, x[k + 8], S41, 1873313359);
        d = _II(d, a, b, c, x[k + 15], S42, 4264355552);
        c = _II(c, d, a, b, x[k + 6], S43, 2734768916);
        b = _II(b, c, d, a, x[k + 13], S44, 1309151649);
        a = _II(a, b, c, d, x[k + 4], S41, 4149444226);
        d = _II(d, a, b, c, x[k + 11], S42, 3174756917);
        c = _II(c, d, a, b, x[k + 2], S43, 718787259);
        b = _II(b, c, d, a, x[k + 9], S44, 3951481745);
        a = addUnsigned(a, AA);
        b = addUnsigned(b, BB);
        c = addUnsigned(c, CC);
        d = addUnsigned(d, DD);
    }
    var temp = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);
    return temp.toLowerCase();
}
function sha1(str) {
    // http://kevin.vanzonneveld.net
    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
    // + namespaced by: Michael White (http://getsprink.com)
    // +      input by: Brett Zamir (http://brett-zamir.me)
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // -    depends on: utf8_encode
    // *     example 1: sha1('Kevin van Zonneveld');
    // *     returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'
    var rotate_left = function (n, s) {
        var t4 = (n << s) | (n >>> (32 - s));
        return t4;
    };
    /*var lsb_hex = function (val) { // Not in use; needed?
    var str="";
    var i;
    var vh;
    var vl;
    
    for ( i=0; i<=6; i+=2 ) {
    vh = (val>>>(i*4+4))&0x0f;
    vl = (val>>>(i*4))&0x0f;
    str += vh.toString(16) + vl.toString(16);
    }
    return str;
    };*/
    var cvt_hex = function (val) {
        var str = "";
        var i;
        var v;
        for(i = 7; i >= 0; i--) {
            v = (val >>> (i * 4)) & 15;
            str += v.toString(16);
        }
        return str;
    };
    var blockstart;
    var i, j;
    var W = new Array(80);
    var H0 = 1732584193;
    var H1 = 4023233417;
    var H2 = 2562383102;
    var H3 = 271733878;
    var H4 = 3285377520;
    var A, B, C, D, E;
    var temp;
    str = utf8_encode(str);
    var str_len = str.length;
    var word_array = [];
    for(i = 0; i < str_len - 3; i += 4) {
        j = str.charCodeAt(i) << 24 | str.charCodeAt(i + 1) << 16 | str.charCodeAt(i + 2) << 8 | str.charCodeAt(i + 3);
        word_array.push(j);
    }
    switch(str_len % 4) {
        case 0: {
            i = 2147483648;
            break;

        }
        case 1: {
            i = str.charCodeAt(str_len - 1) << 24 | 8388608;
            break;

        }
        case 2: {
            i = str.charCodeAt(str_len - 2) << 24 | str.charCodeAt(str_len - 1) << 16 | 32768;
            break;

        }
        case 3: {
            i = str.charCodeAt(str_len - 3) << 24 | str.charCodeAt(str_len - 2) << 16 | str.charCodeAt(str_len - 1) << 8 | 128;
            break;

        }
    }
    word_array.push(i);
    while((word_array.length % 16) != 14) {
        word_array.push(0);
    }
    word_array.push(str_len >>> 29);
    word_array.push((str_len << 3) & 4294967295);
    for(blockstart = 0; blockstart < word_array.length; blockstart += 16) {
        for(i = 0; i < 16; i++) {
            W[i] = word_array[blockstart + i];
        }
        for(i = 16; i <= 79; i++) {
            W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
        }
        A = H0;
        B = H1;
        C = H2;
        D = H3;
        E = H4;
        for(i = 0; i <= 19; i++) {
            temp = (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 1518500249) & 4294967295;
            E = D;
            D = C;
            C = rotate_left(B, 30);
            B = A;
            A = temp;
        }
        for(i = 20; i <= 39; i++) {
            temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 1859775393) & 4294967295;
            E = D;
            D = C;
            C = rotate_left(B, 30);
            B = A;
            A = temp;
        }
        for(i = 40; i <= 59; i++) {
            temp = (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 2400959708) & 4294967295;
            E = D;
            D = C;
            C = rotate_left(B, 30);
            B = A;
            A = temp;
        }
        for(i = 60; i <= 79; i++) {
            temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 3395469782) & 4294967295;
            E = D;
            D = C;
            C = rotate_left(B, 30);
            B = A;
            A = temp;
        }
        H0 = (H0 + A) & 4294967295;
        H1 = (H1 + B) & 4294967295;
        H2 = (H2 + C) & 4294967295;
        H3 = (H3 + D) & 4294967295;
        H4 = (H4 + E) & 4294967295;
    }
    temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);
    return temp.toLowerCase();
}
var akra;
(function (akra) {
    (function (libs) {
        /**
        * Encodes an ISO-8859-1 string to UTF-8
        * @treturn String
        */
        String.prototype.toUTF8 = function () {
            return utf8_encode(this);
        };
        /**
        * Converts a UTF-8 encoded string to ISO-8859-1
        * @treturn String
        */
        String.prototype.fromUTF8 = function () {
            return utf8_decode(this);
        };
        String.prototype.md5 = function () {
            return md5(this);
        };
        String.prototype.sha1 = function () {
            return sha1(this);
        };
        String.prototype.crc32 = function () {
            return crc32(this);
        };
        String.prototype.replaceAt = function (n, chr) {
            return this.substr(0, n) + chr + this.substr(n + chr.length);
        };
        Object.defineProperty(Array.prototype, 'first', {
            enumerable: false,
            configurable: true,
            get: function () {
                return this[0];
            }
        });
        Object.defineProperty(Array.prototype, 'last', {
            enumerable: false,
            configurable: true,
            get: function () {
                return this[this.length - 1];
            }
        });
        Object.defineProperty(Array.prototype, 'el', {
            enumerable: false,
            configurable: true,
            value: function (i) {
                i = i || 0;
                return this[i < 0 ? this.length + i : i];
            }
        });
        Object.defineProperty(Array.prototype, 'clear', {
            enumerable: false,
            configurable: true,
            value: function () {
                this.length = 0;
            }
        });
        Object.defineProperty(Array.prototype, 'swap', {
            enumerable: false,
            configurable: true,
            value: function (i, j) {
                if(i < this.length && j < this.length) {
                    var t = this[i];
                    this[i] = this[j];
                    this[j] = t;
                }
            }
        });
        Object.defineProperty(Array.prototype, 'insert', {
            enumerable: false,
            configurable: true,
            value: function (pElement) {
                if(typeof pElement.length === 'number') {
                    for(var i = 0, n = pElement.length; i < n; ++i) {
                        this.push(pElement[i]);
                    }
                    ; ;
                } else {
                    this.push(pElement);
                }
                return this;
            }
        });
        Number.prototype.toHex = function (iLength) {
            var sValue = this.toString(16);
            for(var i = 0; i < iLength - sValue.length; ++i) {
                sValue = '0' + sValue;
            }
            return sValue;
        };
        Number.prototype.printBinary = function (isPretty) {
            if (typeof isPretty === "undefined") { isPretty = true; }
            var res = "";
            for(var i = 0; i < 32; ++i) {
                if(i && (i % 4) == 0 && isPretty) {
                    res = ' ' + res;
                }
                (this >> i & 1 ? res = '1' + res : res = '0' + res);
            }
            return res;
        };
    })(akra.libs || (akra.libs = {}));
    var libs = akra.libs;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    /** Render one frame. */
    /** Start exucution(rendering loop). */
    /** Определяет, находитсяли Engine в цикле ренде��инга */
    ; ;
    akra.createEngine;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    (function (EEventTypes) {
        EEventTypes._map = [];
        EEventTypes._map[0] = "BROADCAST";
        EEventTypes.BROADCAST = 0;
        EEventTypes._map[1] = "UNICAST";
        EEventTypes.UNICAST = 1;
    })(akra.EEventTypes || (akra.EEventTypes = {}));
    var EEventTypes = akra.EEventTypes;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ESceneTypes) {
        ESceneTypes._map = [];
        ESceneTypes._map[0] = "TYPE_3D";
        ESceneTypes.TYPE_3D = 0;
        ESceneTypes._map[1] = "TYPE_2D";
        ESceneTypes.TYPE_2D = 1;
    })(akra.ESceneTypes || (akra.ESceneTypes = {}));
    var ESceneTypes = akra.ESceneTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    /** Семейства ресурсов */
    (function (EResourceFamilies) {
        EResourceFamilies._map = [];
        EResourceFamilies.VIDEO_RESOURCE = 0;
        EResourceFamilies._map[1] = "AUDIO_RESOURCE";
        EResourceFamilies.AUDIO_RESOURCE = 1;
        EResourceFamilies._map[2] = "GAME_RESOURCE";
        EResourceFamilies.GAME_RESOURCE = 2;
        EResourceFamilies._map[3] = "TOTAL_RESOURCE_FAMILIES";
        EResourceFamilies.TOTAL_RESOURCE_FAMILIES = 3;
    })(akra.EResourceFamilies || (akra.EResourceFamilies = {}));
    var EResourceFamilies = akra.EResourceFamilies;
    ; ;
    /** Члены семейства видео ресурсов */
    (function (EVideoResources) {
        EVideoResources._map = [];
        EVideoResources._map[0] = "TEXTURE_RESOURCE";
        EVideoResources.TEXTURE_RESOURCE = 0;
        EVideoResources._map[1] = "VIDEOBUFFER_RESOURCE";
        EVideoResources.VIDEOBUFFER_RESOURCE = 1;
        EVideoResources._map[2] = "VERTEXBUFFER_RESOURCE";
        EVideoResources.VERTEXBUFFER_RESOURCE = 2;
        EVideoResources._map[3] = "INDEXBUFFER_RESOURCE";
        EVideoResources.INDEXBUFFER_RESOURCE = 3;
        EVideoResources._map[4] = "EFFECT_RESOURCE";
        EVideoResources.EFFECT_RESOURCE = 4;
        EVideoResources._map[5] = "RENDERMETHOD_RESOURCE";
        EVideoResources.RENDERMETHOD_RESOURCE = 5;
        EVideoResources._map[6] = "MODEL_RESOURCE";
        EVideoResources.MODEL_RESOURCE = 6;
        EVideoResources._map[7] = "EFFECTFILEDATA_RESOURCE";
        EVideoResources.EFFECTFILEDATA_RESOURCE = 7;
        EVideoResources._map[8] = "IMAGE_RESOURCE";
        EVideoResources.IMAGE_RESOURCE = 8;
        EVideoResources._map[9] = "SURFACEMATERIAL_RESOURCE";
        EVideoResources.SURFACEMATERIAL_RESOURCE = 9;
        EVideoResources._map[10] = "SHADERPROGRAM_RESOURCE";
        EVideoResources.SHADERPROGRAM_RESOURCE = 10;
        EVideoResources._map[11] = "COMPONENT_RESOURCE";
        EVideoResources.COMPONENT_RESOURCE = 11;
        EVideoResources._map[12] = "TOTAL_VIDEO_RESOURCES";
        EVideoResources.TOTAL_VIDEO_RESOURCES = 12;
    })(akra.EVideoResources || (akra.EVideoResources = {}));
    var EVideoResources = akra.EVideoResources;
    ; ;
    (function (EAudioResources) {
        EAudioResources._map = [];
        EAudioResources._map[0] = "TOTAL_AUDIO_RESOURCES";
        EAudioResources.TOTAL_AUDIO_RESOURCES = 0;
    })(akra.EAudioResources || (akra.EAudioResources = {}));
    var EAudioResources = akra.EAudioResources;
    ; ;
    (function (EGameResources) {
        EGameResources._map = [];
        EGameResources._map[0] = "TOTAL_GAME_RESOURCES";
        EGameResources.TOTAL_GAME_RESOURCES = 0;
    })(akra.EGameResources || (akra.EGameResources = {}));
    var EGameResources = akra.EGameResources;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    //API SPECIFIFC CONSTANTS
    (function (EPrimitiveTypes) {
        EPrimitiveTypes._map = [];
        EPrimitiveTypes.POINTLIST = 0;
        EPrimitiveTypes._map[1] = "LINELIST";
        EPrimitiveTypes.LINELIST = 1;
        EPrimitiveTypes._map[2] = "LINELOOP";
        EPrimitiveTypes.LINELOOP = 2;
        EPrimitiveTypes._map[3] = "LINESTRIP";
        EPrimitiveTypes.LINESTRIP = 3;
        EPrimitiveTypes._map[4] = "TRIANGLELIST";
        EPrimitiveTypes.TRIANGLELIST = 4;
        EPrimitiveTypes._map[5] = "TRIANGLESTRIP";
        EPrimitiveTypes.TRIANGLESTRIP = 5;
        EPrimitiveTypes._map[6] = "TRIANGLEFAN";
        EPrimitiveTypes.TRIANGLEFAN = 6;
    })(akra.EPrimitiveTypes || (akra.EPrimitiveTypes = {}));
    var EPrimitiveTypes = akra.EPrimitiveTypes;
    ; ;
    (function (ERenderCapabilitiesCategory) {
        ERenderCapabilitiesCategory._map = [];
        ERenderCapabilitiesCategory.C_COMMON = 0;
        ERenderCapabilitiesCategory.C_COMMON_2 = 1;
        ERenderCapabilitiesCategory.C_WEBGL = 2;
        ERenderCapabilitiesCategory.COUNT = 3;
    })(akra.ERenderCapabilitiesCategory || (akra.ERenderCapabilitiesCategory = {}));
    var ERenderCapabilitiesCategory = akra.ERenderCapabilitiesCategory;
    (function (ERenderCapabilities) {
        ERenderCapabilities._map = [];
        ERenderCapabilities.AUTOMIPMAP = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 0));
        ERenderCapabilities.BLENDING = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 1));
        /// Supports anisotropic texture filtering
        ERenderCapabilities.ANISOTROPY = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 2));
        /// Supports fixed-function DOT3 texture blend
        ERenderCapabilities.DOT3 = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 3));
        /// Supports cube mapping
        ERenderCapabilities.CUBEMAPPING = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 4));
        /// Supports hardware stencil buffer
        ERenderCapabilities.HWSTENCIL = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 5));
        /// Supports hardware vertex and index buffers
        ERenderCapabilities.VBO = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 7));
        /// Supports vertex programs (vertex shaders)
        ERenderCapabilities.VERTEX_PROGRAM = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 9));
        /// Supports fragment programs (pixel shaders)
        ERenderCapabilities.FRAGMENT_PROGRAM = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 10));
        /// Supports performing a scissor test to exclude areas of the screen
        ERenderCapabilities.SCISSOR_TEST = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 11));
        /// Supports separate stencil updates for both front and back faces
        ERenderCapabilities.TWO_SIDED_STENCIL = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 12));
        /// Supports wrapping the stencil value at the range extremeties
        ERenderCapabilities.STENCIL_WRAP = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 13));
        /// Supports hardware occlusion queries
        ERenderCapabilities.HWOCCLUSION = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 14));
        /// Supports user clipping planes
        ERenderCapabilities.USER_CLIP_PLANES = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 15));
        /// Supports the VET_UBYTE4 vertex element type
        ERenderCapabilities.VERTEX_FORMAT_UBYTE4 = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 16));
        /// Supports infinite far plane projection
        ERenderCapabilities.INFINITE_FAR_PLANE = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 17));
        /// Supports hardware render-to-texture (bigger than framebuffer)
        ERenderCapabilities.HWRENDER_TO_TEXTURE = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 18));
        /// Supports float textures and render targets
        ERenderCapabilities.TEXTURE_FLOAT = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 19));
        /// Supports non-power of two textures
        ERenderCapabilities.NON_POWER_OF_2_TEXTURES = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 20));
        /// Supports 3d (volume) textures
        ERenderCapabilities.TEXTURE_3D = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 21));
        /// Supports basic point sprite rendering
        ERenderCapabilities.POINT_SPRITES = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 22));
        /// Supports extra point parameters (minsize, maxsize, attenuation)
        ERenderCapabilities.POINT_EXTENDED_PARAMETERS = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 23));
        /// Supports vertex texture fetch
        ERenderCapabilities.VERTEX_TEXTURE_FETCH = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 24));
        /// Supports mipmap LOD biasing
        ERenderCapabilities.MIPMAP_LOD_BIAS = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 25));
        /// Supports hardware geometry programs
        ERenderCapabilities.GEOMETRY_PROGRAM = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 26));
        /// Supports rendering to vertex buffers
        ERenderCapabilities.HWRENDER_TO_VERTEX_BUFFER = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 27));
        /// Supports compressed textures
        ERenderCapabilities.TEXTURE_COMPRESSION = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 0));
        /// Supports compressed textures in the DXT/ST3C formats
        ERenderCapabilities.TEXTURE_COMPRESSION_DXT = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 1));
        /// Supports compressed textures in the VTC format
        ERenderCapabilities.TEXTURE_COMPRESSION_VTC = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 2));
        /// Supports compressed textures in the PVRTC format
        ERenderCapabilities.TEXTURE_COMPRESSION_PVRTC = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 3));
        /// Supports fixed-function pipeline
        ERenderCapabilities.FIXED_FUNCTION = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 4));
        /// Supports MRTs with different bit depths
        ERenderCapabilities.MRT_DIFFERENT_BIT_DEPTHS = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 5));
        /// Supports Alpha to Coverage (A2C)
        ERenderCapabilities.ALPHA_TO_COVERAGE = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 6));
        /// Supports Blending operations other than +
        ERenderCapabilities.ADVANCED_BLEND_OPERATIONS = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 7));
        /// Supports a separate depth buffer for RTTs. D3D 9 & 10, OGL w/FBO (FBO implies this flag)
        ERenderCapabilities.RTT_SEPARATE_DEPTHBUFFER = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 8));
        /// Supports using the MAIN depth buffer for RTTs. D3D 9&10, OGL w/FBO support unknown
        /// (undefined behavior?), OGL w/ copy supports it
        ERenderCapabilities.RTT_MAIN_DEPTHBUFFER_ATTACHABLE = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 9));
        /// Supports attaching a depth buffer to an RTT that has width & height less or equal than RTT's.
        /// Otherwise must be of _exact_ same resolution. D3D 9, OGL 3.0 (not 2.0, not D3D10)
        ERenderCapabilities.RTT_DEPTHBUFFER_RESOLUTION_LESSEQUAL = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 10));
        /// Supports using vertex buffers for instance data
        ERenderCapabilities.VERTEX_BUFFER_INSTANCE_DATA = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 11));
        /// Supports using vertex buffers for instance data
        ERenderCapabilities.CAN_GET_COMPILED_SHADER_BUFFER = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 12));
        // ***** GL Specific Caps *****
        /// Supports openGL GLEW version 1.5
        ERenderCapabilities.GL1_5_NOVBO = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 1));
        /// Support for Frame Buffer Objects (FBOs)
        ERenderCapabilities.FBO = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 2));
        /// Support for Frame Buffer Objects ARB implementation (regular FBO is higher precedence)
        ERenderCapabilities.FBO_ARB = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 3));
        /// Support for Frame Buffer Objects ATI implementation (ARB FBO is higher precedence)
        ERenderCapabilities.FBO_ATI = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 4));
        /// Support for PBuffer
        ERenderCapabilities.PBUFFER = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 5));
        /// Support for GL 1.5 but without HW occlusion workaround
        ERenderCapabilities.GL1_5_NOHWOCCLUSION = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 6));
        /// Support for point parameters ARB implementation
        ERenderCapabilities.POINT_EXTENDED_PARAMETERS_ARB = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 7));
        /// Support for point parameters EXT implementation
        ERenderCapabilities.POINT_EXTENDED_PARAMETERS_EXT = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 8));
        /// Support for Separate Shader Objects
        ERenderCapabilities.SEPARATE_SHADER_OBJECTS = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 9));
    })(akra.ERenderCapabilities || (akra.ERenderCapabilities = {}));
    var ERenderCapabilities = akra.ERenderCapabilities;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EUtilTimerCommands) {
        EUtilTimerCommands._map = [];
        EUtilTimerCommands._map[0] = "TIMER_RESET";
        //! <to reset the timer
        EUtilTimerCommands.TIMER_RESET = 0;
        EUtilTimerCommands._map[1] = "TIMER_START";
        //! <to start the timer
        EUtilTimerCommands.TIMER_START = 1;
        EUtilTimerCommands._map[2] = "TIMER_STOP";
        //! <to stop (or pause) the timer
        EUtilTimerCommands.TIMER_STOP = 2;
        EUtilTimerCommands._map[3] = "TIMER_ADVANCE";
        //! <to advance the timer by 0.1 seconds
        EUtilTimerCommands.TIMER_ADVANCE = 3;
        EUtilTimerCommands._map[4] = "TIMER_GET_ABSOLUTE_TIME";
        //! <to get the absolute system time
        EUtilTimerCommands.TIMER_GET_ABSOLUTE_TIME = 4;
        EUtilTimerCommands._map[5] = "TIMER_GET_APP_TIME";
        //! <to get the current time
        EUtilTimerCommands.TIMER_GET_APP_TIME = 5;
        EUtilTimerCommands._map[6] = "TIMER_GET_ELAPSED_TIME";
        EUtilTimerCommands.TIMER_GET_ELAPSED_TIME = 6;//! to get the time that elapsed between TIMER_GETELAPSEDTIME calls
        
    })(akra.EUtilTimerCommands || (akra.EUtilTimerCommands = {}));
    var EUtilTimerCommands = akra.EUtilTimerCommands;
    //static start(): IUtilTimer;
    })(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    /**
    * Отражает состояние ресурса
    **/
    (function (EResourceItemEvents) {
        EResourceItemEvents._map = [];
        EResourceItemEvents._map[0] = "CREATED";
        //ресур создан
        EResourceItemEvents.CREATED = 0;
        EResourceItemEvents._map[1] = "LOADED";
        //ресур заполнен данным и готов к использованию
        EResourceItemEvents.LOADED = 1;
        EResourceItemEvents._map[2] = "DISABLED";
        //ресур в данный момент отключен для использования
        EResourceItemEvents.DISABLED = 2;
        EResourceItemEvents._map[3] = "ALTERED";
        //ресур был изменен после загрузки
        EResourceItemEvents.ALTERED = 3;
        EResourceItemEvents._map[4] = "TOTALRESOURCEFLAGS";
        EResourceItemEvents.TOTALRESOURCEFLAGS = 4;
    })(akra.EResourceItemEvents || (akra.EResourceItemEvents = {}));
    var EResourceItemEvents = akra.EResourceItemEvents;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EResourceCodes) {
        EResourceCodes._map = [];
        EResourceCodes.INVALID_CODE = 4294967295;
    })(akra.EResourceCodes || (akra.EResourceCodes = {}));
    var EResourceCodes = akra.EResourceCodes;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            var ResourceCode = (function () {
                function ResourceCode(iFamily, iType) {
                    this.iValue = (akra.EResourceCodes.INVALID_CODE);
                    switch(arguments.length) {
                        case 0: {
                            this.iValue = akra.EResourceCodes.INVALID_CODE;
                            break;

                        }
                        case 1: {
                            if(arguments[0] instanceof ResourceCode) {
                                this.iValue = arguments[0].iValue;
                            } else {
                                this.iValue = arguments[0];
                            }
                            break;

                        }
                        case 2: {
                            this.family = arguments[0];
                            this.type = arguments[1];
                            break;

                        }
                    }
                }
                Object.defineProperty(ResourceCode.prototype, "family", {
                    get: function () {
                        return this.iValue >> 16;
                    },
                    set: function (iNewFamily) {
                        this.iValue &= 65535;
                        this.iValue |= iNewFamily << 16;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourceCode.prototype, "type", {
                    get: function () {
                        return this.iValue & 65535;
                    },
                    set: function (iNewType) {
                        this.iValue &= 4294901760;
                        this.iValue |= iNewType & 65535;
                    },
                    enumerable: true,
                    configurable: true
                });
                ResourceCode.prototype.setInvalid = function () {
                    this.iValue = akra.EResourceCodes.INVALID_CODE;
                };
                ResourceCode.prototype.less = function (pSrc) {
                    return this.iValue < pSrc.valueOf();
                };
                ResourceCode.prototype.eq = function (pSrc) {
                    this.iValue = pSrc.valueOf();
                    return this;
                };
                ResourceCode.prototype.valueOf = function () {
                    return this.iValue;
                };
                ResourceCode.prototype.toNumber = function () {
                    return this.iValue;
                };
                return ResourceCode;
            })();
            pool.ResourceCode = ResourceCode;            
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var ReferenceCounter = (function () {
            function ReferenceCounter(pSrc) {
                this.nReferenceCount = 0;
            }
            /** @inline */
                        ReferenceCounter.prototype.referenceCount = function () {
                return this.nReferenceCount;
            }/** @inline */
            ;
            ReferenceCounter.prototype.destructor = function () {
                akra.logger.setSourceLocation("util/ReferenceCounter.ts", 26);
                akra.logger.assert(this.nReferenceCount === 0, 'object is used');
                ; ;
            };
            ReferenceCounter.prototype.release = function () {
                akra.logger.setSourceLocation("util/ReferenceCounter.ts", 30);
                akra.logger.assert(this.nReferenceCount > 0, 'object is used');
                ; ;
                this.nReferenceCount--;
                return this.nReferenceCount;
            };
            ReferenceCounter.prototype.addRef = function () {
                akra.logger.setSourceLocation("util/ReferenceCounter.ts", 36);
                akra.logger.assert(this.nReferenceCount != akra.MIN_INT32, 'reference fail');
                ; ;
                this.nReferenceCount++;
                return this.nReferenceCount;
            }/** @inline */
            ;
            ReferenceCounter.prototype.eq = function (pSrc) {
                return this;
            };
            return ReferenceCounter;
        })();
        util.ReferenceCounter = ReferenceCounter;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (events) {
        var EventTable = (function () {
            function EventTable() {
                this.broadcast = {
                };
                this.unicast = {
                };
            }
            EventTable.prototype.addDestination = function (iGuid, sSignal, pTarget, sSlot, eType) {
                if (typeof eType === "undefined") { eType = akra.EEventTypes.BROADCAST; }
                if(eType === akra.EEventTypes.BROADCAST) {
                    this.findBroadcastSignalMap(iGuid, sSignal).push({
                        target: pTarget,
                        callback: sSlot,
                        listener: null
                    });
                    return true;
                } else {
                    this.unicast[iGuid] = this.unicast[iGuid] || {
                    };
                    if(!akra.isDef(this.unicast[iGuid][sSignal])) {
                        this.unicast[iGuid][sSignal] = {
                            target: pTarget,
                            callback: sSlot,
                            listener: null
                        };
                        return true;
                    }
                }
                return false;
            };
            EventTable.prototype.removeDestination = function (iGuid, sSignal, pTarget, sSlot, eType) {
                if (typeof eType === "undefined") { eType = akra.EEventTypes.BROADCAST; }
                if(eType === akra.EEventTypes.BROADCAST) {
                    var pList = this.findBroadcastSignalMap(iGuid, sSignal);
                    for(var i = 0; i < pList.length; ++i) {
                        if(pList[i].target === pTarget && pList[i].callback === sSlot) {
                            pList.splice(i, 1);
                            return true;
                        }
                    }
                } else {
                    if(this.unicast[iGuid] && this.unicast[iGuid][sSignal]) {
                        delete this.unicast[iGuid][sSignal];
                        return true;
                    }
                }
                akra.logger.setSourceLocation("events/events.ts", 102);
                akra.logger.warning("cannot add destination for GUID <%s> with signal <%s>", iGuid, sSignal);
                ; ;
                return false;
            };
            EventTable.prototype.addListener = function (iGuid, sSignal, fnListener, eType) {
                if (typeof eType === "undefined") { eType = akra.EEventTypes.BROADCAST; }
                if(eType === akra.EEventTypes.BROADCAST) {
                    this.findBroadcastSignalMap(iGuid, sSignal).push({
                        target: null,
                        callback: null,
                        listener: fnListener
                    });
                    return true;
                } else {
                    this.unicast[iGuid] = this.unicast[iGuid] || {
                    };
                    if(!akra.isDef(this.unicast[iGuid][sSignal])) {
                        this.unicast[iGuid][sSignal] = {
                            target: null,
                            callback: null,
                            listener: fnListener
                        };
                        return true;
                    }
                }
                akra.logger.setSourceLocation("events/events.ts", 118);
                akra.logger.warning("cannot add listener for GUID <%s> with signal <%s>", iGuid, sSignal);
                ; ;
                return false;
            };
            EventTable.prototype.removeListener = function (iGuid, sSignal, fnListener, eType) {
                if (typeof eType === "undefined") { eType = akra.EEventTypes.BROADCAST; }
                if(eType === akra.EEventTypes.BROADCAST) {
                    var pList = this.findBroadcastSignalMap(iGuid, sSignal);
                    for(var i = 0; i < pList.length; ++i) {
                        if(pList[i].listener === fnListener) {
                            pList.splice(i, 1);
                            return true;
                        }
                    }
                } else {
                    if(this.unicast[iGuid] && this.unicast[iGuid][sSignal]) {
                        delete this.unicast[iGuid][sSignal];
                        return true;
                    }
                }
                return false;
            };
            EventTable.prototype.findBroadcastList = function (iGuid) {
                this.broadcast[iGuid] = this.broadcast[iGuid] || {
                };
                return this.broadcast[iGuid];
            };
            EventTable.prototype.findUnicastList = function (iGuid) {
                this.unicast[iGuid] = this.unicast[iGuid] || {
                };
                return this.unicast[iGuid];
            };
            EventTable.prototype.findBroadcastSignalMap = function (iGuid, sSignal) {
                this.broadcast[iGuid] = this.broadcast[iGuid] || {
                };
                this.broadcast[iGuid][sSignal] = this.broadcast[iGuid][sSignal] || [];
                return this.broadcast[iGuid][sSignal];
            };
            return EventTable;
        })();
        events.EventTable = EventTable;        
    })(akra.events || (akra.events = {}));
    var events = akra.events;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            var ResourcePool = (function (_super) {
                __extends(ResourcePool, _super);
                function ResourcePool(pManager, tTemplate) {
                                _super.call(this);
                    this.pManager = null;
                    /** Конструктор для создания данных в пуле ресурсов */
                    this.tTemplate = null;
                    this.sExt = null;
                    this.pRegistrationCode = new pool.ResourceCode(akra.EResourceCodes.INVALID_CODE);
                    /*{[index: number]: string;}*/
                    this.pNameMap = new Array();
                    this.pDataPool = null;
                    this._iGuid = akra.sid();
                    this._pUnicastSlotMap = null;
                    this._pBroadcastSlotList = null;
                    this.pManager = pManager;
                    this.tTemplate = tTemplate;
                    this.pDataPool = new pool.DataPool(this.pManager, tTemplate);
                }
                /** Добавление данного пула в менеджер ресурсво по его коду */
                                Object.defineProperty(ResourcePool.prototype, "iFourcc", {
                    get: /**@inline*/ function () {
                        return (this.sExt.charCodeAt(3) << 24) | (this.sExt.charCodeAt(2) << 16) | (this.sExt.charCodeAt(1) << 8) | (this.sExt.charCodeAt(0));
                    },
                    set: function (iNewFourcc) {
                        this.sExt = String.fromCharCode((iNewFourcc & 255), (iNewFourcc & 65280) >>> 8, (iNewFourcc & 16711680) >>> 16, (iNewFourcc & 4278190080) >>> 24);
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePool.prototype, "manager", {
                    get: function () {
                        return this.pManager;
                    },
                    enumerable: true,
                    configurable: true
                });
                ResourcePool.prototype.registerResourcePool = function (pCode) {
                    this.pRegistrationCode.eq(pCode);
                    this.pManager.registerResourcePool(this.pRegistrationCode, this);
                }/** Удаление данного пула в менеджер ресурсво по его коду */
                ;
                ResourcePool.prototype.unregisterResourcePool = function () {
                    this.pManager.unregisterResourcePool(this.pRegistrationCode);
                    this.pRegistrationCode.setInvalid();
                }/** По имени ресурса возвращает его хендл */
                ;
                ResourcePool.prototype.findResourceHandle = function (sName) {
                    // look up the name in our map
                    var iNewHandle = akra.INVALID_INDEX;
                    for(var iHandle = 0; iHandle < this.pNameMap.length; ++iHandle) {
                        if(this.pNameMap[iHandle] === sName) {
                            return iHandle;
                        }
                    }
                    return iNewHandle;
                }/**
                * Get resource name by handle.
                * @inline
                */
                ;
                ResourcePool.prototype.findResourceName = function (iHandle) {
                    return this.pNameMap[iHandle];
                };
                ResourcePool.prototype.setResourceName = function (iHandle, sName) {
                    this.pNameMap[iHandle] = sName;
                };
                ResourcePool.prototype.initialize = function (iGrowSize) {
                    this.pDataPool.initialize(iGrowSize);
                }/** @inline */
                ;
                ResourcePool.prototype.destroy = function () {
                    this.pDataPool.destroy();
                };
                ResourcePool.prototype.clean = function () {
                    this.pDataPool.forEach(ResourcePool.callbackClean);
                };
                ResourcePool.prototype.destroyAll = function () {
                    this.pDataPool.forEach(ResourcePool.callbackDestroy);
                };
                ResourcePool.prototype.restoreAll = function () {
                    this.pDataPool.forEach(ResourcePool.callbackRestore);
                };
                ResourcePool.prototype.disableAll = function () {
                    this.pDataPool.forEach(ResourcePool.callbackDisable);
                }/** @inline */
                ;
                ResourcePool.prototype.isInitialized = function () {
                    return this.pDataPool.isInitialized();
                };
                ResourcePool.prototype.createResource = function (sResourceName) {
                    var iHandle = this.internalCreateResource(sResourceName);
                    if(iHandle !== akra.INVALID_INDEX) {
                        var pResource = this.getResource(iHandle);
                        pResource.setResourcePool(this);
                        pResource.setResourceHandle(iHandle);
                        pResource.setResourceCode(this.pRegistrationCode);
                        this.createdResource(pResource);
                        return pResource;
                    }
                    return null;
                };
                ResourcePool.prototype.loadResource = function (sResourceName) {
                    // does the resource already exist?
                    var pResource = this.findResource(sResourceName);
                    if(pResource == null) {
                        // create a new resource
                        pResource = this.createResource(sResourceName);
                        if(pResource != null) {
                            // attempt to load the desired data
                            if(pResource.loadResource(sResourceName)) {
                                // ok!
                                return pResource;
                            }
                            // loading failed.
                            // destroy the resource we created
                            // destroyResource(pResource);
                            pResource.release();
                            pResource = null;
                        }
                    }
                    return pResource;
                };
                ResourcePool.prototype.saveResource = function (pResource) {
                    if(pResource != null) {
                        // save the resource using it's own name as the file path
                        return pResource.saveResource();
                    }
                    return false;
                };
                ResourcePool.prototype.destroyResource = function (pResource) {
                    if(pResource != null) {
                        var iReferenceCount = pResource.referenceCount();
                        akra.logger.setSourceLocation("ResourcePool.ts", 181);
                        akra.logger.assert(iReferenceCount == 0, "destruction of non-zero reference count!");
                        ; ;
                        if(iReferenceCount <= 0) {
                            var iHandle = pResource.resourceHandle;
                            this.internalDestroyResource(iHandle);
                        }
                    }
                };
                ResourcePool.prototype.findResource = function (sName) {
                    // look up the name in our map
                    for(var iHandle = 0; iHandle < this.pNameMap.length; ++iHandle) {
                        if(this.pNameMap[iHandle] == sName) {
                            if(iHandle != akra.INVALID_INDEX) {
                                var pResource = this.getResource(iHandle);
                                return pResource;
                            }
                        }
                    }
                    return null;
                };
                ResourcePool.prototype.getResource = function (iHandle) {
                    var pResource = this.internalGetResource(iHandle);
                    if(pResource != null) {
                        pResource.addRef();
                    }
                    return pResource;
                };
                ResourcePool.prototype.getResources = function () {
                    var pResources = [];
                    for(var iHandleResource in this.pNameMap) {
                        pResources.push(this.getResource(parseInt(iHandleResource)));
                    }
                    return pResources;
                };
                ResourcePool.prototype.internalGetResource = function (iHandle) {
                    return this.pDataPool.getPtr(iHandle);
                };
                ResourcePool.prototype.internalDestroyResource = function (iHandle) {
                    // get a pointer to the resource and call it's destruction handler
                    var pResource = this.pDataPool.getPtr(iHandle);
                    pResource.destroyResource();
                    delete this.pNameMap[iHandle];
                    // free the resource slot associated with the handle
                    this.pDataPool.release(iHandle);
                };
                ResourcePool.prototype.internalCreateResource = function (sResourceName) {
                    var iHandle = this.pDataPool.nextHandle();
                    // make sure this name is not already in use
                    for(var iter in this.pNameMap) {
                        akra.logger.setSourceLocation("ResourcePool.ts", 248);
                        akra.logger.assert((this.pNameMap[iter] != sResourceName), "A resource with this name already exists: " + sResourceName);
                        ; ;
                    }
                    // add this resource name to our map of handles
                    this.pNameMap[iHandle] = sResourceName;
                    // get a pointer to the resource and call it's creation function
                    var pResource = this.pDataPool.getPtr(iHandle);
                    pResource.createResource();
                    return iHandle;
                };
                ResourcePool.callbackDestroy = function callbackDestroy(pPool, iHandle, pResource) {
                    pResource.destroyResource();
                }
                ResourcePool.callbackDisable = function callbackDisable(pPool, iHandle, pResource) {
                    pResource.disableResource();
                }
                ResourcePool.callbackRestore = function callbackRestore(pPool, iHandle, pResource) {
                    pResource.restoreResource();
                }
                ResourcePool.callbackClean = function callbackClean(pPool, iHandle, pResource) {
                    if(pResource.referenceCount() == 0) {
                        pPool.release(iHandle);
                    }
                }
                ResourcePool._pEvenetTable = new akra.events.EventTable();
                ResourcePool.prototype.getEventTable = /**@inline*/ function () {
                    return ResourcePool._pEvenetTable;
                }/**@inline*/ ;
                ResourcePool.prototype.getGuid = function () {
                    return this._iGuid;
                }/**@inline*/ ;
                ResourcePool.prototype.connect = function (pSender, sSignal, sSlot, eType) {
                    return pSender.getEventTable().addDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
                };
                ResourcePool.prototype.disconnect = /**@inline*/ function (pSender, sSignal, sSlot, eType) {
                    return this.getEventTable().removeDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
                }/**@inline*/ ;
                ResourcePool.prototype.bind = function (sSignal, fnListener, eType) {
                    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
                }/**@inline*/ ;
                ResourcePool.prototype.unbind = function (sSignal, fnListener, eType) {
                    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
                };
                ResourcePool.prototype.createdResource = function (pResource) {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).createdResource;
                    var _recivier = this;
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pResource) : _broadcast[i].listener(_recivier, pResource);
                    }
                };
                return ResourcePool;
            })(akra.util.ReferenceCounter);
            pool.ResourcePool = ResourcePool;            
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            var PoolGroup = (function () {
                function PoolGroup(pManager, tTemplate, iMaxCount) {
                    /** Число свободных элементов группы */
                    this.iTotalOpen = 0;
                    /** Первый свободный элемент группы */
                    this.iFirstOpen = 0;
                    /** Колмичество элементов в группе */
                    this.iMaxCount = 0;
                    /** Список свободных элементов группы */
                    this.pNextOpenList = null;
                    /** Массив элементов группы */
                    this.pMemberList = null;
                    this.pManager = pManager;
                    this.tTemplate = tTemplate;
                    this.iMaxCount = iMaxCount;
                }
                /** Создание группы, создается массив элементов, инициализирется список свободный и т.д. */
                                Object.defineProperty(PoolGroup.prototype, "manager", {
                    get: /**@inline*/ function () {
                        return this.pManager;
                    }/**
                    * Возвращает количесвто свободных мест в группе
                    * @inline
                    */
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PoolGroup.prototype, "totalOpen", {
                    get: function () {
                        return this.iTotalOpen;
                    }/**
                    * Возвращает количесвто занятых мест в группе
                    * @inline
                    */
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PoolGroup.prototype, "totalUsed", {
                    get: function () {
                        return this.iMaxCount - this.iTotalOpen;
                    }/**
                    * Номер первого свободного элемента в группе
                    * @inline
                    */
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PoolGroup.prototype, "firstOpen", {
                    get: function () {
                        return this.iFirstOpen;
                    },
                    enumerable: true,
                    configurable: true
                });
                PoolGroup.prototype.create = function () {
                    var i;
                    akra.logger.setSourceLocation("DataPool.ts", 70);
                    akra.logger.assert(this.pMemberList == null && this.pNextOpenList == null, "Group has already been created");
                    ; ;
                    this.pNextOpenList = new Array(this.iMaxCount);
                    akra.logger.setSourceLocation("DataPool.ts", 74);
                    akra.logger.assert(this.pNextOpenList != null, "tragic memory allocation failure!");
                    ; ;
                    this.pMemberList = new Array(this.iMaxCount);
                    for(i = 0; i < this.iMaxCount; i++) {
                        this.pMemberList[i] = new this.tTemplate(this.pManager);
                    }
                    akra.logger.setSourceLocation("DataPool.ts", 83);
                    akra.logger.assert(this.pNextOpenList != null, "tragic memory allocation failure!");
                    ; ;
                    for(i = 0; i < this.iMaxCount - 1; i++) {
                        this.pNextOpenList[i] = i + 1;
                    }
                    this.pNextOpenList[i] = i;
                    this.iTotalOpen = this.iMaxCount;
                    this.iFirstOpen = 0;
                }/**
                * Удаление группы: удаление массива элементов, списка совбодных элементов и т.д.
                * Выдается ошибка если группа не пуста
                * */
                ;
                PoolGroup.prototype.destroy = function () {
                    akra.logger.setSourceLocation("DataPool.ts", 99);
                    akra.logger.assert(this.pMemberList != null && this.pNextOpenList != null, "Group has not been created");
                    ; ;
                    akra.logger.setSourceLocation("DataPool.ts", 100);
                    akra.logger.assert(this.iTotalOpen == this.iMaxCount, "Group is not empty");
                    ; ;
                    delete this.pMemberList;
                    this.pMemberList = null;
                    delete this.pNextOpenList;
                    this.pNextOpenList = null;
                    this.iTotalOpen = 0;
                    this.iMaxCount = 0;
                }/** Возвращает номер следующего совбодного элемента в списке, и помечает его как используемый */
                ;
                PoolGroup.prototype.nextMember = function () {
                    akra.logger.setSourceLocation("DataPool.ts", 114);
                    akra.logger.assert(this.pMemberList != null && this.pNextOpenList != null, "Group has not been created");
                    ; ;
                    akra.logger.setSourceLocation("DataPool.ts", 115);
                    akra.logger.assert(this.iTotalOpen != null, "no open slots");
                    ; ;
                    //Возвращает номер первого свободного элемента в группе,
                    //и изменяет номер первого свободного на следующего свободного
                    var iSlot = this.iFirstOpen;
                    this.iFirstOpen = this.pNextOpenList[iSlot];
                    this.iTotalOpen--;
                    akra.logger.setSourceLocation("DataPool.ts", 123);
                    akra.logger.assert(this.iFirstOpen != akra.INVALID_INDEX, "Invalid Open Index");
                    ; ;
                    akra.logger.setSourceLocation("DataPool.ts", 124);
                    akra.logger.assert(this.isOpen(iSlot), "invalid index");
                    ; ;
                    //помечаем что элемент который отдали является используемым
                    this.pNextOpenList[iSlot] = akra.INVALID_INDEX;
                    return iSlot;
                }/** Добавляем новый элемент в список */
                ;
                PoolGroup.prototype.addMember = function (pMember) {
                    var iSlot = this.nextMember();
                    this.pMemberList[iSlot] = pMember;
                    return iSlot;
                }/** Исключение элемента из списка по его номеру */
                ;
                PoolGroup.prototype.release = function (iIndex) {
                    akra.logger.setSourceLocation("DataPool.ts", 142);
                    akra.logger.assert(this.pMemberList != null && this.pNextOpenList != null, "Group has not been created");
                    ; ;
                    akra.logger.setSourceLocation("DataPool.ts", 143);
                    akra.logger.assert(iIndex < this.iMaxCount, "invalid index");
                    ; ;
                    akra.logger.setSourceLocation("DataPool.ts", 144);
                    akra.logger.assert(this.isOpen(iIndex) == false, "invalid index to release");
                    ; ;
                    this.pNextOpenList[iIndex] = this.iTotalOpen > 0 ? this.iFirstOpen : iIndex;
                    this.iTotalOpen++;
                    this.iFirstOpen = iIndex;
                }/** Проверить свободна ли эта ячейка в группе */
                ;
                PoolGroup.prototype.isOpen = function (iIndex) {
                    akra.logger.setSourceLocation("DataPool.ts", 154);
                    akra.logger.assert(this.pMemberList != null && this.pNextOpenList != null, "Group has not been created");
                    ; ;
                    akra.logger.setSourceLocation("DataPool.ts", 155);
                    akra.logger.assert(iIndex < this.iMaxCount, "invalid index");
                    ; ;
                    return this.pNextOpenList[iIndex] != akra.INVALID_INDEX;
                }/** Получение элемента по его номеру */
                ;
                PoolGroup.prototype.member = function (iIndex) {
                    akra.logger.setSourceLocation("DataPool.ts", 162);
                    akra.logger.assert(this.pMemberList != null && this.pNextOpenList != null, "Group has not been created");
                    ; ;
                    akra.logger.setSourceLocation("DataPool.ts", 163);
                    akra.logger.assert(iIndex < this.iMaxCount, "invalid index");
                    ; ;
                    return this.pMemberList[iIndex];
                };
                PoolGroup.prototype.memberPtr = function (iIndex) {
                    akra.logger.setSourceLocation("DataPool.ts", 168);
                    akra.logger.assert(this.pMemberList != null && this.pNextOpenList != null, "Group has not been created");
                    ; ;
                    akra.logger.setSourceLocation("DataPool.ts", 169);
                    akra.logger.assert(iIndex < this.iMaxCount, "invalid index");
                    ; ;
                    return this.pMemberList[iIndex];
                };
                return PoolGroup;
            })();
            pool.PoolGroup = PoolGroup;            
            var DataPool = (function () {
                function DataPool(pManager, tTemplate) {
                    this.bInitialized = false;
                    /** Массив групп */
                    this.pGroupList = null;
                    /** Общее число ячеек */
                    this.iTotalMembers = 0;
                    /** Количесвто свободных ячеек */
                    this.iTotalOpen = 0;
                    /** Количесвто элементов в группе */
                    this.iGroupCount = 0;
                    /**
                    * Номер элемента состоит из номер группы сдвинутого на _iIndexShift
                    * и номера элемента в этой группе, который можно вырезать маской _iIndexMask
                    */
                    this.iIndexMask = 0;
                    /**
                    * Номер элемента состоит из номер группы сдвинутого на _iIndexShift
                    * и номера элемента в этой группе, который можно вырезать маской _iIndexMask
                    */
                    this.iIndexShift = 0;
                    this.pManager = pManager;
                    this.tTemplate = tTemplate;
                }
                Object.defineProperty(DataPool.prototype, "manager", {
                    get: /**@inline*/ function () {
                        return this.pManager;
                    },
                    enumerable: true,
                    configurable: true
                });
                DataPool.prototype.initialize = function (iGrowSize) {
                    akra.logger.setSourceLocation("DataPool.ts", 209);
                    akra.logger.assert(this.isInitialized() == false, "the cDataPool is already initialized");
                    ; ;
                    this.bInitialized = true;
                    this.iGroupCount = akra.math.nearestPowerOfTwo(iGrowSize);
                    this.iIndexShift = akra.math.lowestBitSet(this.iGroupCount);
                    this.iIndexShift = akra.math.clamp(this.iIndexShift, 1, 15);
                    this.iGroupCount = 1 << this.iIndexShift;
                    this.iIndexMask = this.iGroupCount - 1;
                }/** @inline */
                ;
                DataPool.prototype.isInitialized = function () {
                    return this.bInitialized;
                };
                DataPool.prototype.destroy = function () {
                    this.clear();
                    this.bInitialized = false;
                };
                DataPool.prototype.release = function (iHandle) {
                    akra.logger.setSourceLocation("DataPool.ts", 233);
                    akra.logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    ; ;
                    if(this.isHandleValid(iHandle) == true) {
                        akra.logger.setSourceLocation("DataPool.ts", 236);
                        akra.logger.assert(this.pGroupList.length != 0, "The cDataPool has not been properly created");
                        ; ;
                        var iGroupIndex = this.getGroupNumber(iHandle);
                        var iItemIndex = this.getItemIndex(iHandle);
                        var pGroup = this.getGroup(iGroupIndex);
                        pGroup.release(iItemIndex);
                        var pGroupBack = this.pGroupList[this.pGroupList.length - 1];
                        if(pGroupBack.totalOpen == this.iGroupCount) {
                            pGroupBack.destroy();
                            this.pGroupList.splice(this.pGroupList.length - 1, 1);
                        }
                        this.iTotalOpen++;
                    }
                };
                DataPool.prototype.clear = function () {
                    // destroy all groups in the list
                    for(var iGroupIter = 0; iGroupIter < this.pGroupList.length; ++iGroupIter) {
                        this.pGroupList[iGroupIter].destroy();
                    }
                    // now clear the list itself
                    this.pGroupList.clear();
                };
                DataPool.prototype.add = function (pMembers) {
                    akra.logger.setSourceLocation("DataPool.ts", 265);
                    akra.logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    ; ;
                    var iGroupNumber = {
                        value: 0
                    };
                    var pOpenGroup = this.findOpenGroup(iGroupNumber);
                    var iIndex = pOpenGroup.addMember(pMembers);
                    this.iTotalOpen--;
                    return this.buildHandle(iGroupNumber.value, iIndex);
                };
                DataPool.prototype.forEach = function (fFunction) {
                    akra.logger.setSourceLocation("DataPool.ts", 278);
                    akra.logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    ; ;
                    // iterate through every group
                    var iGroupNumber = 0;
                    for(var iGroupIter = 0; iGroupIter < this.pGroupList.length; iGroupIter++) {
                        var nCallbackCount = this.pGroupList[iGroupIter].totalUsed;
                        var iItemIndex = 0;
                        while(nCallbackCount != 0 && iItemIndex < this.iGroupCount) {
                            if(this.pGroupList[iGroupIter].isOpen(iItemIndex) == false) {
                                fFunction(this, this.buildHandle(iGroupNumber, iItemIndex), this.pGroupList[iGroupIter].member(iItemIndex));
                                nCallbackCount--;
                            }
                            ++iItemIndex;
                        }
                        ++iGroupNumber;
                    }
                };
                DataPool.prototype.nextHandle = function () {
                    akra.logger.setSourceLocation("DataPool.ts", 305);
                    akra.logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    ; ;
                    var iGroupNumber = {
                        value: 0
                    };
                    var pOpenGroup = this.findOpenGroup(iGroupNumber);
                    var iIndex = pOpenGroup.nextMember();
                    this.iTotalOpen--;
                    return this.buildHandle(iGroupNumber.value, iIndex);
                };
                DataPool.prototype.isHandleValid = function (iHandle) {
                    akra.logger.setSourceLocation("DataPool.ts", 317);
                    akra.logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    ; ;
                    if(iHandle !== akra.INVALID_INDEX) {
                        akra.logger.setSourceLocation("DataPool.ts", 320);
                        akra.logger.assert(this.pGroupList.length != 0, "The cDataPool has not been properly created");
                        ; ;
                        var pGroup = this.getGroup(this.getGroupNumber(iHandle));
                        return !pGroup.isOpen(this.getItemIndex(iHandle));
                    }
                    return false;
                };
                DataPool.prototype.get = function (iHandle) {
                    akra.logger.setSourceLocation("DataPool.ts", 331);
                    akra.logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    ; ;
                    akra.logger.setSourceLocation("DataPool.ts", 332);
                    akra.logger.assert(this.pGroupList.length != 0, "The cDataPool has not been properly created");
                    ; ;
                    var pGroup = this.getGroup(this.getGroupNumber(iHandle));
                    var iItemIndex = this.getItemIndex(iHandle);
                    return pGroup.member(iItemIndex);
                };
                DataPool.prototype.getPtr = function (iHandle) {
                    akra.logger.setSourceLocation("DataPool.ts", 341);
                    akra.logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    ; ;
                    akra.logger.setSourceLocation("DataPool.ts", 342);
                    akra.logger.assert(this.pGroupList.length != 0, "The cDataPool has not been properly created");
                    ; ;
                    var pGroup = this.getGroup(this.getGroupNumber(iHandle));
                    var iItemIndex = this.getItemIndex(iHandle);
                    return pGroup.memberPtr(iItemIndex);
                };
                DataPool.prototype.getGenericPtr = function (iHandle) {
                    akra.logger.setSourceLocation("DataPool.ts", 351);
                    akra.logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    ; ;
                    return this.getPtr(iHandle);
                }/**
                * @inline
                * Получение номера группы по номеру элемента
                */
                ;
                DataPool.prototype.getGroupNumber = function (iHandle) {
                    return iHandle >> this.iIndexShift;
                }/**
                * @inline
                * Получение номера элеменат в группе по его номеру
                */
                ;
                DataPool.prototype.getItemIndex = function (iHandle) {
                    return iHandle & this.iIndexMask;
                }/**
                * @inline
                * Полученяи номера элеменат по его номеру группы и группе
                */
                ;
                DataPool.prototype.buildHandle = function (iGroup, iIndex) {
                    return (iGroup << this.iIndexShift) + iIndex;
                }/** Добавление группы в пул */
                ;
                DataPool.prototype.addGroup = function () {
                    // append a new group to the list to start things off
                    var pNewGroup = new PoolGroup(this.pManager, this.tTemplate, this.iGroupCount);
                    this.pGroupList.push(pNewGroup);
                    // gain access to the new group and innitialize it
                    pNewGroup.create();
                    // increment our internal counters
                    this.iTotalMembers += this.iGroupCount;
                    this.iTotalOpen += this.iGroupCount;
                    return pNewGroup;
                }/** Поиск первой группы которая имеет свободную область */
                ;
                DataPool.prototype.findOpenGroup = function (pGroupNumber) {
                    pGroupNumber.value = 0;
                    //найдем и вренем первую группу имеющую свободную группу
                    for(var iGroupIter = 0; iGroupIter < this.pGroupList.length; iGroupIter++) {
                        if(this.pGroupList[iGroupIter].totalOpen > 0) {
                            return this.pGroupList[iGroupIter];
                        }
                        pGroupNumber.value++;
                    }
                    //свободных областей нет, поэтому мы должны добавить новую группу в пул,
                    //но пержде чем содавать убедимся что не достигли максимума
                    akra.logger.setSourceLocation("DataPool.ts", 411);
                    akra.logger.assert((this.pGroupList.length + 1) < akra.MAX_UINT16, "the cDataPool is full!!!!");
                    ; ;
                    //добавим новую группу
                    return this.addGroup();
                }/**
                * @inline
                * Возвращает группу по ее номеру
                */
                ;
                DataPool.prototype.getGroup = function (iIndex) {
                    akra.logger.setSourceLocation("DataPool.ts", 422);
                    akra.logger.assert(iIndex < this.pGroupList.length, "Invalid group index requested");
                    ; ;
                    return this.pGroupList[iIndex];
                };
                return DataPool;
            })();
            pool.DataPool = DataPool;            
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            var ResourcePoolItem = (function (_super) {
                __extends(ResourcePoolItem, _super);
                function ResourcePoolItem() {
                                _super.call(this);
                    this.pResourcePool = null;
                    this.iResourceHandle = 0;
                    this.iResourceFlags = 0;
                    this._iGuid = akra.sid();
                    this._pUnicastSlotMap = null;
                    this._pBroadcastSlotList = null;
                    //this.pManager = pManager;
                    this.pResourceCode = new pool.ResourceCode(0);
                    this.pCallbackFunctions = [];
                    this.pStateWatcher = [];
                    this.pCallbackSlots = akra.genArray(null, akra.EResourceItemEvents.TOTALRESOURCEFLAGS);
                }
                /**@inline*/                 Object.defineProperty(ResourcePoolItem.prototype, "resourceCode", {
                    get: /**@inline*/ function () {
                        return this.pResourceCode;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolItem.prototype, "resourcePool", {
                    get: function () {
                        return this.pResourcePool;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolItem.prototype, "resourceHandle", {
                    get: function () {
                        return this.iResourceHandle;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolItem.prototype, "resourceFlags", {
                    get: function () {
                        return this.iResourceFlags;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolItem.prototype, "alteredFlag", {
                    get: function () {
                        return akra.bf.testBit(this.iResourceFlags, akra.EResourceItemEvents.ALTERED);
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolItem.prototype, "manager", {
                    get: function () {
                        return this.getManager();
                    }/** Constructor of ResourcePoolItem class */
                    /*pManager: IResourcePoolManager*/
                    ,
                    enumerable: true,
                    configurable: true
                });
                ResourcePoolItem.prototype.getEngine = function () {
                    var pManager = this.getManager();
                    if(pManager) {
                        return pManager.getEngine();
                    }
                    return null;
                }/**@inline*/ ;
                ResourcePoolItem.prototype.getManager = function () {
                    return this.pResourcePool ? this.pResourcePool.manager : null;
                };
                ResourcePoolItem.prototype.createResource = function () {
                    return false;
                };
                ResourcePoolItem.prototype.destroyResource = function () {
                    return false;
                };
                ResourcePoolItem.prototype.disableResource = function () {
                    return false;
                };
                ResourcePoolItem.prototype.restoreResource = function () {
                    return false;
                };
                ResourcePoolItem.prototype.loadResource = function (sFilename) {
                    if (typeof sFilename === "undefined") { sFilename = null; }
                    return false;
                };
                ResourcePoolItem.prototype.saveResource = function (sFilename) {
                    if (typeof sFilename === "undefined") { sFilename = null; }
                    return false;
                };
                ResourcePoolItem.prototype.setChangesNotifyRoutine = function (fn) {
                    for(var i = 0; i < this.pCallbackFunctions.length; i++) {
                        if(this.pCallbackFunctions[i] == fn) {
                            return;
                        }
                    }
                    this.pCallbackFunctions.push(fn);
                };
                ResourcePoolItem.prototype.delChangesNotifyRoutine = function (fn) {
                    for(var i = 0; i < this.pCallbackFunctions.length; i++) {
                        if(this.pCallbackFunctions[i] == fn) {
                            this.pCallbackFunctions[i] = null;
                        }
                    }
                };
                ResourcePoolItem.prototype.setStateWatcher = function (eEvent, fnWatcher) {
                    this.pStateWatcher[eEvent] = fnWatcher;
                };
                ResourcePoolItem.prototype.sync = function (pResourceItem, eSignal, eSlot) {
                    eSlot = akra.isDef(eSlot) ? eSlot : eSignal;
                    eSlot = ResourcePoolItem.parseEvent(eSlot);
                    eSignal = ResourcePoolItem.parseEvent(eSignal);
                    var pSlots = this.pCallbackSlots, pSignSlots;
                    var me = this;
                    var n;
                    var fn;
                    var bState;
                    if(akra.isNull(pSlots[eSlot])) {
                        pSlots[eSlot] = [];
                    }
                    pSignSlots = pSlots[eSlot];
                    n = pSignSlots.length;
                    bState = akra.bf.testBit(pResourceItem.resourceFlags, eSignal);
                    fn = function (eFlag, iResourceFlags, isSet) {
                        if(eFlag == eSignal) {
                            pSignSlots[n].bState = isSet;
                            me.notifyStateChange(eSlot, this);
                            for(var i = 0; i < pSignSlots.length; ++i) {
                                if(pSignSlots[i].bState === false) {
                                    if(akra.bf.testBit(me.resourceFlags, eFlag)) {
                                        me.setResourceFlag(eFlag, false);
                                    }
                                    return;
                                }
                            }
                            me.setResourceFlag(eFlag, true);
                        }
                    };
                    pSignSlots.push({
                        bState: bState,
                        fn: fn,
                        pResourceItem: pResourceItem
                    });
                    fn.call(pResourceItem, eSignal, pResourceItem.resourceFlags, bState);
                    pResourceItem.setChangesNotifyRoutine(fn);
                    return true;
                };
                ResourcePoolItem.prototype.unsync = function (pResourceItem, eSignal, eSlot) {
                    eSlot = akra.isDef(eSlot) ? eSlot : eSignal;
                    eSlot = ResourcePoolItem.parseEvent(eSlot);
                    eSignal = ResourcePoolItem.parseEvent(eSignal);
                    var pSlots = this.pCallbackSlots, pSignSlots;
                    var me = this;
                    var isRem = false;
                    pSignSlots = pSlots[eSlot];
                    for(var i = 0, n = pSignSlots.length; i < n; ++i) {
                        if(pSignSlots[i].pResourceItem === pResourceItem) {
                            pSignSlots[i].pResourceItem.delChangesNotifyRoutine(pSignSlots[i].fn);
                            pSignSlots.splice(i, 1);
                            --n;
                            --i;
                            isRem = true;
                        }
                    }
                    return isRem;
                }/**@inline*/ ;
                ResourcePoolItem.prototype.isResourceCreated = function () {
                    return akra.bf.testBit(this.iResourceFlags, akra.EResourceItemEvents.CREATED);
                }/**@inline*/ ;
                ResourcePoolItem.prototype.isResourceLoaded = function () {
                    return akra.bf.testBit(this.iResourceFlags, akra.EResourceItemEvents.LOADED);
                }/**@inline*/ ;
                ResourcePoolItem.prototype.isResourceDisabled = function () {
                    return akra.bf.testBit(this.iResourceFlags, akra.EResourceItemEvents.DISABLED);
                }/**@inline*/ ;
                ResourcePoolItem.prototype.isResourceAltered = function () {
                    return akra.bf.testBit(this.iResourceFlags, akra.EResourceItemEvents.ALTERED);
                };
                ResourcePoolItem.prototype.setAlteredFlag = function (isOn) {
                    if (typeof isOn === "undefined") { isOn = true; }
                    //notify always, when altered called
                    if(this.setResourceFlag(akra.EResourceItemEvents.ALTERED, isOn) || isOn) {
                        isOn ? this.altered() : this.saved();
                        return true;
                    }
                    return false;
                }/**@inline*/ ;
                ResourcePoolItem.prototype.setResourceName = function (sName) {
                    if(this.pResourcePool != null) {
                        this.pResourcePool.setResourceName(this.iResourceHandle, sName);
                    }
                };
                ResourcePoolItem.prototype.findResourceName = function () {
                    if(this.pResourcePool != null) {
                        return this.pResourcePool.findResourceName(this.iResourceHandle);
                    }
                    return null;
                };
                ResourcePoolItem.prototype.release = function () {
                    var iRefCount = _super.prototype.release.call(this);
                    if(iRefCount == 0) {
                        //Если у нас есть менеджер попросим его удалить нас
                        if(this.pResourcePool != null) {
                            this.pResourcePool.destroyResource(this);
                        }
                    }
                    return iRefCount;
                }/**@inline*/ ;
                ResourcePoolItem.prototype.notifyCreated = function () {
                    if(this.setResourceFlag(akra.EResourceItemEvents.CREATED, true)) {
                        this.created();
                    }
                }/**@inline*/ ;
                ResourcePoolItem.prototype.notifyDestroyed = function () {
                    if(this.setResourceFlag(akra.EResourceItemEvents.CREATED, false)) {
                        this.destroyed();
                    }
                }/**@inline*/ ;
                ResourcePoolItem.prototype.notifyLoaded = function () {
                    this.setAlteredFlag(false);
                    if(this.setResourceFlag(akra.EResourceItemEvents.LOADED, true)) {
                        this.loaded();
                    }
                }/**@inline*/ ;
                ResourcePoolItem.prototype.notifyUnloaded = function () {
                    if(this.setResourceFlag(akra.EResourceItemEvents.LOADED, false)) {
                        this.unloaded();
                    }
                }/**@inline*/ ;
                ResourcePoolItem.prototype.notifyRestored = function () {
                    if(this.setResourceFlag(akra.EResourceItemEvents.DISABLED, false)) {
                        this.restored();
                    }
                }/**@inline*/ ;
                ResourcePoolItem.prototype.notifyDisabled = function () {
                    if(this.setResourceFlag(akra.EResourceItemEvents.DISABLED, true)) {
                        this.disabled();
                    }
                }/**@inline*/ ;
                ResourcePoolItem.prototype.notifyAltered = function () {
                    this.setAlteredFlag(true);
                }/**@inline*/ ;
                ResourcePoolItem.prototype.notifySaved = function () {
                    this.setAlteredFlag(false);
                }/**
                * Назначение кода ресурсу
                * @inline
                */
                ;
                ResourcePoolItem.prototype.setResourceCode = function (pCode) {
                    this.pResourceCode.eq(pCode);
                }/**
                * Чтобы ресурс знал какому пулу ресурсов принадлжит
                * @inline
                */
                ;
                ResourcePoolItem.prototype.setResourcePool = function (pPool) {
                    this.pResourcePool = pPool;
                }/**
                * Назначение хендла ресурсу
                * @inline
                */
                ;
                ResourcePoolItem.prototype.setResourceHandle = function (iHandle) {
                    this.iResourceHandle = iHandle;
                };
                ResourcePoolItem.prototype.notifyStateChange = function (eEvent, pTarget) {
                    if (typeof pTarget === "undefined") { pTarget = null; }
                    if(!this.pStateWatcher[eEvent]) {
                        return;
                    }
                    var pSignSlots = this.pCallbackSlots[eEvent];
                    var nTotal = pSignSlots.length, nLoaded = 0;
                    for(var i = 0; i < nTotal; ++i) {
                        if(pSignSlots[i].bState) {
                            ++nLoaded;
                        }
                    }
                    this.pStateWatcher[eEvent](nLoaded, nTotal, pTarget);
                };
                ResourcePoolItem.prototype.setResourceFlag = function (iFlagBit, isSetting) {
                    var iTempFlags = this.iResourceFlags;
                    akra.bf.setBit(this.iResourceFlags, iFlagBit, isSetting);
                    if(iTempFlags != this.iResourceFlags) {
                        for(var i = 0; i < this.pCallbackFunctions.length; i++) {
                            if(this.pCallbackFunctions[i]) {
                                this.pCallbackFunctions[i].call(this, iFlagBit, this.iResourceFlags, isSetting);
                            }
                        }
                        return true;
                    }
                    return false;
                };
                ResourcePoolItem.parseEvent = function parseEvent(pEvent) {
                    if(akra.isInt(pEvent)) {
                        return pEvent;
                    }
                    switch(pEvent.toLowerCase()) {
                        case 'loaded': {
                            return akra.EResourceItemEvents.LOADED;

                        }
                        case 'created': {
                            return akra.EResourceItemEvents.CREATED;

                        }
                        case 'disabled': {
                            return akra.EResourceItemEvents.DISABLED;

                        }
                        case 'altered': {
                            return akra.EResourceItemEvents.ALTERED;

                        }
                        default: {
                            akra.logger.setSourceLocation("../ResourcePoolItem.ts", 377);
                            akra.logger.error('Использовано неизвес��ное событие для ресурса.');
                            ; ;
                            return 0;

                        }
                    }
                }
                ResourcePoolItem._pEvenetTable = new akra.events.EventTable();
                ResourcePoolItem.prototype.getEventTable = /**@inline*/ function () {
                    return ResourcePoolItem._pEvenetTable;
                }/**@inline*/ ;
                ResourcePoolItem.prototype.getGuid = function () {
                    return this._iGuid;
                }/**@inline*/ ;
                ResourcePoolItem.prototype.connect = function (pSender, sSignal, sSlot, eType) {
                    return pSender.getEventTable().addDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
                };
                ResourcePoolItem.prototype.disconnect = /**@inline*/ function (pSender, sSignal, sSlot, eType) {
                    return this.getEventTable().removeDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
                }/**@inline*/ ;
                ResourcePoolItem.prototype.bind = function (sSignal, fnListener, eType) {
                    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
                }/**@inline*/ ;
                ResourcePoolItem.prototype.unbind = function (sSignal, fnListener, eType) {
                    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
                };
                ResourcePoolItem.prototype.created = function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).created;
                    var _recivier = this;
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                };
                ResourcePoolItem.prototype.destroyed = function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).destroyed;
                    var _recivier = this;
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                };
                ResourcePoolItem.prototype.loaded = function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).loaded;
                    var _recivier = this;
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                };
                ResourcePoolItem.prototype.unloaded = function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).unloaded;
                    var _recivier = this;
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                };
                ResourcePoolItem.prototype.restored = function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).restored;
                    var _recivier = this;
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                };
                ResourcePoolItem.prototype.disabled = function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).disabled;
                    var _recivier = this;
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                };
                ResourcePoolItem.prototype.altered = function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).altered;
                    var _recivier = this;
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                };
                ResourcePoolItem.prototype.saved = function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).saved;
                    var _recivier = this;
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                };
                return ResourcePoolItem;
            })(akra.util.ReferenceCounter);
            pool.ResourcePoolItem = ResourcePoolItem;            
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var RenderMethod = (function (_super) {
                    __extends(RenderMethod, _super);
                    function RenderMethod() {
                        _super.apply(this, arguments);

                    }
                    RenderMethod.prototype.isEqual = function (pRenderMethod) {
                        return false;
                    };
                    return RenderMethod;
                })(pool.ResourcePoolItem);
                resources.RenderMethod = RenderMethod;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    ; ;
    (function (ESurfaceMaterialTextures) {
        ESurfaceMaterialTextures._map = [];
        ESurfaceMaterialTextures.TEXTURE0 = 0;
        ESurfaceMaterialTextures._map[1] = "TEXTURE1";
        ESurfaceMaterialTextures.TEXTURE1 = 1;
        ESurfaceMaterialTextures._map[2] = "TEXTURE2";
        ESurfaceMaterialTextures.TEXTURE2 = 2;
        ESurfaceMaterialTextures._map[3] = "TEXTURE3";
        ESurfaceMaterialTextures.TEXTURE3 = 3;
        ESurfaceMaterialTextures._map[4] = "TEXTURE4";
        ESurfaceMaterialTextures.TEXTURE4 = 4;
        ESurfaceMaterialTextures._map[5] = "TEXTURE5";
        ESurfaceMaterialTextures.TEXTURE5 = 5;
        ESurfaceMaterialTextures._map[6] = "TEXTURE6";
        ESurfaceMaterialTextures.TEXTURE6 = 6;
        ESurfaceMaterialTextures._map[7] = "TEXTURE7";
        ESurfaceMaterialTextures.TEXTURE7 = 7;
        ESurfaceMaterialTextures._map[8] = "TEXTURE8";
        ESurfaceMaterialTextures.TEXTURE8 = 8;
        ESurfaceMaterialTextures._map[9] = "TEXTURE9";
        ESurfaceMaterialTextures.TEXTURE9 = 9;
        ESurfaceMaterialTextures._map[10] = "TEXTURE10";
        ESurfaceMaterialTextures.TEXTURE10 = 10;
        ESurfaceMaterialTextures._map[11] = "TEXTURE11";
        ESurfaceMaterialTextures.TEXTURE11 = 11;
        ESurfaceMaterialTextures._map[12] = "TEXTURE12";
        ESurfaceMaterialTextures.TEXTURE12 = 12;
        ESurfaceMaterialTextures._map[13] = "TEXTURE13";
        ESurfaceMaterialTextures.TEXTURE13 = 13;
        ESurfaceMaterialTextures._map[14] = "TEXTURE14";
        ESurfaceMaterialTextures.TEXTURE14 = 14;
        ESurfaceMaterialTextures._map[15] = "TEXTURE15";
        ESurfaceMaterialTextures.TEXTURE15 = 15;
        ESurfaceMaterialTextures.DIFFUSE = ESurfaceMaterialTextures.TEXTURE0;
        ESurfaceMaterialTextures._map[NaN] = "AMBIENT";
        ESurfaceMaterialTextures.AMBIENT = NaN;
        ESurfaceMaterialTextures._map[NaN] = "SPECULAR";
        ESurfaceMaterialTextures.SPECULAR = NaN;
        ESurfaceMaterialTextures._map[NaN] = "EMISSIVE";
        ESurfaceMaterialTextures.EMISSIVE = NaN;
        ESurfaceMaterialTextures.EMISSION = ESurfaceMaterialTextures.EMISSIVE;
    })(akra.ESurfaceMaterialTextures || (akra.ESurfaceMaterialTextures = {}));
    var ESurfaceMaterialTextures = akra.ESurfaceMaterialTextures;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (material) {
        var Material = (function () {
            function Material() {
                this.name = null;
                this.diffuse = new akra.Color(0.5);
                this.ambient = new akra.Color(0.5);
                this.specular = new akra.Color(0.5);
                this.emissive = new akra.Color(0.5);
                this.shininess = 50.0;
            }
            Material.prototype.set = function (pMat) {
                this.name = pMat.name;
                this.diffuse.set(pMat.diffuse);
                this.ambient.set(pMat.ambient);
                this.specular.set(pMat.specular);
                this.emissive.set(pMat.emissive);
                this.shininess = pMat.shininess;
                return this;
            };
            Material.prototype.isEqual = function (pMat) {
                return akra.Color.isEqual(this.diffuse, pMat.diffuse) && akra.Color.isEqual(this.ambient, pMat.ambient) && akra.Color.isEqual(this.specular, pMat.specular) && akra.Color.isEqual(this.emissive, pMat.emissive) && this.shininess === pMat.shininess;
            };
            return Material;
        })();
        material.Material = Material;        
    })(akra.material || (akra.material = {}));
    var material = akra.material;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.Material = akra.material.Material;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var SurfaceMaterial = (function (_super) {
                    __extends(SurfaceMaterial, _super);
                    function SurfaceMaterial() {
                                        _super.call(this);
                        this._pMaterial = new akra.Material();
                        this._nTotalTextures = 0;
                        this._iTextureFlags = 0;
                        this._iTextureMatrixFlags = 0;
                        this._pTextures = new Array(SurfaceMaterial.MAX_TEXTURES_PER_SURFACE);
                        this._pTexcoords = new Array(SurfaceMaterial.MAX_TEXTURES_PER_SURFACE);
                        this._pTextureMatrices = new Array(SurfaceMaterial.MAX_TEXTURES_PER_SURFACE);
                        for(var i = 0; i < SurfaceMaterial.MAX_TEXTURES_PER_SURFACE; ++i) {
                            this._pTexcoords[i] = i;
                        }
                    }
                    Object.defineProperty(SurfaceMaterial.prototype, "totalTextures", {
                        get: /**@inline*/ function () {
                            return this._nTotalTextures;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurfaceMaterial.prototype, "material", {
                        get: function () {
                            return this._pMaterial;
                        }/**@inline*/ ,
                        set: function (pMaterial) {
                            this._pMaterial.set(pMaterial);
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurfaceMaterial.prototype, "textureFlags", {
                        get: function () {
                            return this._iTextureFlags;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(SurfaceMaterial.prototype, "textureMatrixFlags", {
                        get: function () {
                            return this._iTextureMatrixFlags;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SurfaceMaterial.prototype.setTexture = function (iIndex, pTexture, iTexcoord) {
                        if (typeof iTexcoord === "undefined") { iTexcoord = 0; }
                        akra.logger.setSourceLocation("resources/SurfaceMaterial.ts", 40);
                        akra.logger.assert(iIndex < SurfaceMaterial.MAX_TEXTURES_PER_SURFACE, "invalid texture slot");
                        ; ;
                        var pRmgr = this.getManager();
                        var pTexture;
                        this._pTexcoords[iIndex] = iTexcoord;
                        if(akra.isString(arguments[0])) {
                            pTexture = this._pTextures[iIndex];
                            if(pTexture) {
                                //realise first
                                if(pTexture.release() == 0) {
                                    this._pTextures[iIndex] = null;
                                    //pTexture.destroyResource();
                                                                    } else {
                                    akra.logger.setSourceLocation("resources/SurfaceMaterial.ts", 58);
                                    akra.logger.warning("cannot destroy resource...");
                                }
                                ((this._iTextureFlags) &= ~(1 << (iIndex)));
                                --this._nTotalTextures;
                            }
                            this._pTextures[iIndex] = pRmgr.texturePool.loadResource(arguments[0]);
                            if(this._pTextures[iIndex]) {
                                ((this._iTextureFlags) |= (1 << (iIndex)));
                                ++this._nTotalTextures;
                                this.sync(this._pTextures[iIndex], akra.EResourceItemEvents.LOADED);
                            }
                            return true;
                        } else {
                            if(arguments[0] instanceof resources.Texture) {
                                if(!this._pTextures[iIndex] || pTexture != this._pTextures[iIndex]) {
                                    if(this._pTextures[iIndex]) {
                                        // realise first
                                        // DisplayManager.texturePool().releaseResource(this._pTextures[iIndex]);
                                        if(this._pTextures[iIndex].release() == 0) {
                                            // this._pTextureMatrices[iIndex].destroyResource();
                                            this._pTextures[iIndex] = null;
                                        } else {
                                            akra.logger.setSourceLocation("resources/SurfaceMaterial.ts", 89);
                                            akra.logger.warning("cannot destroy resource...");
                                            ; ;
                                        }
                                        ((this._iTextureFlags) &= ~(1 << (iIndex)));
                                        --this._nTotalTextures;
                                    }
                                    this._pTextures[iIndex] = pTexture;
                                    this._pTextures[iIndex].addRef();
                                    ((this._iTextureFlags) |= (1 << (iIndex)));
                                    ++this._nTotalTextures;
                                    this.sync(this._pTextures[iIndex], akra.EResourceItemEvents.LOADED);
                                    // var me = this;
                                    // trace('me get texture :)');
                                    // pTexture.setChangesNotifyRoutine(function() {
                                    //                 if (pTexture.isResourceLoaded()) {
                                    //                     trace(arguments);
                                    //                     trace('Texture <', pTexture.findResourceName(), '> loaded');
                                    //                     if (me.isResourceLoaded()) {
                                    //                         trace('Surface material loaded too.')
                                    //                     }
                                    //                 }
                                    //             });
                                                                    }
                                return true;
                            } else {
                                //similar to [cPoolHandle texture]
                                if(akra.isNumber(arguments[0])) {
                                    if(!this._pTextures[iIndex] || this._pTextures[iIndex].resourceHandle != arguments[0]) {
                                        if(this._pTextures[iIndex]) {
                                            //TheGameHost.displayManager().texturePool().releaseResource(m_pTextures[index]);
                                            if(this._pTextures[iIndex].release() === 0) {
                                                // this._pTextures[iIndex].destroyResource();
                                                this._pTextures[iIndex] = null;
                                            } else {
                                                akra.logger.setSourceLocation("resources/SurfaceMaterial.ts", 128);
                                                akra.logger.warning("cannot destroy resource...");
                                                ; ;
                                            }
                                            ((this._iTextureFlags) &= ~(1 << (iIndex)));
                                            --this._nTotalTextures;
                                        }
                                        this._pTextures[iIndex] = pRmgr.texturePool.getResource(arguments[0]);
                                        if(this._pTextures[iIndex]) {
                                            ((this._iTextureFlags) |= (1 << (iIndex)));
                                            ++this._nTotalTextures;
                                            this.sync(this._pTextures[iIndex], akra.EResourceItemEvents.LOADED);
                                        }
                                    }
                                    return true;
                                }
                            }
                        }
                        this._pTexcoords[iIndex] = iIndex;
                        return false;
                    };
                    SurfaceMaterial.prototype.setTextureMatrix = function (iIndex, m4fValue) {
                        akra.logger.setSourceLocation("resources/SurfaceMaterial.ts", 154);
                        akra.logger.assert(iIndex < SurfaceMaterial.MAX_TEXTURES_PER_SURFACE, "invalid texture slot");
                        ; ;
                        if(!m4fValue) {
                            this._pTextureMatrices[iIndex] = new akra.Mat4();
                        } else {
                            this._pTextureMatrices[iIndex] = new akra.Mat4(m4fValue);
                        }
                        ((this._iTextureMatrixFlags) |= (1 << (iIndex)));
                        return true;
                    }/**@inline*/ ;
                    SurfaceMaterial.prototype.setMaterial = function (pMaterial) {
                        this._pMaterial.set(pMaterial);
                    };
                    SurfaceMaterial.prototype.isEqual = function (pSurfaceMaterial) {
                        if(this._nTotalTextures === pSurfaceMaterial.totalTextures && this._iTextureFlags === pSurfaceMaterial.textureFlags && this._iTextureMatrixFlags === pSurfaceMaterial.textureMatrixFlags) {
                            if((this._pMaterial && this._pMaterial.isEqual(pSurfaceMaterial.material)) || (pSurfaceMaterial.material === null)) {
                                for(var i = 0; i < this._pTextures.length; i++) {
                                    if(this._pTextures[i] !== pSurfaceMaterial.texture[i]) {
                                        return false;
                                    }
                                }
                                ; ;
                                for(var i = 0; i < this._pTextureMatrices.length; ++i) {
                                    for(var j = 0; j < this._pTextureMatrices[i].data.length; j++) {
                                        if(this._pTextureMatrices[i].data[j] !== pSurfaceMaterial.textureMatrix[i].data[j]) {
                                            return false;
                                        }
                                    }
                                    ; ;
                                }
                                return true;
                            }
                        }
                        return false;
                    }/**@inline*/ ;
                    SurfaceMaterial.prototype.texture = function (iSlot) {
                        akra.logger.setSourceLocation("resources/SurfaceMaterial.ts", 202);
                        akra.logger.assert((iSlot >= 0 && iSlot < SurfaceMaterial.MAX_TEXTURES_PER_SURFACE), "invalid texture slot");
                        ; ;
                        return this._pTextures[iSlot];
                    }/**@inline*/ ;
                    SurfaceMaterial.prototype.texcoord = function (iSlot) {
                        akra.logger.setSourceLocation("resources/SurfaceMaterial.ts", 208);
                        akra.logger.assert((iSlot >= 0 && iSlot < SurfaceMaterial.MAX_TEXTURES_PER_SURFACE), "invalid texture slot");
                        ; ;
                        return this._pTexcoords[iSlot];
                    }/**@inline*/ ;
                    SurfaceMaterial.prototype.textureMatrix = function (iSlot) {
                        akra.logger.setSourceLocation("resources/SurfaceMaterial.ts", 214);
                        akra.logger.assert((iSlot >= 0 && iSlot < SurfaceMaterial.MAX_TEXTURES_PER_SURFACE), "invalid texture slot");
                        ; ;
                        return this._pTextureMatrices[iSlot];
                    };
                    SurfaceMaterial.MAX_TEXTURES_PER_SURFACE = 16;
                    return SurfaceMaterial;
                })(pool.ResourcePoolItem);
                resources.SurfaceMaterial = SurfaceMaterial;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var Model = (function (_super) {
                    __extends(Model, _super);
                    function Model() {
                        _super.apply(this, arguments);

                    }
                    return Model;
                })(pool.ResourcePoolItem);
                resources.Model = Model;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var Effect = (function (_super) {
                    __extends(Effect, _super);
                    function Effect() {
                        _super.apply(this, arguments);

                    }
                    Effect.prototype.isEqual = function (pEffect) {
                        return false;
                    };
                    Effect.prototype.isReplicated = function () {
                        return false;
                    };
                    Effect.prototype.isMixid = function () {
                        return false;
                    };
                    Effect.prototype.isParameterUsed = function (pParam, iPass) {
                        return false;
                    };
                    Effect.prototype.create = function () {
                        return;
                    };
                    Effect.prototype.replicable = function (bValue) {
                        return;
                    };
                    Effect.prototype.miscible = function (bValue) {
                        return;
                    };
                    Effect.prototype.getComponent = function (i) {
                        return null;
                    };
                    Effect.prototype.addComponent = function (sComponent, nShift, isSet) {
                        return false;
                    };
                    Effect.prototype.delComponent = function (pComponent, nShift, isSet) {
                        return false;
                    };
                    Effect.prototype.findParameter = function (pParam, iPass) {
                        return null;
                    };
                    return Effect;
                })(pool.ResourcePoolItem);
                resources.Effect = Effect;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EPixelFormats) {
        EPixelFormats._map = [];
        /*Unknown pixel format.*/
        EPixelFormats.UNKNOWN = 0;
        /*8-bit pixel format, all bits luminance.*/
        EPixelFormats.L8 = 1;
        EPixelFormats.BYTE_L = EPixelFormats.L8;
        /*16-bit pixel format, all bits luminance.*/
        EPixelFormats.L16 = 2;
        EPixelFormats.SHORT_L = EPixelFormats.L16;
        /*8-bit pixel format, all bits alpha.*/
        EPixelFormats.A8 = 3;
        EPixelFormats.BYTE_A = EPixelFormats.A8;
        /*8-bit pixel format, 4 bits alpha, 4 bits luminance.*/
        EPixelFormats.A4L4 = 4;
        /*2 byte pixel format, 1 byte luminance, 1 byte alpha*/
        EPixelFormats.BYTE_LA = 5;
        /*16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.*/
        EPixelFormats.R5G6B5 = 6;
        /*16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.*/
        EPixelFormats.B5G6R5 = 7;
        /*8-bit pixel format, 2 bits blue, 3 bits green, 3 bits red.*/
        EPixelFormats.R3G3B2 = 31;
        /*16-bit pixel format, 4 bits for alpha, red, green and blue.*/
        EPixelFormats.A4R4G4B4 = 8;
        /*16-bit pixel format, 5 bits for blue, green, red and 1 for alpha.*/
        EPixelFormats.A1R5G5B5 = 9;
        /*24-bit pixel format, 8 bits for red, green and blue.*/
        EPixelFormats.R8G8B8 = 10;
        /*24-bit pixel format, 8 bits for blue, green and red.*/
        EPixelFormats.B8G8R8 = 11;
        /*32-bit pixel format, 8 bits for alpha, red, green and blue.*/
        EPixelFormats.A8R8G8B8 = 12;
        /*32-bit pixel format, 8 bits for blue, green, red and alpha.*/
        EPixelFormats.A8B8G8R8 = 13;
        /*32-bit pixel format, 8 bits for blue, green, red and alpha.*/
        EPixelFormats.B8G8R8A8 = 14;
        /*32-bit pixel format, 8 bits for red, green, blue and alpha.*/
        EPixelFormats.R8G8B8A8 = 28;
        /*32-bit pixel format, 8 bits for red, 8 bits for green, 8 bits for blue like A8R8G8B8, but alpha will get discarded*/
        EPixelFormats.X8R8G8B8 = 26;
        /*32-bit pixel format, 8 bits for blue, 8 bits for green, 8 bits for red like A8B8G8R8, but alpha will get discarded*/
        EPixelFormats.X8B8G8R8 = 27;
        /*3 byte pixel format, 1 byte for red, 1 byte for green, 1 byte for blue*/
        EPixelFormats.BYTE_RGB = EPixelFormats.R8G8B8;
        /*3 byte pixel format, 1 byte for blue, 1 byte for green, 1 byte for red*/
        EPixelFormats.BYTE_BGR = EPixelFormats.B8G8R8;
        /*4 byte pixel format, 1 byte for blue, 1 byte for green, 1 byte for red and one byte for alpha*/
        EPixelFormats.BYTE_BGRA = EPixelFormats.B8G8R8A8;
        /*4 byte pixel format, 1 byte for red, 1 byte for green, 1 byte for blue, and one byte for alpha*/
        EPixelFormats.BYTE_RGBA = EPixelFormats.R8G8B8A8;
        /*32-bit pixel format, 2 bits for alpha, 10 bits for red, green and blue.*/
        EPixelFormats.A2R10G10B10 = 15;
        /*32-bit pixel format, 10 bits for blue, green and red, 2 bits for alpha.*/
        EPixelFormats.A2B10G10R10 = 16;
        /*DDS (DirectDraw Surface) DXT1 format.*/
        EPixelFormats.DXT1 = 17;
        /*DDS (DirectDraw Surface) DXT2 format.*/
        EPixelFormats.DXT2 = 18;
        /*DDS (DirectDraw Surface) DXT3 format.*/
        EPixelFormats.DXT3 = 19;
        /*DDS (DirectDraw Surface) DXT4 format.*/
        EPixelFormats.DXT4 = 20;
        /*DDS (DirectDraw Surface) DXT5 format.*/
        EPixelFormats.DXT5 = 21;
        /*16-bit pixel format, 16 bits (float) for red*/
        EPixelFormats.FLOAT16_R = 32;
        /*48-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue*/
        EPixelFormats.FLOAT16_RGB = 22;
        /*64-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue, 16 bits (float) for alpha*/
        EPixelFormats.FLOAT16_RGBA = 23;
        /*32-bit pixel format, 32 bits (float) for red*/
        EPixelFormats.FLOAT32_R = 33;
        /*96-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue*/
        EPixelFormats.FLOAT32_RGB = 24;
        /*128-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue, 32 bits (float) for alpha*/
        EPixelFormats.FLOAT32_RGBA = 25;
        /*32-bit, 2-channel s10e5 floating point pixel format, 16-bit green, 16-bit red*/
        EPixelFormats.FLOAT16_GR = 35;
        /*64-bit, 2-channel floating point pixel format, 32-bit green, 32-bit red*/
        EPixelFormats.FLOAT32_GR = 36;
        /*Float Depth texture format*/
        EPixelFormats.DEPTH = 29;
        /*Byte Depth texture format */
        EPixelFormats.DEPTH_BYTE = 44;
        /*64-bit pixel format, 16 bits for red, green, blue and alpha*/
        EPixelFormats.SHORT_RGBA = 30;
        /*32-bit pixel format, 16-bit green, 16-bit red*/
        EPixelFormats.SHORT_GR = 34;
        /*48-bit pixel format, 16 bits for red, green and blue*/
        EPixelFormats.SHORT_RGB = 37;
        /*PVRTC (PowerVR) RGB 2 bpp.*/
        EPixelFormats.PVRTC_RGB2 = 38;
        /*PVRTC (PowerVR) RGBA 2 bpp.*/
        EPixelFormats.PVRTC_RGBA2 = 39;
        /*PVRTC (PowerVR) RGB 4 bpp.*/
        EPixelFormats.PVRTC_RGB4 = 40;
        /*PVRTC (PowerVR) RGBA 4 bpp.*/
        EPixelFormats.PVRTC_RGBA4 = 41;
        /*8-bit pixel format, all bits red.*/
        EPixelFormats.R8 = 42;
        /*16-bit pixel format, 8 bits red, 8 bits green.*/
        EPixelFormats.RG8 = 43;
        EPixelFormats.TOTAL = 45;
    })(akra.EPixelFormats || (akra.EPixelFormats = {}));
    var EPixelFormats = akra.EPixelFormats;
    ; ;
    /**
    * Flags defining some on/off properties of pixel formats
    */
    (function (EPixelFormatFlags) {
        EPixelFormatFlags._map = [];
        // This format has an alpha channel
        EPixelFormatFlags.HASALPHA = 1;
        // This format is compressed. This invalidates the values in elemBytes,
        // elemBits and the bit counts as these might not be fixed in a compressed format.
        EPixelFormatFlags.COMPRESSED = 2;
        // This is a floating point format
        EPixelFormatFlags.FLOAT = 4;
        // This is a depth format (for depth textures)
        EPixelFormatFlags.DEPTH = 8;
        // Format is in native endian. Generally true for the 16, 24 and 32 bits
        // formats which can be represented as machine integers.
        EPixelFormatFlags.NATIVEENDIAN = 16;
        // This is an intensity format instead of a RGB one. The luminance
        // replaces R,G and B. (but not A)
        EPixelFormatFlags.LUMINANCE = 32;
    })(akra.EPixelFormatFlags || (akra.EPixelFormatFlags = {}));
    var EPixelFormatFlags = akra.EPixelFormatFlags;
    /** Pixel component format */
    (function (EPixelComponentTypes) {
        EPixelComponentTypes._map = [];
        /*Byte per component (8 bit fixed 0.0..1.0)*/
        EPixelComponentTypes.BYTE = 0;
        /*Short per component (16 bit fixed 0.0..1.0))*/
        EPixelComponentTypes.SHORT = 1;
        /*16 bit float per component*/
        EPixelComponentTypes.FLOAT16 = 2;
        /*32 bit float per component*/
        EPixelComponentTypes.FLOAT32 = 3;
        /*Number of pixel types*/
        EPixelComponentTypes.COUNT = 4;
    })(akra.EPixelComponentTypes || (akra.EPixelComponentTypes = {}));
    var EPixelComponentTypes = akra.EPixelComponentTypes;
    ; ;
    (function (EFilters) {
        EFilters._map = [];
        EFilters._map[0] = "NEAREST";
        EFilters.NEAREST = 0;
        EFilters._map[1] = "LINEAR";
        EFilters.LINEAR = 1;
        EFilters._map[2] = "BILINEAR";
        EFilters.BILINEAR = 2;
        EFilters._map[3] = "BOX";
        EFilters.BOX = 3;
        EFilters._map[4] = "TRIANGLE";
        EFilters.TRIANGLE = 4;
        EFilters._map[5] = "BICUBIC";
        EFilters.BICUBIC = 5;
    })(akra.EFilters || (akra.EFilters = {}));
    var EFilters = akra.EFilters;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EImageFlags) {
        EImageFlags._map = [];
        EImageFlags.COMPRESSED = 1;
        EImageFlags.CUBEMAP = 2;
        EImageFlags.TEXTURE_3D = 4;
    })(akra.EImageFlags || (akra.EImageFlags = {}));
    var EImageFlags = akra.EImageFlags;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var Img = (function (_super) {
                    __extends(Img, _super);
                    function Img() {
                                        _super.call(this);
                        this._iWidth = 0;
                        this._iHeight = 0;
                        this._iDepth = 0;
                        this._nMipMaps = 0;
                        this._iFlags = 0;
                        this._eFormat = akra.EPixelFormats.UNKNOWN;
                        this._pBuffer = null;
                    }
                    Object.defineProperty(Img.prototype, "byteLength", {
                        get: /**@inline*/ function () {
                            return 0;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Img.prototype, "width", {
                        get: function () {
                            return this._iWidth;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Img.prototype, "height", {
                        get: function () {
                            return this._iHeight;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Img.prototype, "depth", {
                        get: function () {
                            return this._iDepth;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Img.prototype, "numFaces", {
                        get: function () {
                            if(this.hasFlag(akra.EImageFlags.CUBEMAP)) {
                                return 6;
                            }
                            return 1;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Img.prototype, "numMipMaps", {
                        get: function () {
                            return this._nMipMaps;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Img.prototype, "format", {
                        get: function () {
                            return this._eFormat;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Img.prototype.createResource = function () {
                        // innitialize the resource (called once)
                        akra.logger.setSourceLocation("resources/Img.ts", 61);
                        akra.logger.assert(!this.isResourceCreated(), "The resource has already been created.");
                        ; ;
                        // signal that the resource is now created,
                        // but has not been enabled
                        this.notifyCreated();
                        this.notifyDisabled();
                        return true;
                    };
                    Img.prototype.destroyResource = function () {
                        // destroy the resource
                        //
                        // we permit redundant calls to destroy, so there are no asserts here
                        //
                        if(this.isResourceCreated()) {
                            // disable the resource
                            this.disableResource();
                            this.freeMemory();
                            this.notifyUnloaded();
                            this.notifyDestroyed();
                            return (true);
                        }
                        return (false);
                    };
                    Img.prototype.restoreResource = function () {
                        akra.logger.setSourceLocation("resources/Img.ts", 93);
                        akra.logger.assert(this.isResourceCreated(), "The resource has not been created.");
                        ; ;
                        this.notifyRestored();
                        return true;
                    };
                    Img.prototype.disableResource = function () {
                        akra.logger.setSourceLocation("resources/Img.ts", 101);
                        akra.logger.assert(this.isResourceCreated(), "The resource has not been created.");
                        ; ;
                        this.notifyDisabled();
                        return true;
                    };
                    Img.prototype.loadResource = function (sFilename) {
                        return false;
                    };
                    Img.prototype.saveResource = function (sFilename) {
                        return false;
                    };
                    Img.prototype.create = function (iWidth, iHeight, iDepth, eFormat, iFlags) {
                        return false;
                    };
                    Img.prototype.freeMemory = function () {
                        this._iWidth = 0;
                        this._iHeight = 0;
                        this._iDepth = 0;
                        this._pBuffer = null;
                    };
                    Img.prototype.set = function (pSrc) {
                        this.freeMemory();
                        this._iWidth = pSrc.width;
                        this._iHeight = pSrc.height;
                        this._iDepth = pSrc.depth;
                        this._eFormat = pSrc.format;
                        this._iFlags = pSrc.getFlags();
                        this._iPixelSize = akra.math.ceil(pSrc.getBPP() / 8);
                        this._nMipMaps = pSrc.numMipMaps;
                        this._pBuffer = new Uint8Array(pSrc.getData());
                        return this;
                    };
                    Img.prototype.flipY = function (pDest) {
                        return this;
                    };
                    Img.prototype.flipX = function (pDest) {
                        return this;
                    };
                    Img.prototype.loadFromMemory = function (pData, iWidth, iHeight, iDepth, eFormat) {
                        return false;
                    };
                    Img.prototype.loadRawData = function (pData, iWidth, iHeight, iDepth, eFormat, nFaces, nMipMaps) {
                        return false;
                    };
                    Img.prototype.loadDynamicImage = function (pData, iWidth, iHeight, iDepth, eFormat, bAutoDelete, iNumFaces, iNumMipMaps) {
                        if (typeof bAutoDelete === "undefined") { bAutoDelete = false; }
                        if (typeof iNumFaces === "undefined") { iNumFaces = 1; }
                        if (typeof iNumMipMaps === "undefined") { iNumMipMaps = 0; }
                        return null;
                    };
                    Img.prototype.load = function (sFilename) {
                        return false;
                    };
                    Img.prototype.convert = function (eFormat) {
                        return false;
                    }//Gets the physical width in bytes of each row of pixels.
                    ;
                    Img.prototype.getRawSpan = function () {
                        return 0;
                    };
                    Img.prototype.getBPP = function () {
                        return 0;
                    };
                    Img.prototype.getFlags = function () {
                        return 0;
                    };
                    Img.prototype.getData = function () {
                        return null;
                    };
                    Img.prototype.hasFlag = function (eFlag) {
                        return false;
                    };
                    Img.prototype.hasAlpha = function () {
                        return false;
                    };
                    Img.prototype.isCompressed = function () {
                        return false;
                    };
                    Img.prototype.isLumiance = function () {
                        return false;
                    };
                    Img.prototype.getColorAt = function (x, y, z) {
                        return null;
                    };
                    Img.prototype.setColorAt = function (pColor, x, y, z) {
                    };
                    Img.prototype.getPixels = function (nFace, iMipMap) {
                        return null;
                    };
                    Img.prototype.scale = function (pDest, eFilter) {
                        return null;
                    };
                    Img.prototype.resize = function (iWidth, iHeight, eFilter) {
                        return null;
                    };
                    Img.prototype.generatePerlinNoise = function (fScale, iOctaves, fFalloff) {
                    };
                    Img.prototype.randomChannelNoise = function (iChannel, iMinRange, iMaxRange) {
                    };
                    return Img;
                })(pool.ResourcePoolItem);
                resources.Img = Img;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var Component = (function (_super) {
                    __extends(Component, _super);
                    function Component() {
                        _super.apply(this, arguments);

                    }
                    return Component;
                })(pool.ResourcePoolItem);
                resources.Component = Component;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EHardwareBufferFlags) {
        EHardwareBufferFlags._map = [];
        EHardwareBufferFlags.STATIC = 1;
        EHardwareBufferFlags.DYNAMIC = 2;
        EHardwareBufferFlags.STREAM = 128;
        EHardwareBufferFlags.READABLE = 4;
        EHardwareBufferFlags.BACKUP_COPY = 8;
        /** indicate, that buffer does not use GPU memory or other specific memory. */
        EHardwareBufferFlags.SOFTWARE = 16;
        /** Indicate, tha buffer uses specific data aligment */
        EHardwareBufferFlags.ALIGNMENT = 32;
        /** Indicates that the application will be refilling the contents
        of the buffer regularly (not just updating, but generating the
        contents from scratch), and therefore does not mind if the contents
        of the buffer are lost somehow and need to be recreated. This
        allows and additional level of optimisation on the buffer.
        This option only really makes sense when combined with
        DYNAMIC and without READING.
        */
        EHardwareBufferFlags.DISCARDABLE = 64;
        EHardwareBufferFlags.STATIC_READABLE = EHardwareBufferFlags.STATIC | EHardwareBufferFlags.READABLE;
        EHardwareBufferFlags.DYNAMIC_DISCARDABLE = EHardwareBufferFlags.DYNAMIC | EHardwareBufferFlags.DISCARDABLE;
    })(akra.EHardwareBufferFlags || (akra.EHardwareBufferFlags = {}));
    var EHardwareBufferFlags = akra.EHardwareBufferFlags;
    (function (ELockFlags) {
        ELockFlags._map = [];
        ELockFlags.READ = 1;
        ELockFlags.WRITE = 2;
        ELockFlags.DISCARD = 4;
        ELockFlags.NO_OVERWRITE = 8;
        ELockFlags.NORMAL = ELockFlags.READ | ELockFlags.WRITE;
    })(akra.ELockFlags || (akra.ELockFlags = {}));
    var ELockFlags = akra.ELockFlags;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var HardwareBuffer = (function (_super) {
                    __extends(HardwareBuffer, _super);
                    function HardwareBuffer() {
                                        _super.call(this);
                        this._iFlags = 0;
                        this._isLocked = false;
                        this._pBackupCopy = null;
                        this._pBackupUpdated = false;
                        this._bIgnoreHardwareUpdate = false;
                        this.byteLength = 0;
                        this.length = 0;
                    }
                    /**@inline*/                     HardwareBuffer.prototype.isValid = function () {
                        return false;
                    }/**@inline*/ ;
                    HardwareBuffer.prototype.isDynamic = function () {
                        return (((this._iFlags) & (akra.EHardwareBufferFlags.DYNAMIC)) != 0);
                    }/**@inline*/ ;
                    HardwareBuffer.prototype.isStatic = function () {
                        return (((this._iFlags) & (akra.EHardwareBufferFlags.STATIC)) != 0);
                    }/**@inline*/ ;
                    HardwareBuffer.prototype.isStream = function () {
                        return (((this._iFlags) & (akra.EHardwareBufferFlags.STREAM)) != 0);
                    }/**@inline*/ ;
                    HardwareBuffer.prototype.isReadable = function () {
                        return (((this._iFlags) & (akra.EHardwareBufferFlags.READABLE)) != 0);
                    }/**@inline*/ ;
                    HardwareBuffer.prototype.isBackupPresent = function () {
                        return this._pBackupCopy != null;
                    }/**@inline*/ ;
                    HardwareBuffer.prototype.isSoftware = function () {
                        return (((this._iFlags) & (akra.EHardwareBufferFlags.SOFTWARE)) != 0);
                    }/**@inline*/ ;
                    HardwareBuffer.prototype.isAligned = function () {
                        return (((this._iFlags) & (akra.EHardwareBufferFlags.ALIGNMENT)) != 0);
                    }/**@inline*/ ;
                    HardwareBuffer.prototype.isLocked = function () {
                        return this._isLocked;
                    };
                    HardwareBuffer.prototype.clone = function (pSrc) {
                        return false;
                    }/**@inline*/ ;
                    HardwareBuffer.prototype.getFlags = function () {
                        return this._iFlags;
                    };
                    HardwareBuffer.prototype.readData = function (iOffset, iSize, ppDest) {
                        return false;
                    };
                    HardwareBuffer.prototype.writeData = function (pData, iOffset, iSize, bDiscardWholeBuffer) {
                        if (typeof bDiscardWholeBuffer === "undefined") { bDiscardWholeBuffer = false; }
                        return false;
                    };
                    HardwareBuffer.prototype.copyData = function (pSrcBuffer, iSrcOffset, iDstOffset, iSize, bDiscardWholeBuffer) {
                        if (typeof bDiscardWholeBuffer === "undefined") { bDiscardWholeBuffer = false; }
                        var pData = pSrcBuffer.lock(iSrcOffset, iSize);
                        this.writeData(pData, iDstOffset, iSize, bDiscardWholeBuffer);
                        pSrcBuffer.unlock();
                        return true;
                    };
                    HardwareBuffer.prototype.create = function (iFlags) {
                        iFlags |= akra.EHardwareBufferFlags.STATIC;
                        if((((iFlags) & (akra.EHardwareBufferFlags.DYNAMIC)) != 0)) {
                            ((iFlags) &= ~(akra.EHardwareBufferFlags.STATIC));
                            if((((iFlags) & (akra.EHardwareBufferFlags.BACKUP_COPY)) != 0)) {
                                ((iFlags) &= ~(akra.EHardwareBufferFlags.READABLE));
                            }
                        }
                        this._iFlags = iFlags;
                        this.notifyCreated();
                        this.notifyRestored();
                        return true;
                    };
                    HardwareBuffer.prototype.destroy = function () {
                        this._iFlags = 0;
                        this.notifyDestroyed();
                        this.notifyUnloaded();
                    };
                    HardwareBuffer.prototype.resize = function (iSize) {
                        return false;
                    };
                    HardwareBuffer.prototype.lock = function (iOffset, iSize, iLockFlags) {
                        if (typeof iLockFlags === "undefined") { iLockFlags = akra.EHardwareBufferFlags.READABLE; }
                        akra.logger.setSourceLocation("core/pool/resources/HardwareBuffer.ts", 128);
                        akra.logger.assert(!this.isLocked(), "Cannot lock this buffer, it is already locked!");
                        ; ;
                        if(arguments.length == 1) {
                            iLockFlags = arguments[0];
                            iOffset = 0;
                            iSize = this.byteLength;
                        }
                        var pResult = null;
                        if((iOffset + iSize) > this.byteLength) {
                            akra.logger.setSourceLocation("core/pool/resources/HardwareBuffer.ts", 139);
                            akra.logger.error("Lock request out of bounds.", "HardwareBuffer::lock");
                            ; ;
                        } else {
                            if(this.isBackupPresent()) {
                                if(!(((iLockFlags) & (akra.ELockFlags.WRITE)) != 0)) {
                                    // we have to assume a read / write lock so we use the shadow buffer
                                    // and tag for sync on unlock()
                                    this._pBackupUpdated = true;
                                }
                                pResult = this._pBackupCopy.lock(iOffset, iSize, iLockFlags);
                            } else {
                                // Lock the real buffer if there is no shadow buffer
                                pResult = this.lockImpl(iOffset, iSize, iLockFlags);
                                this._isLocked = true;
                            }
                        }
                        this._iLockStart = iOffset;
                        this._iLockSize = iSize;
                        return pResult;
                    };
                    HardwareBuffer.prototype.unlock = function () {
                        akra.logger.setSourceLocation("core/pool/resources/HardwareBuffer.ts", 163);
                        akra.logger.assert(this.isLocked(), "Cannot unlock this buffer, it is not locked!");
                        ; ;
                        // If we used the shadow buffer this time...
                        if(this._pBackupCopy && this._pBackupCopy.isLocked()) {
                            this._pBackupCopy.unlock();
                            // Potentially update the 'real' buffer from the shadow buffer
                            this.restoreFromBackup();
                        } else {
                            // Otherwise, unlock the real one
                            this.unlockImpl();
                            this._isLocked = false;
                        }
                    };
                    HardwareBuffer.prototype.restoreFromBackup = function () {
                        if(this._pBackupCopy && this._pBackupUpdated && !this._bIgnoreHardwareUpdate) {
                            // Do this manually to avoid locking problems
                            var pBackupData = this._pBackupCopy.lockImpl(this._iLockStart, this._iLockSize, akra.ELockFlags.READ);
                            // Lock with discard if the whole buffer was locked, otherwise normal
                            var iLockFlags;
                            if(this._iLockStart == 0 && this._iLockSize == this.byteLength) {
                                iLockFlags = akra.ELockFlags.DISCARD;
                            } else {
                                iLockFlags = akra.ELockFlags.NORMAL;
                            }
                            var pRealData = this.lockImpl(this._iLockStart, this._iLockSize, iLockFlags);
                            // Copy backup to real
                            this.copyBackupToRealImpl(pRealData, pBackupData, iLockFlags);
                            this.unlockImpl();
                            this._pBackupCopy.unlockImpl();
                            this._pBackupUpdated = false;
                            return true;
                        }
                        return false;
                    };
                    HardwareBuffer.prototype.createResource = function () {
                        // innitialize the resource (called once)
                        akra.logger.setSourceLocation("core/pool/resources/HardwareBuffer.ts", 211);
                        akra.logger.assert(!this.isResourceCreated(), "The resource has already been created.");
                        ; ;
                        // signal that the resource is now created,
                        // but has not been enabled
                        //this.notifyCreated();
                        this.notifyDisabled();
                        return true;
                    };
                    HardwareBuffer.prototype.destroyResource = function () {
                        // destroy the resource
                        //
                        // we permit redundant calls to destroy, so there are no asserts here
                        //
                        if(this.isResourceCreated()) {
                            // disable the resource
                            this.disableResource();
                            this.destroy();
                            return true;
                        }
                        return false;
                    };
                    HardwareBuffer.prototype.restoreResource = function () {
                        akra.logger.setSourceLocation("core/pool/resources/HardwareBuffer.ts", 237);
                        akra.logger.assert(this.isResourceCreated(), "The resource has not been created.");
                        ; ;
                        this.notifyRestored();
                        return true;
                    };
                    HardwareBuffer.prototype.disableResource = function () {
                        akra.logger.setSourceLocation("core/pool/resources/HardwareBuffer.ts", 244);
                        akra.logger.assert(this.isResourceCreated(), "The resource has not been created.");
                        ; ;
                        this.notifyDisabled();
                        return true;
                    };
                    HardwareBuffer.prototype.lockImpl = function (iOffset, iSize, iLockFlags) {
                        return null;
                    };
                    HardwareBuffer.prototype.unlockImpl = function () {
                    };
                    HardwareBuffer.prototype.copyBackupToRealImpl = function (pRealData, pBackupData, iLockFlags) {
                    };
                    return HardwareBuffer;
                })(pool.ResourcePoolItem);
                resources.HardwareBuffer = HardwareBuffer;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (geometry) {
        var Box = (function () {
            function Box(l, t, ff, r, b, bb) {
                if (typeof l === "undefined") { l = 0; }
                if (typeof t === "undefined") { t = 0; }
                if (typeof ff === "undefined") { ff = 0; }
                if (typeof r === "undefined") { r = 1; }
                if (typeof b === "undefined") { b = 1; }
                if (typeof bb === "undefined") { bb = 1; }
                switch(arguments.length) {
                    case 1: {
                        this.left = arguments[0].left;
                        this.top = arguments[0].top;
                        this.front = arguments[0].front;
                        this.right = arguments[0].right;
                        this.bottom = arguments[0].bottom;
                        this.back = arguments[0].back;
                        break;

                    }
                    case 3:
                    case 6: {
                        this.left = l;
                        this.top = t;
                        this.front = ff;
                        this.right = r;
                        this.bottom = b;
                        this.back = bb;
                        break;

                    }
                    case 4: {
                        this.left = l;
                        this.top = t;
                        this.right = ff;
                        this.bottom = r;
                        this.back = 1;
                        this.front = 0;
                        break;

                    }
                    case 5: {
                        akra.logger.setSourceLocation("geometry/Box.ts", 62);
                        akra.logger.error("invalid number of arguments");
                        ; ;

                    }
                }
                akra.logger.setSourceLocation("geometry/Box.ts", 65);
                akra.logger.assert(this.right >= this.left && this.bottom >= this.top && this.back >= this.front);
                ; ;
            }
            Object.defineProperty(Box.prototype, "width", {
                get: /**@inline*/ function () {
                    return this.right - this.left;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Box.prototype, "height", {
                get: function () {
                    return this.bottom - this.top;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Box.prototype, "depth", {
                get: function () {
                    return this.back - this.front;
                },
                enumerable: true,
                configurable: true
            });
            Box.prototype.contains = function (pDest) {
                return (pDest.left >= this.left && pDest.top >= this.top && pDest.front >= this.front && pDest.right <= this.right && pDest.bottom <= this.bottom && pDest.back <= this.back);
            };
            return Box;
        })();
        geometry.Box = Box;        
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
// see: http://www.khronos.org/registry/webgl/specs/latest/
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
/* Compressed Texture Formats */
; ;
/* Compressed Texture Formats */
; ;
/* Compressed Texture Formats */
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
var akra;
(function (akra) {
    (function (math) {
        var Vec2 = (function () {
            function Vec2(fValue1, fValue2) {
                this.x = 0.0;
                this.y = 0.0;
                var nArgumentsLength = arguments.length;
                var v2fVec = this;
                // if (<any>this === window || <any>this === akra || <any>this === akra.math) {
                //     v2fVec = Vec2.stack[Vec2.stackPosition ++];
                //     if(Vec2.stackPosition == Vec2.stackSize){
                //         Vec2.stackPosition = 0;
                //     }
                // }
                switch(nArgumentsLength) {
                    case 1: {
                        v2fVec.set(arguments[0]);
                        break;

                    }
                    case 2: {
                        v2fVec.set(arguments[0], arguments[1]);
                        break;

                    }
                    default: {
                        v2fVec.x = v2fVec.y = 0.0;
                        break;

                    }
                }
            }
            Object.defineProperty(Vec2.prototype, "xx", {
                get: function () {
                    return math.vec2(this.x, this.x);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec2.prototype, "xy", {
                get: function () {
                    return math.vec2(this.x, this.y);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec2.prototype, "yx", {
                get: function () {
                    return math.vec2(this.y, this.x);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec2.prototype, "yy", {
                get: function () {
                    return math.vec2(this.y, this.y);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Vec2.prototype.set = function (fValue1, fValue2) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 0: {
                        this.x = this.y = 0.0;
                        break;

                    }
                    case 1: {
                        if(akra.isFloat(arguments[0])) {
                            this.x = this.y = arguments[0];
                        } else {
                            if(arguments[0] instanceof Vec2) {
                                var v2fVec = arguments[0];
                                this.x = v2fVec.x;
                                this.y = v2fVec.y;
                            } else {
                                var pArray = arguments[0];
                                this.x = pArray[0];
                                this.y = pArray[1];
                            }
                        }
                        break;

                    }
                    case 2: {
                        this.x = arguments[0];
                        this.y = arguments[1];
                        break;

                    }
                }
                ; ;
                return this;
            };
            Vec2.prototype.clear = /**@inline*/ function () {
                this.x = this.y = 0.0;
                return this;
            };
            Vec2.prototype.add = function (v2fVec, v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                v2fDestination.x = this.x + v2fVec.x;
                v2fDestination.y = this.y + v2fVec.y;
                return v2fDestination;
            };
            Vec2.prototype.subtract = function (v2fVec, v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                v2fDestination.x = this.x - v2fVec.x;
                v2fDestination.y = this.y - v2fVec.y;
                return v2fDestination;
            };
            Vec2.prototype.dot = /**@inline*/ function (v2fVec) {
                return this.x * v2fVec.x + this.y * v2fVec.y;
            };
            Vec2.prototype.isEqual = function (v2fVec, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if(fEps === 0.0) {
                    if(this.x != v2fVec.x || this.y != v2fVec.y) {
                        return false;
                    }
                } else {
                    if(math.abs(this.x - v2fVec.x) > fEps || math.abs(this.y - v2fVec.y) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec2.prototype.isClear = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if(fEps === 0.0) {
                    if(this.x != 0.0 || this.y != 0.0) {
                        return false;
                    }
                } else {
                    if(math.abs(this.x) > fEps || math.abs(this.y) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec2.prototype.negate = function (v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                v2fDestination.x = -this.x;
                v2fDestination.y = -this.y;
                return v2fDestination;
            };
            Vec2.prototype.scale = function (fScale, v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                v2fDestination.x = this.x * fScale;
                v2fDestination.y = this.y * fScale;
                return v2fDestination;
            };
            Vec2.prototype.normalize = function (v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                var x = this.x, y = this.y;
                var fLength = math.sqrt(x * x + y * y);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                }
                v2fDestination.x = x;
                v2fDestination.y = y;
                return v2fDestination;
            };
            Vec2.prototype.length = /**@inline*/ function () {
                var x = this.x, y = this.y;
                return math.sqrt(x * x + y * y);
            };
            Vec2.prototype.lengthSquare = /**@inline*/ function () {
                var x = this.x, y = this.y;
                return x * x + y * y;
            };
            Vec2.prototype.direction = function (v2fVec, v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                var x = v2fVec.x - this.x;
                var y = v2fVec.y - this.y;
                var fLength = math.sqrt(x * x + y * y);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                }
                v2fDestination.x = x;
                v2fDestination.y = y;
                return v2fDestination;
            };
            Vec2.prototype.mix = function (v2fVec, fA, v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                fA = math.clamp(fA, 0.0, 1.0);
                var fA1 = 1.0 - fA;
                var fA2 = fA;
                v2fDestination.x = fA1 * this.x + fA2 * v2fVec.x;
                v2fDestination.y = fA1 * this.y + fA2 * v2fVec.y;
                return v2fDestination;
            };
            Vec2.prototype.toString = /**@inline*/ function () {
                return "[x: " + this.x + ", y: " + this.y + "]";
            };
            Object.defineProperty(Vec2, "stackCeil", {
                get: function () {
                    Vec2.stackPosition = Vec2.stackPosition === Vec2.stackSize - 1 ? 0 : Vec2.stackPosition;
                    return Vec2.stack[Vec2.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Vec2.stackSize = 100;
            Vec2.stackPosition = 0;
            Vec2.stack = (function () {
                var pStack = new Array(Vec2.stackSize);
                for(var i = 0; i < Vec2.stackSize; i++) {
                    pStack[i] = new Vec2();
                }
                return pStack;
            })();
            return Vec2;
        })();
        math.Vec2 = Vec2;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
; ;
; ;
var akra;
(function (akra) {
    (function (math) {
        var Vec3 = (function () {
            function Vec3(fValue1, fValue2, fValue3) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        this.set(arguments[0]);
                        break;

                    }
                    case 2: {
                        this.set(arguments[0], arguments[1]);
                        break;

                    }
                    case 3: {
                        this.set(arguments[0], arguments[1], arguments[2]);
                        break;

                    }
                    default: {
                        this.x = this.y = this.z = 0.0;
                        break;

                    }
                }
            }
            Object.defineProperty(Vec3.prototype, "xx", {
                get: function () {
                    return math.vec2(this.x, this.x);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xy", {
                get: function () {
                    return math.vec2(this.x, this.y);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xz", {
                get: function () {
                    return math.vec2(this.x, this.z);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yx", {
                get: function () {
                    return math.vec2(this.y, this.x);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yy", {
                get: function () {
                    return math.vec2(this.y, this.y);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yz", {
                get: function () {
                    return math.vec2(this.y, this.z);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zx", {
                get: function () {
                    return math.vec2(this.z, this.x);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zy", {
                get: function () {
                    return math.vec2(this.z, this.y);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zz", {
                get: function () {
                    return math.vec2(this.z, this.z);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xxx", {
                get: function () {
                    return math.vec3(this.x, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xxy", {
                get: function () {
                    return math.vec3(this.x, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xxz", {
                get: function () {
                    return math.vec3(this.x, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xyx", {
                get: function () {
                    return math.vec3(this.x, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xyy", {
                get: function () {
                    return math.vec3(this.x, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xyz", {
                get: function () {
                    return math.vec3(this.x, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xzx", {
                get: function () {
                    return math.vec3(this.x, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xzy", {
                get: function () {
                    return math.vec3(this.x, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xzz", {
                get: function () {
                    return math.vec3(this.x, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yxx", {
                get: function () {
                    return math.vec3(this.y, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yxy", {
                get: function () {
                    return math.vec3(this.y, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yxz", {
                get: function () {
                    return math.vec3(this.y, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yyx", {
                get: function () {
                    return math.vec3(this.y, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yyy", {
                get: function () {
                    return math.vec3(this.y, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yyz", {
                get: function () {
                    return math.vec3(this.y, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yzx", {
                get: function () {
                    return math.vec3(this.y, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yzy", {
                get: function () {
                    return math.vec3(this.y, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yzz", {
                get: function () {
                    return math.vec3(this.y, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zxx", {
                get: function () {
                    return math.vec3(this.z, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zxy", {
                get: function () {
                    return math.vec3(this.z, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zxz", {
                get: function () {
                    return math.vec3(this.z, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zyx", {
                get: function () {
                    return math.vec3(this.z, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zyy", {
                get: function () {
                    return math.vec3(this.z, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zyz", {
                get: function () {
                    return math.vec3(this.z, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zzx", {
                get: function () {
                    return math.vec3(this.z, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zzy", {
                get: function () {
                    return math.vec3(this.z, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zzz", {
                get: function () {
                    return math.vec3(this.z, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Vec3.prototype.set = function (fValue1, fValue2, fValue3) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 0: {
                        this.x = this.y = this.z = 0.0;
                        break;

                    }
                    case 1: {
                        if(akra.isFloat(arguments[0])) {
                            this.x = this.y = this.z = arguments[0];
                        } else {
                            if(arguments[0] instanceof Vec3) {
                                var v3fVec = arguments[0];
                                this.x = v3fVec.x;
                                this.y = v3fVec.y;
                                this.z = v3fVec.z;
                            } else {
                                var pArray = arguments[0];
                                this.x = pArray[0];
                                this.y = pArray[1];
                                this.z = pArray[2];
                            }
                        }
                        break;

                    }
                    case 2: {
                        if(akra.isFloat(arguments[0])) {
                            var fValue = arguments[0];
                            var v2fVec = arguments[1];
                            this.x = fValue;
                            this.y = v2fVec.x;
                            this.z = v2fVec.y;
                        } else {
                            var v2fVec = arguments[0];
                            var fValue = arguments[1];
                            this.x = v2fVec.x;
                            this.y = v2fVec.y;
                            this.z = fValue;
                        }
                        break;

                    }
                    case 3: {
                        this.x = arguments[0];
                        this.y = arguments[1];
                        this.z = arguments[2];
                        break;

                    }
                }
                return this;
            };
            Vec3.prototype.clear = /**@inline*/ function () {
                this.x = this.y = this.z = 0.0;
                return this;
            };
            Vec3.prototype.add = function (v3fVec, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                v3fDestination.x = this.x + v3fVec.x;
                v3fDestination.y = this.y + v3fVec.y;
                v3fDestination.z = this.z + v3fVec.z;
                return v3fDestination;
            };
            Vec3.prototype.subtract = function (v3fVec, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                v3fDestination.x = this.x - v3fVec.x;
                v3fDestination.y = this.y - v3fVec.y;
                v3fDestination.z = this.z - v3fVec.z;
                return v3fDestination;
            };
            Vec3.prototype.dot = /**@inline*/ function (v3fVec) {
                return this.x * v3fVec.x + this.y * v3fVec.y + this.z * v3fVec.z;
            };
            Vec3.prototype.cross = function (v3fVec, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                var x1 = this.x, y1 = this.y, z1 = this.z;
                var x2 = v3fVec.x, y2 = v3fVec.y, z2 = v3fVec.z;
                v3fDestination.x = y1 * z2 - z1 * y2;
                v3fDestination.y = z1 * x2 - x1 * z2;
                v3fDestination.z = x1 * y2 - y1 * x2;
                return v3fDestination;
            };
            Vec3.prototype.isEqual = function (v3fVec, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if(fEps === 0.0) {
                    if(this.x != v3fVec.x || this.y != v3fVec.y || this.z != v3fVec.z) {
                        return false;
                    }
                } else {
                    if(math.abs(this.x - v3fVec.x) > fEps || math.abs(this.y - v3fVec.y) > fEps || math.abs(this.z - v3fVec.z) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec3.prototype.isClear = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if(fEps === 0.0) {
                    if(this.x != 0.0 || this.y != 0.0 || this.z != 0.0) {
                        return false;
                    }
                } else {
                    if(math.abs(this.x) > fEps || math.abs(this.y) > fEps || math.abs(this.z) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec3.prototype.negate = function (v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                v3fDestination.x = -this.x;
                v3fDestination.y = -this.y;
                v3fDestination.z = -this.z;
                return v3fDestination;
            };
            Vec3.prototype.scale = function (fScale, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                if(akra.isNumber(arguments[0])) {
                    var fScale = arguments[0];
                    v3fDestination.x = this.x * fScale;
                    v3fDestination.y = this.y * fScale;
                    v3fDestination.z = this.z * fScale;
                } else {
                    var v3fScale = arguments[0];
                    v3fDestination.x = this.x * v3fScale.x;
                    v3fDestination.y = this.y * v3fScale.y;
                    v3fDestination.z = this.z * v3fScale.z;
                }
                return v3fDestination;
            };
            Vec3.prototype.normalize = function (v3fDestination) {
                if(!v3fDestination) {
                    v3fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z;
                var fLength = math.sqrt(x * x + y * y + z * z);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                    z *= fInvLength;
                }
                v3fDestination.x = x;
                v3fDestination.y = y;
                v3fDestination.z = z;
                return v3fDestination;
            };
            Vec3.prototype.length = /**@inline*/ function () {
                var x = this.x, y = this.y, z = this.z;
                return math.sqrt(x * x + y * y + z * z);
            };
            Vec3.prototype.lengthSquare = /**@inline*/ function () {
                var x = this.x, y = this.y, z = this.z;
                return x * x + y * y + z * z;
            };
            Vec3.prototype.direction = function (v3fVec, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                var x = v3fVec.x - this.x;
                var y = v3fVec.y - this.y;
                var z = v3fVec.z - this.z;
                var fLength = math.sqrt(x * x + y * y + z * z);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                    z *= fInvLength;
                }
                v3fDestination.x = x;
                v3fDestination.y = y;
                v3fDestination.z = z;
                return v3fDestination;
            };
            Vec3.prototype.mix = function (v3fVec, fA, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                fA = math.clamp(fA, 0.0, 1.0);
                var fA1 = 1.0 - fA;
                var fA2 = fA;
                v3fDestination.x = fA1 * this.x + fA2 * v3fVec.x;
                v3fDestination.y = fA1 * this.y + fA2 * v3fVec.y;
                v3fDestination.z = fA1 * this.z + fA2 * v3fVec.z;
                return v3fDestination;
            };
            Vec3.prototype.toString = /**@inline*/ function () {
                return "[x: " + this.x + " ,y: " + this.y + ", z: " + this.z + "]";
            };
            Vec3.prototype.toTranslationMatrix = function (m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new math.Mat4(1.0);
                } else {
                    m4fDestination.set(1.0);
                }
                var pData = m4fDestination.data;
                pData[12] = this.x;
                pData[13] = this.y;
                pData[14] = this.z;
                return m4fDestination;
            };
            Vec3.prototype.vec3TransformCoord = function (m4fTransformation, v3fDestination) {
                if(!v3fDestination) {
                    v3fDestination = this;
                }
                var pData = m4fTransformation.data;
                var x = this.x;
                var y = this.y;
                var z = this.z;
                var w;
                x = pData[0] * x + pData[4] * y + pData[8] * z + pData[12];
                y = pData[1] * x + pData[5] * y + pData[9] * z + pData[13];
                z = pData[2] * x + pData[6] * y + pData[10] * z + pData[14];
                w = pData[2] * x + pData[7] * y + pData[11] * z + pData[15];
                var fInvW = 1.0 / w;
                v3fDestination.x = x * fInvW;
                v3fDestination.y = y * fInvW;
                v3fDestination.z = z * fInvW;
                return v3fDestination;
            };
            Object.defineProperty(Vec3, "stackCeil", {
                get: function () {
                    Vec3.stackPosition = Vec3.stackPosition === Vec3.stackSize - 1 ? 0 : Vec3.stackPosition;
                    return Vec3.stack[Vec3.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Vec3.stackSize = 100;
            Vec3.stackPosition = 0;
            Vec3.stack = (function () {
                var pStack = new Array(Vec3.stackSize);
                for(var i = 0; i < Vec3.stackSize; i++) {
                    pStack[i] = new Vec3();
                }
                return pStack;
            })();
            return Vec3;
        })();
        math.Vec3 = Vec3;        
        /*get xy(): Vec2  { return new Vec2(this.x, this.y); }
        get xz(): Vec2  { return new Vec2(this.x, this.z); }
        get yx(): Vec2  { return new Vec2(this.y, this.x); }
        get yz(): Vec2  { return new Vec2(this.y, this.z); }
        get zx(): Vec2  { return new Vec2(this.z, this.x); }
        get zy(): Vec2  { return new Vec2(this.z, this.y); }
        get xyz(): Vec3 { return new Vec3(this.x, this.y, this.z); }*/
            })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
        var Vec4 = (function () {
            function Vec4(fValue1, fValue2, fValue3, fValue4) {
                var nArgumentsLength = arguments.length;
                var v4fVec = this;
                // if (<any>this === window || <any>this === akra || <any>this === akra.math) {
                //     v4fVec = Vec4.stack[Vec4.stackPosition ++];
                //     if(Vec4.stackPosition == Vec4.stackSize){
                //         Vec4.stackPosition = 0;
                //     }
                // }
                switch(nArgumentsLength) {
                    case 1: {
                        v4fVec.set(arguments[0]);
                        break;

                    }
                    case 2: {
                        v4fVec.set(arguments[0], arguments[1]);
                        break;

                    }
                    case 3: {
                        v4fVec.set(arguments[0], arguments[1], arguments[2]);
                        break;

                    }
                    case 4: {
                        v4fVec.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;

                    }
                    default: {
                        v4fVec.x = v4fVec.y = v4fVec.z = v4fVec.w = 0.0;
                        break;

                    }
                }
            }
            Object.defineProperty(Vec4.prototype, "xx", {
                get: function () {
                    return math.vec2(this.x, this.x);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xy", {
                get: function () {
                    return math.vec2(this.x, this.y);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xz", {
                get: function () {
                    return math.vec2(this.x, this.z);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xw", {
                get: function () {
                    return math.vec2(this.x, this.w);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yx", {
                get: function () {
                    return math.vec2(this.y, this.x);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yy", {
                get: function () {
                    return math.vec2(this.y, this.y);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yz", {
                get: function () {
                    return math.vec2(this.y, this.z);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yw", {
                get: function () {
                    return math.vec2(this.y, this.w);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zx", {
                get: function () {
                    return math.vec2(this.z, this.x);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zy", {
                get: function () {
                    return math.vec2(this.z, this.y);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zz", {
                get: function () {
                    return math.vec2(this.z, this.z);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zw", {
                get: function () {
                    return math.vec2(this.z, this.w);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wx", {
                get: function () {
                    return math.vec2(this.w, this.x);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wy", {
                get: function () {
                    return math.vec2(this.w, this.y);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wz", {
                get: function () {
                    return math.vec2(this.w, this.z);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ww", {
                get: function () {
                    return math.vec2(this.w, this.w);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxx", {
                get: function () {
                    return math.vec3(this.x, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxy", {
                get: function () {
                    return math.vec3(this.x, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxz", {
                get: function () {
                    return math.vec3(this.x, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxw", {
                get: function () {
                    return math.vec3(this.x, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyx", {
                get: function () {
                    return math.vec3(this.x, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyy", {
                get: function () {
                    return math.vec3(this.x, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyz", {
                get: function () {
                    return math.vec3(this.x, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyw", {
                get: function () {
                    return math.vec3(this.x, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzx", {
                get: function () {
                    return math.vec3(this.x, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzy", {
                get: function () {
                    return math.vec3(this.x, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzz", {
                get: function () {
                    return math.vec3(this.x, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzw", {
                get: function () {
                    return math.vec3(this.x, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwx", {
                get: function () {
                    return math.vec3(this.x, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwy", {
                get: function () {
                    return math.vec3(this.x, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwz", {
                get: function () {
                    return math.vec3(this.x, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xww", {
                get: function () {
                    return math.vec3(this.x, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxx", {
                get: function () {
                    return math.vec3(this.y, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxy", {
                get: function () {
                    return math.vec3(this.y, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxz", {
                get: function () {
                    return math.vec3(this.y, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxw", {
                get: function () {
                    return math.vec3(this.y, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyx", {
                get: function () {
                    return math.vec3(this.y, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyy", {
                get: function () {
                    return math.vec3(this.y, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyz", {
                get: function () {
                    return math.vec3(this.y, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyw", {
                get: function () {
                    return math.vec3(this.y, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzx", {
                get: function () {
                    return math.vec3(this.y, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzy", {
                get: function () {
                    return math.vec3(this.y, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzz", {
                get: function () {
                    return math.vec3(this.y, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzw", {
                get: function () {
                    return math.vec3(this.y, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywx", {
                get: function () {
                    return math.vec3(this.y, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywy", {
                get: function () {
                    return math.vec3(this.y, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywz", {
                get: function () {
                    return math.vec3(this.y, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yww", {
                get: function () {
                    return math.vec3(this.y, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxx", {
                get: function () {
                    return math.vec3(this.z, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxy", {
                get: function () {
                    return math.vec3(this.z, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxz", {
                get: function () {
                    return math.vec3(this.z, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxw", {
                get: function () {
                    return math.vec3(this.z, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyx", {
                get: function () {
                    return math.vec3(this.z, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyy", {
                get: function () {
                    return math.vec3(this.z, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyz", {
                get: function () {
                    return math.vec3(this.z, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyw", {
                get: function () {
                    return math.vec3(this.z, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzx", {
                get: function () {
                    return math.vec3(this.z, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzy", {
                get: function () {
                    return math.vec3(this.z, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzz", {
                get: function () {
                    return math.vec3(this.z, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzw", {
                get: function () {
                    return math.vec3(this.z, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwx", {
                get: function () {
                    return math.vec3(this.z, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwy", {
                get: function () {
                    return math.vec3(this.z, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwz", {
                get: function () {
                    return math.vec3(this.z, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zww", {
                get: function () {
                    return math.vec3(this.z, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxx", {
                get: function () {
                    return math.vec3(this.w, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxy", {
                get: function () {
                    return math.vec3(this.w, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxz", {
                get: function () {
                    return math.vec3(this.w, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxw", {
                get: function () {
                    return math.vec3(this.w, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyx", {
                get: function () {
                    return math.vec3(this.w, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyy", {
                get: function () {
                    return math.vec3(this.w, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyz", {
                get: function () {
                    return math.vec3(this.w, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyw", {
                get: function () {
                    return math.vec3(this.w, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzx", {
                get: function () {
                    return math.vec3(this.w, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzy", {
                get: function () {
                    return math.vec3(this.w, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzz", {
                get: function () {
                    return math.vec3(this.w, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzw", {
                get: function () {
                    return math.vec3(this.w, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwx", {
                get: function () {
                    return math.vec3(this.w, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwy", {
                get: function () {
                    return math.vec3(this.w, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwz", {
                get: function () {
                    return math.vec3(this.w, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "www", {
                get: function () {
                    return math.vec3(this.w, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxx", {
                get: function () {
                    return math.vec4(this.x, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxy", {
                get: function () {
                    return math.vec4(this.x, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxz", {
                get: function () {
                    return math.vec4(this.x, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxw", {
                get: function () {
                    return math.vec4(this.x, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyx", {
                get: function () {
                    return math.vec4(this.x, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyy", {
                get: function () {
                    return math.vec4(this.x, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyz", {
                get: function () {
                    return math.vec4(this.x, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyw", {
                get: function () {
                    return math.vec4(this.x, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzx", {
                get: function () {
                    return math.vec4(this.x, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzy", {
                get: function () {
                    return math.vec4(this.x, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzz", {
                get: function () {
                    return math.vec4(this.x, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzw", {
                get: function () {
                    return math.vec4(this.x, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxwx", {
                get: function () {
                    return math.vec4(this.x, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxwy", {
                get: function () {
                    return math.vec4(this.x, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxwz", {
                get: function () {
                    return math.vec4(this.x, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxww", {
                get: function () {
                    return math.vec4(this.x, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxx", {
                get: function () {
                    return math.vec4(this.x, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxy", {
                get: function () {
                    return math.vec4(this.x, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxz", {
                get: function () {
                    return math.vec4(this.x, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxw", {
                get: function () {
                    return math.vec4(this.x, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyx", {
                get: function () {
                    return math.vec4(this.x, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyy", {
                get: function () {
                    return math.vec4(this.x, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyz", {
                get: function () {
                    return math.vec4(this.x, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyw", {
                get: function () {
                    return math.vec4(this.x, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzx", {
                get: function () {
                    return math.vec4(this.x, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzy", {
                get: function () {
                    return math.vec4(this.x, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzz", {
                get: function () {
                    return math.vec4(this.x, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzw", {
                get: function () {
                    return math.vec4(this.x, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xywx", {
                get: function () {
                    return math.vec4(this.x, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xywy", {
                get: function () {
                    return math.vec4(this.x, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xywz", {
                get: function () {
                    return math.vec4(this.x, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyww", {
                get: function () {
                    return math.vec4(this.x, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxx", {
                get: function () {
                    return math.vec4(this.x, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxy", {
                get: function () {
                    return math.vec4(this.x, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxz", {
                get: function () {
                    return math.vec4(this.x, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxw", {
                get: function () {
                    return math.vec4(this.x, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyx", {
                get: function () {
                    return math.vec4(this.x, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyy", {
                get: function () {
                    return math.vec4(this.x, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyz", {
                get: function () {
                    return math.vec4(this.x, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyw", {
                get: function () {
                    return math.vec4(this.x, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzx", {
                get: function () {
                    return math.vec4(this.x, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzy", {
                get: function () {
                    return math.vec4(this.x, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzz", {
                get: function () {
                    return math.vec4(this.x, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzw", {
                get: function () {
                    return math.vec4(this.x, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzwx", {
                get: function () {
                    return math.vec4(this.x, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzwy", {
                get: function () {
                    return math.vec4(this.x, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzwz", {
                get: function () {
                    return math.vec4(this.x, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzww", {
                get: function () {
                    return math.vec4(this.x, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxx", {
                get: function () {
                    return math.vec4(this.x, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxy", {
                get: function () {
                    return math.vec4(this.x, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxz", {
                get: function () {
                    return math.vec4(this.x, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxw", {
                get: function () {
                    return math.vec4(this.x, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyx", {
                get: function () {
                    return math.vec4(this.x, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyy", {
                get: function () {
                    return math.vec4(this.x, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyz", {
                get: function () {
                    return math.vec4(this.x, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyw", {
                get: function () {
                    return math.vec4(this.x, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzx", {
                get: function () {
                    return math.vec4(this.x, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzy", {
                get: function () {
                    return math.vec4(this.x, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzz", {
                get: function () {
                    return math.vec4(this.x, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzw", {
                get: function () {
                    return math.vec4(this.x, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwwx", {
                get: function () {
                    return math.vec4(this.x, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwwy", {
                get: function () {
                    return math.vec4(this.x, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwwz", {
                get: function () {
                    return math.vec4(this.x, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwww", {
                get: function () {
                    return math.vec4(this.x, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxx", {
                get: function () {
                    return math.vec4(this.y, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxy", {
                get: function () {
                    return math.vec4(this.y, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxz", {
                get: function () {
                    return math.vec4(this.y, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxw", {
                get: function () {
                    return math.vec4(this.y, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyx", {
                get: function () {
                    return math.vec4(this.y, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyy", {
                get: function () {
                    return math.vec4(this.y, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyz", {
                get: function () {
                    return math.vec4(this.y, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyw", {
                get: function () {
                    return math.vec4(this.y, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzx", {
                get: function () {
                    return math.vec4(this.y, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzy", {
                get: function () {
                    return math.vec4(this.y, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzz", {
                get: function () {
                    return math.vec4(this.y, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzw", {
                get: function () {
                    return math.vec4(this.y, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxwx", {
                get: function () {
                    return math.vec4(this.y, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxwy", {
                get: function () {
                    return math.vec4(this.y, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxwz", {
                get: function () {
                    return math.vec4(this.y, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxww", {
                get: function () {
                    return math.vec4(this.y, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxx", {
                get: function () {
                    return math.vec4(this.y, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxy", {
                get: function () {
                    return math.vec4(this.y, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxz", {
                get: function () {
                    return math.vec4(this.y, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxw", {
                get: function () {
                    return math.vec4(this.y, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyx", {
                get: function () {
                    return math.vec4(this.y, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyy", {
                get: function () {
                    return math.vec4(this.y, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyz", {
                get: function () {
                    return math.vec4(this.y, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyw", {
                get: function () {
                    return math.vec4(this.y, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzx", {
                get: function () {
                    return math.vec4(this.y, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzy", {
                get: function () {
                    return math.vec4(this.y, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzz", {
                get: function () {
                    return math.vec4(this.y, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzw", {
                get: function () {
                    return math.vec4(this.y, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yywx", {
                get: function () {
                    return math.vec4(this.y, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yywy", {
                get: function () {
                    return math.vec4(this.y, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yywz", {
                get: function () {
                    return math.vec4(this.y, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyww", {
                get: function () {
                    return math.vec4(this.y, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxx", {
                get: function () {
                    return math.vec4(this.y, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxy", {
                get: function () {
                    return math.vec4(this.y, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxz", {
                get: function () {
                    return math.vec4(this.y, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxw", {
                get: function () {
                    return math.vec4(this.y, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyx", {
                get: function () {
                    return math.vec4(this.y, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyy", {
                get: function () {
                    return math.vec4(this.y, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyz", {
                get: function () {
                    return math.vec4(this.y, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyw", {
                get: function () {
                    return math.vec4(this.y, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzx", {
                get: function () {
                    return math.vec4(this.y, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzy", {
                get: function () {
                    return math.vec4(this.y, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzz", {
                get: function () {
                    return math.vec4(this.y, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzw", {
                get: function () {
                    return math.vec4(this.y, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzwx", {
                get: function () {
                    return math.vec4(this.y, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzwy", {
                get: function () {
                    return math.vec4(this.y, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzwz", {
                get: function () {
                    return math.vec4(this.y, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzww", {
                get: function () {
                    return math.vec4(this.y, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxx", {
                get: function () {
                    return math.vec4(this.y, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxy", {
                get: function () {
                    return math.vec4(this.y, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxz", {
                get: function () {
                    return math.vec4(this.y, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxw", {
                get: function () {
                    return math.vec4(this.y, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyx", {
                get: function () {
                    return math.vec4(this.y, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyy", {
                get: function () {
                    return math.vec4(this.y, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyz", {
                get: function () {
                    return math.vec4(this.y, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyw", {
                get: function () {
                    return math.vec4(this.y, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzx", {
                get: function () {
                    return math.vec4(this.y, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzy", {
                get: function () {
                    return math.vec4(this.y, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzz", {
                get: function () {
                    return math.vec4(this.y, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzw", {
                get: function () {
                    return math.vec4(this.y, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywwx", {
                get: function () {
                    return math.vec4(this.y, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywwy", {
                get: function () {
                    return math.vec4(this.y, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywwz", {
                get: function () {
                    return math.vec4(this.y, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywww", {
                get: function () {
                    return math.vec4(this.y, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxx", {
                get: function () {
                    return math.vec4(this.z, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxy", {
                get: function () {
                    return math.vec4(this.z, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxz", {
                get: function () {
                    return math.vec4(this.z, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxw", {
                get: function () {
                    return math.vec4(this.z, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyx", {
                get: function () {
                    return math.vec4(this.z, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyy", {
                get: function () {
                    return math.vec4(this.z, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyz", {
                get: function () {
                    return math.vec4(this.z, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyw", {
                get: function () {
                    return math.vec4(this.z, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzx", {
                get: function () {
                    return math.vec4(this.z, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzy", {
                get: function () {
                    return math.vec4(this.z, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzz", {
                get: function () {
                    return math.vec4(this.z, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzw", {
                get: function () {
                    return math.vec4(this.z, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxwx", {
                get: function () {
                    return math.vec4(this.z, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxwy", {
                get: function () {
                    return math.vec4(this.z, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxwz", {
                get: function () {
                    return math.vec4(this.z, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxww", {
                get: function () {
                    return math.vec4(this.z, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxx", {
                get: function () {
                    return math.vec4(this.z, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxy", {
                get: function () {
                    return math.vec4(this.z, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxz", {
                get: function () {
                    return math.vec4(this.z, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxw", {
                get: function () {
                    return math.vec4(this.z, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyx", {
                get: function () {
                    return math.vec4(this.z, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyy", {
                get: function () {
                    return math.vec4(this.z, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyz", {
                get: function () {
                    return math.vec4(this.z, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyw", {
                get: function () {
                    return math.vec4(this.z, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzx", {
                get: function () {
                    return math.vec4(this.z, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzy", {
                get: function () {
                    return math.vec4(this.z, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzz", {
                get: function () {
                    return math.vec4(this.z, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzw", {
                get: function () {
                    return math.vec4(this.z, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zywx", {
                get: function () {
                    return math.vec4(this.z, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zywy", {
                get: function () {
                    return math.vec4(this.z, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zywz", {
                get: function () {
                    return math.vec4(this.z, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyww", {
                get: function () {
                    return math.vec4(this.z, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxx", {
                get: function () {
                    return math.vec4(this.z, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxy", {
                get: function () {
                    return math.vec4(this.z, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxz", {
                get: function () {
                    return math.vec4(this.z, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxw", {
                get: function () {
                    return math.vec4(this.z, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyx", {
                get: function () {
                    return math.vec4(this.z, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyy", {
                get: function () {
                    return math.vec4(this.z, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyz", {
                get: function () {
                    return math.vec4(this.z, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyw", {
                get: function () {
                    return math.vec4(this.z, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzx", {
                get: function () {
                    return math.vec4(this.z, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzy", {
                get: function () {
                    return math.vec4(this.z, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzz", {
                get: function () {
                    return math.vec4(this.z, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzw", {
                get: function () {
                    return math.vec4(this.z, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzwx", {
                get: function () {
                    return math.vec4(this.z, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzwy", {
                get: function () {
                    return math.vec4(this.z, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzwz", {
                get: function () {
                    return math.vec4(this.z, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzww", {
                get: function () {
                    return math.vec4(this.z, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxx", {
                get: function () {
                    return math.vec4(this.z, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxy", {
                get: function () {
                    return math.vec4(this.z, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxz", {
                get: function () {
                    return math.vec4(this.z, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxw", {
                get: function () {
                    return math.vec4(this.z, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyx", {
                get: function () {
                    return math.vec4(this.z, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyy", {
                get: function () {
                    return math.vec4(this.z, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyz", {
                get: function () {
                    return math.vec4(this.z, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyw", {
                get: function () {
                    return math.vec4(this.z, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzx", {
                get: function () {
                    return math.vec4(this.z, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzy", {
                get: function () {
                    return math.vec4(this.z, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzz", {
                get: function () {
                    return math.vec4(this.z, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzw", {
                get: function () {
                    return math.vec4(this.z, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwwx", {
                get: function () {
                    return math.vec4(this.z, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwwy", {
                get: function () {
                    return math.vec4(this.z, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwwz", {
                get: function () {
                    return math.vec4(this.z, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwww", {
                get: function () {
                    return math.vec4(this.z, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxx", {
                get: function () {
                    return math.vec4(this.w, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxy", {
                get: function () {
                    return math.vec4(this.w, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxz", {
                get: function () {
                    return math.vec4(this.w, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxw", {
                get: function () {
                    return math.vec4(this.w, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyx", {
                get: function () {
                    return math.vec4(this.w, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyy", {
                get: function () {
                    return math.vec4(this.w, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyz", {
                get: function () {
                    return math.vec4(this.w, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyw", {
                get: function () {
                    return math.vec4(this.w, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzx", {
                get: function () {
                    return math.vec4(this.w, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzy", {
                get: function () {
                    return math.vec4(this.w, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzz", {
                get: function () {
                    return math.vec4(this.w, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzw", {
                get: function () {
                    return math.vec4(this.w, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxwx", {
                get: function () {
                    return math.vec4(this.w, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxwy", {
                get: function () {
                    return math.vec4(this.w, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxwz", {
                get: function () {
                    return math.vec4(this.w, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxww", {
                get: function () {
                    return math.vec4(this.w, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxx", {
                get: function () {
                    return math.vec4(this.w, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxy", {
                get: function () {
                    return math.vec4(this.w, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxz", {
                get: function () {
                    return math.vec4(this.w, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxw", {
                get: function () {
                    return math.vec4(this.w, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyx", {
                get: function () {
                    return math.vec4(this.w, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyy", {
                get: function () {
                    return math.vec4(this.w, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyz", {
                get: function () {
                    return math.vec4(this.w, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyw", {
                get: function () {
                    return math.vec4(this.w, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzx", {
                get: function () {
                    return math.vec4(this.w, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzy", {
                get: function () {
                    return math.vec4(this.w, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzz", {
                get: function () {
                    return math.vec4(this.w, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzw", {
                get: function () {
                    return math.vec4(this.w, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wywx", {
                get: function () {
                    return math.vec4(this.w, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wywy", {
                get: function () {
                    return math.vec4(this.w, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wywz", {
                get: function () {
                    return math.vec4(this.w, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyww", {
                get: function () {
                    return math.vec4(this.w, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxx", {
                get: function () {
                    return math.vec4(this.w, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxy", {
                get: function () {
                    return math.vec4(this.w, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxz", {
                get: function () {
                    return math.vec4(this.w, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxw", {
                get: function () {
                    return math.vec4(this.w, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyx", {
                get: function () {
                    return math.vec4(this.w, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyy", {
                get: function () {
                    return math.vec4(this.w, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyz", {
                get: function () {
                    return math.vec4(this.w, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyw", {
                get: function () {
                    return math.vec4(this.w, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzx", {
                get: function () {
                    return math.vec4(this.w, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzy", {
                get: function () {
                    return math.vec4(this.w, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzz", {
                get: function () {
                    return math.vec4(this.w, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzw", {
                get: function () {
                    return math.vec4(this.w, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzwx", {
                get: function () {
                    return math.vec4(this.w, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzwy", {
                get: function () {
                    return math.vec4(this.w, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzwz", {
                get: function () {
                    return math.vec4(this.w, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzww", {
                get: function () {
                    return math.vec4(this.w, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxx", {
                get: function () {
                    return math.vec4(this.w, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxy", {
                get: function () {
                    return math.vec4(this.w, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxz", {
                get: function () {
                    return math.vec4(this.w, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxw", {
                get: function () {
                    return math.vec4(this.w, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyx", {
                get: function () {
                    return math.vec4(this.w, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyy", {
                get: function () {
                    return math.vec4(this.w, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyz", {
                get: function () {
                    return math.vec4(this.w, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyw", {
                get: function () {
                    return math.vec4(this.w, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzx", {
                get: function () {
                    return math.vec4(this.w, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzy", {
                get: function () {
                    return math.vec4(this.w, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzz", {
                get: function () {
                    return math.vec4(this.w, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzw", {
                get: function () {
                    return math.vec4(this.w, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwwx", {
                get: function () {
                    return math.vec4(this.w, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwwy", {
                get: function () {
                    return math.vec4(this.w, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwwz", {
                get: function () {
                    return math.vec4(this.w, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwww", {
                get: function () {
                    return math.vec4(this.w, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Vec4.prototype.set = function (fValue1, fValue2, fValue3, fValue4) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 0: {
                        this.x = this.y = this.z = this.w = 0.0;
                        break;

                    }
                    case 1: {
                        if(akra.isFloat(arguments[0])) {
                            this.x = this.y = this.z = this.w = arguments[0];
                        } else {
                            if(arguments[0] instanceof Vec4) {
                                var v4fVec = arguments[0];
                                this.x = v4fVec.x;
                                this.y = v4fVec.y;
                                this.z = v4fVec.z;
                                this.w = v4fVec.w;
                            } else {
                                //color
                                if(akra.isDef(arguments[0].r)) {
                                    this.x = arguments[0].r;
                                    this.y = arguments[0].g;
                                    this.z = arguments[0].b;
                                    this.w = arguments[0].a;
                                } else {
                                    //array
                                    var pArray = arguments[0];
                                    this.x = pArray[0];
                                    this.y = pArray[1];
                                    this.z = pArray[2];
                                    this.w = pArray[3];
                                }
                            }
                        }
                        break;

                    }
                    case 2: {
                        if(akra.isFloat(arguments[0])) {
                            var fValue = arguments[0];
                            var v3fVec = arguments[1];
                            this.x = fValue;
                            this.y = v3fVec.x;
                            this.z = v3fVec.y;
                            this.w = v3fVec.z;
                        } else {
                            if(arguments[0] instanceof math.Vec2) {
                                var v2fVec1 = arguments[0];
                                var v2fVec2 = arguments[1];
                                this.x = v2fVec1.x;
                                this.y = v2fVec1.y;
                                this.z = v2fVec2.x;
                                this.w = v2fVec2.y;
                            } else {
                                var v3fVec = arguments[0];
                                var fValue = arguments[1];
                                this.x = v3fVec.x;
                                this.y = v3fVec.y;
                                this.z = v3fVec.z;
                                this.w = fValue;
                            }
                        }
                        break;

                    }
                    case 3: {
                        if(akra.isFloat(arguments[0])) {
                            var fValue1 = arguments[0];
                            if(akra.isFloat(arguments[1])) {
                                var fValue2 = arguments[1];
                                var v2fVec = arguments[2];
                                this.x = fValue1;
                                this.y = fValue2;
                                this.z = v2fVec.x;
                                this.w = v2fVec.y;
                            } else {
                                var v2fVec = arguments[1];
                                var fValue2 = arguments[2];
                                this.x = fValue1;
                                this.y = v2fVec.x;
                                this.z = v2fVec.y;
                                this.w = fValue2;
                            }
                        } else {
                            var v2fVec = arguments[0];
                            var fValue1 = arguments[1];
                            var fValue2 = arguments[2];
                            this.x = v2fVec.x;
                            this.y = v2fVec.y;
                            this.z = fValue1;
                            this.w = fValue2;
                        }
                        break;

                    }
                    case 4: {
                        this.x = arguments[0];
                        this.y = arguments[1];
                        this.z = arguments[2];
                        this.w = arguments[3];
                        break;

                    }
                }
                return this;
            };
            Vec4.prototype.clear = /**@inline*/ function () {
                this.x = this.y = this.z = this.w = 0.0;
                return this;
            };
            Vec4.prototype.add = function (v4fVec, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                v4fDestination.x = this.x + v4fVec.x;
                v4fDestination.y = this.y + v4fVec.y;
                v4fDestination.z = this.z + v4fVec.z;
                v4fDestination.w = this.w + v4fVec.w;
                return v4fDestination;
            };
            Vec4.prototype.subtract = function (v4fVec, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                v4fDestination.x = this.x - v4fVec.x;
                v4fDestination.y = this.y - v4fVec.y;
                v4fDestination.z = this.z - v4fVec.z;
                v4fDestination.w = this.w - v4fVec.w;
                return v4fDestination;
            };
            Vec4.prototype.dot = /**@inline*/ function (v4fVec) {
                return this.x * v4fVec.x + this.y * v4fVec.y + this.z * v4fVec.z + this.w * v4fVec.w;
            };
            Vec4.prototype.isEqual = function (v4fVec, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if(fEps === 0.0) {
                    if(this.x != v4fVec.x || this.y != v4fVec.y || this.z != v4fVec.z || this.w != v4fVec.w) {
                        return false;
                    }
                } else {
                    if(math.abs(this.x - v4fVec.x) > fEps || math.abs(this.y - v4fVec.y) > fEps || math.abs(this.z - v4fVec.z) > fEps || math.abs(this.w - v4fVec.w) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec4.prototype.isClear = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if(fEps === 0.0) {
                    if(this.x != 0.0 || this.y != 0.0 || this.z != 0.0 || this.w != 0.0) {
                        return false;
                    }
                } else {
                    if(math.abs(this.x) > fEps || math.abs(this.y) > fEps || math.abs(this.z) > fEps || math.abs(this.w) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec4.prototype.negate = function (v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                v4fDestination.x = -this.x;
                v4fDestination.y = -this.y;
                v4fDestination.z = -this.z;
                v4fDestination.w = -this.w;
                return v4fDestination;
            };
            Vec4.prototype.scale = function (fScale, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                v4fDestination.x = this.x * fScale;
                v4fDestination.y = this.y * fScale;
                v4fDestination.z = this.z * fScale;
                v4fDestination.w = this.w * fScale;
                return v4fDestination;
            };
            Vec4.prototype.normalize = function (v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fLength = math.sqrt(x * x + y * y + z * z + w * w);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                    z *= fInvLength;
                    w *= fInvLength;
                }
                v4fDestination.x = x;
                v4fDestination.y = y;
                v4fDestination.z = z;
                v4fDestination.w = w;
                return v4fDestination;
            };
            Vec4.prototype.length = /**@inline*/ function () {
                var x = this.x, y = this.y, z = this.z, w = this.w;
                return math.sqrt(x * x + y * y + z * z + w * w);
            };
            Vec4.prototype.lengthSquare = /**@inline*/ function () {
                var x = this.x, y = this.y, z = this.z, w = this.w;
                return x * x + y * y + z * z + w * w;
            };
            Vec4.prototype.direction = function (v4fVec, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                var x = v4fVec.x - this.x;
                var y = v4fVec.y - this.y;
                var z = v4fVec.z - this.z;
                var w = v4fVec.w - this.w;
                var fLength = math.sqrt(x * x + y * y + z * z + w * w);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                    z *= fInvLength;
                    w *= fInvLength;
                }
                v4fDestination.x = x;
                v4fDestination.y = y;
                v4fDestination.z = z;
                v4fDestination.w = w;
                return v4fDestination;
            };
            Vec4.prototype.mix = function (v4fVec, fA, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                fA = math.clamp(fA, 0.0, 1.0);
                var fA1 = 1.0 - fA;
                var fA2 = fA;
                v4fDestination.x = fA1 * this.x + fA2 * v4fVec.x;
                v4fDestination.y = fA1 * this.y + fA2 * v4fVec.y;
                v4fDestination.z = fA1 * this.z + fA2 * v4fVec.z;
                v4fDestination.w = fA1 * this.w + fA2 * v4fVec.w;
                return v4fDestination;
            };
            Vec4.prototype.toString = /**@inline*/ function () {
                return "[x: " + this.x + ", y: " + this.y + ", z: " + this.z + ", w: " + this.w + "]";
            };
            Object.defineProperty(Vec4, "stackCeil", {
                get: function () {
                    Vec4.stackPosition = Vec4.stackPosition === Vec4.stackSize - 1 ? 0 : Vec4.stackPosition;
                    return Vec4.stack[Vec4.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Vec4.stackSize = 100;
            Vec4.stackPosition = 0;
            Vec4.stack = (function () {
                var pStack = new Array(Vec4.stackSize);
                for(var i = 0; i < Vec4.stackSize; i++) {
                    pStack[i] = new Vec4();
                }
                return pStack;
            })();
            return Vec4;
        })();
        math.Vec4 = Vec4;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
// module akra.math {
//     export class Mat2 {
//         private pData: Float32Array = new Float32Array(4);
//         constructor ();
//         constructor (m2f: Mat2);
//         constructor (f11: float, f12: float, f21: float, f22: float);
//         constructor (f11? , f12? , f21? , f22? ) {
//             switch (arguments.length) {
//                 case 1:
//                     this.set(f11);
//                     break;
//                 case 4:
//                     this.set(f11, f12, f21, f22);
//                     break;
//             }
//         }
//         set(): Mat2;
//         set(m2f: Mat2): Mat2;
//         set(f11: float, f12: float, f21: float, f22: float): Mat2;
//         set(f11? , f12? , f21? , f22? ): Mat2 {
//             var pData: Float32Array = this.pData;
//             switch (arguments.length) {
//                 case 1:
//                     if (isFloat(f11)) {
//                         pData[0] = pData[1] = pData[2] = pData[3] = f11;
//                     }
//                     else {
//                         //pData.set(f11.pData);
//                     }
//                     break;
//                 case 4:
//                     pData[0] = f11;
//                     pData[1] = f21;
//                     pData[2] = f12;
//                     pData[3] = f22;
//                     break;
//             }
//             return this;
//         }
//     }
// }
/**
* @important Если внезапно задумаем перейти обратно на
* хранение данных в матрицах по строкам, как собственно и было в начале,
* то необходимо раскомментить definы и переписать метод set,
* так как он ложит по столбцам
*/
// #define __a11 0
// #define __a12 1
// #define __a13 2
// #define __a21 3
// #define __a22 4
// #define __a23 5
// #define __a31 6
// #define __a32 7
// #define __a33 8
; ;
; ;
var akra;
(function (akra) {
    (function (math) {
        var Mat3 = (function () {
            function Mat3(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        this.set(arguments[0]);
                        break;

                    }
                    case 3: {
                        this.set(arguments[0], arguments[1], arguments[2]);
                        break;

                    }
                    case 9: {
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
                        break;

                    }
                    default: {
                        break;

                    }
                }
            }
            Mat3.prototype.set = function (fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9) {
                this.data = this.data || new Float32Array(9);
                var pData = this.data;
                //без аргументов инициализируется нулями
                var nArgumentsLength = arguments.length;
                if(nArgumentsLength == 0) {
                    pData[0] = pData[3] = pData[6] = 0;
                    pData[1] = pData[4] = pData[7] = 0;
                    pData[2] = pData[5] = pData[8] = 0;
                }
                if(nArgumentsLength == 1) {
                    if(akra.isFloat(arguments[0])) {
                        var nValue = arguments[0];
                        pData[0] = nValue;
                        pData[3] = 0;
                        pData[6] = 0;
                        pData[1] = 0;
                        pData[4] = nValue;
                        pData[7] = 0;
                        pData[2] = 0;
                        pData[5] = 0;
                        pData[8] = nValue;
                    } else {
                        if(akra.isDef(arguments[0].data)) {
                            var pElements = arguments[0].data;
                            if(pElements.length === 9) {
                                //Mat3
                                pData[0] = pElements[0];
                                pData[3] = pElements[3];
                                pData[6] = pElements[6];
                                pData[1] = pElements[1];
                                pData[4] = pElements[4];
                                pData[7] = pElements[7];
                                pData[2] = pElements[2];
                                pData[5] = pElements[5];
                                pData[8] = pElements[8];
                            } else {
                                //Mat4
                                pData[0] = pElements[0];
                                pData[3] = pElements[4];
                                pData[6] = pElements[8];
                                pData[1] = pElements[1];
                                pData[4] = pElements[5];
                                pData[7] = pElements[9];
                                pData[2] = pElements[2];
                                pData[5] = pElements[6];
                                pData[8] = pElements[10];
                            }
                        } else {
                            if(arguments[0] instanceof math.Vec3) {
                                var v3fVec = arguments[0];
                                //диагональ
                                pData[0] = v3fVec.x;
                                pData[3] = 0;
                                pData[6] = 0;
                                pData[1] = 0;
                                pData[4] = v3fVec.y;
                                pData[7] = 0;
                                pData[2] = 0;
                                pData[5] = 0;
                                pData[8] = v3fVec.z;
                            } else {
                                var pElements = arguments[0];
                                if(pElements.length == 3) {
                                    //ложим диагональ
                                    pData[0] = pElements[0];
                                    pData[3] = 0;
                                    pData[6] = 0;
                                    pData[1] = 0;
                                    pData[4] = pElements[1];
                                    pData[7] = 0;
                                    pData[2] = 0;
                                    pData[5] = 0;
                                    pData[8] = pElements[2];
                                } else {
                                    pData[0] = pElements[0];
                                    pData[3] = pElements[3];
                                    pData[6] = pElements[6];
                                    pData[1] = pElements[1];
                                    pData[4] = pElements[4];
                                    pData[7] = pElements[7];
                                    pData[2] = pElements[2];
                                    pData[5] = pElements[5];
                                    pData[8] = pElements[8];
                                }
                            }
                        }
                    }
                } else {
                    if(nArgumentsLength == 3) {
                        if(akra.isFloat(arguments[0])) {
                            //выставляем диагональ
                            pData[0] = arguments[0];
                            pData[3] = 0;
                            pData[6] = 0;
                            pData[1] = 0;
                            pData[4] = arguments[1];
                            pData[7] = 0;
                            pData[2] = 0;
                            pData[5] = 0;
                            pData[8] = arguments[2];
                        } else {
                            var pData1, pData2, pData3;
                            if(arguments[0] instanceof math.Vec3) {
                                var v3fVec1 = arguments[0];
                                var v3fVec2 = arguments[1];
                                var v3fVec3 = arguments[2];
                                //ложим по столбцам
                                pData[0] = v3fVec1.x;
                                pData[3] = v3fVec2.x;
                                pData[6] = v3fVec3.x;
                                pData[1] = v3fVec1.y;
                                pData[4] = v3fVec2.y;
                                pData[7] = v3fVec3.y;
                                pData[2] = v3fVec1.z;
                                pData[5] = v3fVec2.z;
                                pData[8] = v3fVec3.z;
                            } else {
                                var v3fVec1 = arguments[0];
                                var v3fVec2 = arguments[1];
                                var v3fVec3 = arguments[2];
                                //ложим по столбцам
                                pData[0] = v3fVec1[0];
                                pData[3] = v3fVec2[0];
                                pData[6] = v3fVec3[0];
                                pData[1] = v3fVec1[1];
                                pData[4] = v3fVec2[1];
                                pData[7] = v3fVec3[1];
                                pData[2] = v3fVec1[2];
                                pData[5] = v3fVec2[2];
                                pData[8] = v3fVec3[2];
                            }
                        }
                    } else {
                        if(nArgumentsLength == 9) {
                            //просто числа
                            pData[0] = arguments[0];
                            pData[3] = arguments[3];
                            pData[6] = arguments[6];
                            pData[1] = arguments[1];
                            pData[4] = arguments[4];
                            pData[7] = arguments[7];
                            pData[2] = arguments[2];
                            pData[5] = arguments[5];
                            pData[8] = arguments[8];
                        }
                    }
                }
                return this;
            };
            Mat3.prototype.identity = function () {
                var pData = this.data;
                pData[0] = 1.0;
                pData[3] = 0.0;
                pData[6] = 0.0;
                pData[1] = 0.0;
                pData[4] = 1.0;
                pData[7] = 0.0;
                pData[2] = 0.0;
                pData[5] = 0.0;
                pData[8] = 1.0;
                return this;
            };
            Mat3.prototype.add = function (m3fMat, m3fDestination) {
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData1[0] + pData2[0];
                pDataDestination[3] = pData1[3] + pData2[3];
                pDataDestination[6] = pData1[6] + pData2[6];
                pDataDestination[1] = pData1[1] + pData2[1];
                pDataDestination[4] = pData1[4] + pData2[4];
                pDataDestination[7] = pData1[7] + pData2[7];
                pDataDestination[2] = pData1[2] + pData2[2];
                pDataDestination[5] = pData1[5] + pData2[5];
                pDataDestination[8] = pData1[8] + pData2[8];
                return m3fDestination;
            };
            Mat3.prototype.subtract = function (m3fMat, m3fDestination) {
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData1[0] - pData2[0];
                pDataDestination[3] = pData1[3] - pData2[3];
                pDataDestination[6] = pData1[6] - pData2[6];
                pDataDestination[1] = pData1[1] - pData2[1];
                pDataDestination[4] = pData1[4] - pData2[4];
                pDataDestination[7] = pData1[7] - pData2[7];
                pDataDestination[2] = pData1[2] - pData2[2];
                pDataDestination[5] = pData1[5] - pData2[5];
                pDataDestination[8] = pData1[8] - pData2[8];
                return m3fDestination;
            };
            Mat3.prototype.multiply = function (m3fMat, m3fDestination) {
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = this;
                }
                var pDataDestination = m3fDestination.data;
                // Cache the matrix values (makes for huge speed increases!)
                                var a11 = pData1[0], a12 = pData1[3], a13 = pData1[6];
                var a21 = pData1[1], a22 = pData1[4], a23 = pData1[7];
                var a31 = pData1[2], a32 = pData1[5], a33 = pData1[8];
                var b11 = pData2[0], b12 = pData2[3], b13 = pData2[6];
                var b21 = pData2[1], b22 = pData2[4], b23 = pData2[7];
                var b31 = pData2[2], b32 = pData2[5], b33 = pData2[8];
                pDataDestination[0] = a11 * b11 + a12 * b21 + a13 * b31;
                pDataDestination[3] = a11 * b12 + a12 * b22 + a13 * b32;
                pDataDestination[6] = a11 * b13 + a12 * b23 + a13 * b33;
                pDataDestination[1] = a21 * b11 + a22 * b21 + a23 * b31;
                pDataDestination[4] = a21 * b12 + a22 * b22 + a23 * b32;
                pDataDestination[7] = a21 * b13 + a22 * b23 + a23 * b33;
                pDataDestination[2] = a31 * b11 + a32 * b21 + a33 * b31;
                pDataDestination[5] = a31 * b12 + a32 * b22 + a33 * b32;
                pDataDestination[8] = a31 * b13 + a32 * b23 + a33 * b33;
                return m3fDestination;
            };
            Mat3.prototype.multiplyVec3 = function (v3fVec, v3fDestination) {
                var pData = this.data;
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new math.Vec3();
                }
                var x = v3fVec.x, y = v3fVec.y, z = v3fVec.z;
                v3fDestination.x = pData[0] * x + pData[3] * y + pData[6] * z;
                v3fDestination.y = pData[1] * x + pData[4] * y + pData[7] * z;
                v3fDestination.z = pData[2] * x + pData[5] * y + pData[8] * z;
                return v3fDestination;
            };
            Mat3.prototype.transpose = function (m3fDestination) {
                var pData = this.data;
                if(!akra.isDef(m3fDestination)) {
                    //быстрее будет явно обработать оба случая
                                        var a12 = pData[3], a13 = pData[6], a23 = pData[7];
                    pData[3] = pData[1];
                    pData[6] = pData[2];
                    pData[1] = a12;
                    pData[7] = pData[5];
                    pData[2] = a13;
                    pData[5] = a23;
                    return this;
                }
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[3] = pData[1];
                pDataDestination[6] = pData[2];
                pDataDestination[1] = pData[3];
                pDataDestination[4] = pData[4];
                pDataDestination[7] = pData[5];
                pDataDestination[2] = pData[6];
                pDataDestination[5] = pData[7];
                pDataDestination[8] = pData[8];
                return m3fDestination;
            };
            Mat3.prototype.determinant = function () {
                var pData = this.data;
                var a11 = pData[0], a12 = pData[3], a13 = pData[6];
                var a21 = pData[1], a22 = pData[4], a23 = pData[7];
                var a31 = pData[2], a32 = pData[5], a33 = pData[8];
                return a11 * (a22 * a33 - a23 * a32) - a12 * (a21 * a33 - a23 * a31) + a13 * (a21 * a32 - a22 * a31);
            };
            Mat3.prototype.inverse = function (m3fDestination) {
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = this;
                }
                var pData = this.data;
                var pDataDestination = m3fDestination.data;
                var a11 = pData[0], a12 = pData[3], a13 = pData[6];
                var a21 = pData[1], a22 = pData[4], a23 = pData[7];
                var a31 = pData[2], a32 = pData[5], a33 = pData[8];
                var A11 = a22 * a33 - a23 * a32;
                var A12 = a21 * a33 - a23 * a31;
                var A13 = a21 * a32 - a22 * a31;
                var A21 = a12 * a33 - a13 * a32;
                var A22 = a11 * a33 - a13 * a31;
                var A23 = a11 * a32 - a12 * a31;
                var A31 = a12 * a23 - a13 * a22;
                var A32 = a11 * a23 - a13 * a21;
                var A33 = a11 * a22 - a12 * a21;
                var fDeterminant = a11 * A11 - a12 * A12 + a13 * A13;
                if(fDeterminant == 0.0) {
                    akra.logger.setSourceLocation("Mat3.ts", 445);
                    akra.logger.error("обращение матрицы с нулевым детеминантом:\n", this.toString());
                    ; ;
                    return m3fDestination.set(1.0);
                    //чтоб все не навернулось
                                    }
                var fInverseDeterminant = 1.0 / fDeterminant;
                pDataDestination[0] = A11 * fInverseDeterminant;
                pDataDestination[3] = -A21 * fInverseDeterminant;
                pDataDestination[6] = A31 * fInverseDeterminant;
                pDataDestination[1] = -A12 * fInverseDeterminant;
                pDataDestination[4] = A22 * fInverseDeterminant;
                pDataDestination[7] = -A32 * fInverseDeterminant;
                pDataDestination[2] = A13 * fInverseDeterminant;
                pDataDestination[5] = -A23 * fInverseDeterminant;
                pDataDestination[8] = A33 * fInverseDeterminant;
                return m3fDestination;
            };
            Mat3.prototype.isEqual = function (m3fMat, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                if(fEps == 0) {
                    if(pData1[0] != pData2[0] || pData1[3] != pData2[3] || pData1[6] != pData2[6] || pData1[1] != pData2[1] || pData1[4] != pData2[4] || pData1[7] != pData2[7] || pData1[2] != pData2[2] || pData1[5] != pData2[5] || pData1[8] != pData2[8]) {
                        return false;
                    }
                } else {
                    if(Math.abs(pData1[0] - pData2[0]) > fEps || Math.abs(pData1[3] - pData2[3]) > fEps || Math.abs(pData1[6] - pData2[6]) > fEps || Math.abs(pData1[1] - pData2[1]) > fEps || Math.abs(pData1[4] - pData2[4]) > fEps || Math.abs(pData1[7] - pData2[7]) > fEps || Math.abs(pData1[2] - pData2[2]) > fEps || Math.abs(pData1[5] - pData2[5]) > fEps || Math.abs(pData1[8] - pData2[8]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat3.prototype.isDiagonal = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                var pData = this.data;
                if(fEps == 0) {
                    if(pData[3] != 0 || pData[6] != 0 || pData[1] != 0 || pData[7] != 0 || pData[2] != 0 || pData[5] != 0) {
                        return false;
                    }
                } else {
                    if(Math.abs(pData[3]) > fEps || Math.abs(pData[6]) > fEps || Math.abs(pData[1]) > fEps || Math.abs(pData[7]) > fEps || Math.abs(pData[2]) > fEps || Math.abs(pData[5]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat3.prototype.toMat4 = function (m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new math.Mat4();
                }
                var pData = this.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[3];
                pDataDestination[8] = pData[6];
                pDataDestination[12] = 0;
                pDataDestination[1] = pData[1];
                pDataDestination[5] = pData[4];
                pDataDestination[9] = pData[7];
                pDataDestination[13] = 0;
                pDataDestination[2] = pData[2];
                pDataDestination[6] = pData[5];
                pDataDestination[10] = pData[8];
                pDataDestination[14] = 0;
                pDataDestination[3] = 0;
                pDataDestination[7] = 0;
                pDataDestination[11] = 0;
                pDataDestination[15] = 1;
                return m4fDestination;
            };
            Mat3.prototype.toQuat4 = function (q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = new math.Quat4();
                }
                var pData = this.data;
                var a11 = pData[0], a12 = pData[3], a13 = pData[6];
                var a21 = pData[1], a22 = pData[4], a23 = pData[7];
                var a31 = pData[2], a32 = pData[5], a33 = pData[8];
                /*x^2*/
                var x2 = ((a11 - a22 - a33) + 1) / 4;
                /*y^2*/
                var y2 = ((a22 - a11 - a33) + 1) / 4;
                /*z^2*/
                var z2 = ((a33 - a11 - a22) + 1) / 4;
                /*w^2*/
                var w2 = ((a11 + a22 + a33) + 1) / 4;
                var fMax = Math.max(x2, Math.max(y2, Math.max(z2, w2)));
                if(fMax == x2) {
                    //максимальная компонента берется положительной
                    var x = Math.sqrt(x2);
                    q4fDestination.x = x;
                    q4fDestination.y = (a21 + a12) / 4 / x;
                    q4fDestination.z = (a31 + a13) / 4 / x;
                    q4fDestination.w = (a32 - a23) / 4 / x;
                } else {
                    if(fMax == y2) {
                        //максимальная компонента берется положительной
                        var y = Math.sqrt(y2);
                        x;
                        q4fDestination.x = (a21 + a12) / 4 / y;
                        q4fDestination.y = y;
                        q4fDestination.z = (a32 + a23) / 4 / y;
                        q4fDestination.w = (a13 - a31) / 4 / y;
                    } else {
                        if(fMax == z2) {
                            //максимальная компонента берется положительной
                            var z = Math.sqrt(z2);
                            q4fDestination.x = (a31 + a13) / 4 / z;
                            q4fDestination.y = (a32 + a23) / 4 / z;
                            q4fDestination.z = z;
                            q4fDestination.w = (a21 - a12) / 4 / z;
                        } else {
                            //максимальная компонента берется положительной
                            var w = Math.sqrt(w2);
                            q4fDestination.x = (a32 - a23) / 4 / w;
                            q4fDestination.y = (a13 - a31) / 4 / w;
                            q4fDestination.z = (a21 - a12) / 4 / w;
                            q4fDestination.w = w;
                        }
                    }
                }
                return q4fDestination;
            };
            Mat3.prototype.toString = function () {
                var pData = this.data;
                return '[' + pData[0] + ', ' + pData[3] + ', ' + pData[6] + ',\n' + +pData[1] + ', ' + pData[4] + ', ' + pData[7] + ',\n' + +pData[2] + ', ' + pData[5] + ', ' + pData[8] + ']';
            };
            Mat3.prototype.decompose = function (q4fRotation, v3fScale) {
                //изначально предполагаем, что порядок умножения был rot * scale
                var m3fRotScale = this;
                var m3fRotScaleTransposed = this.transpose(math.mat3());
                var isRotScale = true;
                //понадобятся если порядок умножения был другим
                                var m3fScaleRot, m3fScaleRotTransposed;
                //было отражение или нет
                var scaleSign = (m3fRotScale.determinant() >= 0.0) ? 1 : -1;
                var m3fResult = math.mat3();
                //first variant rot * scale
                // (rot * scale)T * (rot * scale) =
                // scaleT * rotT * rot * scale = scaleT *rot^-1 * rot * scale =
                // scaleT * scale
                m3fRotScaleTransposed.multiply(m3fRotScale, m3fResult);
                if(!m3fResult.isDiagonal(0.0001)) {
                    //предположение было неверным
                    isRotScale = false;
                    //просто переобозначения чтобы не было путаницы
                    m3fScaleRot = m3fRotScale;
                    m3fScaleRotTransposed = m3fRotScaleTransposed;
                    //second variant scale * rot
                    // (scale * rot) * (scale * rot)T =
                    // scale * rot * rotT * scaleT = scale *rot * rot^-1 * scaleT =
                    // scale * scaleT
                    m3fScaleRot.multiply(m3fScaleRotTransposed, m3fResult);
                }
                var pResultData = m3fResult.data;
                var x = math.sqrt(pResultData[0]);
                /*если было отражение, считается что оно было по y*/
                var y = math.sqrt(pResultData[4]) * scaleSign;
                var z = math.sqrt(pResultData[8]);
                v3fScale.x = x;
                v3fScale.y = y;
                v3fScale.z = z;
                var m3fInverseScale = math.mat3(1.0 / x, 1.0 / y, 1.0 / z);
                if(isRotScale) {
                    m3fRotScale.multiply(m3fInverseScale, math.mat3()).toQuat4(q4fRotation);
                    return true;
                } else {
                    m3fInverseScale.multiply(m3fScaleRot, math.mat3()).toQuat4(q4fRotation);
                    akra.logger.setSourceLocation("Mat3.ts", 674);
                    akra.logger.assert(false, "порядок умножения scale rot в данный момент не поддерживается");
                    ; ;
                    return false;
                }
            };
            Mat3.prototype.row = function (iRow, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new math.Vec3();
                }
                var pData = this.data;
                switch(iRow) {
                    case 1: {
                        v3fDestination.x = pData[0];
                        v3fDestination.y = pData[3];
                        v3fDestination.z = pData[6];
                        break;

                    }
                    case 2: {
                        v3fDestination.x = pData[1];
                        v3fDestination.y = pData[4];
                        v3fDestination.z = pData[7];
                        break;

                    }
                    case 3: {
                        v3fDestination.x = pData[2];
                        v3fDestination.y = pData[5];
                        v3fDestination.z = pData[8];
                        break;

                    }
                }
                return v3fDestination;
            };
            Mat3.prototype.column = function (iColumn, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new math.Vec3();
                }
                var pData = this.data;
                switch(iColumn) {
                    case 1: {
                        v3fDestination.x = pData[0];
                        v3fDestination.y = pData[1];
                        v3fDestination.z = pData[2];
                        break;

                    }
                    case 2: {
                        v3fDestination.x = pData[3];
                        v3fDestination.y = pData[4];
                        v3fDestination.z = pData[5];
                        break;

                    }
                    case 3: {
                        v3fDestination.x = pData[6];
                        v3fDestination.y = pData[7];
                        v3fDestination.z = pData[8];
                        break;

                    }
                }
                return v3fDestination;
            };
            Mat3.fromYawPitchRoll = function fromYawPitchRoll(fYaw, fPitch, fRoll, m3fDestination) {
                if(arguments.length <= 2) {
                    //Vec3 + m3fDestination
                    var v3fVec = arguments[0];
                    fYaw = v3fVec.x;
                    fPitch = v3fVec.y;
                    fRoll = v3fVec.z;
                    m3fDestination = arguments[1];
                }
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = new Mat3();
                }
                var pDataDestination = m3fDestination.data;
                var fSin1 = Math.sin(fYaw);
                var fSin2 = Math.sin(fPitch);
                var fSin3 = Math.sin(fRoll);
                var fCos1 = Math.cos(fYaw);
                var fCos2 = Math.cos(fPitch);
                var fCos3 = Math.cos(fRoll);
                pDataDestination[0] = fCos1 * fCos3 + fSin1 * fSin2 * fSin3;
                pDataDestination[3] = fCos3 * fSin1 * fSin2 - fCos1 * fSin3;
                pDataDestination[6] = fCos2 * fSin1;
                pDataDestination[1] = fCos2 * fSin3;
                pDataDestination[4] = fCos2 * fCos3;
                pDataDestination[7] = -fSin2;
                pDataDestination[2] = fCos1 * fSin2 * fSin3 - fCos3 * fSin1;
                pDataDestination[5] = fSin1 * fSin3 + fCos1 * fCos3 * fSin2;
                pDataDestination[8] = fCos1 * fCos2;
                return m3fDestination;
            }
            Mat3.fromXYZ = function fromXYZ(fX, fY, fZ, m3fDestination) {
                if(arguments.length <= 2) {
                    //Vec3 + m3fDestination
                    var v3fVec = arguments[0];
                    return Mat3.fromYawPitchRoll(v3fVec.y, v3fVec.x, v3fVec.z, arguments[1]);
                } else {
                    //fX fY fZ m3fDestination
                    var fX = arguments[0];
                    var fY = arguments[1];
                    var fZ = arguments[2];
                    return Mat3.fromYawPitchRoll(fY, fX, fZ, arguments[3]);
                }
            }
            Object.defineProperty(Mat3, "stackCeil", {
                get: function () {
                    Mat3.stackPosition = Mat3.stackPosition === Mat3.stackSize - 1 ? 0 : Mat3.stackPosition;
                    return Mat3.stack[Mat3.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Mat3.stackSize = 100;
            Mat3.stackPosition = 0;
            Mat3.stack = (function () {
                var pStack = new Array(Mat3.stackSize);
                for(var i = 0; i < Mat3.stackSize; i++) {
                    pStack[i] = new Mat3();
                }
                return pStack;
            })();
            return Mat3;
        })();
        math.Mat3 = Mat3;        
        ; ;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
; ;
; ;
var akra;
(function (akra) {
    (function (math) {
        var Mat4 = (function () {
            function Mat4(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9, fValue10, fValue11, fValue12, fValue13, fValue14, fValue15, fValue16) {
                var nArgumentsLength = arguments.length;
                if(nArgumentsLength === 2) {
                    if(akra.isBoolean(arguments[1])) {
                        if(arguments[1]) {
                            this.data = arguments[0];
                        } else {
                            this.data = new Float32Array(16);
                            this.set(arguments[0]);
                        }
                    } else {
                        this.data = new Float32Array(16);
                        this.set(arguments[0], arguments[1]);
                    }
                } else {
                    this.data = new Float32Array(16);
                    switch(nArgumentsLength) {
                        case 1: {
                            if(arguments[0] instanceof math.Mat3) {
                                this.set(arguments[0], math.vec3(0.0));
                            } else {
                                this.set(arguments[0]);
                            }
                            break;

                        }
                        case 4: {
                            this.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                            break;

                        }
                        case 16: {
                            this.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
                            break;

                        }
                        default: {
                            break;

                        }
                    }
                }
            }
            Mat4.prototype.set = function (fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9, fValue10, fValue11, fValue12, fValue13, fValue14, fValue15, fValue16) {
                var nArgumentsLength = arguments.length;
                var pData = this.data;
                if(nArgumentsLength === 0) {
                    pData[0] = pData[4] = pData[8] = pData[12] = pData[1] = pData[5] = pData[9] = pData[13] = pData[2] = pData[6] = pData[10] = pData[14] = pData[3] = pData[7] = pData[11] = pData[15] = 0.0;
                    return this;
                }
                if(nArgumentsLength === 1) {
                    if(akra.isFloat(arguments[0])) {
                        var fValue = arguments[0];
                        pData[0] = fValue;
                        pData[4] = 0.0;
                        pData[8] = 0.0;
                        pData[12] = 0.0;
                        pData[1] = 0.0;
                        pData[5] = fValue;
                        pData[9] = 0.0;
                        pData[13] = 0.0;
                        pData[2] = 0.0;
                        pData[6] = 0.0;
                        pData[10] = fValue;
                        pData[14] = 0.0;
                        pData[3] = 0.0;
                        pData[7] = 0.0;
                        pData[11] = 0.0;
                        pData[15] = fValue;
                    } else {
                        if(arguments[0] instanceof math.Vec4) {
                            var v4fVec = arguments[0];
                            pData[0] = v4fVec.x;
                            pData[4] = 0.0;
                            pData[8] = 0.0;
                            pData[12] = 0.0;
                            pData[1] = 0.0;
                            pData[5] = v4fVec.y;
                            pData[9] = 0.0;
                            pData[13] = 0.0;
                            pData[2] = 0.0;
                            pData[6] = 0.0;
                            pData[10] = v4fVec.z;
                            pData[14] = 0.0;
                            pData[3] = 0.0;
                            pData[7] = 0.0;
                            pData[11] = 0.0;
                            pData[15] = v4fVec.w;
                        } else {
                            if(akra.isDef(arguments[0].data)) {
                                var pMatrixData = arguments[0].data;
                                if(pMatrixData.length == 16) {
                                    //Mat4
                                    pData.set(pMatrixData);
                                } else {
                                    //Mat3
                                    pData[0] = pMatrixData[0];
                                    pData[4] = pMatrixData[3];
                                    pData[8] = pMatrixData[6];
                                    pData[1] = pMatrixData[1];
                                    pData[5] = pMatrixData[4];
                                    pData[9] = pMatrixData[7];
                                    pData[2] = pMatrixData[2];
                                    pData[6] = pMatrixData[5];
                                    pData[10] = pMatrixData[8];
                                    pData[3] = 0.0;
                                    pData[7] = 0.0;
                                    pData[11] = 0.0;
                                    pData[15] = 1.0;
                                }
                            } else {
                                //array
                                var pArray = arguments[0];
                                if(pArray.length === 4) {
                                    pData[0] = pArray[0];
                                    pData[4] = 0.0;
                                    pData[8] = 0.0;
                                    pData[12] = 0.0;
                                    pData[1] = 0.0;
                                    pData[5] = pArray[1];
                                    pData[9] = 0.0;
                                    pData[13] = 0.0;
                                    pData[2] = 0.0;
                                    pData[6] = 0.0;
                                    pData[10] = pArray[2];
                                    pData[14] = 0.0;
                                    pData[3] = 0.0;
                                    pData[7] = 0.0;
                                    pData[11] = 0.0;
                                    pData[15] = pArray[3];
                                } else {
                                    //length == 16
                                    pData[0] = pArray[0];
                                    pData[4] = pArray[4];
                                    pData[8] = pArray[8];
                                    pData[12] = pArray[12];
                                    pData[1] = pArray[1];
                                    pData[5] = pArray[5];
                                    pData[9] = pArray[9];
                                    pData[13] = pArray[13];
                                    pData[2] = pArray[2];
                                    pData[6] = pArray[6];
                                    pData[10] = pArray[10];
                                    pData[14] = pArray[14];
                                    pData[3] = pArray[3];
                                    pData[7] = pArray[7];
                                    pData[11] = pArray[11];
                                    pData[15] = pArray[15];
                                }
                            }
                        }
                    }
                } else {
                    if(nArgumentsLength == 2) {
                        var pMatrixData = arguments[0];
                        var v3fTranslation = arguments[1];
                        pData[0] = pMatrixData[0];
                        pData[4] = pMatrixData[3];
                        pData[8] = pMatrixData[6];
                        pData[12] = v3fTranslation.x;
                        pData[1] = pMatrixData[1];
                        pData[5] = pMatrixData[4];
                        pData[9] = pMatrixData[7];
                        pData[13] = v3fTranslation.y;
                        pData[2] = pMatrixData[2];
                        pData[6] = pMatrixData[5];
                        pData[10] = pMatrixData[8];
                        pData[14] = v3fTranslation.z;
                        pData[3] = 0.0;
                        pData[7] = 0.0;
                        pData[11] = 0.0;
                        pData[15] = 1.0;
                    } else {
                        if(nArgumentsLength == 4) {
                            if(akra.isFloat(arguments[0])) {
                                pData[0] = arguments[0];
                                pData[4] = 0;
                                pData[8] = 0;
                                pData[12] = 0;
                                pData[1] = 0;
                                pData[5] = arguments[1];
                                pData[9] = 0;
                                pData[13] = 0;
                                pData[2] = 0;
                                pData[6] = 0;
                                pData[10] = arguments[2];
                                pData[14] = 0;
                                pData[3] = 0;
                                pData[7] = 0;
                                pData[11] = 0;
                                pData[15] = arguments[3];
                            } else {
                                if(arguments[0] instanceof math.Vec4) {
                                    var v4fColumn1 = arguments[0];
                                    var v4fColumn2 = arguments[1];
                                    var v4fColumn3 = arguments[2];
                                    var v4fColumn4 = arguments[3];
                                    pData[0] = v4fColumn1.x;
                                    pData[4] = v4fColumn2.x;
                                    pData[8] = v4fColumn3.x;
                                    pData[12] = v4fColumn4.x;
                                    pData[1] = v4fColumn1.y;
                                    pData[5] = v4fColumn2.y;
                                    pData[9] = v4fColumn3.y;
                                    pData[13] = v4fColumn4.y;
                                    pData[2] = v4fColumn1.z;
                                    pData[6] = v4fColumn2.z;
                                    pData[10] = v4fColumn3.z;
                                    pData[14] = v4fColumn4.z;
                                    pData[3] = v4fColumn1.w;
                                    pData[7] = v4fColumn2.w;
                                    pData[11] = v4fColumn3.w;
                                    pData[15] = v4fColumn4.w;
                                } else {
                                    //arrays
                                    var v4fColumn1 = arguments[0];
                                    var v4fColumn2 = arguments[1];
                                    var v4fColumn3 = arguments[2];
                                    var v4fColumn4 = arguments[3];
                                    pData[0] = v4fColumn1[0];
                                    pData[4] = v4fColumn2[0];
                                    pData[8] = v4fColumn3[0];
                                    pData[12] = v4fColumn4[0];
                                    pData[1] = v4fColumn1[1];
                                    pData[5] = v4fColumn2[1];
                                    pData[9] = v4fColumn3[1];
                                    pData[13] = v4fColumn4[1];
                                    pData[2] = v4fColumn1[2];
                                    pData[6] = v4fColumn2[2];
                                    pData[10] = v4fColumn3[2];
                                    pData[14] = v4fColumn4[2];
                                    pData[3] = v4fColumn1[3];
                                    pData[7] = v4fColumn2[3];
                                    pData[11] = v4fColumn3[3];
                                    pData[15] = v4fColumn4[3];
                                }
                            }
                        } else {
                            //nArgumentsLength === 16
                            pData[0] = arguments[0];
                            pData[4] = arguments[4];
                            pData[8] = arguments[8];
                            pData[12] = arguments[12];
                            pData[1] = arguments[1];
                            pData[5] = arguments[5];
                            pData[9] = arguments[9];
                            pData[13] = arguments[13];
                            pData[2] = arguments[2];
                            pData[6] = arguments[6];
                            pData[10] = arguments[10];
                            pData[14] = arguments[14];
                            pData[3] = arguments[3];
                            pData[7] = arguments[7];
                            pData[11] = arguments[11];
                            pData[15] = arguments[15];
                        }
                    }
                }
                return this;
            };
            Mat4.prototype.identity = function () {
                var pData = this.data;
                pData[0] = 1.0;
                pData[4] = 0.0;
                pData[8] = 0.0;
                pData[12] = 0.0;
                pData[1] = 0.0;
                pData[5] = 1.0;
                pData[9] = 0.0;
                pData[13] = 0.0;
                pData[2] = 0.0;
                pData[6] = 0.0;
                pData[10] = 1.0;
                pData[14] = 0.0;
                pData[3] = 0.0;
                pData[7] = 0.0;
                pData[11] = 0.0;
                pData[15] = 1.0;
                return this;
            };
            Mat4.prototype.add = function (m4fMat, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData1[0] + pData2[0];
                pDataDestination[4] = pData1[4] + pData2[4];
                pDataDestination[8] = pData1[8] + pData2[8];
                pDataDestination[12] = pData1[12] + pData2[12];
                pDataDestination[1] = pData1[1] + pData2[1];
                pDataDestination[5] = pData1[5] + pData2[5];
                pDataDestination[9] = pData1[9] + pData2[9];
                pDataDestination[13] = pData1[13] + pData2[13];
                pDataDestination[2] = pData1[2] + pData2[2];
                pDataDestination[6] = pData1[6] + pData2[6];
                pDataDestination[10] = pData1[10] + pData2[10];
                pDataDestination[14] = pData1[14] + pData2[14];
                pDataDestination[3] = pData1[3] + pData2[3];
                pDataDestination[7] = pData1[7] + pData2[7];
                pDataDestination[11] = pData1[11] + pData2[11];
                pDataDestination[15] = pData1[15] + pData2[15];
                return m4fDestination;
            };
            Mat4.prototype.subtract = function (m4fMat, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData1[0] - pData2[0];
                pDataDestination[4] = pData1[4] - pData2[4];
                pDataDestination[8] = pData1[8] - pData2[8];
                pDataDestination[12] = pData1[12] - pData2[12];
                pDataDestination[1] = pData1[1] - pData2[1];
                pDataDestination[5] = pData1[5] - pData2[5];
                pDataDestination[9] = pData1[9] - pData2[9];
                pDataDestination[13] = pData1[13] - pData2[13];
                pDataDestination[2] = pData1[2] - pData2[2];
                pDataDestination[6] = pData1[6] - pData2[6];
                pDataDestination[10] = pData1[10] - pData2[10];
                pDataDestination[14] = pData1[14] - pData2[14];
                pDataDestination[3] = pData1[3] - pData2[3];
                pDataDestination[7] = pData1[7] - pData2[7];
                pDataDestination[11] = pData1[11] - pData2[11];
                pDataDestination[15] = pData1[15] - pData2[15];
                return m4fDestination;
            };
            Mat4.prototype.multiply = function (m4fMat, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                var pDataDestination = m4fDestination.data;
                //кешируем значения матриц для ускорения
                                var a11 = pData1[0], a12 = pData1[4], a13 = pData1[8], a14 = pData1[12];
                var a21 = pData1[1], a22 = pData1[5], a23 = pData1[9], a24 = pData1[13];
                var a31 = pData1[2], a32 = pData1[6], a33 = pData1[10], a34 = pData1[14];
                var a41 = pData1[3], a42 = pData1[7], a43 = pData1[11], a44 = pData1[15];
                var b11 = pData2[0], b12 = pData2[4], b13 = pData2[8], b14 = pData2[12];
                var b21 = pData2[1], b22 = pData2[5], b23 = pData2[9], b24 = pData2[13];
                var b31 = pData2[2], b32 = pData2[6], b33 = pData2[10], b34 = pData2[14];
                var b41 = pData2[3], b42 = pData2[7], b43 = pData2[11], b44 = pData2[15];
                pDataDestination[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
                pDataDestination[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
                pDataDestination[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
                pDataDestination[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
                pDataDestination[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
                pDataDestination[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
                pDataDestination[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
                pDataDestination[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
                pDataDestination[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
                pDataDestination[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
                pDataDestination[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
                pDataDestination[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
                pDataDestination[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
                pDataDestination[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
                pDataDestination[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
                pDataDestination[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
                return m4fDestination;
            };
            Mat4.prototype.multiplyLeft = /**@inline*/ function (m4fMat, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                return m4fMat.multiply(this, m4fDestination);
            };
            Mat4.prototype.multiplyVec4 = function (v4fVec, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = new math.Vec4();
                }
                var pData = this.data;
                var x = v4fVec.x, y = v4fVec.y, z = v4fVec.z, w = v4fVec.w;
                v4fDestination.x = pData[0] * x + pData[4] * y + pData[8] * z + pData[12] * w;
                v4fDestination.y = pData[1] * x + pData[5] * y + pData[9] * z + pData[13] * w;
                v4fDestination.z = pData[2] * x + pData[6] * y + pData[10] * z + pData[14] * w;
                v4fDestination.w = pData[3] * x + pData[7] * y + pData[11] * z + pData[15] * w;
                return v4fDestination;
            };
            Mat4.prototype.transpose = function (m4fDestination) {
                var pData = this.data;
                if(!akra.isDef(m4fDestination)) {
                    var a12 = pData[4], a13 = pData[8], a14 = pData[12];
                    var a23 = pData[9], a24 = pData[13];
                    var a34 = pData[14];
                    pData[4] = pData[1];
                    pData[8] = pData[2];
                    pData[12] = pData[3];
                    pData[1] = a12;
                    pData[9] = pData[6];
                    pData[13] = pData[7];
                    pData[2] = a13;
                    pData[6] = a23;
                    pData[14] = pData[11];
                    pData[3] = a14;
                    pData[7] = a24;
                    pData[11] = a34;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[1];
                pDataDestination[8] = pData[2];
                pDataDestination[12] = pData[3];
                pDataDestination[1] = pData[4];
                pDataDestination[5] = pData[5];
                pDataDestination[9] = pData[6];
                pDataDestination[13] = pData[7];
                pDataDestination[2] = pData[8];
                pDataDestination[6] = pData[9];
                pDataDestination[10] = pData[10];
                pDataDestination[14] = pData[11];
                pDataDestination[3] = pData[12];
                pDataDestination[7] = pData[13];
                pDataDestination[11] = pData[14];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.determinant = function () {
                var pData = this.data;
                var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
                var a41 = pData[3], a42 = pData[7], a43 = pData[11], a44 = pData[15];
                return a41 * a32 * a23 * a14 - a31 * a42 * a23 * a14 - a41 * a22 * a33 * a14 + a21 * a42 * a33 * a14 + a31 * a22 * a43 * a14 - a21 * a32 * a43 * a14 - a41 * a32 * a13 * a24 + a31 * a42 * a13 * a24 + a41 * a12 * a33 * a24 - a11 * a42 * a33 * a24 - a31 * a12 * a43 * a24 + a11 * a32 * a43 * a24 + a41 * a22 * a13 * a34 - a21 * a42 * a13 * a34 - a41 * a12 * a23 * a34 + a11 * a42 * a23 * a34 + a21 * a12 * a43 * a34 - a11 * a22 * a43 * a34 - a31 * a22 * a13 * a44 + a21 * a32 * a13 * a44 + a31 * a12 * a23 * a44 - a11 * a32 * a23 * a44 - a21 * a12 * a33 * a44 + a11 * a22 * a33 * a44;
            };
            Mat4.prototype.inverse = function (m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                var pData = this.data;
                var pDataDestination = m4fDestination.data;
                // Cache the matrix values (makes for huge speed increases!)
                                var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
                var a41 = pData[3], a42 = pData[7], a43 = pData[11], a44 = pData[15];
                var b00 = a11 * a22 - a12 * a21;
                var b01 = a11 * a23 - a13 * a21;
                var b02 = a11 * a24 - a14 * a21;
                var b03 = a12 * a23 - a13 * a22;
                var b04 = a12 * a24 - a14 * a22;
                var b05 = a13 * a24 - a14 * a23;
                var b06 = a31 * a42 - a32 * a41;
                var b07 = a31 * a43 - a33 * a41;
                var b08 = a31 * a44 - a34 * a41;
                var b09 = a32 * a43 - a33 * a42;
                var b10 = a32 * a44 - a34 * a42;
                var b11 = a33 * a44 - a34 * a43;
                var fDeterminant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                if(fDeterminant === 0.0) {
                    akra.logger.setSourceLocation("Mat4.ts", 624);
                    akra.logger.assert(false, "обращение матрицы с нулевым детеминантом:\n" + this.toString());
                    ; ;
                    //чтоб все не навернулось		        return m4fDestination.set(1.);
                                    }
                var fInverseDeterminant = 1 / fDeterminant;
                pDataDestination[0] = (a22 * b11 - a23 * b10 + a24 * b09) * fInverseDeterminant;
                pDataDestination[4] = (-a12 * b11 + a13 * b10 - a14 * b09) * fInverseDeterminant;
                pDataDestination[8] = (a42 * b05 - a43 * b04 + a44 * b03) * fInverseDeterminant;
                pDataDestination[12] = (-a32 * b05 + a33 * b04 - a34 * b03) * fInverseDeterminant;
                pDataDestination[1] = (-a21 * b11 + a23 * b08 - a24 * b07) * fInverseDeterminant;
                pDataDestination[5] = (a11 * b11 - a13 * b08 + a14 * b07) * fInverseDeterminant;
                pDataDestination[9] = (-a41 * b05 + a43 * b02 - a44 * b01) * fInverseDeterminant;
                pDataDestination[13] = (a31 * b05 - a33 * b02 + a34 * b01) * fInverseDeterminant;
                pDataDestination[2] = (a21 * b10 - a22 * b08 + a24 * b06) * fInverseDeterminant;
                pDataDestination[6] = (-a11 * b10 + a12 * b08 - a14 * b06) * fInverseDeterminant;
                pDataDestination[10] = (a41 * b04 - a42 * b02 + a44 * b00) * fInverseDeterminant;
                pDataDestination[14] = (-a31 * b04 + a32 * b02 - a34 * b00) * fInverseDeterminant;
                pDataDestination[3] = (-a21 * b09 + a22 * b07 - a23 * b06) * fInverseDeterminant;
                pDataDestination[7] = (a11 * b09 - a12 * b07 + a13 * b06) * fInverseDeterminant;
                pDataDestination[11] = (-a41 * b03 + a42 * b01 - a43 * b00) * fInverseDeterminant;
                pDataDestination[15] = (a31 * b03 - a32 * b01 + a33 * b00) * fInverseDeterminant;
                return m4fDestination;
            };
            Mat4.prototype.trace = /**@inline*/ function () {
                var pData = this.data;
                return pData[0] + pData[5] + pData[10] + pData[15];
            };
            Mat4.prototype.isEqual = function (m4fMat, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                if(fEps === 0.0) {
                    if(pData1[0] != pData2[0] || pData1[4] != pData2[4] || pData1[8] != pData2[8] || pData1[12] != pData2[12] || pData1[1] != pData2[1] || pData1[5] != pData2[5] || pData1[9] != pData2[9] || pData1[13] != pData2[13] || pData1[2] != pData2[2] || pData1[6] != pData2[6] || pData1[10] != pData2[10] || pData1[14] != pData2[14] || pData1[3] != pData2[3] || pData1[7] != pData2[7] || pData1[11] != pData2[11] || pData1[15] != pData2[15]) {
                        return false;
                    }
                } else {
                    if(math.abs(pData1[0] - pData2[0]) > fEps || math.abs(pData1[4] - pData2[4]) > fEps || math.abs(pData1[8] - pData2[8]) > fEps || math.abs(pData1[12] - pData2[12]) > fEps || math.abs(pData1[1] - pData2[1]) > fEps || math.abs(pData1[5] - pData2[5]) > fEps || math.abs(pData1[9] - pData2[9]) > fEps || math.abs(pData1[13] - pData2[13]) > fEps || math.abs(pData1[2] - pData2[2]) > fEps || math.abs(pData1[6] - pData2[6]) > fEps || math.abs(pData1[10] - pData2[10]) > fEps || math.abs(pData1[14] - pData2[14]) > fEps || math.abs(pData1[3] - pData2[3]) > fEps || math.abs(pData1[7] - pData2[7]) > fEps || math.abs(pData1[11] - pData2[11]) > fEps || math.abs(pData1[15] - pData2[15]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat4.prototype.isDiagonal = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                var pData = this.data;
                if(fEps === 0.0) {
                    if(pData[4] !== 0.0 || pData[8] !== 0.0 || pData[12] != 0.0 || pData[1] !== 0.0 || pData[9] !== 0.0 || pData[13] != 0.0 || pData[2] !== 0.0 || pData[6] !== 0.0 || pData[14] != 0.0 || pData[3] !== 0.0 || pData[7] !== 0.0 || pData[11] != 0.0) {
                        return false;
                    }
                } else {
                    if(math.abs(pData[4]) > fEps || math.abs(pData[8]) > fEps || math.abs(pData[12]) > fEps || math.abs(pData[1]) > fEps || math.abs(pData[9]) > fEps || math.abs(pData[13]) > fEps || math.abs(pData[2]) > fEps || math.abs(pData[6]) > fEps || math.abs(pData[14]) > fEps || math.abs(pData[3]) > fEps || math.abs(pData[7]) > fEps || math.abs(pData[11]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat4.prototype.toMat3 = function (m3fDestination) {
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = new math.Mat3();
                }
                var pData = this.data;
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[3] = pData[4];
                pDataDestination[6] = pData[8];
                pDataDestination[1] = pData[1];
                pDataDestination[4] = pData[5];
                pDataDestination[7] = pData[9];
                pDataDestination[2] = pData[2];
                pDataDestination[5] = pData[6];
                pDataDestination[8] = pData[10];
                return m3fDestination;
            };
            Mat4.prototype.toQuat4 = function (q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = new math.Quat4();
                }
                var pData = this.data;
                var a11 = pData[0], a12 = pData[4], a13 = pData[8];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10];
                /*x^2*/
                var x2 = ((a11 - a22 - a33) + 1.0) / 4.0;
                /*y^2*/
                var y2 = ((a22 - a11 - a33) + 1.0) / 4.0;
                /*z^2*/
                var z2 = ((a33 - a11 - a22) + 1.0) / 4.0;
                /*w^2*/
                var w2 = ((a11 + a22 + a33) + 1.0) / 4.0;
                var fMax = math.max(x2, math.max(y2, math.max(z2, w2)));
                if(fMax == x2) {
                    //максимальная компонента берется положительной
                    var x = math.sqrt(x2);
                    q4fDestination.x = x;
                    q4fDestination.y = (a21 + a12) / 4.0 / x;
                    q4fDestination.z = (a31 + a13) / 4.0 / x;
                    q4fDestination.w = (a32 - a23) / 4.0 / x;
                } else {
                    if(fMax == y2) {
                        //максимальная компонента берется положительной
                        var y = math.sqrt(y2);
                        q4fDestination.x = (a21 + a12) / 4.0 / y;
                        q4fDestination.y = y;
                        q4fDestination.z = (a32 + a23) / 4.0 / y;
                        q4fDestination.w = (a13 - a31) / 4.0 / y;
                    } else {
                        if(fMax == z2) {
                            //максимальная компонента берется положительной
                            var z = math.sqrt(z2);
                            q4fDestination.x = (a31 + a13) / 4.0 / z;
                            q4fDestination.y = (a32 + a23) / 4.0 / z;
                            q4fDestination.z = z;
                            q4fDestination.w = (a21 - a12) / 4.0 / z;
                        } else {
                            //максимальная компонента берется положительной
                            var w = math.sqrt(w2);
                            q4fDestination.x = (a32 - a23) / 4.0 / w;
                            q4fDestination.y = (a13 - a31) / 4.0 / w;
                            q4fDestination.z = (a21 - a12) / 4.0 / w;
                            q4fDestination.w = w;
                        }
                    }
                }
                return q4fDestination;
            };
            Mat4.prototype.toRotationMatrix = function (m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new Mat4();
                }
                var pData = this.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[4];
                pDataDestination[8] = pData[8];
                pDataDestination[12] = 0.0;
                pDataDestination[1] = pData[1];
                pDataDestination[5] = pData[5];
                pDataDestination[9] = pData[9];
                pDataDestination[13] = 0.0;
                pDataDestination[2] = pData[2];
                pDataDestination[6] = pData[6];
                pDataDestination[10] = pData[10];
                pDataDestination[14] = 0.0;
                pDataDestination[3] = 0.0;
                pDataDestination[7] = 0.0;
                pDataDestination[11] = 0.0;
                pDataDestination[15] = 1.0;
                return m4fDestination;
            };
            Mat4.prototype.toString = function () {
                var pData = this.data;
                return '[' + pData[0] + ", " + pData[4] + ', ' + pData[8] + ', ' + pData[12] + ',\n' + pData[1] + ", " + pData[5] + ', ' + pData[9] + ', ' + pData[13] + ',\n' + pData[2] + ", " + pData[6] + ', ' + pData[10] + ', ' + pData[14] + ',\n' + pData[3] + ", " + pData[7] + ', ' + pData[11] + ', ' + pData[15] + ']';
            };
            Mat4.prototype.rotateRight = function (fAngle, v3fAxis, m4fDestination) {
                var pData = this.data;
                var x = v3fAxis.x, y = v3fAxis.y, z = v3fAxis.z;
                var fLength = Math.sqrt(x * x + y * y + z * z);
                if(fLength === 0.0) {
                    akra.logger.setSourceLocation("Mat4.ts", 860);
                    akra.logger.assert(false, "попытка вращения вокруг оси нулевой длины. Угол " + fAngle + ". Ось " + v3fAxis.toString());
                    ; ;
                    if(akra.isDef(m4fDestination)) {
                        m4fDestination.set(this);
                    } else {
                        m4fDestination = this;
                    }
                    return m4fDestination;
                }
                var fInvLength = 1.0 / fLength;
                x *= fInvLength;
                y *= fInvLength;
                z *= fInvLength;
                var a11 = pData[0], a12 = pData[4], a13 = pData[8];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10];
                var fSin = math.sin(fAngle);
                var fCos = math.cos(fAngle);
                var fTmp = 1.0 - fCos;
                //build Rotation matrix
                                var b11 = fCos + fTmp * x * x, b12 = fTmp * x * y - fSin * z, b13 = fTmp * x * z + fSin * y;
                var b21 = fTmp * y * z + fSin * z, b22 = fCos + fTmp * y * y, b23 = fTmp * y * z - fSin * x;
                var b31 = fTmp * z * x - fSin * y, b32 = fTmp * z * y + fSin * x, b33 = fCos + fTmp * z * z;
                if(!akra.isDef(m4fDestination)) {
                    pData[0] = a11 * b11 + a12 * b21 + a13 * b31;
                    pData[4] = a11 * b12 + a12 * b22 + a13 * b32;
                    pData[8] = a11 * b13 + a12 * b23 + a13 * b33;
                    pData[1] = a21 * b11 + a22 * b21 + a23 * b31;
                    pData[5] = a21 * b12 + a22 * b22 + a23 * b32;
                    pData[9] = a21 * b13 + a22 * b23 + a23 * b33;
                    pData[2] = a31 * b11 + a32 * b21 + a33 * b31;
                    pData[6] = a31 * b12 + a32 * b22 + a33 * b32;
                    pData[10] = a31 * b13 + a32 * b23 + a33 * b33;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = a11 * b11 + a12 * b21 + a13 * b31;
                pDataDestination[4] = a11 * b12 + a12 * b22 + a13 * b32;
                pDataDestination[8] = a11 * b13 + a12 * b23 + a13 * b33;
                pDataDestination[12] = pData[12];
                pDataDestination[1] = a21 * b11 + a22 * b21 + a23 * b31;
                pDataDestination[5] = a21 * b12 + a22 * b22 + a23 * b32;
                pDataDestination[9] = a21 * b13 + a22 * b23 + a23 * b33;
                pDataDestination[13] = pData[13];
                pDataDestination[2] = a31 * b11 + a32 * b21 + a33 * b31;
                pDataDestination[6] = a31 * b12 + a32 * b22 + a33 * b32;
                pDataDestination[10] = a31 * b13 + a32 * b23 + a33 * b33;
                pDataDestination[14] = pData[14];
                pDataDestination[3] = pData[3];
                pDataDestination[7] = pData[7];
                pDataDestination[11] = pData[11];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.rotateLeft = function (fAngle, v3fAxis, m4fDestination) {
                var pData = this.data;
                var x = v3fAxis.x, y = v3fAxis.y, z = v3fAxis.z;
                var fLength = Math.sqrt(x * x + y * y + z * z);
                if(fLength === 0.0) {
                    akra.logger.setSourceLocation("Mat4.ts", 938);
                    akra.logger.assert(false, "попытка вращения вокруг оси нулевой длины. Угол " + fAngle + ". Ось " + v3fAxis.toString());
                    ; ;
                    if(akra.isDef(m4fDestination)) {
                        m4fDestination.set(this);
                    } else {
                        m4fDestination = this;
                    }
                    return m4fDestination;
                }
                var fInvLength = 1.0 / fLength;
                x *= fInvLength;
                y *= fInvLength;
                z *= fInvLength;
                var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
                var fSin = math.sin(fAngle);
                var fCos = math.cos(fAngle);
                var fTmp = 1.0 - fCos;
                //build Rotation matrix
                                var b11 = fCos + fTmp * x * x, b12 = fTmp * x * y - fSin * z, b13 = fTmp * x * z + fSin * y;
                var b21 = fTmp * y * z + fSin * z, b22 = fCos + fTmp * y * y, b23 = fTmp * y * z - fSin * x;
                var b31 = fTmp * z * x - fSin * y, b32 = fTmp * z * y + fSin * x, b33 = fCos + fTmp * z * z;
                if(!akra.isDef(m4fDestination)) {
                    pData[0] = b11 * a11 + b12 * a21 + b13 * a31;
                    pData[4] = b11 * a12 + b12 * a22 + b13 * a32;
                    pData[8] = b11 * a13 + b12 * a23 + b13 * a33;
                    pData[12] = b11 * a14 + b12 * a24 + b13 * a34;
                    pData[1] = b21 * a11 + b22 * a21 + b23 * a31;
                    pData[5] = b21 * a12 + b22 * a22 + b23 * a32;
                    pData[9] = b21 * a13 + b22 * a23 + b23 * a33;
                    pData[13] = b21 * a14 + b22 * a24 + b23 * a34;
                    pData[2] = b31 * a11 + b32 * a21 + b33 * a31;
                    pData[6] = b31 * a12 + b32 * a22 + b33 * a32;
                    pData[10] = b31 * a13 + b32 * a23 + b33 * a33;
                    pData[14] = b31 * a14 + b32 * a24 + b33 * a34;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = b11 * a11 + b12 * a21 + b13 * a31;
                pDataDestination[4] = b11 * a12 + b12 * a22 + b13 * a32;
                pDataDestination[8] = b11 * a13 + b12 * a23 + b13 * a33;
                pDataDestination[12] = b11 * a14 + b12 * a24 + b13 * a34;
                pDataDestination[1] = b21 * a11 + b22 * a21 + b23 * a31;
                pDataDestination[5] = b21 * a12 + b22 * a22 + b23 * a32;
                pDataDestination[9] = b21 * a13 + b22 * a23 + b23 * a33;
                pDataDestination[13] = b21 * a14 + b22 * a24 + b23 * a34;
                pDataDestination[2] = b31 * a11 + b32 * a21 + b33 * a31;
                pDataDestination[6] = b31 * a12 + b32 * a22 + b33 * a32;
                pDataDestination[10] = b31 * a13 + b32 * a23 + b33 * a33;
                pDataDestination[14] = b31 * a14 + b32 * a24 + b33 * a34;
                pDataDestination[3] = pData[3];
                pDataDestination[7] = pData[7];
                pDataDestination[11] = pData[11];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.setTranslation = /**@inline*/ function (v3fTranslation) {
                var pData = this.data;
                pData[12] = v3fTranslation.x;
                pData[13] = v3fTranslation.y;
                pData[14] = v3fTranslation.z;
                return this;
            };
            Mat4.prototype.getTranslation = /**@inline*/ function (v3fTranslation) {
                if(!akra.isDef(v3fTranslation)) {
                    v3fTranslation = new math.Vec3();
                }
                var pData = this.data;
                v3fTranslation.x = pData[12];
                v3fTranslation.y = pData[13];
                v3fTranslation.z = pData[14];
                return v3fTranslation;
            };
            Mat4.prototype.translateRight = function (v3fTranslation, m4fDestination) {
                var pData = this.data;
                var x = v3fTranslation.x, y = v3fTranslation.y, z = v3fTranslation.z;
                if(!akra.isDef(m4fDestination)) {
                    pData[12] = pData[0] * x + pData[4] * y + pData[8] * z + pData[12];
                    pData[13] = pData[1] * x + pData[5] * y + pData[9] * z + pData[13];
                    pData[14] = pData[2] * x + pData[6] * y + pData[10] * z + pData[14];
                    pData[15] = pData[3] * x + pData[7] * y + pData[11] * z + pData[15];
                    //строго говоря последнюю строчку умножать не обязательно, так как она должна быть -> 0 0 0 1
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                //кешируем матрицу вращений
                                var a11 = pData[0], a12 = pData[4], a13 = pData[8];
                var a21 = pData[0], a22 = pData[5], a23 = pData[9];
                var a31 = pData[0], a32 = pData[6], a33 = pData[10];
                var a41 = pData[0], a42 = pData[7], a43 = pData[11];
                pDataDestination[0] = a11;
                pDataDestination[4] = a12;
                pDataDestination[8] = a13;
                pDataDestination[12] = a11 * x + a12 * y + a13 * z + pData[12];
                pDataDestination[1] = a21;
                pDataDestination[5] = a22;
                pDataDestination[9] = a23;
                pDataDestination[13] = a21 * x + a22 * y + a23 * z + pData[13];
                pDataDestination[2] = a31;
                pDataDestination[6] = a32;
                pDataDestination[10] = a33;
                pDataDestination[14] = a31 * x + a32 * y + a33 * z + pData[14];
                pDataDestination[3] = a41;
                pDataDestination[7] = a42;
                pDataDestination[11] = a43;
                pDataDestination[15] = a41 * x + a42 * y + a43 * z + pData[15];
                return m4fDestination;
            };
            Mat4.prototype.translateLeft = function (v3fTranslation, m4fDestination) {
                var pData = this.data;
                var x = v3fTranslation.x, y = v3fTranslation.y, z = v3fTranslation.z;
                if(!akra.isDef(m4fDestination)) {
                    pData[12] = x + pData[12];
                    pData[13] = y + pData[13];
                    pData[14] = z + pData[14];
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[4];
                pDataDestination[8] = pData[8];
                pDataDestination[12] = x + pData[12];
                pDataDestination[1] = pData[1];
                pDataDestination[5] = pData[5];
                pDataDestination[9] = pData[9];
                pDataDestination[13] = y + pData[13];
                pDataDestination[2] = pData[2];
                pDataDestination[6] = pData[6];
                pDataDestination[10] = pData[10];
                pDataDestination[14] = z + pData[14];
                pDataDestination[3] = pData[3];
                pDataDestination[7] = pData[7];
                pDataDestination[11] = pData[11];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.scaleRight = function (v3fScale, m4fDestination) {
                var pData = this.data;
                var x = v3fScale.x, y = v3fScale.y, z = v3fScale.z;
                if(!akra.isDef(m4fDestination)) {
                    pData[0] *= x;
                    pData[4] *= y;
                    pData[8] *= z;
                    pData[1] *= x;
                    pData[5] *= y;
                    pData[9] *= z;
                    pData[2] *= x;
                    pData[6] *= y;
                    pData[10] *= z;
                    //скейлить эти компоненты необязательно, так как там должны лежать нули
                    pData[3] *= x;
                    pData[7] *= y;
                    pData[11] *= z;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0] * x;
                pDataDestination[4] = pData[4] * y;
                pDataDestination[8] = pData[8] * z;
                pDataDestination[12] = pData[12];
                pDataDestination[1] = pData[1] * x;
                pDataDestination[5] = pData[5] * y;
                pDataDestination[9] = pData[9] * z;
                pDataDestination[13] = pData[13];
                pDataDestination[2] = pData[2] * x;
                pDataDestination[6] = pData[6] * y;
                pDataDestination[10] = pData[10] * z;
                pDataDestination[14] = pData[14];
                //скейлить эти компоненты необязательно, так как там должны лежать нули
                pDataDestination[3] = pData[3] * x;
                pDataDestination[7] = pData[7] * y;
                pDataDestination[11] = pData[11] * z;
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.scaleLeft = function (v3fScale, m4fDestination) {
                var pData = this.data;
                var x = v3fScale.x, y = v3fScale.y, z = v3fScale.z;
                if(!akra.isDef(m4fDestination)) {
                    pData[0] *= x;
                    pData[4] *= x;
                    pData[8] *= x;
                    pData[12] *= x;
                    pData[1] *= y;
                    pData[5] *= y;
                    pData[9] *= y;
                    pData[13] *= y;
                    pData[2] *= z;
                    pData[6] *= z;
                    pData[10] *= z;
                    pData[14] *= z;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0] * x;
                pDataDestination[4] = pData[4] * x;
                pDataDestination[8] = pData[8] * x;
                pDataDestination[12] = pData[12] * x;
                pDataDestination[1] = pData[1] * y;
                pDataDestination[5] = pData[5] * y;
                pDataDestination[9] = pData[9] * y;
                pDataDestination[13] = pData[13] * y;
                pDataDestination[2] = pData[2] * z;
                pDataDestination[6] = pData[6] * z;
                pDataDestination[10] = pData[10] * z;
                pDataDestination[14] = pData[14] * z;
                pDataDestination[3] = pData[3];
                pDataDestination[7] = pData[7];
                pDataDestination[11] = pData[11];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.decompose = /**@inline*/ function (q4fRotation, v3fScale, v3fTranslation) {
                this.getTranslation(v3fTranslation);
                var m3fRotScale = this.toMat3(math.mat3());
                return m3fRotScale.decompose(q4fRotation, v3fScale);
            };
            Mat4.prototype.row = function (iRow, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = new math.Vec4();
                }
                var pData = this.data;
                switch(iRow) {
                    case 1: {
                        v4fDestination.x = pData[0];
                        v4fDestination.y = pData[4];
                        v4fDestination.z = pData[8];
                        v4fDestination.w = pData[12];
                        break;

                    }
                    case 2: {
                        v4fDestination.x = pData[1];
                        v4fDestination.y = pData[5];
                        v4fDestination.z = pData[9];
                        v4fDestination.w = pData[13];
                        break;

                    }
                    case 3: {
                        v4fDestination.x = pData[2];
                        v4fDestination.y = pData[6];
                        v4fDestination.z = pData[10];
                        v4fDestination.w = pData[14];
                        break;

                    }
                    case 4: {
                        v4fDestination.x = pData[3];
                        v4fDestination.y = pData[7];
                        v4fDestination.z = pData[11];
                        v4fDestination.w = pData[15];
                        break;

                    }
                }
                return v4fDestination;
            };
            Mat4.prototype.column = function (iColumn, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = new math.Vec4();
                }
                var pData = this.data;
                switch(iColumn) {
                    case 1: {
                        v4fDestination.x = pData[0];
                        v4fDestination.y = pData[1];
                        v4fDestination.z = pData[2];
                        v4fDestination.w = pData[3];
                        break;

                    }
                    case 2: {
                        v4fDestination.x = pData[4];
                        v4fDestination.y = pData[5];
                        v4fDestination.z = pData[6];
                        v4fDestination.w = pData[7];
                        break;

                    }
                    case 3: {
                        v4fDestination.x = pData[8];
                        v4fDestination.y = pData[9];
                        v4fDestination.z = pData[10];
                        v4fDestination.w = pData[11];
                        break;

                    }
                    case 4: {
                        v4fDestination.x = pData[12];
                        v4fDestination.y = pData[13];
                        v4fDestination.z = pData[14];
                        v4fDestination.w = pData[15];
                        break;

                    }
                }
                return v4fDestination;
            };
            Mat4.prototype.unproj = function (v, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = new math.Vec4();
                }
                var pData = this.data;
                var v3fScreen = v;
                var x, y, z;
                if(pData[15] === 1.0) {
                    //orthogonal projection case
                    z = (v3fScreen.z - pData[14]) / pData[10];
                    y = (v3fScreen.y - pData[13]) / pData[5];
                    x = (v3fScreen.x - pData[12]) / pData[0];
                } else {
                    //pData[__43] === -1
                    //frustum case
                    z = -pData[14] / (pData[10] + v3fScreen.z);
                    y = -(v3fScreen.y + pData[9]) * z / pData[5];
                    x = -(v3fScreen.x + pData[8]) * z / pData[0];
                }
                v4fDestination.x = x;
                v4fDestination.y = y;
                v4fDestination.z = z;
                v4fDestination.w = 1.0;
                return v4fDestination;
            };
            Mat4.fromYawPitchRoll = function fromYawPitchRoll(fYaw, fPitch, fRoll, m4fDestination) {
                if(arguments.length <= 2) {
                    //Vec3 + m4fDestination
                    var v3fVec = arguments[0];
                    fYaw = v3fVec.x;
                    fPitch = v3fVec.y;
                    fRoll = v3fVec.z;
                    m4fDestination = arguments[1];
                }
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new Mat4();
                }
                var pDataDestination = m4fDestination.data;
                var fSin1 = Math.sin(fYaw);
                var fSin2 = Math.sin(fPitch);
                var fSin3 = Math.sin(fRoll);
                var fCos1 = Math.cos(fYaw);
                var fCos2 = Math.cos(fPitch);
                var fCos3 = Math.cos(fRoll);
                pDataDestination[0] = fCos1 * fCos3 + fSin1 * fSin2 * fSin3;
                pDataDestination[4] = fCos3 * fSin1 * fSin2 - fCos1 * fSin3;
                pDataDestination[8] = fCos2 * fSin1;
                pDataDestination[12] = 0.0;
                pDataDestination[1] = fCos2 * fSin3;
                pDataDestination[5] = fCos2 * fCos3;
                pDataDestination[9] = -fSin2;
                pDataDestination[13] = 0.0;
                pDataDestination[2] = fCos1 * fSin2 * fSin3 - fCos3 * fSin1;
                pDataDestination[6] = fSin1 * fSin3 + fCos1 * fCos3 * fSin2;
                pDataDestination[10] = fCos1 * fCos2;
                pDataDestination[14] = 0.0;
                pDataDestination[3] = 0.0;
                pDataDestination[7] = 0.0;
                pDataDestination[11] = 0.0;
                pDataDestination[15] = 1.0;
                return m4fDestination;
            }
            Mat4.fromXYZ = function fromXYZ(fX, fY, fZ, m4fDestination) {
                if(arguments.length <= 2) {
                    //Vec3 + m4fDestination
                    var v3fVec = arguments[0];
                    return Mat4.fromYawPitchRoll(v3fVec.y, v3fVec.x, v3fVec.z, arguments[1]);
                } else {
                    //fX fY fZ m4fDestination
                    var fX = arguments[0];
                    var fY = arguments[1];
                    var fZ = arguments[2];
                    return Mat4.fromYawPitchRoll(fY, fX, fZ, arguments[3]);
                }
            }
            Mat4.frustum = function frustum(fLeft, fRight, fBottom, fTop, fNear, fFar, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new Mat4();
                }
                var pDataDestination = m4fDestination.data;
                var fRL = fRight - fLeft;
                var fTB = fTop - fBottom;
                var fFN = fFar - fNear;
                pDataDestination[0] = 2.0 * fNear / fRL;
                pDataDestination[4] = 0.0;
                pDataDestination[8] = (fRight + fLeft) / fRL;
                pDataDestination[12] = 0.0;
                pDataDestination[1] = 0.0;
                pDataDestination[5] = 2.0 * fNear / fTB;
                pDataDestination[9] = (fTop + fBottom) / fTB;
                pDataDestination[13] = 0.0;
                pDataDestination[2] = 0.0;
                pDataDestination[6] = 0.0;
                pDataDestination[10] = -(fFar + fNear) / fFN;
                pDataDestination[14] = -2.0 * fFar * fNear / fFN;
                pDataDestination[3] = 0.0;
                pDataDestination[7] = 0.0;
                pDataDestination[11] = -1.0;
                pDataDestination[15] = 0.0;
                return m4fDestination;
            }
            Mat4.perspective = /**@inline*/ function perspective(fFovy, fAspect, fNear, fFar, m4fDestination) {
                var fTop = fNear * math.tan(fFovy / 2.0);
                var fRight = fTop * fAspect;
                return Mat4.frustum(-fRight, fRight, -fTop, fTop, fNear, fFar, m4fDestination);
            }
            Mat4.orthogonalProjectionAsymmetric = function orthogonalProjectionAsymmetric(fLeft, fRight, fBottom, fTop, fNear, fFar, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new Mat4();
                }
                var pDataDestination = m4fDestination.data;
                var fRL = fRight - fLeft;
                var fTB = fTop - fBottom;
                var fFN = fFar - fNear;
                pDataDestination[0] = 2.0 / fRL;
                pDataDestination[4] = 0.0;
                pDataDestination[8] = 0.0;
                pDataDestination[12] = -(fRight + fLeft) / fRL;
                pDataDestination[1] = 0.0;
                pDataDestination[5] = 2.0 / fTB;
                pDataDestination[9] = 0.0;
                pDataDestination[13] = -(fTop + fBottom) / fTB;
                pDataDestination[2] = 0.0;
                pDataDestination[6] = 0.0;
                pDataDestination[10] = -2.0 / fFN;
                pDataDestination[14] = -(fFar + fNear) / fFN;
                pDataDestination[3] = 0.0;
                pDataDestination[7] = 0.0;
                pDataDestination[11] = 0.0;
                pDataDestination[15] = 1.0;
                return m4fDestination;
            }
            Mat4.orthogonalProjection = /**@inline*/ function orthogonalProjection(fWidth, fHeight, fNear, fFar, m4fDestination) {
                var fRight = fWidth / 2.0;
                var fTop = fHeight / 2.0;
                return Mat4.orthogonalProjectionAsymmetric(-fRight, fRight, -fTop, fTop, fNear, fFar, m4fDestination);
            }
            Mat4.lookAt = function lookAt(v3fEye, v3fCenter, v3fUp, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new Mat4(1.0);
                }
                var fEyeX = v3fEye.x, fEyeY = v3fEye.y, fEyeZ = v3fEye.z;
                var fCenterX = v3fCenter.x, fCenterY = v3fCenter.y, fCenterZ = v3fCenter.z;
                var fUpX = v3fUp.x, fUpY = v3fUp.y, fUpZ = v3fUp.z;
                var fLength;
                var fInvLength;
                if(fEyeX === fCenterX && fEyeY === fCenterY && fEyeZ === fCenterZ) {
                    return m4fDestination;
                }
                var fXNewX, fXNewY, fXNewZ;
                var fYNewX, fYNewY, fYNewZ;
                var fZNewX, fZNewY, fZNewZ;
                //ось Z направлена на наблюдателя
                fZNewX = fEyeX - fCenterX;
                fZNewY = fEyeY - fCenterY;
                fZNewZ = fEyeZ - fCenterZ;
                fLength = math.sqrt(fZNewX * fZNewX + fZNewY * fZNewY + fZNewZ * fZNewZ);
                fInvLength = 1.0 / fLength;
                //новая ось Z
                fZNewX = fZNewX * fInvLength;
                fZNewY = fZNewY * fInvLength;
                fZNewZ = fZNewZ * fInvLength;
                //новая ось X
                fXNewX = fUpY * fZNewZ - fUpZ * fZNewY;
                fXNewY = fUpZ * fZNewX - fUpX * fZNewZ;
                fXNewZ = fUpX * fZNewY - fUpY * fZNewX;
                fLength = math.sqrt(fXNewX * fXNewX + fXNewY * fXNewY + fXNewZ * fXNewZ);
                if(fLength) {
                    fInvLength = 1.0 / fLength;
                    fXNewX = fXNewX * fInvLength;
                    fXNewY = fXNewY * fInvLength;
                    fXNewZ = fXNewZ * fInvLength;
                }
                //новая ось Y
                fYNewX = fZNewY * fXNewZ - fZNewZ * fXNewY;
                fYNewY = fZNewZ * fXNewX - fZNewX * fXNewZ;
                fYNewZ = fZNewX * fXNewY - fZNewY * fXNewX;
                //нормировать ненужно, так как было векторное умножение двух ортонормированных векторов
                //положение камеры в новых осях
                var fEyeNewX = fEyeX * fXNewX + fEyeY * fXNewY + fEyeZ * fXNewZ;
                var fEyeNewY = fEyeX * fYNewX + fEyeY * fYNewY + fEyeZ * fYNewZ;
                var fEyeNewZ = fEyeX * fZNewX + fEyeY * fZNewY + fEyeZ * fZNewZ;
                var pDataDestination = m4fDestination.data;
                //lookAt matrix === camera view matrix
                //почему новый базис записывается по строкам?
                //это сзязано с тем, что это получающаяся матрица -
                //это viewMatrix камеры, а на эту матрицу умножается при рендеринге, то есть
                //модель должна испытать преобразования противоположные тем, которые испытывает камера
                //то есть вращение в другую сторону(базис по строкам) и сдвиг в противоположную сторону
                pDataDestination[0] = fXNewX;
                pDataDestination[4] = fXNewY;
                pDataDestination[8] = fXNewZ;
                /*отъезжаем в позицию камеры*/
                pDataDestination[12] = -fEyeNewX;
                pDataDestination[1] = fYNewX;
                pDataDestination[5] = fYNewY;
                pDataDestination[9] = fYNewZ;
                /*отъезжаем в позицию камеры*/
                pDataDestination[13] = -fEyeNewY;
                pDataDestination[2] = fZNewX;
                pDataDestination[6] = fZNewY;
                pDataDestination[10] = fZNewZ;
                /*отъезжаем в позицию камеры*/
                pDataDestination[14] = -fEyeNewZ;
                pDataDestination[3] = 0.0;
                pDataDestination[7] = 0.0;
                pDataDestination[11] = 0.0;
                pDataDestination[15] = 1.0;
                return m4fDestination;
            }
            Object.defineProperty(Mat4, "stackCeil", {
                get: function () {
                    Mat4.stackPosition = Mat4.stackPosition === Mat4.stackSize - 1 ? 0 : Mat4.stackPosition;
                    return Mat4.stack[Mat4.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Mat4.stackSize = 100;
            Mat4.stackPosition = 0;
            Mat4.stack = (function () {
                var pStack = new Array(Mat4.stackSize);
                for(var i = 0; i < Mat4.stackSize; i++) {
                    pStack[i] = new Mat4();
                }
                return pStack;
            })();
            return Mat4;
        })();
        math.Mat4 = Mat4;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
        var Quat4 = (function () {
            function Quat4(fX, fY, fZ, fW) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        this.set(arguments[0]);
                        break;

                    }
                    case 2: {
                        this.set(arguments[0], arguments[1]);
                        break;

                    }
                    case 4: {
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;

                    }
                    default: {
                        this.x = this.y = this.z = 0.0;
                        this.w = 1.0;
                        break;

                    }
                }
            }
            Quat4.prototype.set = function (fX, fY, fZ, fW) {
                var nArgumentsLength = arguments.length;
                if(nArgumentsLength === 0) {
                    this.x = this.y = this.z = 0.0;
                    this.w = 1.0;
                }
                if(nArgumentsLength === 1) {
                    if(arguments[0] instanceof Quat4) {
                        var q4fQuat = arguments[0];
                        this.x = q4fQuat.x;
                        this.y = q4fQuat.y;
                        this.z = q4fQuat.z;
                        this.w = q4fQuat.w;
                    } else {
                        //Array
                        var pElements = arguments[0];
                        this.x = pElements[0];
                        this.y = pElements[1];
                        this.z = pElements[2];
                        this.w = pElements[3];
                    }
                } else {
                    if(nArgumentsLength === 2) {
                        //float float
                        //vec3 float
                        if(akra.isFloat(arguments[0])) {
                            //float float
                            var fValue = arguments[0];
                            this.x = fValue;
                            this.y = fValue;
                            this.z = fValue;
                            this.w = arguments[1];
                        } else {
                            //vec3 float
                            var v3fValue = arguments[0];
                            this.x = v3fValue.x;
                            this.y = v3fValue.y;
                            this.z = v3fValue.z;
                            this.w = arguments[1];
                        }
                    } else {
                        if(nArgumentsLength === 4) {
                            this.x = arguments[0];
                            this.y = arguments[1];
                            this.z = arguments[2];
                            this.w = arguments[3];
                        }
                    }
                }
                return this;
            };
            Quat4.prototype.multiply = function (q4fQuat, q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = this;
                }
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                q4fDestination.x = x1 * w2 + x2 * w1 + y1 * z2 - z1 * y2;
                q4fDestination.y = y1 * w2 + y2 * w1 + z1 * x2 - x1 * z2;
                q4fDestination.z = z1 * w2 + z2 * w1 + x1 * y2 - y1 * x2;
                q4fDestination.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;
                return q4fDestination;
            };
            Quat4.prototype.multiplyVec3 = function (v3fVec, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = v3fVec;
                }
                var q4fVec = math.quat4(v3fVec, 0);
                var qInverse = this.inverse(math.quat4());
                var qResult = this.multiply(q4fVec.multiply(qInverse), math.quat4());
                v3fDestination.x = qResult.x;
                v3fDestination.y = qResult.y;
                v3fDestination.z = qResult.z;
                return v3fDestination;
            };
            Quat4.prototype.conjugate = function (q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    this.x = -this.x;
                    this.y = -this.y;
                    this.z = -this.z;
                    return this;
                }
                q4fDestination.x = -this.x;
                q4fDestination.y = -this.y;
                q4fDestination.z = -this.z;
                q4fDestination.w = this.w;
                return q4fDestination;
            };
            Quat4.prototype.inverse = function (q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fSqLength = x * x + y * y + z * z + w * w;
                if(fSqLength === 0.0) {
                    q4fDestination.x = 0.0;
                    q4fDestination.y = 0.0;
                    q4fDestination.z = 0.0;
                    q4fDestination.w = 0.0;
                } else {
                    var fInvSqLength = 1.0 / fSqLength;
                    q4fDestination.x = -x * fInvSqLength;
                    q4fDestination.y = -y * fInvSqLength;
                    q4fDestination.z = -z * fInvSqLength;
                    q4fDestination.w = w * fInvSqLength;
                }
                return q4fDestination;
            };
            Quat4.prototype.length = /**@inline*/ function () {
                var x = this.x, y = this.y, z = this.z, w = this.w;
                return math.sqrt(x * x + y * y + z * z + w * w);
            };
            Quat4.prototype.normalize = function (q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fLength = math.sqrt(x * x + y * y + z * z + w * w);
                if(fLength === 0.0) {
                    q4fDestination.x = 0.0;
                    q4fDestination.y = 0.0;
                    q4fDestination.z = 0.0;
                    q4fDestination.w = 0.0;
                } else {
                    var fInvLength = 1 / fLength;
                    q4fDestination.x = x * fInvLength;
                    q4fDestination.y = y * fInvLength;
                    q4fDestination.z = z * fInvLength;
                    q4fDestination.w = w * fInvLength;
                }
                return q4fDestination;
            };
            Quat4.prototype.calculateW = function (q4fDestination) {
                var x = this.x, y = this.y, z = this.z;
                if(!akra.isDef(q4fDestination)) {
                    this.w = math.sqrt(1.0 - x * x - y * y - z * z);
                    return this;
                }
                q4fDestination.x = x;
                q4fDestination.y = y;
                q4fDestination.z = z;
                q4fDestination.w = math.sqrt(1.0 - x * x - y * y - z * z);
                return q4fDestination;
            };
            Quat4.prototype.isEqual = function (q4fQuat, fEps, asMatrix) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if (typeof asMatrix === "undefined") { asMatrix = false; }
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                var fLength1 = math.sqrt(x1 * x1 + y1 * y1 + z1 * z1 + w1 * w1);
                var fLength2 = math.sqrt(x2 * x2 + y2 * y2 + z2 * z2 + w2 * w2);
                if(math.abs(fLength2 - fLength2) > fEps) {
                    return false;
                }
                var cosHalfTheta = (x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2) / fLength1 / fLength2;
                if(asMatrix) {
                    cosHalfTheta = math.abs(cosHalfTheta);
                }
                if(1.0 - cosHalfTheta > fEps) {
                    return false;
                }
                return true;
            };
            Quat4.prototype.getYaw = function () {
                var fYaw;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fx2 = x * 2.0;
                var fy2 = y * 2.0;
                if(math.abs(x) == math.abs(w)) {
                    //вырожденный случай обрабатывается отдельно
                    //
                    var wTemp = w * math.sqrt(2.0);
                    //cos(Yaw/2)*cos(Roll/2) + sin(Yaw/2)*sin(Roll/2) = cos((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //cos(Yaw/2)*cos(Roll/2) - sin(Yaw/2)*sin(Roll/2) = cos((Yaw+Roll)/2); Roll = 0;
                    var yTemp = y * math.sqrt(2.0);
                    //sin(Yaw/2)*cos(Roll/2) - cos(Yaw/2)*sin(Roll/2) = sin((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //sin(Yaw/2)*cos(Roll/2) + cos(Yaw/2)*sin(Roll/2) = sin((Yaw+Roll)/2); Roll = 0;
                    fYaw = math.atan2(yTemp, wTemp) * 2.0;
                    //fRoll = 0;
                    //убираем дополнительный оборот
                    var pi = math.PI;
                    if(fYaw > pi) {
                        fYaw -= pi;
                        //fRoll = (x == w) ? -pi : pi;
                                            } else {
                        if(fYaw < -pi) {
                            fYaw += pi;
                            //fRoll = (x == w) ? pi : -pi;
                                                    }
                    }
                } else {
                    //Math.atan2(sin(Yaw)*cos(Pitch),cos(Yaw)*cos(Pitch));
                    fYaw = math.atan2(fx2 * z + fy2 * w, 1.0 - (fx2 * x + fy2 * y));
                }
                return fYaw;
            };
            Quat4.prototype.getPitch = function () {
                var fPitch;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fx2 = x * 2.0;
                var fy2 = y * 2.0;
                /*в очень редких случаях из-за ошибок округления получается результат > 1*/
                var fSinPitch = math.clamp(fx2 * w - fy2 * z, -1.0, 1.0);
                fPitch = math.asin(fSinPitch);
                return fPitch;
            };
            Quat4.prototype.getRoll = function () {
                var fRoll;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fx2 = x * 2.0;
                var fz2 = z * 2.0;
                if(math.abs(x) == math.abs(w)) {
                    //вырожденный случай обрабатывается отдельно
                    //
                    var wTemp = w * math.sqrt(2.0);
                    //cos(Yaw/2)*cos(Roll/2) + sin(Yaw/2)*sin(Roll/2) = cos((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //cos(Yaw/2)*cos(Roll/2) - sin(Yaw/2)*sin(Roll/2) = cos((Yaw+Roll)/2); Roll = 0;
                    var yTemp = y * math.sqrt(2.0);
                    //sin(Yaw/2)*cos(Roll/2) - cos(Yaw/2)*sin(Roll/2) = sin((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //sin(Yaw/2)*cos(Roll/2) + cos(Yaw/2)*sin(Roll/2) = sin((Yaw+Roll)/2); Roll = 0;
                    var fYaw = math.atan2(yTemp, wTemp) * 2.0;
                    fRoll = 0.0;
                    //убираем дополнительный оборот
                    var pi = math.PI;
                    if(fYaw > pi) {
                        //fYaw -= pi;
                        fRoll = (x == w) ? -pi : pi;
                    } else {
                        if(fYaw < -pi) {
                            //fYaw += pi;
                            fRoll = (x == w) ? pi : -pi;
                        }
                    }
                } else {
                    //Math.atan2(cos(Pitch) * sin(Roll),cos(Pitch)*cos(Roll));
                    fRoll = math.atan2(fx2 * y + fz2 * w, 1.0 - (fx2 * x + fz2 * z));
                }
                return fRoll;
            };
            Quat4.prototype.toYawPitchRoll = function (v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new math.Vec3();
                }
                var fYaw, fPitch, fRoll;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fx2 = x * 2.0;
                var fy2 = y * 2.0;
                var fz2 = z * 2.0;
                var fw2 = w * 2.0;
                /*в очень редких случаях из-за ошибок округления получается результат > 1*/
                var fSinPitch = math.clamp(fx2 * w - fy2 * z, -1.0, 1.0);
                fPitch = math.asin(fSinPitch);
                //не известен знак косинуса, как следствие это потребует дополнительной проверки.
                //как показала практика - это не на что не влияет, просто один и тот же кватернион можно получить двумя разными вращениями
                if(math.abs(x) == math.abs(w)) {
                    //вырожденный случай обрабатывается отдельно
                    //
                    var wTemp = w * math.sqrt(2.0);
                    //cos(Yaw/2)*cos(Roll/2) + sin(Yaw/2)*sin(Roll/2) = cos((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //cos(Yaw/2)*cos(Roll/2) - sin(Yaw/2)*sin(Roll/2) = cos((Yaw+Roll)/2); Roll = 0;
                    var yTemp = y * math.sqrt(2.0);
                    //sin(Yaw/2)*cos(Roll/2) - cos(Yaw/2)*sin(Roll/2) = sin((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //sin(Yaw/2)*cos(Roll/2) + cos(Yaw/2)*sin(Roll/2) = sin((Yaw+Roll)/2); Roll = 0;
                    fYaw = math.atan2(yTemp, wTemp) * 2.0;
                    fRoll = 0.0;
                    //убираем дополнительный оборот
                    var pi = math.PI;
                    if(fYaw > pi) {
                        fYaw -= pi;
                        fRoll = (x == w) ? -pi : pi;
                    } else {
                        if(fYaw < -pi) {
                            fYaw += pi;
                            fRoll = (x == w) ? pi : -pi;
                        }
                    }
                } else {
                    //Math.atan2(sin(Yaw)*cos(Pitch),cos(Yaw)*cos(Pitch));
                    fYaw = math.atan2(fx2 * z + fy2 * w, 1.0 - (fx2 * x + fy2 * y));
                    //Math.atan2(cos(Pitch) * sin(Roll),cos(Pitch)*cos(Roll));
                    fRoll = math.atan2(fx2 * y + fz2 * w, 1.0 - (fx2 * x + fz2 * z));
                }
                v3fDestination.x = fYaw;
                v3fDestination.y = fPitch;
                v3fDestination.z = fRoll;
                return v3fDestination;
            };
            Quat4.prototype.toMat3 = function (m3fDestination) {
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = new math.Mat3();
                }
                var pDataDestination = m3fDestination.data;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                //потом необходимо ускорить
                pDataDestination[0] = 1.0 - 2.0 * (y * y + z * z);
                pDataDestination[3] = 2.0 * (x * y - z * w);
                pDataDestination[6] = 2.0 * (x * z + y * w);
                pDataDestination[1] = 2.0 * (x * y + z * w);
                pDataDestination[4] = 1.0 - 2.0 * (x * x + z * z);
                pDataDestination[7] = 2.0 * (y * z - x * w);
                pDataDestination[2] = 2.0 * (x * z - y * w);
                pDataDestination[5] = 2.0 * (y * z + x * w);
                pDataDestination[8] = 1.0 - 2.0 * (x * x + y * y);
                return m3fDestination;
            };
            Quat4.prototype.toMat4 = function (m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new math.Mat4();
                }
                var pDataDestination = m4fDestination.data;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                //потом необходимо ускорить
                pDataDestination[0] = 1.0 - 2.0 * (y * y + z * z);
                pDataDestination[4] = 2.0 * (x * y - z * w);
                pDataDestination[8] = 2.0 * (x * z + y * w);
                pDataDestination[12] = 0.0;
                pDataDestination[1] = 2.0 * (x * y + z * w);
                pDataDestination[5] = 1.0 - 2.0 * (x * x + z * z);
                pDataDestination[9] = 2.0 * (y * z - x * w);
                pDataDestination[13] = 0.0;
                pDataDestination[2] = 2.0 * (x * z - y * w);
                pDataDestination[6] = 2.0 * (y * z + x * w);
                pDataDestination[10] = 1.0 - 2.0 * (x * x + y * y);
                pDataDestination[14] = 0.0;
                pDataDestination[3] = 0.0;
                pDataDestination[7] = 0.0;
                pDataDestination[11] = 0.0;
                pDataDestination[15] = 1.0;
                return m4fDestination;
            };
            Quat4.prototype.toString = /**@inline*/ function () {
                return "[x: " + this.x + ", y: " + this.y + ", z: " + this.z + ", w: " + this.w + "]";
            };
            Quat4.prototype.mix = function (q4fQuat, fA, q4fDestination, bShortestPath) {
                if (typeof bShortestPath === "undefined") { bShortestPath = true; }
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = this;
                }
                fA = math.clamp(fA, 0, 1);
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                //скалярное произведение
                var fCos = x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2;
                if(fCos < 0.0 && bShortestPath) {
                    x2 = -x2;
                    y2 = -y2;
                    z2 = -z2;
                    w2 = -w2;
                }
                var k1 = 1.0 - fA;
                var k2 = fA;
                q4fDestination.x = x1 * k1 + x2 * k2;
                q4fDestination.y = y1 * k1 + y2 * k2;
                q4fDestination.z = z1 * k1 + z2 * k2;
                q4fDestination.w = w1 * k1 + w2 * k2;
                return q4fDestination;
            };
            Quat4.prototype.smix = function (q4fQuat, fA, q4fDestination, bShortestPath) {
                if (typeof bShortestPath === "undefined") { bShortestPath = true; }
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = this;
                }
                fA = math.clamp(fA, 0, 1);
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                //скалярное произведение
                var fCos = x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2;
                if(fCos < 0 && bShortestPath) {
                    fCos = -fCos;
                    x2 = -x2;
                    y2 = -y2;
                    z2 = -z2;
                    w2 = -w2;
                }
                var fEps = 0.001;
                if(math.abs(fCos) < 1.0 - fEps) {
                    var fSin = math.sqrt(1.0 - fCos * fCos);
                    var fInvSin = 1.0 / fSin;
                    var fAngle = math.atan2(fSin, fCos);
                    var k1 = math.sin((1.0 - fA) * fAngle) * fInvSin;
                    var k2 = math.sin(fA * fAngle) * fInvSin;
                    q4fDestination.x = x1 * k1 + x2 * k2;
                    q4fDestination.y = y1 * k1 + y2 * k2;
                    q4fDestination.z = z1 * k1 + z2 * k2;
                    q4fDestination.w = w1 * k1 + w2 * k2;
                } else {
                    //два кватерниона или очень близки (тогда можно делать линейную интерполяцию)
                    //или два кватениона диаметрально противоположны, тогда можно интерполировать любым способом
                    //позже надо будет реализовать какой-нибудь, а пока тоже линейная интерполяция
                    var k1 = 1 - fA;
                    var k2 = fA;
                    var x = x1 * k1 + x2 * k2;
                    var y = y1 * k1 + y2 * k2;
                    var z = z1 * k1 + z2 * k2;
                    var w = w1 * k1 + w2 * k2;
                    // и нормализуем так-как мы сошли со сферы
                    var fLength = math.sqrt(x * x + y * y + z * z + w * w);
                    var fInvLen = fLength ? 1 / fLength : 0;
                    q4fDestination.x = x * fInvLen;
                    q4fDestination.y = y * fInvLen;
                    q4fDestination.z = z * fInvLen;
                    q4fDestination.w = w * fInvLen;
                }
                return q4fDestination;
            };
            Quat4.fromForwardUp = function fromForwardUp(v3fForward, v3fUp, q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = new Quat4();
                }
                var fForwardX = v3fForward.x, fForwardY = v3fForward.y, fForwardZ = v3fForward.z;
                var fUpX = v3fUp.x, fUpY = v3fUp.y, fUpZ = v3fUp.z;
                var m3fTemp = math.mat3();
                var pTempData = m3fTemp.data;
                pTempData[0] = fUpY * fForwardZ - fUpZ * fForwardY;
                pTempData[3] = fUpX;
                pTempData[6] = fForwardX;
                pTempData[1] = fUpZ * fForwardX - fUpX * fForwardZ;
                pTempData[4] = fUpY;
                pTempData[7] = fForwardY;
                pTempData[2] = fUpX * fForwardY - fUpY * fForwardX;
                pTempData[5] = fUpZ;
                pTempData[8] = fForwardZ;
                return m3fTemp.toQuat4(q4fDestination);
            }
            Quat4.fromAxisAngle = function fromAxisAngle(v3fAxis, fAngle, q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = new Quat4();
                }
                var x = v3fAxis.x, y = v3fAxis.y, z = v3fAxis.z;
                var fLength = math.sqrt(x * x + y * y + z * z);
                if(fLength === 0.0) {
                    q4fDestination.x = q4fDestination.y = q4fDestination.z = 0;
                    q4fDestination.w = 1;
                    return q4fDestination;
                }
                var fInvLength = 1 / fLength;
                x *= fInvLength;
                y *= fInvLength;
                z *= fInvLength;
                var fSin = math.sin(fAngle / 2);
                var fCos = math.cos(fAngle / 2);
                q4fDestination.x = x * fSin;
                q4fDestination.y = y * fSin;
                q4fDestination.z = z * fSin;
                q4fDestination.w = fCos;
                return q4fDestination;
            }
            Quat4.fromYawPitchRoll = function fromYawPitchRoll(fYaw, fPitch, fRoll, q4fDestination) {
                if(arguments.length <= 2) {
                    var v3fVec = arguments[0];
                    fYaw = v3fVec.x;
                    fPitch = v3fVec.y;
                    fRoll = v3fVec.z;
                    q4fDestination = arguments[1];
                }
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = new Quat4();
                }
                var fHalfYaw = fYaw * 0.5;
                var fHalfPitch = fPitch * 0.5;
                var fHalfRoll = fRoll * 0.5;
                var fCos1 = math.cos(fHalfYaw), fSin1 = math.sin(fHalfYaw);
                var fCos2 = math.cos(fHalfPitch), fSin2 = math.sin(fHalfPitch);
                var fCos3 = math.cos(fHalfRoll), fSin3 = math.sin(fHalfRoll);
                q4fDestination.x = fCos1 * fSin2 * fCos3 + fSin1 * fCos2 * fSin3;
                q4fDestination.y = fSin1 * fCos2 * fCos3 - fCos1 * fSin2 * fSin3;
                q4fDestination.z = fCos1 * fCos2 * fSin3 - fSin1 * fSin2 * fCos3;
                q4fDestination.w = fCos1 * fCos2 * fCos3 + fSin1 * fSin2 * fSin3;
                return q4fDestination;
            }
            Quat4.fromXYZ = function fromXYZ(fX, fY, fZ, q4fDestination) {
                if(arguments.length <= 2) {
                    //Vec3 + m4fDestination
                    var v3fVec = arguments[0];
                    return Quat4.fromYawPitchRoll(v3fVec.y, v3fVec.x, v3fVec.z, arguments[1]);
                } else {
                    //fX fY fZ m4fDestination
                    var fX = arguments[0];
                    var fY = arguments[1];
                    var fZ = arguments[2];
                    return Quat4.fromYawPitchRoll(fY, fX, fZ, arguments[3]);
                }
            }
            Object.defineProperty(Quat4, "stackCeil", {
                get: function () {
                    Quat4.stackPosition = Quat4.stackPosition === Quat4.stackSize - 1 ? 0 : Quat4.stackPosition;
                    return Quat4.stack[Quat4.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Quat4.stackSize = 100;
            Quat4.stackPosition = 0;
            Quat4.stack = (function () {
                var pStack = new Array(Quat4.stackSize);
                for(var i = 0; i < Quat4.stackSize; i++) {
                    pStack[i] = new Quat4();
                }
                return pStack;
            })();
            return Quat4;
        })();
        math.Quat4 = Quat4;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
        //
        // BASIC MATH AND UNIT CONVERSION CONSTANTS
        //
        math.E = Math.E;
        math.LN2 = Math.LN2;
        math.LOG2E = Math.LOG2E;
        math.LOG10E = Math.LOG10E;
        math.PI = Math.PI;
        math.SQRT1_2 = Math.SQRT1_2;
        math.SQRT2 = Math.SQRT2;
        math.LN10 = Math.LN10;
        math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
        math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
        math.FLOAT_PRECISION = (3.4e-8);
        math.TWO_PI = (2.0 * math.PI);
        math.HALF_PI = (math.PI / 2.0);
        math.QUARTER_PI = (math.PI / 4.0);
        math.EIGHTH_PI = (math.PI / 8.0);
        math.PI_SQUARED = (9.869604401089358);
        math.PI_INVERSE = (0.3183098861837907);
        math.PI_OVER_180 = (math.PI / 180);
        math.PI_DIV_180 = (180 / math.PI);
        math.NATURAL_LOGARITHM_BASE = (2.718281828459045);
        math.EULERS_CONSTANT = (0.5772156649015329);
        math.SQUARE_ROOT_2 = (1.4142135623730951);
        math.INVERSE_ROOT_2 = (0.7071067811865476);
        math.SQUARE_ROOT_3 = (1.7320508075688772);
        math.SQUARE_ROOT_5 = (2.23606797749979);
        math.SQUARE_ROOT_10 = (3.1622776601683795);
        math.CUBE_ROOT_2 = (1.2599210498948732);
        math.CUBE_ROOT_3 = (1.4422495703074083);
        math.FOURTH_ROOT_2 = (1.189207115002721);
        math.NATURAL_LOG_2 = (0.6931471805599453);
        math.NATURAL_LOG_3 = (1.0986122886681098);
        math.NATURAL_LOG_10 = (2.302585092994046);
        math.NATURAL_LOG_PI = (1.1447298858494002);
        math.BASE_TEN_LOG_PI = (0.49714987269413385);
        math.NATURAL_LOGARITHM_BASE_INVERSE = (0.36787944117144233);
        math.NATURAL_LOGARITHM_BASE_SQUARED = (7.38905609893065);
        math.GOLDEN_RATIO = ((math.SQUARE_ROOT_5 + 1.0) / 2.0);
        math.DEGREE_RATIO = (math.PI_DIV_180);
        math.RADIAN_RATIO = (math.PI_OVER_180);
        math.GRAVITY_CONSTANT = 9.81;
        //
        // MATH AND UNIT CONVERSION FUNCTION PROTOTYPES
        //
        math.abs = Math.abs;
        math.acos = Math.acos;
        math.asin = Math.asin;
        math.atan = Math.atan;
        math.atan2 = Math.atan2;
        math.exp = Math.exp;
        math.min = Math.min;
        math.random = Math.random;
        math.sqrt = Math.sqrt;
        math.log = Math.log;
        math.round = Math.round;
        math.floor = Math.floor;
        math.ceil = Math.ceil;
        math.sin = Math.sin;
        math.cos = Math.cos;
        math.tan = Math.tan;
        math.pow = Math.pow;
        math.max = Math.max;
        /*
        -----------------------------------------------------------------
        
        Floating Point Macros
        
        -----------------------------------------------------------------
        */
        // reinterpret a float as an int32
        /** @inline */
        math.fpBits = function (f) {
            return math.floor(f);
        };
        // reinterpret an int32 as a float
        /** @inline */
        math.intBits = function (i) {
            return i;
        };
        // return 0 or -1 based on the sign of the float
        /** @inline */
        math.fpSign = function (f) {
            return (f >> 31);
        };
        // extract the 8 bits of exponent as a signed integer
        // by masking out this bits, shifting down by 23,
        // and subtracting the bias value of 127
        /** @inline */
        math.fpExponent = function (f) {
            return (((math.fpBits(f) & 2147483647) >> 23) - 127);
        };
        // return 0 or -1 based on the sign of the exponent
        /** @inline */
        math.fpExponentSign = function (f) {
            return (math.fpExponent(f) >> 31);
        };
        // get the 23 bits of mantissa without the implied bit
        /** @inline */
        math.fpPureMantissa = function (f) {
            return (math.fpBits(f) & 8388607);
        };
        // get the 23 bits of mantissa with the implied bit replaced
        /** @inline */
        math.fpMantissa = function (f) {
            return (math.fpPureMantissa(f) | (1 << 23));
        };
        math.fpOneBits = 1065353216;
        // flipSign is a helper Macro to
        // invert the sign of i if flip equals -1,
        // if flip equals 0, it does nothing
        //export var flipSign = (i, flip) ((i^ flip) - flip)
        /** @inline */
        math.flipSign = function (i, flip) {
            return ((flip == -1) ? -i : i);
        };
        /**
        * Абсолютное значение числа
        * @inline
        */
        math.absoluteValue = math.abs;
        /**
        * Pow
        * @inline
        */
        math.raiseToPower = math.pow;
        /**
        * Число положительно?
        * @inline
        */
        math.isPositive = function (a) {
            return (a >= 0);
        };
        /**
        * Число отрицательно?
        * @inline
        */
        math.isNegative = function (a) {
            return (a < 0);
        };
        /**
        * Число одного знака?
        * @inline
        */
        math.sameSigns = function (a, b) {
            return (math.isNegative(a) == math.isNegative(b));
        };
        /**
        * Копировать знак
        * @inline
        */
        math.copySign = function (a, b) {
            return (math.isNegative(b) ? -math.absoluteValue(a) : math.absoluteValue(a));
        };
        /**
        * Растояние между а и b меньше epsilon?
        * @inline
        */
        math.deltaRangeTest = function (a, b, epsilon) {
            if (typeof epsilon === "undefined") { epsilon = 1e-7; }
            return ((math.absoluteValue(a - b) < epsilon) ? true : false);
        };
        /**
        * Ограничивает value интервалом [low,high]
        * @inline
        */
        math.clamp = function (value, low, high) {
            return math.max(low, math.min(value, high));
        };
        /**
        * Ограничивает value интервалом [0,+Infinity]
        * @inline
        */
        math.clampPositive = function (value) {
            return (value < 0 ? 0 : value);
        };
        /**
        * Ограничивает value интервалом [-Infinity,0]
        * @inline
        */
        math.clampNegative = function (value) {
            return (value > 0 ? 0 : value);
        };
        /**
        * Ограничивает value интервалом [-1,1]
        * @inline
        */
        math.clampUnitSize = function (value) {
            return math.clamp(value, -1, 1);
        };
        /**
        * Номер с права начиная от нуля, самого левого установленного бита
        * @inline
        */
        math.highestBitSet = function (value) {
            return value == 0 ? (null) : (value < 0 ? 31 : ((math.log(value) / math.LN2) << 0));
        };
        /**
        * Номер с права начиная от нуля, самого правого установленного бита
        * @inline
        */
        math.lowestBitSet = function (value) {
            var temp;
            if(value == 0) {
                return null;
            }
            for(temp = 0; temp <= 31; temp++) {
                if(value & (1 << temp)) {
                    return temp;
                }
            }
            return null;
        };
        /**
        * Является ли число степенью двойки
        * @inline
        */
        math.isPowerOfTwo = function (value) {
            return (value > 0 && math.highestBitSet(value) == math.lowestBitSet(value));
        };
        /**
        * Округление до числа наиболее близкого к степени двойки
        * @inline
        */
        math.nearestPowerOfTwo = function (value) {
            if(value <= 1) {
                return 1;
            }
            var highestBit = math.highestBitSet(value);
            var roundingTest = value & (1 << (highestBit - 1));
            if(roundingTest != 0) {
                ++highestBit;
            }
            return 1 << highestBit;
        };
        /**
        * Округление до следующего числа являющегося к степени двойки
        * @inline
        */
        math.ceilingPowerOfTwo = function (value) {
            if(value <= 1) {
                return 1;
            }
            var highestBit = math.highestBitSet(value);
            var mask = value & ((1 << highestBit) - 1);
            highestBit += mask && 1;
            return 1 << highestBit;
        };
        /**
        * Округление до предыдущего числа являющегося к степени двойки
        * @inline
        */
        math.floorPowerOfTwo = function (value) {
            if(value <= 1) {
                return 1;
            }
            var highestBit = math.highestBitSet(value);
            return 1 << highestBit;
        };
        /**
        * Деление по модулю
        * @inline
        */
        math.modulus = function (e, divisor) {
            return (e - math.floor(e / divisor) * divisor);
        };
        /**
        *
        * @inline
        */
        math.mod = math.modulus;
        /**
        * Вырвнивание числа на alignment вверх
        * @inline
        */
        math.alignUp = function (value, alignment) {
            var iRemainder = math.modulus(value, alignment);
            if(iRemainder == 0) {
                return (value);
            }
            return (value + (alignment - iRemainder));
        };
        /**
        * Вырвнивание числа на alignment вниз
        * @inline
        */
        math.alignDown = function (value, alignment) {
            var remainder = math.modulus(value, alignment);
            if(remainder == 0) {
                return (value);
            }
            return (value - remainder);
        };
        /**
        * пнвертировать число
        * @inline
        */
        math.inverse = function (a) {
            return 1.0 / a;
        };
        /**
        * log base 2
        * @inline
        */
        math.log2 = function (f) {
            return math.log(f) / math.LN2;
        };
        /**
        * Округлени числа с определенной точностью, где округляется до значащих чисел как 1/(2^precision)
        * @inline
        */
        math.trimFloat = function (f, precision) {
            return f;
        };
        /**
        * Перевод дробного в целое с усеением
        * @inline
        */
        math.realToInt32_chop = function (a) {
            return math.round(a);
        };
        /**
        * Перевод дробного в целое до меньшего
        * @inline
        */
        math.realToInt32_floor = function (a) {
            return math.floor(a);
        };
        /**
        * Перевод дробного в целое до большего
        * @inline
        */
        math.realToInt32_ceil = function (a) {
            return math.ceil(a);
        };
        /**
        * Наибольший общий делитель
        * @inline
        */
        math.nod = function (n, m) {
            var p = n % m;
            while(p != 0) {
                n = m;
                m = p;
                p = n % m;
            }
            return m;
        };
        /**
        * Наименьшее общее кратное
        * @inline
        */
        math.nok = function (n, m) {
            return math.abs(n * m) / math.nod(n, m);
        };
        /**
        * Greatest common devider
        * @inline
        */
        math.gcd = math.nod;
        /**
        * Least common multiple
        * @inline
        */
        math.lcm = math.nok;
        // var pMat3Stack = new Array(100);
        // var iMat3StackIndex = 0;
        math.isRealEqual = function (a, b, tolerance) {
            if (typeof tolerance === "undefined") { tolerance = 1.19209e-7; }
            if(akra.math.abs(b - a) <= tolerance) {
                return true;
            } else {
                return false;
            }
        };
                                                function vec2(fValue1, fValue2) {
            var nArgumentsLength = arguments.length;
            var v2fVec = math.Vec2.stack[math.Vec2.stackPosition++];
            if(math.Vec2.stackPosition == math.Vec2.stackSize) {
                math.Vec2.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1: {
                    v2fVec.set(arguments[0]);
                    break;

                }
                case 2: {
                    v2fVec.set(arguments[0], arguments[1]);
                    break;

                }
                default: {
                    v2fVec.x = v2fVec.y = 0.0;
                    break;

                }
            }
            return v2fVec;
        }
        math.vec2 = vec2;
        ; ;
                                                                function vec3(fValue1, fValue2, fValue3) {
            var nArgumentsLength = arguments.length;
            var v3fVec = math.Vec3.stack[math.Vec3.stackPosition++];
            if(math.Vec3.stackPosition == math.Vec3.stackSize) {
                math.Vec3.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1: {
                    v3fVec.set(arguments[0]);
                    break;

                }
                case 2: {
                    v3fVec.set(arguments[0], arguments[1]);
                    break;

                }
                case 3: {
                    v3fVec.set(arguments[0], arguments[1], arguments[2]);
                    break;

                }
                default: {
                    v3fVec.x = v3fVec.y = v3fVec.z = 0.0;
                    break;

                }
            }
            return v3fVec;
        }
        math.vec3 = vec3;
        ; ;
                                                                                                function vec4(fValue1, fValue2, fValue3, fValue4) {
            var nArgumentsLength = arguments.length;
            var v4fVec = math.Vec4.stack[math.Vec4.stackPosition++];
            if(math.Vec4.stackPosition == math.Vec4.stackSize) {
                math.Vec4.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1: {
                    v4fVec.set(arguments[0]);
                    break;

                }
                case 2: {
                    v4fVec.set(arguments[0], arguments[1]);
                    break;

                }
                case 3: {
                    v4fVec.set(arguments[0], arguments[1], arguments[2]);
                    break;

                }
                case 4: {
                    v4fVec.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                    break;

                }
                default: {
                    v4fVec.x = v4fVec.y = v4fVec.z = v4fVec.w = 0.0;
                    break;

                }
            }
            return v4fVec;
        }
        math.vec4 = vec4;
        ; ;
                                                        function quat4(fX, fY, fZ, fW) {
            var nArgumentsLength = arguments.length;
            var q4fQuat = math.Quat4.stack[math.Quat4.stackPosition++];
            if(math.Quat4.stackPosition == math.Quat4.stackSize) {
                math.Quat4.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1: {
                    q4fQuat.set(arguments[0]);
                    break;

                }
                case 2: {
                    q4fQuat.set(arguments[0], arguments[1]);
                    break;

                }
                case 4: {
                    q4fQuat.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                    break;

                }
                default: {
                    q4fQuat.x = q4fQuat.y = q4fQuat.z = 0.0;
                    q4fQuat.w = 1.0;
                    break;

                }
            }
            return q4fQuat;
        }
        math.quat4 = quat4;
        ; ;
                                                                                        function mat3(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9) {
            var nArgumentsLength = arguments.length;
            var m3fMat = math.Mat3.stack[math.Mat3.stackPosition++];
            if(math.Mat3.stackPosition == math.Mat3.stackSize) {
                math.Mat3.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1: {
                    m3fMat.set(arguments[0]);
                    break;

                }
                case 3: {
                    m3fMat.set(arguments[0], arguments[1], arguments[2]);
                    break;

                }
                case 9: {
                    m3fMat.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
                    break;

                }
                default: {
                    m3fMat.set(0.0);
                    break;

                }
            }
            return m3fMat;
        }
        math.mat3 = mat3;
        ; ;
                                                                                                function mat4(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9, fValue10, fValue11, fValue12, fValue13, fValue14, fValue15, fValue16) {
            var nArgumentsLength = arguments.length;
            var m4fMat = math.Mat4.stack[math.Mat4.stackPosition++];
            if(math.Mat4.stackPosition == math.Mat4.stackSize) {
                math.Mat4.stackPosition = 0;
            }
            if(nArgumentsLength === 2) {
                if(akra.isBoolean(arguments[1])) {
                    if(arguments[1]) {
                        m4fMat.data = arguments[0];
                    } else {
                        m4fMat.set(arguments[0]);
                    }
                } else {
                    m4fMat.set(arguments[0], arguments[1]);
                }
            } else {
                switch(nArgumentsLength) {
                    case 1: {
                        if(arguments[0] instanceof math.Mat3) {
                            m4fMat.set(arguments[0], vec3(0.0));
                        } else {
                            m4fMat.set(arguments[0]);
                        }
                        break;

                    }
                    case 4: {
                        m4fMat.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;

                    }
                    case 16: {
                        m4fMat.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
                        break;

                    }
                    default: {
                        break;

                    }
                }
            }
            return m4fMat;
        }
        math.mat4 = mat4;
        ; ;
        function calcPOTtextureSize(nPixels) {
            var w, h;
            var n = nPixels;
            w = Math.ceil(Math.log(n) / Math.LN2 / 2.0);
            h = Math.ceil(Math.log(n / Math.pow(2, w)) / Math.LN2);
            w = Math.pow(2, w);
            h = Math.pow(2, h);
            n = w * h;
            return [
                w, 
                h, 
                n
            ];
        }
        math.calcPOTtextureSize = calcPOTtextureSize;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.Vec2 = akra.math.Vec2;
    akra.Vec3 = akra.math.Vec3;
    akra.Vec4 = akra.math.Vec4;
    akra.Mat3 = akra.math.Mat3;
    akra.Mat4 = akra.math.Mat4;
    akra.Quat4 = akra.math.Quat4;
    akra.vec2 = akra.math.vec2;
    akra.vec3 = akra.math.vec3;
    akra.vec4 = akra.math.vec4;
    akra.quat4 = akra.math.quat4;
    akra.mat3 = akra.math.mat3;
    akra.mat4 = akra.math.mat4;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        webgl.maxTextureSize = 0;
        webgl.maxCubeMapTextureSize = 0;
        webgl.maxViewPortSize = 0;
        webgl.maxTextureImageUnits = 0;
        webgl.maxVertexAttributes = 0;
        webgl.maxVertexTextureImageUnits = 0;
        webgl.maxCombinedTextureImageUnits = 0;
        webgl.maxColorAttachments = 1;
        webgl.stencilBits = 0;
        webgl.colorBits = [
            0, 
            0, 
            0
        ];
        webgl.alphaBits = 0;
        webgl.multisampleType = 0.0;
        webgl.shaderVersion = 0;
        webgl.hasNonPowerOf2Textures = false;
        var pSupportedExtensionList = null;
        var pLoadedExtensionList = null;
        function createContext(pCanvas, pOptions) {
            if (typeof pCanvas === "undefined") { pCanvas = document.createElement("canvas"); }
            var pWebGLContext = null;
            try  {
                pWebGLContext = pCanvas.getContext("webgl", pOptions) || pCanvas.getContext("experimental-webgl", pOptions);
            } catch (e) {
            }
            if(!pWebGLContext) {
                akra.logger.setSourceLocation("webgl/webgl.ts", 58);
                akra.logger.warning("cannot get 3d device");
                ; ;
            }
            return pWebGLContext;
        }
        webgl.createContext = createContext;
        (function (pWebGLContext) {
            if(!pWebGLContext) {
                return;
            }
            webgl.maxTextureSize = pWebGLContext.getParameter(3379);
            webgl.maxCubeMapTextureSize = pWebGLContext.getParameter(34076);
            webgl.maxViewPortSize = pWebGLContext.getParameter(3386);
            webgl.maxTextureImageUnits = pWebGLContext.getParameter(34930);
            webgl.maxVertexAttributes = pWebGLContext.getParameter(34921);
            webgl.maxVertexTextureImageUnits = pWebGLContext.getParameter(35660);
            webgl.maxCombinedTextureImageUnits = pWebGLContext.getParameter(35661);
            webgl.stencilBits = pWebGLContext.getParameter(3415);
            webgl.colorBits = [
                pWebGLContext.getParameter(3410), 
                pWebGLContext.getParameter(3411), 
                pWebGLContext.getParameter(3412)
            ];
            webgl.alphaBits = pWebGLContext.getParameter(3413);
            webgl.multisampleType = pWebGLContext.getParameter(32938);
            pSupportedExtensionList = pWebGLContext.getSupportedExtensions();
            pSupportedExtensionList.push("WEBGL_debug_shaders", "WEBGL_debug_renderer_info");
            var pWebGLExtentionList = {
            };
            var pWebGLExtension;
            for(var i = 0; i < pSupportedExtensionList.length; ++i) {
                if(pWebGLExtension = pWebGLContext.getExtension(pSupportedExtensionList[i])) {
                    pWebGLExtentionList[pSupportedExtensionList[i]] = pWebGLExtension;
                    akra.logger.setSourceLocation("webgl/webgl.ts", 100);
                    akra.logger.log("loaded WebGL extension: %1", pSupportedExtensionList[i]);
                    ; ;
                    for(var j in pWebGLExtension) {
                        if(akra.isFunction(pWebGLExtension[j])) {
                            pWebGLContext[j] = function () {
                                pWebGLContext[j] = new Function("var t = this.pWebGLExtentionList[" + pSupportedExtensionList[i] + "];" + "t." + j + ".apply(t, arguments);");
                            };
                        } else {
                            pWebGLContext[j] = pWebGLExtentionList[pSupportedExtensionList[i]][j];
                        }
                    }
                } else {
                    akra.logger.setSourceLocation("webgl/webgl.ts", 118);
                    akra.logger.warning("cannot load extension: %1", pSupportedExtensionList[i]);
                    ; ;
                    pSupportedExtensionList.splice(i, 1);
                }
            }
            (pWebGLContext).pWebGLExtentionList = pWebGLExtentionList;
            pLoadedExtensionList = pWebGLExtentionList;
        })(createContext());
        function hasExtension(sExtName) {
            for(var i = 0; i < pSupportedExtensionList.length; ++i) {
                if(pSupportedExtensionList[i].search(sExtName) != -1) {
                    return true;
                }
            }
            return false;
        }
        webgl.hasExtension = hasExtension;
        function getWebGLUsage(iFlags) {
            if((((iFlags) & (akra.EHardwareBufferFlags.DYNAMIC)) != 0)) {
                return 35048;
            } else {
                if((((iFlags) & (akra.EHardwareBufferFlags.STREAM)) != 0)) {
                    return 35040;
                }
            }
            return 35044;
        }
        webgl.getWebGLUsage = getWebGLUsage;
        function getWebGLOriginFormat(eFormat) {
            switch(eFormat) {
                case akra.EPixelFormats.A8: {
                    return 6406;

                }
                case akra.EPixelFormats.L8:
                case akra.EPixelFormats.L16: {
                    return 6409;

                }
                case akra.EPixelFormats.FLOAT16_RGB: {
                    return webgl.hasExtension("OES_texture_half_float") ? 6407 : 0;

                }
                case akra.EPixelFormats.FLOAT16_RGBA: {
                    return webgl.hasExtension("OES_texture_half_float") ? 6408 : 0;

                }
                case akra.EPixelFormats.FLOAT16_R:
                case akra.EPixelFormats.R8: {
                    return webgl.hasExtension("EXT_texture_rg") ? 6403 : 0;

                }
                case akra.EPixelFormats.FLOAT16_GR:
                case akra.EPixelFormats.RG8: {
                    return webgl.hasExtension("EXT_texture_rg") ? 33319 : 0;

                }
                case akra.EPixelFormats.BYTE_LA:
                case akra.EPixelFormats.SHORT_GR: {
                    return 6410;
                    // PVRTC compressed formats
                    
                }
                case akra.EPixelFormats.PVRTC_RGB2: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35841 : 0;

                }
                case akra.EPixelFormats.PVRTC_RGB4: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35840 : 0;

                }
                case akra.EPixelFormats.PVRTC_RGBA2: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35843 : 0;

                }
                case akra.EPixelFormats.PVRTC_RGBA4: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35842 : 0;

                }
                case akra.EPixelFormats.R5G6B5:
                case akra.EPixelFormats.B5G6R5:
                case akra.EPixelFormats.R8G8B8:
                case akra.EPixelFormats.B8G8R8: {
                    return 6407;

                }
                case akra.EPixelFormats.A1R5G5B5: {
                    return 32993;

                }
                case akra.EPixelFormats.A4R4G4B4:
                case akra.EPixelFormats.X8R8G8B8:
                case akra.EPixelFormats.A8R8G8B8:
                case akra.EPixelFormats.B8G8R8A8:
                case akra.EPixelFormats.X8B8G8R8:
                case akra.EPixelFormats.A8B8G8R8: {
                    return 6408;

                }
                case akra.EPixelFormats.DXT1: {
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? 33777 : 0;

                }
                case akra.EPixelFormats.DXT3: {
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? 33778 : 0;

                }
                case akra.EPixelFormats.DXT5: {
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? 33779 : 0;

                }
                case akra.EPixelFormats.FLOAT32_GR:
                case akra.EPixelFormats.FLOAT32_R:
                default: {
                    return 0;

                }
            }
        }
        webgl.getWebGLOriginFormat = getWebGLOriginFormat;
        function getWebGLOriginDataType(eFormat) {
            switch(eFormat) {
                case akra.EPixelFormats.A8:
                case akra.EPixelFormats.L8:
                case akra.EPixelFormats.L16:
                case akra.EPixelFormats.R8G8B8:
                case akra.EPixelFormats.B8G8R8:
                case akra.EPixelFormats.BYTE_LA: {
                    return 5121;

                }
                case akra.EPixelFormats.R5G6B5:
                case akra.EPixelFormats.B5G6R5: {
                    return 33635;

                }
                case akra.EPixelFormats.A4R4G4B4: {
                    return 32819;

                }
                case akra.EPixelFormats.A1R5G5B5: {
                    return 32820;

                }
                case akra.EPixelFormats.X8B8G8R8:
                case akra.EPixelFormats.A8B8G8R8: {
                    return 33639;

                }
                case akra.EPixelFormats.X8R8G8B8:
                case akra.EPixelFormats.A8B8G8R8:
                case akra.EPixelFormats.A8R8G8B8: {
                    return 33639;

                }
                case akra.EPixelFormats.B8G8R8A8: {
                    return 5121;

                }
                case akra.EPixelFormats.R8G8B8A8: {
                    return 5121;

                }
                case akra.EPixelFormats.FLOAT16_R:
                case akra.EPixelFormats.FLOAT16_GR:
                case akra.EPixelFormats.FLOAT16_RGB:
                case akra.EPixelFormats.FLOAT16_RGBA: {
                    return webgl.hasExtension("OES_texture_half_float") ? 36193 : 0;

                }
                case akra.EPixelFormats.R8:
                case akra.EPixelFormats.RG8: {
                    return webgl.hasExtension("EXT_texture_rg") ? 5121 : 0;

                }
                case akra.EPixelFormats.FLOAT32_R:
                case akra.EPixelFormats.FLOAT32_GR:
                case akra.EPixelFormats.FLOAT32_RGB:
                case akra.EPixelFormats.FLOAT32_RGBA: {
                    return 5126;

                }
                case akra.EPixelFormats.DXT1:
                case akra.EPixelFormats.DXT3:
                case akra.EPixelFormats.DXT5:
                case akra.EPixelFormats.R3G3B2:
                case akra.EPixelFormats.A2R10G10B10:
                case akra.EPixelFormats.A2B10G10R10:
                case akra.EPixelFormats.SHORT_RGBA:
                case akra.EPixelFormats.SHORT_RGB:
                case akra.EPixelFormats.SHORT_GR:
                default: {
                    return 0;

                }
            }
        }
        webgl.getWebGLOriginDataType = getWebGLOriginDataType;
        function getWebGLInternalFormat(eFormat, isHWGamma) {
            if (typeof isHWGamma === "undefined") { isHWGamma = false; }
            switch(eFormat) {
                case akra.EPixelFormats.L8:
                case akra.EPixelFormats.L16: {
                    return 6409;

                }
                case akra.EPixelFormats.A8: {
                    return 6406;

                }
                case akra.EPixelFormats.BYTE_LA: {
                    return 6410;

                }
                case akra.EPixelFormats.PVRTC_RGB2: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35841 : 0;

                }
                case akra.EPixelFormats.PVRTC_RGB4: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35840 : 0;

                }
                case akra.EPixelFormats.PVRTC_RGBA2: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35843 : 0;

                }
                case akra.EPixelFormats.PVRTC_RGBA4: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35842 : 0;

                }
                case akra.EPixelFormats.X8B8G8R8:
                case akra.EPixelFormats.X8R8G8B8:
                case akra.EPixelFormats.A8B8G8R8:
                case akra.EPixelFormats.A8R8G8B8:
                case akra.EPixelFormats.B8G8R8A8:
                case akra.EPixelFormats.A1R5G5B5:
                case akra.EPixelFormats.A4R4G4B4: {
                    return 6408;

                }
                case akra.EPixelFormats.R5G6B5:
                case akra.EPixelFormats.B5G6R5:
                case akra.EPixelFormats.R8G8B8:
                case akra.EPixelFormats.B8G8R8: {
                    return 6407;

                }
                case akra.EPixelFormats.FLOAT16_R:
                case akra.EPixelFormats.FLOAT32_R:
                case akra.EPixelFormats.R8: {
                    return webgl.hasExtension("EXT_texture_rg") ? 6403 : 0;

                }
                case akra.EPixelFormats.FLOAT16_GR:
                case akra.EPixelFormats.FLOAT32_GR:
                case akra.EPixelFormats.RG8: {
                    return webgl.hasExtension("EXT_texture_rg") ? 6403 : 0;

                }
                case akra.EPixelFormats.A4L4:
                case akra.EPixelFormats.R3G3B2:
                case akra.EPixelFormats.A2R10G10B10:
                case akra.EPixelFormats.A2B10G10R10:
                case akra.EPixelFormats.FLOAT16_RGBA:
                case akra.EPixelFormats.FLOAT32_RGB:
                case akra.EPixelFormats.FLOAT32_RGBA:
                case akra.EPixelFormats.SHORT_RGBA:
                case akra.EPixelFormats.SHORT_RGB:
                case akra.EPixelFormats.SHORT_GR:
                case akra.EPixelFormats.DXT1: {
                    if(!isHWGamma) {
                        return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? 33777 : 0;
                    }

                }
                case akra.EPixelFormats.DXT3: {
                    if(!isHWGamma) {
                        return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? 33778 : 0;
                    }

                }
                case akra.EPixelFormats.DXT5: {
                    if(!isHWGamma) {
                        return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? 33778 : 0;
                    }

                }
                default: {
                    return 0;

                }
            }
        }
        webgl.getWebGLInternalFormat = getWebGLInternalFormat;
        function getClosestWebGLInternalFormat(eFormat, isHWGamma) {
            if (typeof isHWGamma === "undefined") { isHWGamma = false; }
            var iGLFormat = webgl.getWebGLInternalFormat(eFormat, isHWGamma);
            if(iGLFormat === 0) {
                if(isHWGamma) {
                    // TODO not supported
                    return 0;
                } else {
                    return 6408;
                }
            } else {
                return iGLFormat;
            }
        }
        webgl.getClosestWebGLInternalFormat = getClosestWebGLInternalFormat;
        function getClosestAkraFormat(iGLFormat, iGLDataType) {
            switch(iGLFormat) {
                case 35841: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? akra.EPixelFormats.PVRTC_RGB2 : akra.EPixelFormats.A8R8G8B8;

                }
                case 35843: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? akra.EPixelFormats.PVRTC_RGBA2 : akra.EPixelFormats.A8R8G8B8;

                }
                case 35840: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? akra.EPixelFormats.PVRTC_RGB4 : akra.EPixelFormats.A8R8G8B8;

                }
                case 35842: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? akra.EPixelFormats.PVRTC_RGBA4 : akra.EPixelFormats.A8R8G8B8;

                }
                case 6409: {
                    return akra.EPixelFormats.L8;

                }
                case 6406: {
                    return akra.EPixelFormats.A8;

                }
                case 6410: {
                    return akra.EPixelFormats.BYTE_LA;

                }
                case 6407: {
                    switch(iGLDataType) {
                        case 33635: {
                            return akra.EPixelFormats.B5G6R5;

                        }
                        default: {
                            return akra.EPixelFormats.R8G8B8;

                        }
                    }
                    ; ;

                }
                case 6408: {
                    switch(iGLDataType) {
                        case 32820: {
                            return akra.EPixelFormats.A1R5G5B5;

                        }
                        case 32819: {
                            return akra.EPixelFormats.A4R4G4B4;

                        }
                        default: {
                            return akra.EPixelFormats.A8B8G8R8;

                        }
                    }

                }
                case 32993: {
                    return akra.EPixelFormats.A8B8G8R8;

                }
                case 33776:
                case 33777: {
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? akra.EPixelFormats.DXT1 : akra.EPixelFormats.A8R8G8B8;

                }
                case 33778: {
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? akra.EPixelFormats.DXT3 : akra.EPixelFormats.A8R8G8B8;

                }
                case 33779: {
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? akra.EPixelFormats.DXT5 : akra.EPixelFormats.A8R8G8B8;

                }
                case 33321: {
                    return webgl.hasExtension("EXT_texture_rg") ? akra.EPixelFormats.R8 : akra.EPixelFormats.A8R8G8B8;

                }
                case 33323: {
                    return webgl.hasExtension("EXT_texture_rg") ? akra.EPixelFormats.RG8 : akra.EPixelFormats.A8R8G8B8;

                }
                default: {
                    //TODO: not supported
                    return akra.EPixelFormats.A8R8G8B8;

                }
            }
            ; ;
        }
        webgl.getClosestAkraFormat = getClosestAkraFormat;
        function getMaxMipmaps(iWidth, iHeight, iDepth, eFormat) {
            var iCount = 0;
            if((iWidth > 0) && (iHeight > 0)) {
                do {
                    if(iWidth > 1) {
                        iWidth = iWidth / 2;
                    }
                    if(iHeight > 1) {
                        iHeight = iHeight / 2;
                    }
                    if(iDepth > 1) {
                        iDepth = iDepth / 2;
                    }
                    /*
                    NOT needed, compressed formats will have mipmaps up to 1x1
                    if(PixelUtil::isValidExtent(width, height, depth, format))
                    count ++;
                    else
                    break;
                    */
                    iCount++;
                }while(!(iWidth === 1 && iHeight === 1 && iDepth === 1))
            }
            return iCount;
        }
        webgl.getMaxMipmaps = getMaxMipmaps;
        function optionalPO2(iValue) {
            if(webgl.hasNonPowerOf2Textures) {
                return iValue;
            } else {
                return akra.math.ceilingPowerOfTwo(iValue);
            }
        }
        webgl.optionalPO2 = optionalPO2;
        function convertToWebGLformat(pSource, pDest) {
            // Always need to convert PF_A4R4G4B4, GL expects the colors to be in the
            // reverse order
            if(pDest.format == akra.EPixelFormats.A4R4G4B4) {
                // Convert PF_A4R4G4B4 -> PF_B4G4R4A4
                // Reverse pixel order
                var iSrcPtr = (pSource.left + pSource.top * pSource.rowPitch + pSource.front * pSource.slicePitch);
                var iDstPtr = (pDest.left + pDest.top * pDest.rowPitch + pDest.front * pDest.slicePitch);
                var iSrcSliceSkip = pSource.getSliceSkip();
                var iDstSliceSkip = pDest.getSliceSkip();
                var k = pSource.right - pSource.left;
                var x = 0, y = 0, z = 0;
                for(z = pSource.front; z < pSource.back; z++) {
                    for(y = pSource.top; y < pSource.bottom; y++) {
                        for(x = 0; x < k; x++) {
                        }
                        iSrcPtr += pSource.rowPitch;
                        iDstPtr += pDest.rowPitch;
                    }
                    iSrcPtr += iSrcSliceSkip;
                    iDstPtr += iDstSliceSkip;
                }
            }
        }
        webgl.convertToWebGLformat = convertToWebGLformat;
        function checkFBOAttachmentFormat(eFormat) {
            return false;
        }
        webgl.checkFBOAttachmentFormat = checkFBOAttachmentFormat;
        function getSupportedAlternative(eFormat) {
            if(checkFBOAttachmentFormat(eFormat)) {
                return eFormat;
            }
            /// Find first alternative
            var pct = akra.pixelUtil.getComponentType(eFormat);
            switch(pct) {
                case akra.EPixelComponentTypes.BYTE: {
                    eFormat = akra.EPixelFormats.A8R8G8B8;
                    break;

                }
                case akra.EPixelComponentTypes.SHORT: {
                    eFormat = akra.EPixelFormats.SHORT_RGBA;
                    break;

                }
                case akra.EPixelComponentTypes.FLOAT16: {
                    eFormat = akra.EPixelFormats.FLOAT16_RGBA;
                    break;

                }
                case akra.EPixelComponentTypes.FLOAT32: {
                    eFormat = akra.EPixelFormats.FLOAT32_RGBA;
                    break;

                }
                case akra.EPixelComponentTypes.COUNT:
                default: {
                    break;

                }
            }
            if(checkFBOAttachmentFormat(eFormat)) {
                return eFormat;
            }
            /// If none at all, return to default
            return akra.EPixelFormats.A8R8G8B8;
        }
        webgl.getSupportedAlternative = getSupportedAlternative;
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var Color = (function () {
            function Color(r, g, b, a) {
                this.set.apply(this, arguments);
            }
            Object.defineProperty(Color.prototype, "rgba", {
                get: function () {
                    var val32 = 0;
                    // Convert to 32bit pattern
                    val32 = (this.a * 255) << 24;
                    val32 += (this.b * 255) << 16;
                    val32 += (this.g * 255) << 8;
                    val32 += (this.r * 255);
                    return val32;
                },
                set: function (c) {
                    var val32 = c;
                    // Convert from 32bit pattern
                    this.a = ((val32 >> 24) & 255) / 255.0;
                    this.b = ((val32 >> 16) & 255) / 255.0;
                    this.g = ((val32 >> 8) & 255) / 255.0;
                    this.r = (val32 & 255) / 255.0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "argb", {
                get: function () {
                    var val32 = 0;
                    // Convert to 32bit pattern
                    val32 = (this.b * 255) << 24;
                    val32 += (this.g * 255) << 16;
                    val32 += (this.r * 255) << 8;
                    val32 += (this.a * 255);
                    return val32;
                },
                set: function (c) {
                    var val32 = c;
                    // Convert from 32bit pattern
                    this.b = ((val32 >> 24) & 255) / 255.0;
                    this.g = ((val32 >> 16) & 255) / 255.0;
                    this.r = ((val32 >> 8) & 255) / 255.0;
                    this.a = (val32 & 255) / 255.0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "bgra", {
                get: function () {
                    var val32 = 0;
                    // Convert to 32bit pattern
                    val32 = (this.a * 255) << 24;
                    val32 += (this.r * 255) << 16;
                    val32 += (this.g * 255) << 8;
                    val32 += (this.b * 255);
                    return val32;
                },
                set: function (c) {
                    var val32 = c;
                    // Convert from 32bit pattern
                    this.a = ((val32 >> 24) & 255) / 255.0;
                    this.r = ((val32 >> 16) & 255) / 255.0;
                    this.g = ((val32 >> 8) & 255) / 255.0;
                    this.b = (val32 & 255) / 255.0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "abgr", {
                get: function () {
                    var val32 = 0;
                    // Convert to 32bit pattern
                    val32 = (this.r * 255) << 24;
                    val32 += (this.g * 255) << 16;
                    val32 += (this.b * 255) << 8;
                    val32 += (this.a * 255);
                    return val32;
                },
                set: function (c) {
                    var val32 = c;
                    // Convert from 32bit pattern
                    this.r = ((val32 >> 24) & 255) / 255.0;
                    this.g = ((val32 >> 16) & 255) / 255.0;
                    this.b = ((val32 >> 8) & 255) / 255.0;
                    this.a = (val32 & 255) / 255.0;
                },
                enumerable: true,
                configurable: true
            });
            Color.prototype.set = function (r, g, b, a) {
                switch(arguments.length) {
                    case 0: {
                        this.r = this.g = this.b = 0.0;
                        this.a = 1.0;
                        break;

                    }
                    case 1: {
                        if(akra.isInt(arguments[0])) {
                            this.r = this.g = this.b = r;
                            this.a = 1.0;
                        } else {
                            var c = arguments[0];
                            this.r = c.r;
                            this.g = c.g;
                            this.b = c.b;
                            this.a = c.a;
                        }
                        break;

                    }
                    case 2: {
                        this.r = this.g = this.b = r;
                        this.a = g;
                        break;

                    }
                    case 3:
                    case 4: {
                        this.r = r;
                        this.g = g;
                        this.b = b;
                        this.a = akra.isDef(a) ? a : 1.0;
                        break;

                    }
                }
                return this;
            };
            Color.prototype.saturate = function () {
                if(this.r < 0.0) {
                    this.r = 0.0;
                } else {
                    if(this.r > 1.0) {
                        this.r = 1.0;
                    }
                }
                if(this.g < 0.0) {
                    this.g = 0.0;
                } else {
                    if(this.g > 1.0) {
                        this.g = 1.0;
                    }
                }
                if(this.b < 0.0) {
                    this.b = 0.0;
                } else {
                    if(this.b > 1.0) {
                        this.b = 1.0;
                    }
                }
                if(this.a < 0.0) {
                    this.a = 0.0;
                } else {
                    if(this.a > 1.0) {
                        this.a = 1.0;
                    }
                }
                return this;
            }/** As saturate, except that this colour value is unaffected and
            the saturated colour value is returned as a copy. */
            ;
            Color.prototype.saturateCopy = function () {
                var ret = new Color(this);
                ret.saturate();
                return ret;
            };
            Color.prototype.add = function (cColor, ppDest) {
                if (typeof ppDest === "undefined") { ppDest = new akra.Color(); }
                ppDest.r = this.r + cColor.r;
                ppDest.g = this.g + cColor.g;
                ppDest.b = this.b + cColor.b;
                ppDest.a = this.a + cColor.a;
                return ppDest;
            };
            Color.prototype.subtract = function (cColor, ppDest) {
                if (typeof ppDest === "undefined") { ppDest = new akra.Color(); }
                ppDest.r = this.r - cColor.r;
                ppDest.g = this.g - cColor.g;
                ppDest.b = this.b - cColor.b;
                ppDest.a = this.a - cColor.a;
                return ppDest;
            };
            Color.prototype.multiply = function (fScalar, ppDest) {
                if (typeof ppDest === "undefined") { ppDest = new akra.Color(); }
                if(akra.isNumber(fScalar)) {
                    var f = fScalar;
                    ppDest.r = this.r * f;
                    ppDest.g = this.g * f;
                    ppDest.b = this.b * f;
                    ppDest.a = this.a * f;
                } else {
                    var c = arguments[0];
                    ppDest.r = this.r * c.r;
                    ppDest.g = this.g * c.g;
                    ppDest.b = this.b * c.b;
                    ppDest.a = this.a * c.a;
                }
                return ppDest;
            };
            Color.prototype.divide = function (fScalar, ppDest) {
                if (typeof ppDest === "undefined") { ppDest = new akra.Color(); }
                if(akra.isNumber(fScalar)) {
                    var f = fScalar;
                    ppDest.r = this.r / f;
                    ppDest.g = this.g / f;
                    ppDest.b = this.b / f;
                    ppDest.a = this.a / f;
                } else {
                    var c = arguments[0];
                    ppDest.r = this.r / c.r;
                    ppDest.g = this.g / c.g;
                    ppDest.b = this.b / c.b;
                    ppDest.a = this.a / c.a;
                }
                return ppDest;
            };
            Color.prototype.setHSB = function (fHue, fSaturation, fBrightness) {
                // wrap hue
                if(fHue > 1.0) {
                    fHue -= fHue;
                } else {
                    if(fHue < 0.0) {
                        fHue += fHue + 1;
                    }
                }
                // clamp saturation / fBrightness
                fSaturation = akra.math.min(fSaturation, 1.0);
                fSaturation = akra.math.max(fSaturation, 0.0);
                fBrightness = akra.math.min(fBrightness, 1.0);
                fBrightness = akra.math.max(fBrightness, 0.0);
                if(fBrightness == 0.0) {
                    // early exit, this has to be black
                    this.r = this.g = this.b = 0.0;
                    return;
                }
                if(fSaturation == 0.0) {
                    // early exit, this has to be grey
                    this.r = this.g = this.b = fBrightness;
                    return;
                }
                var fHueDomain = fHue * 6.0;
                if(fHueDomain >= 6.0) {
                    // wrap around, and allow mathematical errors
                    fHueDomain = 0.0;
                }
                var domain = fHueDomain;
                var f1 = fBrightness * (1 - fSaturation);
                var f2 = fBrightness * (1 - fSaturation * (fHueDomain - domain));
                var f3 = fBrightness * (1 - fSaturation * (1 - (fHueDomain - domain)));
                switch(domain) {
                    case 0: {
                        // red domain; green ascends
                        this.r = fBrightness;
                        this.g = f3;
                        this.b = f1;
                        break;

                    }
                    case 1: {
                        // yellow domain; red descends
                        this.r = f2;
                        this.g = fBrightness;
                        this.b = f1;
                        break;

                    }
                    case 2: {
                        // green domain; blue ascends
                        this.r = f1;
                        this.g = fBrightness;
                        this.b = f3;
                        break;

                    }
                    case 3: {
                        // cyan domain; green descends
                        this.r = f1;
                        this.g = f2;
                        this.b = fBrightness;
                        break;

                    }
                    case 4: {
                        // blue domain; red ascends
                        this.r = f3;
                        this.g = f1;
                        this.b = fBrightness;
                        break;

                    }
                    case 5: {
                        // magenta domain; blue descends
                        this.r = fBrightness;
                        this.g = f1;
                        this.b = f2;
                        break;

                    }
                }
                return this;
            };
            Color.prototype.getHSB = function (pHsb) {
                if (typeof pHsb === "undefined") { pHsb = [
                    0.0, 
                    0.0, 
                    0.0
                ]; }
                var vMin = akra.math.min(this.r, akra.math.min(this.g, this.b));
                var vMax = akra.math.max(this.r, akra.math.max(this.g, this.b));
                var delta = vMax - vMin;
                var brightness = vMax;
                var hue;
                var saturation;
                if(akra.math.isRealEqual(delta, 0.0, 0.000001)) {
                    // grey
                    hue = 0.0;
                    saturation = 0.0;
                } else {
                    // a colour
                    saturation = delta / vMax;
                    var deltaR = (((vMax - this.r) / 6.0) + (delta / 2.0)) / delta;
                    var deltaG = (((vMax - this.g) / 6.0) + (delta / 2.0)) / delta;
                    var deltaB = (((vMax - this.b) / 6.0) + (delta / 2.0)) / delta;
                    if(akra.math.isRealEqual(this.r, vMax)) {
                        hue = deltaB - deltaG;
                    } else {
                        if(akra.math.isRealEqual(this.g, vMax)) {
                            hue = 0.3333333 + deltaR - deltaB;
                        } else {
                            if(akra.math.isRealEqual(this.b, vMax)) {
                                hue = 0.6666667 + deltaG - deltaR;
                            }
                        }
                    }
                    if(hue < 0.0) {
                        hue += 1.0;
                    }
                    if(hue > 1.0) {
                        hue -= 1.0;
                    }
                }
                pHsb[0] = hue;
                pHsb[1] = saturation;
                pHsb[2] = brightness;
                return pHsb;
            };
            Color.BLACK = new Color(0);
            Color.isEqual = function isEqual(c1, c2) {
                return c1.r === c2.r && c1.g === c2.g && c1.b === c2.b && c1.a === c2.a;
            }
            return Color;
        })();
        util.Color = Color;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.Color = akra.util.Color;
})(akra || (akra = {}));
var akra;
(function (akra) {
    /* Name of the format, as in the enum */
    /* Number of bytes one element (colour value) takes. */
    /* Pixel format flags, see enum PixelFormatFlags for the bit field
    * definitions
    */
    /** Component type
    */
    /** Component count
    */
    /* Number of bits for red(or luminance), green, blue, alpha
    */
    /*, ibits, dbits, ... */
    /* Masks and shifts as used by packers/unpackers */
    function fillPixelFormats(pData) {
        var pPixelFormats = [];
        for(var i = 0; i < pData.length; ++i) {
            var pEl = pData[i];
            pPixelFormats.push({
                name: pEl[0],
                elemBytes: pEl[1],
                flags: pEl[2],
                componentType: pEl[3],
                componentCount: pEl[4],
                rbits: pEl[5],
                gbits: pEl[6],
                bbits: pEl[7],
                abits: pEl[8],
                rmask: pEl[9],
                gmask: pEl[10],
                bmask: pEl[11],
                amask: pEl[12],
                rshift: pEl[13],
                gshift: pEl[14],
                bshift: pEl[15],
                ashift: pEl[16]
            });
        }
        return pPixelFormats;
    }
    var pPixelFormats = fillPixelFormats([
        [
            "PF_UNKNOWN", 
            /* Bytes per element */
            0, 
            /* Flags */
            0, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            0, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_L8", 
            /* Bytes per element */
            1, 
            /* Flags */
            akra.EPixelFormatFlags.LUMINANCE | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            1, 
            /* rbits, gbits, bbits, abits */
            8, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            255, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_L16", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.LUMINANCE | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.SHORT, 
            1, 
            /* rbits, gbits, bbits, abits */
            16, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            65535, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_A8", 
            /* Bytes per element */
            1, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            1, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            8, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            255, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_A4L4", 
            /* Bytes per element */
            1, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.LUMINANCE | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            2, 
            /* rbits, gbits, bbits, abits */
            4, 
            0, 
            0, 
            4, 
            /* Masks and shifts */
            15, 
            0, 
            0, 
            240, 
            0, 
            0, 
            0, 
            4
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_BYTE_LA", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.LUMINANCE, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            2, 
            /* rbits, gbits, bbits, abits */
            8, 
            0, 
            0, 
            8, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_R5G6B5", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            5, 
            6, 
            5, 
            0, 
            /* Masks and shifts */
            63488, 
            2016, 
            31, 
            0, 
            11, 
            5, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_B5G6R5", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            5, 
            6, 
            5, 
            0, 
            /* Masks and shifts */
            31, 
            2016, 
            63488, 
            0, 
            0, 
            5, 
            11, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_A4R4G4B4", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            4, 
            4, 
            4, 
            4, 
            /* Masks and shifts */
            3840, 
            240, 
            15, 
            61440, 
            8, 
            4, 
            0, 
            12
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_A1R5G5B5", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            5, 
            5, 
            5, 
            1, 
            /* Masks and shifts */
            31744, 
            992, 
            31, 
            32768, 
            10, 
            5, 
            0, 
            15, 
            
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_R8G8B8", 
            /* Bytes per element */
            // 24 bit integer -- special        3,
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            0, 
            /* Masks and shifts */
            16711680, 
            65280, 
            255, 
            0, 
            16, 
            8, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_B8G8R8", 
            /* Bytes per element */
            // 24 bit integer -- special        3,
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            0, 
            /* Masks and shifts */
            255, 
            65280, 
            16711680, 
            0, 
            0, 
            8, 
            16, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_A8R8G8B8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            8, 
            /* Masks and shifts */
            16711680, 
            65280, 
            255, 
            4278190080, 
            16, 
            8, 
            0, 
            24
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_A8B8G8R8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            8, 
            /* Masks and shifts */
            255, 
            65280, 
            16711680, 
            4278190080, 
            0, 
            8, 
            16, 
            24, 
            
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_B8G8R8A8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            8, 
            /* Masks and shifts */
            65280, 
            16711680, 
            4278190080, 
            255, 
            8, 
            16, 
            24, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_A2R10G10B10", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            10, 
            10, 
            10, 
            2, 
            /* Masks and shifts */
            1072693248, 
            1047552, 
            1023, 
            3221225472, 
            20, 
            10, 
            0, 
            30
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_A2B10G10R10", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            10, 
            10, 
            10, 
            2, 
            /* Masks and shifts */
            1023, 
            1047552, 
            1072693248, 
            3221225472, 
            0, 
            10, 
            20, 
            30
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_DXT1", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            // No alpha        EPixelComponentTypes.BYTE, 3,
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_DXT2", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_DXT3", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_DXT4", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_DXT5", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_FLOAT16_RGB", 
            /* Bytes per element */
            6, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT16, 
            3, 
            /* rbits, gbits, bbits, abits */
            16, 
            16, 
            16, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_FLOAT16_RGBA", 
            /* Bytes per element */
            8, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT16, 
            4, 
            /* rbits, gbits, bbits, abits */
            16, 
            16, 
            16, 
            16, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_FLOAT32_RGB", 
            /* Bytes per element */
            12, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT32, 
            3, 
            /* rbits, gbits, bbits, abits */
            32, 
            32, 
            32, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_FLOAT32_RGBA", 
            /* Bytes per element */
            16, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT32, 
            4, 
            /* rbits, gbits, bbits, abits */
            32, 
            32, 
            32, 
            32, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_X8R8G8B8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            0, 
            /* Masks and shifts */
            16711680, 
            65280, 
            255, 
            4278190080, 
            16, 
            8, 
            0, 
            24
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_X8B8G8R8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            0, 
            /* Masks and shifts */
            255, 
            65280, 
            16711680, 
            4278190080, 
            0, 
            8, 
            16, 
            24
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_R8G8B8A8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            8, 
            /* Masks and shifts */
            4278190080, 
            16711680, 
            65280, 
            255, 
            24, 
            16, 
            8, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_DEPTH", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.DEPTH, 
            /* Component type and count */
            // ?        EPixelComponentTypes.FLOAT32, 1,
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_SHORT_RGBA", 
            /* Bytes per element */
            8, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.SHORT, 
            4, 
            /* rbits, gbits, bbits, abits */
            16, 
            16, 
            16, 
            16, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_R3G3B2", 
            /* Bytes per element */
            1, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            3, 
            3, 
            2, 
            0, 
            /* Masks and shifts */
            224, 
            28, 
            3, 
            0, 
            5, 
            2, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_FLOAT16_R", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT16, 
            1, 
            /* rbits, gbits, bbits, abits */
            16, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_FLOAT32_R", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT32, 
            1, 
            /* rbits, gbits, bbits, abits */
            32, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_SHORT_GR", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.SHORT, 
            2, 
            /* rbits, gbits, bbits, abits */
            16, 
            16, 
            0, 
            0, 
            /* Masks and shifts */
            65535, 
            4294901760, 
            0, 
            0, 
            0, 
            16, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_FLOAT16_GR", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT16, 
            2, 
            /* rbits, gbits, bbits, abits */
            16, 
            16, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_FLOAT32_GR", 
            /* Bytes per element */
            8, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT32, 
            2, 
            /* rbits, gbits, bbits, abits */
            32, 
            32, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_SHORT_RGB", 
            /* Bytes per element */
            6, 
            /* Flags */
            0, 
            /* Component type and count */
            akra.EPixelComponentTypes.SHORT, 
            3, 
            /* rbits, gbits, bbits, abits */
            16, 
            16, 
            16, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_PVRTC_RGB2", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_PVRTC_RGBA2", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_PVRTC_RGB4", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_PVRTC_RGBA4", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_R8", 
            /* Bytes per element */
            1, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            1, 
            /* rbits, gbits, bbits, abits */
            8, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            16711680, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_RG8", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            2, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            0, 
            0, 
            /* Masks and shifts */
            16711680, 
            65280, 
            0, 
            0, 
            8, 
            0, 
            0, 
            0
        ], 
        //-----------------------------------------------------------------------
        [
            "PF_DEPTH_BYTE", 
            /* Bytes per element */
            1, 
            /* Flags */
            akra.EPixelFormatFlags.DEPTH, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            1, 
            /* rbits, gbits, bbits, abits */
            8, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            255, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        
    ]);
    var _pColorValue = {
        r: 0.0,
        g: 0.0,
        b: 0.0,
        a: 1.0
    };
    (function (pixelUtil) {
        function getDescriptionFor(/**@inline*/ eFmt) {
            var ord = eFmt;
            akra.logger.setSourceLocation("pixelUtil.ts", 696);
            akra.logger.assert(ord >= 0 && ord < akra.EPixelFormats.TOTAL);
            ; ;
            return pPixelFormats[ord];
        }
        pixelUtil.getDescriptionFor = getDescriptionFor;
        /** Returns the size in bytes of an element of the given pixel format.
        @return
        The size in bytes of an element. See Remarks.
        @remarks
        Passing PF_UNKNOWN will result in returning a size of 0 bytes.
        */
        function getNumElemBytes(/**@inline*/ eFormat) {
            return getDescriptionFor(eFormat).elemBytes;
        }
        pixelUtil.getNumElemBytes = getNumElemBytes;
        /** Returns the size in bits of an element of the given pixel format.
        @return
        The size in bits of an element. See Remarks.
        @remarks
        Passing PF_UNKNOWN will result in returning a size of 0 bits.
        */
        function getNumElemBits(/**@inline*/ eFormat) {
            return getDescriptionFor(eFormat).elemBytes * 8;
        }
        pixelUtil.getNumElemBits = getNumElemBits;
        /** Returns the size in memory of a region with the given extents and pixel
        format with consecutive memory layout.
        @param width
        The width of the area
        @param height
        The height of the area
        @param depth
        The depth of the area
        @param format
        The format of the area
        @return
        The size in bytes
        @remarks
        In case that the format is non-compressed, this simply returns
        width*height*depth*PixelUtil::getNumElemBytes(format). In the compressed
        case, this does serious magic.
        */
        function getMemorySize(iWidth, iHeight, iDepth, eFormat) {
            if(isCompressed(eFormat)) {
                switch(eFormat) {
                    case // DXT formats work by dividing the image into 4x4 blocks, then encoding each
                    // 4x4 block with a certain number of bytes.
                    akra.EPixelFormats.DXT1: {
                        return ((iWidth + 3) / 4) * ((iHeight + 3) / 4) * 8 * iDepth;

                    }
                    case akra.EPixelFormats.DXT2:
                    case akra.EPixelFormats.DXT3:
                    case akra.EPixelFormats.DXT4:
                    case akra.EPixelFormats.DXT5: {
                        return ((iWidth + 3) / 4) * ((iHeight + 3) / 4) * 16 * iDepth;
                        // Size calculations from the PVRTC OpenGL extension spec
                        // http://www.khronos.org/registry/gles/extensions/IMG/IMG_texture_compression_pvrtc.txt
                        // Basically, 32 bytes is the minimum texture size.  Smaller textures are padded up to 32 bytes
                        
                    }
                    case akra.EPixelFormats.PVRTC_RGB2:
                    case akra.EPixelFormats.PVRTC_RGBA2: {
                        akra.logger.setSourceLocation("pixelUtil.ts", 758);
                        akra.logger.assert(iDepth == 1);
                        ; ;
                        return (akra.math.max(iWidth, 16) * akra.math.max(iHeight, 8) * 2 + 7) / 8;

                    }
                    case akra.EPixelFormats.PVRTC_RGB4:
                    case akra.EPixelFormats.PVRTC_RGBA4: {
                        akra.logger.setSourceLocation("pixelUtil.ts", 762);
                        akra.logger.assert(iDepth == 1);
                        ; ;
                        return (akra.math.max(iWidth, 8) * akra.math.max(iHeight, 8) * 4 + 7) / 8;

                    }
                    default: {
                        akra.logger.setSourceLocation("pixelUtil.ts", 765);
                        akra.logger.error("Invalid compressed pixel format", "PixelUtil::getMemorySize");
                        ; ;

                    }
                }
            } else {
                return iWidth * iHeight * iDepth * getNumElemBytes(eFormat);
            }
        }
        pixelUtil.getMemorySize = getMemorySize;
        /** Returns the property flags for this pixel format
        @return
        A bitfield combination of PFF_HASALPHA, PFF_ISCOMPRESSED,
        PFF_FLOAT, PFF_DEPTH, PFF_NATIVEENDIAN, PFF_LUMINANCE
        @remarks
        This replaces the separate functions for formatHasAlpha, formatIsFloat, ...
        */
        function getFlags(/**@inline*/ eFormat) {
            return getDescriptionFor(eFormat).flags;
        }
        pixelUtil.getFlags = getFlags;
        /** Shortcut method to determine if the format has an alpha component */
        function hasAlpha(/**@inline*/ eFormat) {
            return (getFlags(eFormat) & akra.EPixelFormatFlags.HASALPHA) > 0;
        }
        pixelUtil.hasAlpha = hasAlpha;
        /** Shortcut method to determine if the format is floating point */
        function isFloatingPoint(/**@inline*/ eFormat) {
            return (getFlags(eFormat) & akra.EPixelFormatFlags.FLOAT) > 0;
        }
        pixelUtil.isFloatingPoint = isFloatingPoint;
        /** Shortcut method to determine if the format is compressed */
        function isCompressed(/**@inline*/ eFormat) {
            return (getFlags(eFormat) & akra.EPixelFormatFlags.COMPRESSED) > 0;
        }
        pixelUtil.isCompressed = isCompressed;
        /** Shortcut method to determine if the format is a depth format. */
        function isDepth(/**@inline*/ eFormat) {
            return (getFlags(eFormat) & akra.EPixelFormatFlags.DEPTH) > 0;
        }
        pixelUtil.isDepth = isDepth;
        /** Shortcut method to determine if the format is in native endian format. */
        function isNativeEndian(/**@inline*/ eFormat) {
            return (getFlags(eFormat) & akra.EPixelFormatFlags.NATIVEENDIAN) > 0;
        }
        pixelUtil.isNativeEndian = isNativeEndian;
        /** Shortcut method to determine if the format is a luminance format. */
        function isLuminance(/**@inline*/ eFormat) {
            return (getFlags(eFormat) & akra.EPixelFormatFlags.LUMINANCE) > 0;
        }
        pixelUtil.isLuminance = isLuminance;
        /** Return wether a certain image extent is valid for this image format.
        @param width
        The width of the area
        @param height
        The height of the area
        @param depth
        The depth of the area
        @param format
        The format of the area
        @remarks For non-compressed formats, this is always true. For DXT formats,
        only sizes with a width and height multiple of 4 and depth 1 are allowed.
        */
        function isValidExtent(iWidth, iHeight, iDepth, eFormat) {
            if(isCompressed(eFormat)) {
                switch(eFormat) {
                    case akra.EPixelFormats.DXT1:
                    case akra.EPixelFormats.DXT2:
                    case akra.EPixelFormats.DXT3:
                    case akra.EPixelFormats.DXT4:
                    case akra.EPixelFormats.DXT5: {
                        return ((iWidth & 3) == 0 && (iHeight & 3) == 0 && iDepth == 1);

                    }
                    default: {
                        return true;

                    }
                }
            } else {
                return true;
            }
        }
        pixelUtil.isValidExtent = isValidExtent;
        /** Gives the number of bits (RGBA) for a format. See remarks.
        @remarks      For non-colour formats (dxt, depth) this returns [0,0,0,0].
        */
        function getBitDepths(eFormat) {
            var des = getDescriptionFor(eFormat);
            var rgba = [];
            rgba[0] = des.rbits;
            rgba[1] = des.gbits;
            rgba[2] = des.bbits;
            rgba[3] = des.abits;
            return rgba;
        }
        pixelUtil.getBitDepths = getBitDepths;
        /** Gives the masks for the R, G, B and A component
        @note			Only valid for native endian formats
        */
        function getBitMasks(eFormat) {
            var des = getDescriptionFor(eFormat);
            var rgba = [];
            rgba[0] = des.rmask;
            rgba[1] = des.gmask;
            rgba[2] = des.bmask;
            rgba[3] = des.amask;
            return rgba;
        }
        pixelUtil.getBitMasks = getBitMasks;
        /** Gives the bit shifts for R, G, B and A component
        @note			Only valid for native endian formats
        */
        function getBitShifts(eFormat) {
            var des = getDescriptionFor(eFormat);
            var rgba = [];
            rgba[0] = des.rshift;
            rgba[1] = des.gshift;
            rgba[2] = des.bshift;
            rgba[3] = des.ashift;
            return rgba;
        }
        pixelUtil.getBitShifts = getBitShifts;
        /** Gets the name of an image format
        */
        function getFormatName(/**@inline*/ eSrcFormat) {
            return getDescriptionFor(eSrcFormat).name;
        }
        pixelUtil.getFormatName = getFormatName;
        /** Returns wether the format can be packed or unpacked with the packColour()
        and unpackColour() functions. This is generally not true for compressed and
        depth formats as they are special. It can only be true for formats with a
        fixed element size.
        @return
        true if yes, otherwise false
        */
        function isAccessible(eSrcFormat) {
            if(eSrcFormat == akra.EPixelFormats.UNKNOWN) {
                return false;
            }
            var flags = getFlags(eSrcFormat);
            return !((flags & akra.EPixelFormatFlags.COMPRESSED) || (flags & akra.EPixelFormatFlags.DEPTH));
        }
        pixelUtil.isAccessible = isAccessible;
        /** Returns the component type for a certain pixel format. Returns PCT_BYTE
        in case there is no clear component type like with compressed formats.
        This is one of PCT_BYTE, PCT_SHORT, PCT_FLOAT16, PCT_FLOAT32.
        */
        function getComponentType(/**@inline*/ eFmt) {
            return getDescriptionFor(eFmt).componentType;
        }
        pixelUtil.getComponentType = getComponentType;
        /** Returns the component count for a certain pixel format. Returns 3(no alpha) or
        4 (has alpha) in case there is no clear component type like with compressed formats.
        */
        function getComponentCount(/**@inline*/ eFmt) {
            return getDescriptionFor(eFmt).componentCount;
        }
        pixelUtil.getComponentCount = getComponentCount;
        function getComponentTypeBits(/**@inline*/ eFormat) {
            var eType = getComponentType(eFormat);
            switch(eType) {
                case /*Byte per component (8 bit fixed 0.0..1.0)*/
                akra.EPixelComponentTypes.BYTE: {
                    return 8;
                    /*Short per component (16 bit fixed 0.0..1.0))*/
                    
                }
                case akra.EPixelComponentTypes.SHORT: {
                    return 16;
                    /*16 bit float per component*/
                    
                }
                case akra.EPixelComponentTypes.FLOAT16: {
                    return 16;
                    /*32 bit float per component*/
                    
                }
                case akra.EPixelComponentTypes.FLOAT32: {
                    return 32;

                }
            }
            return 0;
        }
        pixelUtil.getComponentTypeBits = getComponentTypeBits;
        /** Gets the format from given name.
        @param  name            The string of format name
        @param  accessibleOnly  If true, non-accessible format will treat as invalid format,
        otherwise, all supported format are valid.
        @param  caseSensitive   Should be set true if string match should use case sensitivity.
        @return                The format match the format name, or PF_UNKNOWN if is invalid name.
        */
        function getFormatFromName(sName, isAccessibleOnly, isCaseSensitive) {
            if (typeof isAccessibleOnly === "undefined") { isAccessibleOnly = false; }
            if (typeof isCaseSensitive === "undefined") { isCaseSensitive = false; }
            var tmp = sName;
            if(!isCaseSensitive) {
                // We are stored upper-case format names.
                tmp = tmp.toUpperCase();
            }
            for(var i = 0; i < akra.EPixelFormats.TOTAL; ++i) {
                var ePf = i;
                if(!isAccessibleOnly || isAccessible(ePf)) {
                    if(tmp == getFormatName(ePf)) {
                        return ePf;
                    }
                }
            }
            return akra.EPixelFormats.UNKNOWN;
        }
        pixelUtil.getFormatFromName = getFormatFromName;
        /** Gets the BNF expression of the pixel-formats.
        @note                   The string returned by this function is intended to be used as a BNF expression
        to work with Compiler2Pass.
        @param  accessibleOnly  If true, only accessible pixel format will take into account, otherwise all
        pixel formats list in EPixelFormats enumeration will being returned.
        @return                A string contains the BNF expression.
        */
        function getBNFExpressionOfPixelFormats(isAccessibleOnly) {
            if (typeof isAccessibleOnly === "undefined") { isAccessibleOnly = false; }
            // Collect format names sorted by length, it's required by BNF compiler
            // that similar tokens need longer ones comes first.
            var formatNames;
            for(var i = 0; i < akra.EPixelFormats.TOTAL; ++i) {
                var ePf = (i);
                if(!isAccessibleOnly || isAccessible(ePf)) {
                    var formatName = getFormatName(ePf);
                    formatNames.push({
                        first: formatName.length,
                        second: formatName
                    });
                }
            }
            // Populate the BNF expression in reverse order
            var result = "";
            // Note: Stupid M$ VC7.1 can't dealing operator!= with FormatNameMap::const_reverse_iterator.
            for(var j in formatNames) {
                if(!akra.isEmpty(result)) {
                    result += " | ";
                }
                result += "'" + formatNames[j] + "'";
            }
            return result;
        }
        pixelUtil.getBNFExpressionOfPixelFormats = getBNFExpressionOfPixelFormats;
        /** Returns the similar format but acoording with given bit depths.
        @param fmt      The original foamt.
        @param integerBits Preferred bit depth (pixel bits) for integer pixel format.
        Available values: 0, 16 and 32, where 0 (the default) means as it is.
        @param floatBits Preferred bit depth (channel bits) for float pixel format.
        Available values: 0, 16 and 32, where 0 (the default) means as it is.
        @return        The format that similar original format with bit depth according
        with preferred bit depth, or original format if no conversion occurring.
        */
        function getFormatForBitDepths(eFmt, iIntegerBits, iFloatBits) {
            switch(iIntegerBits) {
                case 16: {
                    switch(eFmt) {
                        case akra.EPixelFormats.R8G8B8:
                        case akra.EPixelFormats.X8R8G8B8: {
                            return akra.EPixelFormats.R5G6B5;

                        }
                        case akra.EPixelFormats.B8G8R8:
                        case akra.EPixelFormats.X8B8G8R8: {
                            return akra.EPixelFormats.B5G6R5;

                        }
                        case akra.EPixelFormats.A8R8G8B8:
                        case akra.EPixelFormats.R8G8B8A8:
                        case akra.EPixelFormats.A8B8G8R8:
                        case akra.EPixelFormats.B8G8R8A8: {
                            return akra.EPixelFormats.A4R4G4B4;

                        }
                        case akra.EPixelFormats.A2R10G10B10:
                        case akra.EPixelFormats.A2B10G10R10: {
                            return akra.EPixelFormats.A1R5G5B5;

                        }
                        default: {
                            // use original image format
                            break;

                        }
                    }
                    break;

                }
                case 32: {
                    switch(eFmt) {
                        case akra.EPixelFormats.R5G6B5: {
                            return akra.EPixelFormats.X8R8G8B8;

                        }
                        case akra.EPixelFormats.B5G6R5: {
                            return akra.EPixelFormats.X8B8G8R8;

                        }
                        case akra.EPixelFormats.A4R4G4B4: {
                            return akra.EPixelFormats.A8R8G8B8;

                        }
                        case akra.EPixelFormats.A1R5G5B5: {
                            return akra.EPixelFormats.A2R10G10B10;

                        }
                        default: {
                            // use original image format
                            break;

                        }
                    }
                    break;

                }
                default: {
                    // use original image format
                    break;

                }
            }
            switch(iFloatBits) {
                case 16: {
                    switch(eFmt) {
                        case akra.EPixelFormats.FLOAT32_R: {
                            return akra.EPixelFormats.FLOAT16_R;

                        }
                        case akra.EPixelFormats.FLOAT32_RGB: {
                            return akra.EPixelFormats.FLOAT16_RGB;

                        }
                        case akra.EPixelFormats.FLOAT32_RGBA: {
                            return akra.EPixelFormats.FLOAT16_RGBA;

                        }
                        default: {
                            // use original image format
                            break;

                        }
                    }
                    break;

                }
                case 32: {
                    switch(eFmt) {
                        case akra.EPixelFormats.FLOAT16_R: {
                            return akra.EPixelFormats.FLOAT32_R;

                        }
                        case akra.EPixelFormats.FLOAT16_RGB: {
                            return akra.EPixelFormats.FLOAT32_RGB;

                        }
                        case akra.EPixelFormats.FLOAT16_RGBA: {
                            return akra.EPixelFormats.FLOAT32_RGBA;

                        }
                        default: {
                            // use original image format
                            break;

                        }
                    }
                    break;

                }
                default: {
                    // use original image format
                    break;

                }
            }
            return eFmt;
        }
        pixelUtil.getFormatForBitDepths = getFormatForBitDepths;
        /** Pack a colour value to memory
        @param colour	The colour
        @param pf		Pixelformat in which to write the colour
        @param dest		Destination memory location
        */
        function packColour(/**@inline*/ cColour, ePf, pDest) {
            packColourFloat(cColour.r, cColour.g, cColour.b, cColour.a, ePf, pDest);
        }
        pixelUtil.packColour = packColour;
        /** Pack a colour value to memory
        @param r,g,b,a	The four colour components, range 0x00 to 0xFF
        @param pf		Pixelformat in which to write the colour
        @param dest		Destination memory location
        */
        function packColourUint(r, g, b, a, ePf, pDest) {
            // if (arguments.length < 4) {
            // 	var cColour: IColor = arguments[0];
            // 	packColour(cColour.r, cColour.g, cColour.b, cColour.a, ePf, pDest);
            // 	return;
            // }
            var des = getDescriptionFor(ePf);
            if(des.flags & akra.EPixelFormatFlags.NATIVEENDIAN) {
                // Shortcut for integer formats packing
                var value = ((akra.bf.fixedToFixed(r, 8, des.rbits) << des.rshift) & des.rmask) | ((akra.bf.fixedToFixed(g, 8, des.gbits) << des.gshift) & des.gmask) | ((akra.bf.fixedToFixed(b, 8, des.bbits) << des.bshift) & des.bmask) | ((akra.bf.fixedToFixed(a, 8, des.abits) << des.ashift) & des.amask);
                // And write to memory
                akra.bf.intWrite(pDest, des.elemBytes, value);
            } else {
                // Convert to float
                packColourFloat(r / 255.0, g / 255.0, b / 255.0, a / 255.0, ePf, pDest);
            }
        }
        pixelUtil.packColourUint = packColourUint;
        /** Pack a colour value to memory
        @param r,g,b,a	The four colour components, range 0.0f to 1.0f
        (an exception to this case exists for floating point pixel
        formats, which don't clamp to 0.0f..1.0f)
        @param pf		Pixelformat in which to write the colour
        @param dest		Destination memory location
        */
        function packColourFloat(r, g, b, a, ePf, pDest) {
            // Catch-it-all here
            var des = getDescriptionFor(ePf);
            if(des.flags & akra.EPixelFormatFlags.NATIVEENDIAN) {
                // Do the packing
                //std::cerr << dest << " " << r << " " << g <<  " " << b << " " << a << std::endl;
                var value = ((akra.bf.floatToFixed(r, des.rbits) << des.rshift) & des.rmask) | ((akra.bf.floatToFixed(g, des.gbits) << des.gshift) & des.gmask) | ((akra.bf.floatToFixed(b, des.bbits) << des.bshift) & des.bmask) | ((akra.bf.floatToFixed(a, des.abits) << des.ashift) & des.amask);
                // And write to memory
                akra.bf.intWrite(pDest, des.elemBytes, value);
            } else {
                switch(ePf) {
                    case akra.EPixelFormats.FLOAT32_R: {
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 1))[0] = r;
                        break;

                    }
                    case akra.EPixelFormats.FLOAT32_GR: {
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 1))[0] = g;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 2))[1] = r;
                        break;

                    }
                    case akra.EPixelFormats.FLOAT32_RGB: {
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 1))[0] = r;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 2))[1] = g;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 3))[2] = b;
                        break;

                    }
                    case akra.EPixelFormats.FLOAT32_RGBA: {
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 1))[0] = r;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 2))[1] = g;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 3))[2] = b;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 4))[3] = a;
                        break;

                    }
                    case akra.EPixelFormats.FLOAT16_R: {
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = akra.bf.floatToHalf(r);
                        break;

                    }
                    case akra.EPixelFormats.FLOAT16_GR: {
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = akra.bf.floatToHalf(g);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = akra.bf.floatToHalf(r);
                        break;

                    }
                    case akra.EPixelFormats.FLOAT16_RGB: {
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = akra.bf.floatToHalf(r);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = akra.bf.floatToHalf(g);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 3))[2] = akra.bf.floatToHalf(b);
                        break;

                    }
                    case akra.EPixelFormats.FLOAT16_RGBA: {
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = akra.bf.floatToHalf(r);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = akra.bf.floatToHalf(g);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 3))[2] = akra.bf.floatToHalf(b);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 4))[3] = akra.bf.floatToHalf(a);
                        break;

                    }
                    case akra.EPixelFormats.SHORT_RGB: {
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = akra.bf.floatToFixed(r, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = akra.bf.floatToFixed(g, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 3))[2] = akra.bf.floatToFixed(b, 16);
                        break;

                    }
                    case akra.EPixelFormats.SHORT_RGBA: {
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = akra.bf.floatToFixed(r, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = akra.bf.floatToFixed(g, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 3))[2] = akra.bf.floatToFixed(b, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 4))[3] = akra.bf.floatToFixed(a, 16);
                        break;

                    }
                    case akra.EPixelFormats.BYTE_LA: {
                        pDest[0] = akra.bf.floatToFixed(r, 8);
                        pDest[1] = akra.bf.floatToFixed(a, 8);
                        break;

                    }
                    default: {
                        // Not yet supported
                        akra.logger.setSourceLocation("pixelUtil.ts", 1208);
                        akra.logger.error("pack to " + getFormatName(ePf) + " not implemented", "PixelUtil::packColour");
                        ; ;
                        break;

                    }
                }
            }
        }
        pixelUtil.packColourFloat = packColourFloat;
        /** Unpack a colour value from memory
        @param colour	The colour is returned here
        @param pf		Pixelformat in which to read the colour
        @param src		Source memory location
        */
        function unpackColour(cColour, ePf, pSrc) {
            unpackColourFloat(cColour, ePf, pSrc);
        }
        pixelUtil.unpackColour = unpackColour;
        /** Unpack a colour value from memory
        @param r,g,b,a	The colour is returned here (as byte)
        @param pf		Pixelformat in which to read the colour
        @param src		Source memory location
        @remarks 	This function returns the colour components in 8 bit precision,
        this will lose precision when coming from PF_A2R10G10B10 or floating
        point formats.
        */
        function unpackColourUint(rgba, ePf, pSrc) {
            var des = getDescriptionFor(ePf);
            var r, g, b, a;
            if(des.flags & akra.EPixelFormatFlags.NATIVEENDIAN) {
                // Shortcut for integer formats unpacking
                var value = akra.bf.intRead(pSrc, des.elemBytes);
                if(des.flags & akra.EPixelFormatFlags.LUMINANCE) {
                    // Luminance format -- only rbits used
                    r = g = b = akra.bf.fixedToFixed((value & des.rmask) >> des.rshift, des.rbits, 8);
                } else {
                    r = akra.bf.fixedToFixed((value & des.rmask) >> des.rshift, des.rbits, 8);
                    g = akra.bf.fixedToFixed((value & des.gmask) >> des.gshift, des.gbits, 8);
                    b = akra.bf.fixedToFixed((value & des.bmask) >> des.bshift, des.bbits, 8);
                }
                if(des.flags & akra.EPixelFormatFlags.HASALPHA) {
                    a = akra.bf.fixedToFixed((value & des.amask) >> des.ashift, des.abits, 8);
                } else {
                }
            } else {
                // Do the operation with the more generic floating point
                var pRGBA = _pColorValue;
                unpackColourFloat(pRGBA, ePf, pSrc);
                r = akra.bf.floatToFixed(pRGBA.r, 8);
                g = akra.bf.floatToFixed(pRGBA.g, 8);
                b = akra.bf.floatToFixed(pRGBA.b, 8);
                a = akra.bf.floatToFixed(pRGBA.a, 8);
            }
            rgba[0] = r;
            rgba[1] = g;
            rgba[2] = b;
            rgba[3] = a;
        }
        pixelUtil.unpackColourUint = unpackColourUint;
        /** Unpack a colour value from memory
        @param r,g,b,a	The colour is returned here (as float)
        @param pf		Pixelformat in which to read the colour
        @param src		Source memory location
        */
        function unpackColourFloat(rgba, ePf, pSrc) {
            var des = getDescriptionFor(ePf);
            var r, g, b, a;
            if(des.flags & akra.EPixelFormatFlags.NATIVEENDIAN) {
                // Shortcut for integer formats unpacking
                var value = akra.bf.intRead(pSrc, des.elemBytes);
                if(des.flags & akra.EPixelFormatFlags.LUMINANCE) {
                    // Luminance format -- only rbits used
                    r = g = b = akra.bf.fixedToFloat((value & des.rmask) >> des.rshift, des.rbits);
                } else {
                    r = akra.bf.fixedToFloat((value & des.rmask) >> des.rshift, des.rbits);
                    g = akra.bf.fixedToFloat((value & des.gmask) >> des.gshift, des.gbits);
                    b = akra.bf.fixedToFloat((value & des.bmask) >> des.bshift, des.bbits);
                }
                if(des.flags & akra.EPixelFormatFlags.HASALPHA) {
                    a = akra.bf.fixedToFloat((value & des.amask) >> des.ashift, des.abits);
                } else {
                }
            } else {
                switch(ePf) {
                    case akra.EPixelFormats.FLOAT32_R: {
                        r = g = b = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 1))[0];
                        a = 1.0;
                        break;

                    }
                    case akra.EPixelFormats.FLOAT32_GR: {
                        g = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 1))[0];
                        r = b = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 2))[1];
                        a = 1.0;
                        break;

                    }
                    case akra.EPixelFormats.FLOAT32_RGB: {
                        r = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 1))[0];
                        g = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 2))[1];
                        b = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 3))[2];
                        a = 1.0;
                        break;

                    }
                    case akra.EPixelFormats.FLOAT32_RGBA: {
                        r = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 1))[0];
                        g = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 2))[1];
                        b = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 3))[2];
                        a = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 4))[3];
                        break;

                    }
                    case akra.EPixelFormats.FLOAT16_R: {
                        r = g = b = akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]);
                        a = 1.0;
                        break;

                    }
                    case akra.EPixelFormats.FLOAT16_GR: {
                        g = akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]);
                        r = b = akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[1]);
                        a = 1.0;
                        break;

                    }
                    case akra.EPixelFormats.FLOAT16_RGB: {
                        r = akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]);
                        g = akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[1]);
                        b = akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[2]);
                        a = 1.0;
                        break;

                    }
                    case akra.EPixelFormats.FLOAT16_RGBA: {
                        r = akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]);
                        g = akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[1]);
                        b = akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 3))[2]);
                        a = akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 4))[3]);
                        break;

                    }
                    case akra.EPixelFormats.SHORT_RGB: {
                        r = akra.bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0], 16);
                        g = akra.bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[1], 16);
                        b = akra.bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 3))[2], 16);
                        a = 1.0;
                        break;

                    }
                    case akra.EPixelFormats.SHORT_RGBA: {
                        r = akra.bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0], 16);
                        g = akra.bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[1], 16);
                        b = akra.bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 3))[2], 16);
                        a = akra.bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 4))[3], 16);
                        break;

                    }
                    case akra.EPixelFormats.BYTE_LA: {
                        r = g = b = akra.bf.fixedToFloat((pSrc)[0], 8);
                        a = akra.bf.fixedToFloat((pSrc)[1], 8);
                        break;

                    }
                    default: {
                        // Not yet supported
                        akra.logger.setSourceLocation("pixelUtil.ts", 1367);
                        akra.logger.error("unpack from " + getFormatName(ePf) + " not implemented", "PixelUtil::unpackColour");
                        ; ;
                        break;

                    }
                }
            }
            rgba.r = r;
            rgba.g = g;
            rgba.b = b;
            rgba.a = a;
        }
        pixelUtil.unpackColourFloat = unpackColourFloat;
                        function bulkPixelConversion(pSrc, eSrcFormat, pDest, eDstFormat, iCount) {
            var src, dst;
            if(arguments.length > 2) {
                src = new pixelUtil.PixelBox(iCount, 1, 1, eSrcFormat, pSrc);
                dst = new pixelUtil.PixelBox(iCount, 1, 1, eDstFormat, pDest);
            }
            akra.logger.setSourceLocation("pixelUtil.ts", 1410);
            akra.logger.assert(src.width == dst.width && src.height == dst.height && src.depth == dst.depth);
            ; ;
            // Check for compressed formats, we don't support decompression, compression or recoding
            if(isCompressed(src.format) || isCompressed(dst.format)) {
                if(src.format == dst.format) {
                    //_memcpy(dst.data.buffer, src.data.buffer, src.getConsecutiveSize());
                    dst.data.set(src.data.subarray(0, src.getConsecutiveSize()));
                    return;
                } else {
                    akra.logger.setSourceLocation("pixelUtil.ts", 1421);
                    akra.logger.error("This method can not be used to compress or decompress images", "PixelUtil::bulkPixelConversion");
                    ; ;
                }
            }
            // The easy case
            if(src.format == dst.format) {
                // Everything consecutive?
                if(src.isConsecutive() && dst.isConsecutive()) {
                    //_memcpy(dst.data.buffer, src.data.buffer, src.getConsecutiveSize());
                    dst.data.set(src.data.subarray(0, src.getConsecutiveSize()));
                    return;
                }
                var srcPixelSize = getNumElemBytes(src.format);
                var dstPixelSize = getNumElemBytes(dst.format);
                var srcptr = src.data.subarray((src.left + src.top * src.rowPitch + src.front * src.slicePitch) * srcPixelSize);
                var dstptr = dst.data.subarray(+(dst.left + dst.top * dst.rowPitch + dst.front * dst.slicePitch) * dstPixelSize);
                // Calculate pitches+skips in bytes
                var srcRowPitchBytes = src.rowPitch * srcPixelSize;
                //const size_t srcRowSkipBytes = src.getRowSkip()*srcPixelSize;
                var srcSliceSkipBytes = src.getSliceSkip() * srcPixelSize;
                var dstRowPitchBytes = dst.rowPitch * dstPixelSize;
                //const size_t dstRowSkipBytes = dst.getRowSkip()*dstPixelSize;
                var dstSliceSkipBytes = dst.getSliceSkip() * dstPixelSize;
                // Otherwise, copy per row
                var rowSize = src.width * srcPixelSize;
                for(var z = src.front; z < src.back; z++) {
                    for(var y = src.top; y < src.bottom; y++) {
                        //_memcpy(dstptr.buffer, srcptr.buffer, rowSize);
                        dstptr.set(srcptr.subarray(0, rowSize));
                        srcptr = srcptr.subarray(srcRowPitchBytes);
                        dstptr = dstptr.subarray(dstRowPitchBytes);
                    }
                    srcptr = srcptr.subarray(srcSliceSkipBytes);
                    dstptr = dstptr.subarray(dstSliceSkipBytes);
                }
                return;
            }
            // Converting to PF_X8R8G8B8 is exactly the same as converting to
            // PF_A8R8G8B8. (same with PF_X8B8G8R8 and PF_A8B8G8R8)
            if(dst.format == akra.EPixelFormats.X8R8G8B8 || dst.format == akra.EPixelFormats.X8B8G8R8) {
                // Do the same conversion, with EPixelFormats.A8R8G8B8, which has a lot of
                // optimized conversions
                var tempdst = dst;
                tempdst.format = dst.format == akra.EPixelFormats.X8R8G8B8 ? akra.EPixelFormats.A8R8G8B8 : akra.EPixelFormats.A8B8G8R8;
                bulkPixelConversion(src, tempdst);
                return;
            }
            // Converting from EPixelFormats.X8R8G8B8 is exactly the same as converting from
            // EPixelFormats.A8R8G8B8, given that the destination format does not have alpha.
            if((src.format == akra.EPixelFormats.X8R8G8B8 || src.format == akra.EPixelFormats.X8B8G8R8) && !hasAlpha(dst.format)) {
                // Do the same conversion, with EPixelFormats.A8R8G8B8, which has a lot of
                // optimized conversions
                var tempsrc = src;
                tempsrc.format = src.format == akra.EPixelFormats.X8R8G8B8 ? akra.EPixelFormats.A8R8G8B8 : akra.EPixelFormats.A8B8G8R8;
                bulkPixelConversion(tempsrc, dst);
                return;
            }
            var srcPixelSize = getNumElemBytes(src.format);
            var dstPixelSize = getNumElemBytes(dst.format);
            var srcptr = src.data.subarray((src.left + src.top * src.rowPitch + src.front * src.slicePitch) * srcPixelSize);
            var dstptr = dst.data.subarray((dst.left + dst.top * dst.rowPitch + dst.front * dst.slicePitch) * dstPixelSize);
            // Old way, not taking into account box dimensions
            //uint8 *srcptr = static_cast<uint8*>(src.data), *dstptr = static_cast<uint8*>(dst.data);
            // Calculate pitches+skips in bytes
            var srcRowSkipBytes = src.getRowSkip() * srcPixelSize;
            var srcSliceSkipBytes = src.getSliceSkip() * srcPixelSize;
            var dstRowSkipBytes = dst.getRowSkip() * dstPixelSize;
            var dstSliceSkipBytes = dst.getSliceSkip() * dstPixelSize;
            // The brute force fallback
            // var r: float = 0, g: float = 0, b: float = 0, a: float = 1;
            var rgba = _pColorValue;
            for(var z = src.front; z < src.back; z++) {
                for(var y = src.top; y < src.bottom; y++) {
                    for(var x = src.left; x < src.right; x++) {
                        unpackColourFloat(rgba, src.format, srcptr);
                        packColourFloat(rgba.r, rgba.g, rgba.b, rgba.a, dst.format, dstptr);
                        srcptr = srcptr.subarray(srcPixelSize);
                        dstptr = dstptr.subarray(dstPixelSize);
                    }
                    srcptr = srcptr.subarray(srcRowSkipBytes);
                    dstptr = dstptr.subarray(dstRowSkipBytes);
                }
                srcptr = srcptr.subarray(srcSliceSkipBytes);
                dstptr = dstptr.subarray(dstSliceSkipBytes);
            }
        }
        pixelUtil.bulkPixelConversion = bulkPixelConversion;
        function calculateSizeForImage(nMipLevels, nFaces, iWidth, iHeight, iDepth, eFormat) {
            var iSize = 0;
            var mip = 0;
            for(mip = 0; mip <= nMipLevels; ++mip) {
                iSize += getMemorySize(iWidth, iHeight, iDepth, eFormat) * nFaces;
                if(iWidth !== 1) {
                    iWidth /= 2;
                }
                if(iHeight !== 1) {
                    iHeight /= 2;
                }
                if(iDepth !== 1) {
                    iDepth /= 2;
                }
            }
            return iSize;
        }
        pixelUtil.calculateSizeForImage = calculateSizeForImage;
    })(akra.pixelUtil || (akra.pixelUtil = {}));
    var pixelUtil = akra.pixelUtil;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (pixelUtil) {
        var PixelBox = (function (_super) {
            __extends(PixelBox, _super);
            function PixelBox(iWidth, iHeight, iDepth, ePixelFormat, pPixelData) {
                if (typeof pPixelData === "undefined") { pPixelData = null; }
                if(arguments.length === 0) {
                    return;
                }
                if(arguments.length >= 4) {
                                _super.call(this, 0, 0, 0, iWidth, iHeight, iDepth);
                    this.data = akra.isDef(arguments[4]) ? (arguments[4]) : null;
                    this.format = arguments[3];
                } else {
                                _super.call(this, arguments[0]);
                    this.data = arguments[2];
                    this.format = arguments[1];
                }
                this.setConsecutive();
            }
            PixelBox.prototype.setConsecutive = function () {
                this.rowPitch = this.width;
                this.slicePitch = this.width * this.height;
            };
            PixelBox.prototype.getRowSkip = function () {
                return this.rowPitch - this.width;
            };
            PixelBox.prototype.getSliceSkip = function () {
                return this.slicePitch - (this.height * this.rowPitch);
            };
            PixelBox.prototype.isConsecutive = function () {
                return this.rowPitch == this.width && this.slicePitch == this.width * this.height;
            };
            PixelBox.prototype.getConsecutiveSize = function () {
                return akra.pixelUtil.getMemorySize(this.width, this.height, this.depth, this.format);
            };
            PixelBox.prototype.getSubBox = function (pDest) {
                if(akra.pixelUtil.isCompressed(this.format)) {
                    if(pDest.left == this.left && pDest.top == this.top && pDest.front == this.front && pDest.right == this.right && pDest.bottom == this.bottom && pDest.back == this.back) {
                        // Entire buffer is being queried
                        return this;
                    }
                    akra.logger.setSourceLocation("pixelUtil/PixelBox.ts", 65);
                    akra.logger.error("Cannot return subvolume of compressed PixelBuffer", "PixelBox::getSubVolume");
                    ; ;
                }
                if(!this.contains(pDest)) {
                    akra.logger.setSourceLocation("pixelUtil/PixelBox.ts", 69);
                }
                akra.logger.error("Bounds out of range", "PixelBox::getSubVolume");
                ; ;
                var elemSize = akra.pixelUtil.getNumElemBytes(this.format);
                // Calculate new data origin
                // Notice how we do not propagate left/top/front from the incoming box, since
                // the returned pointer is already offset
                var rval = new PixelBox(pDest.width, pDest.height, pDest.depth, this.format, (this.data).subarray(((pDest.left - this.left) * elemSize) + ((pDest.top - this.top) * this.rowPitch * elemSize) + ((pDest.front - this.front) * this.slicePitch * elemSize)));
                rval.rowPitch = this.rowPitch;
                rval.slicePitch = this.slicePitch;
                rval.format = this.format;
                return rval;
            };
            PixelBox.prototype.getColorAt = function (x, y, z) {
                var cv = new akra.Color();
                var pixelSize = akra.pixelUtil.getNumElemBytes(this.format);
                var pixelOffset = pixelSize * (z * this.slicePitch + y * this.rowPitch + x);
                akra.pixelUtil.unpackColour(cv, this.format, this.data.subarray(pixelOffset));
                return cv;
            };
            PixelBox.prototype.setColorAt = function (pColor, x, y, z) {
                var pixelSize = akra.pixelUtil.getNumElemBytes(this.format);
                var pixelOffset = pixelSize * (z * this.slicePitch + y * this.rowPitch + x);
                akra.pixelUtil.packColour(pColor, this.format, this.data.subarray(pixelOffset));
            };
            PixelBox.prototype.scale = function (pDest, eFilter) {
                if (typeof eFilter === "undefined") { eFilter = akra.EFilters.BILINEAR; }
                return false;
            };
            return PixelBox;
        })(akra.geometry.Box);
        pixelUtil.PixelBox = PixelBox;        
    })(akra.pixelUtil || (akra.pixelUtil = {}));
    var pixelUtil = akra.pixelUtil;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLPixelBuffer = (function (_super) {
            __extends(WebGLPixelBuffer, _super);
            function WebGLPixelBuffer() {
                        _super.call(this);
                this._iWidth = 0;
                this._iHeight = 0;
                this._iDepth = 0;
                // Pitches (offsets between rows and slices)
                this._iRowPitch = 0;
                this._iSlicePitch = 0;
                this._eFormat = akra.EPixelFormats.UNKNOWN;
                //webgl specific
                this._pCurrentLock = null;
                this._pLockedBox = null;
                this._iCurrentLockFlags = 0;
                this._pBuffer = null;
                this._iWebGLInternalFormat = 0;
            }
            //upload(download) data to(from) videocard.
                        Object.defineProperty(WebGLPixelBuffer.prototype, "width", {
                get: /**@inline*/ function () {
                    return this._iWidth;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WebGLPixelBuffer.prototype, "height", {
                get: function () {
                    return this._iHeight;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WebGLPixelBuffer.prototype, "depth", {
                get: function () {
                    return this._iDepth;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WebGLPixelBuffer.prototype, "format", {
                get: function () {
                    return this._eFormat;
                },
                enumerable: true,
                configurable: true
            });
            WebGLPixelBuffer.prototype.upload = function (pData, pDestBox) {
                akra.logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 46);
                akra.logger.criticalError("Upload not possible for this pixelbuffer type");
                ; ;
            };
            WebGLPixelBuffer.prototype.download = function (pData) {
                akra.logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 50);
                akra.logger.criticalError("Download not possible for this pixelbuffer type");
                ; ;
            };
            WebGLPixelBuffer.prototype._bindToFramebuffer = function (pAttachment, iZOffset) {
                akra.logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 54);
                akra.logger.criticalError("Framebuffer bind not possible for this pixelbuffer type");
                ; ;
            };
            WebGLPixelBuffer.prototype._getWebGLFormat = function () {
                return this._iWebGLInternalFormat;
            };
            WebGLPixelBuffer.prototype._clearRTT = function (iZOffset) {
            };
            WebGLPixelBuffer.prototype.create = function () {
                if(arguments.length === 1) {
                    akra.logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 68);
                    akra.logger.criticalError("Invalid number of arguments. For PixelBuffer it must be six");
                    ; ;
                }
                var iWidth = arguments[0];
                var iHeight = arguments[1];
                var iDepth = arguments[2];
                var eFormat = arguments[3];
                var iFlags = arguments[4];
                _super.prototype.create.call(this, iFlags);
                this._iWidth = iWidth;
                this._iHeight = iHeight;
                this._iDepth = iDepth;
                this._eFormat = eFormat;
                this._iRowPitch = iWidth;
                this._iSlicePitch = iHeight * iWidth;
                this.byteLength = iHeight * iWidth * akra.pixelUtil.getNumElemBytes(eFormat);
                this._pBuffer = new akra.pixelUtil.PixelBox(iWidth, iHeight, iDepth, eFormat);
                this._iWebGLInternalFormat = 0;
                return true;
            };
            WebGLPixelBuffer.prototype.destroy = function () {
                this._pBuffer = null;
                _super.prototype.destroy.call(this);
            };
            WebGLPixelBuffer.prototype.destroyResource = function () {
                this.destroy();
                this.notifyDestroyed();
                return true;
            };
            WebGLPixelBuffer.prototype.readData = function () {
                akra.logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 108);
                akra.logger.criticalError("Reading a byte range is not implemented. Use blitToMemory.");
                ; ;
                return false;
            };
            WebGLPixelBuffer.prototype.writeData = function () {
                akra.logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 115);
                akra.logger.criticalError("Writing a byte range is not implemented. Use blitFromMemory.");
                ; ;
                return false;
            }//=====
            ;
            WebGLPixelBuffer.prototype.blit = function (pSource, pSrcBox, pDestBox) {
                if(arguments.length == 1) {
                    return this.blit(pSource, new akra.geometry.Box(0, 0, 0, pSource.width, pSource.height, pSource.depth), new akra.geometry.Box(0, 0, 0, this._iWidth, this._iHeight, this._iDepth));
                } else {
                    if(pSource === this) {
                        akra.logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 133);
                        akra.logger.criticalError("Source must not be the same object");
                        ; ;
                    }
                    var pSrclock = pSource.lock(pSrcBox, akra.ELockFlags.READ);
                    var eLockMethod = akra.ELockFlags.NORMAL;
                    if(pDestBox.left === 0 && pDestBox.top === 0 && pDestBox.front === 0 && pDestBox.right === this._iWidth && pDestBox.bottom === this._iHeight && pDestBox.back === this._iDepth) {
                        // Entire buffer -- we can discard the previous contents
                        eLockMethod = akra.ELockFlags.DISCARD;
                    }
                    var pDstlock = this.lock(pDestBox, eLockMethod);
                    if(pDstlock.width != pSrclock.width || pDstlock.height != pSrclock.height || pDstlock.depth != pSrclock.depth) {
                        // Scaling desired
                        pSrclock.scale(pDstlock);
                    } else {
                        // No scaling needed
                        akra.pixelUtil.bulkPixelConversion(pSrclock, pDstlock);
                    }
                    this.unlock();
                    pSource.unlock();
                    return true;
                }
            };
            WebGLPixelBuffer.prototype.blitFromMemory = function () {
                var pSource;
                var pDestBox;
                pSource = arguments[0];
                if(arguments.length === 1) {
                    pDestBox = new akra.geometry.Box(0, 0, 0, this._iWidth, this._iHeight, this._iDepth);
                    return this.blitFromMemory(pSource, pDestBox);
                } else {
                    pDestBox = arguments[1];
                }
                if(!this._pBuffer.contains(pDestBox)) {
                    akra.logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 183);
                    akra.logger.criticalError("Destination box out of range");
                    ; ;
                }
                var pScaledBox;
                if(pSource.width != pDestBox.width || pSource.height != pDestBox.height || pSource.depth != pDestBox.depth) {
                    // Scale to destination size.
                    // This also does pixel format conversion if needed
                    this.allocateBuffer();
                    pScaledBox = this._pBuffer.getSubBox(pDestBox);
                    pSource.scale(pScaledBox, akra.EFilters.BILINEAR);
                } else {
                    if((pSource.format != this._eFormat) || ((webgl.getWebGLOriginFormat(pSource.format) == 0) && (pSource.format != akra.EPixelFormats.R8G8B8))) {
                        // Extents match, but format is not accepted as valid source format for GL
                        // do conversion in temporary buffer
                        this.allocateBuffer();
                        pScaledBox = this._pBuffer.getSubBox(pDestBox);
                        akra.pixelUtil.bulkPixelConversion(pSource, pScaledBox);
                        if(this._eFormat === akra.EPixelFormats.A4R4G4B4) {
                            // ARGB->BGRA
                            webgl.convertToWebGLformat(pScaledBox, pScaledBox);
                        }
                    } else {
                        this.allocateBuffer();
                        pScaledBox = pSource;
                        if(pSource.format == akra.EPixelFormats.R8G8B8) {
                            pScaledBox.format = akra.EPixelFormats.B8G8R8;
                            akra.pixelUtil.bulkPixelConversion(pSource, pScaledBox);
                        }
                    }
                }
                this.upload(pScaledBox, pDestBox);
                this.freeBuffer();
                return true;
            };
            WebGLPixelBuffer.prototype.blitToMemory = function () {
                var pSrcBox;
                var pDest;
                if(arguments.length === 1) {
                    pDest = arguments[0];
                    pSrcBox = new akra.geometry.Box(0, 0, 0, this._iWidth, this._iHeight, this._iDepth);
                    return this.blitToMemory(pSrcBox, pDest);
                } else {
                    pSrcBox = arguments[0];
                    pDest = arguments[1];
                }
                if(!this._pBuffer.contains(pSrcBox)) {
                    akra.logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 244);
                    akra.logger.criticalError("source box out of range");
                    ; ;
                }
                if(pSrcBox.left == 0 && pSrcBox.right == this._iWidth && pSrcBox.top == 0 && pSrcBox.bottom == this._iHeight && pSrcBox.front == 0 && pSrcBox.back == this._iDepth && pDest.width == this._iWidth && pDest.height == this._iHeight && pDest.depth == this._iDepth && webgl.getWebGLOriginFormat(pDest.format) != 0) {
                    // The direct case: the user wants the entire texture in a format supported by GL
                    // so we don't need an intermediate buffer
                    this.download(pDest);
                } else {
                    // Use buffer for intermediate copy
                    this.allocateBuffer();
                    // Download entire buffer
                    this.download(this._pBuffer);
                    if(pSrcBox.width != pDest.width || pSrcBox.height != pDest.height || pSrcBox.depth != pDest.depth) {
                        // We need scaling
                        this._pBuffer.getSubBox(pSrcBox).scale(pDest, akra.EFilters.BILINEAR);
                    } else {
                        // Just copy the bit that we need
                        akra.pixelUtil.bulkPixelConversion(this._pBuffer.getSubBox(pSrcBox), pDest);
                    }
                    this.freeBuffer();
                }
                return true;
            };
            WebGLPixelBuffer.prototype.getRenderTarget = function () {
                return null;
            };
            WebGLPixelBuffer.prototype.lock = function () {
                var pLockBox;
                var iLockFlags;
                if(akra.isInt(arguments[0])) {
                    var iOffset;
                    var iSize;
                    if(arguments.length === 1) {
                        iLockFlags === arguments[0];
                        iOffset = 0;
                        iSize = this.byteLength;
                    } else {
                        iOffset = arguments[0];
                        iSize = arguments[1];
                        iLockFlags = (arguments.length === 3) ? arguments[2] : akra.EHardwareBufferFlags.READABLE;
                    }
                    akra.logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 307);
                    akra.logger.assert(!this.isLocked(), "Cannot lock this buffer, it is already locked!");
                    ; ;
                    akra.logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 309);
                    akra.logger.assert(iOffset === 0 && iSize === this.byteLength, "Cannot lock memory region, most lock box or entire buffer");
                    ; ;
                    pLockBox = new akra.geometry.Box(0, 0, 0, this._iWidth, this._iHeight, this._iDepth);
                }
                if(this.isBackupPresent()) {
                    if(!(((iLockFlags) & (akra.ELockFlags.WRITE)) != 0)) {
                        // we have to assume a read / write lock so we use the shadow buffer
                        // and tag for sync on unlock()
                        this._pBackupUpdated = true;
                    }
                    this._pCurrentLock = ((this._pBackupCopy)).lock(pLockBox, iLockFlags);
                } else {
                    this._pCurrentLock = this.lockImpl(pLockBox, iLockFlags);
                    this._isLocked = true;
                }
                return this._pCurrentLock;
            };
            WebGLPixelBuffer.prototype.allocateBuffer = function () {
                if(!akra.isNull(this._pBuffer.data)) {
                    return;
                }
                this._pBuffer.data = new Uint8Array(this.byteLength);
            };
            WebGLPixelBuffer.prototype.freeBuffer = function () {
                if((((this._iFlags) & (akra.EHardwareBufferFlags.STATIC)) != 0)) {
                    this._pBuffer.data = null;
                }
            };
            WebGLPixelBuffer.prototype.lockImpl = function () {
                if(arguments.length === 3) {
                    akra.logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 349);
                    akra.logger.criticalError("lockImpl(offset,length) is not valid for PixelBuffers and should never be called");
                    ; ;
                }
                var pLockBox = arguments[0];
                var iLockFlags = arguments[1];
                this.allocateBuffer();
                if(!(((iLockFlags) & (akra.ELockFlags.DISCARD)) != 0) && (((this._iFlags) & (akra.EHardwareBufferFlags.READABLE)) != 0)) {
                    this.download(this._pBuffer);
                }
                this._iCurrentLockFlags = iLockFlags;
                this._pLockedBox = pLockBox;
                return this._pBuffer.getSubBox(pLockBox);
            };
            WebGLPixelBuffer.prototype.unlockImpl = function () {
                if((((this._iCurrentLockFlags) & (akra.ELockFlags.WRITE)) != 0)) {
                    // From buffer to card, only upload if was locked for writing
                    this.upload(this._pCurrentLock, this._pLockedBox);
                }
                this.freeBuffer();
            };
            return WebGLPixelBuffer;
        })(akra.core.pool.resources.HardwareBuffer);
        webgl.WebGLPixelBuffer = WebGLPixelBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    (function (ETextureFlags) {
        ETextureFlags._map = [];
        ETextureFlags.STATIC = akra.EHardwareBufferFlags.STATIC;
        ETextureFlags.DYNAMIC = akra.EHardwareBufferFlags.DYNAMIC;
        ETextureFlags.READEBLE = akra.EHardwareBufferFlags.READABLE;
        ETextureFlags.DYNAMIC_DISCARDABLE = akra.EHardwareBufferFlags.DYNAMIC_DISCARDABLE;
        /// mipmaps will be automatically generated for this texture
        ETextureFlags.AUTOMIPMAP = 256;
        /// this texture will be a render target, i.e. used as a target for render to texture
        /// setting this flag will ignore all other texture usages except AUTOMIPMAP
        ETextureFlags.RENDERTARGET = 512;
        /// default to automatic mipmap generation static textures
        ETextureFlags.DEFAULT = ETextureFlags.AUTOMIPMAP | ETextureFlags.STATIC;
    })(akra.ETextureFlags || (akra.ETextureFlags = {}));
    var ETextureFlags = akra.ETextureFlags;
    (function (ETextureFilters) {
        ETextureFilters._map = [];
        ETextureFilters.NEAREST = 9728;
        ETextureFilters.LINEAR = 9729;
        ETextureFilters.NEAREST_MIPMAP_NEAREST = 9984;
        ETextureFilters.LINEAR_MIPMAP_NEAREST = 9985;
        ETextureFilters.NEAREST_MIPMAP_LINEAR = 9986;
        ETextureFilters.LINEAR_MIPMAP_LINEAR = 9987;
    })(akra.ETextureFilters || (akra.ETextureFilters = {}));
    var ETextureFilters = akra.ETextureFilters;
    ; ;
    (function (ETextureWrapModes) {
        ETextureWrapModes._map = [];
        ETextureWrapModes.REPEAT = 10497;
        ETextureWrapModes.CLAMP_TO_EDGE = 33071;
        ETextureWrapModes.MIRRORED_REPEAT = 33648;
    })(akra.ETextureWrapModes || (akra.ETextureWrapModes = {}));
    var ETextureWrapModes = akra.ETextureWrapModes;
    ; ;
    (function (ETextureParameters) {
        ETextureParameters._map = [];
        ETextureParameters.MAG_FILTER = 10240;
        ETextureParameters._map[10241] = "MIN_FILTER";
        ETextureParameters.MIN_FILTER = 10241;
        ETextureParameters._map[10242] = "WRAP_S";
        ETextureParameters.WRAP_S = 10242;
        ETextureParameters._map[10243] = "WRAP_T";
        ETextureParameters.WRAP_T = 10243;
    })(akra.ETextureParameters || (akra.ETextureParameters = {}));
    var ETextureParameters = akra.ETextureParameters;
    ; ;
    (function (ETextureTypes) {
        ETextureTypes._map = [];
        ETextureTypes.TEXTURE_2D = 3553;
        ETextureTypes.TEXTURE = 5890;
        ETextureTypes.TEXTURE_CUBE_MAP = 34067;
        ETextureTypes.TEXTURE_BINDING_CUBE_MAP = 34068;
        ETextureTypes.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
        ETextureTypes.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
        ETextureTypes.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
        ETextureTypes.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
        ETextureTypes.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
        ETextureTypes.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
        ETextureTypes.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
    })(akra.ETextureTypes || (akra.ETextureTypes = {}));
    var ETextureTypes = akra.ETextureTypes;
    ; ;
    (function (ETextureUnits) {
        ETextureUnits._map = [];
        ETextureUnits.TEXTURE = 33984;
    })(akra.ETextureUnits || (akra.ETextureUnits = {}));
    var ETextureUnits = akra.ETextureUnits;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                (function (ETextureForcedFormatFlags) {
                    ETextureForcedFormatFlags._map = [];
                    ETextureForcedFormatFlags.FORCEMIPLEVELS = 0;
                    ETextureForcedFormatFlags._map[1] = "FORCEFORMAT";
                    ETextureForcedFormatFlags.FORCEFORMAT = 1;
                    ETextureForcedFormatFlags._map[2] = "FORCESIZE";
                    ETextureForcedFormatFlags.FORCESIZE = 2;
                })(resources.ETextureForcedFormatFlags || (resources.ETextureForcedFormatFlags = {}));
                var ETextureForcedFormatFlags = resources.ETextureForcedFormatFlags;
                var Texture = (function (_super) {
                    __extends(Texture, _super);
                    function Texture() {
                                        _super.call(this);
                        this._iFlags = akra.ETextureFlags.DEFAULT;
                        this._iWidth = 512;
                        this._iSrcWidth = 0;
                        this._iHeight = 512;
                        this._iSrcHeight = 0;
                        this._iDepth = 1;
                        this._iSrcDepth = 0;
                        this._eFormat = akra.EPixelFormats.UNKNOWN;
                        this._nMipLevels = 0;
                        this._nRequestedMipLevels = 0;
                        this._eTextureType = akra.ETextureTypes.TEXTURE_2D;
                        this._iDesiredIntegerBitDepth = 0;
                        this._iDesiredFloatBitDepth = 0;
                        this._eDesiredFormat = akra.EPixelFormats.UNKNOWN;
                        this._eSrcFormat = akra.EPixelFormats.UNKNOWN;
                        this._pParams = {
                        };
                        this._isInternalResourceCreated = false;
                        this._isMipmapsHardwareGenerated = false;
                        this._iResourceSize = 0;
                        this._pParams[akra.ETextureParameters.MIN_FILTER] = akra.ETextureFilters.NEAREST;
                        this._pParams[akra.ETextureParameters.MAG_FILTER] = akra.ETextureFilters.NEAREST;
                        this._pParams[akra.ETextureParameters.WRAP_S] = akra.ETextureWrapModes.CLAMP_TO_EDGE;
                        this._pParams[akra.ETextureParameters.WRAP_T] = akra.ETextureWrapModes.CLAMP_TO_EDGE;
                    }
                    /**@inline*/                     Object.defineProperty(Texture.prototype, "width", {
                        get: function () {
                            return this._iWidth;
                        }/**@inline*/ ,
                        set: function (iWidth) {
                            this._iWidth = this._iSrcWidth = iWidth;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Texture.prototype, "height", {
                        get: function () {
                            return this._iHeight;
                        }/**@inline*/ ,
                        set: function (iHeight) {
                            this._iHeight = this._iSrcHeight = iHeight;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Texture.prototype, "depth", {
                        get: function () {
                            return this._iDepth;
                        }/**@inline*/ ,
                        set: function (iDepth) {
                            this._iDepth = this._iSrcDepth = iDepth;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Texture.prototype, "format", {
                        get: function () {
                            return this._eFormat;
                        }/**@inline*/ ,
                        set: function (eFormat) {
                            this._eFormat = eFormat;
                            this._eDesiredFormat = eFormat;
                            this._eSrcFormat = eFormat;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Texture.prototype, "textureType", {
                        get: function () {
                            return this._eTextureType;
                        }/**@inline*/ ,
                        set: function (eTextureType) {
                            this._eTextureType = eTextureType;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Texture.prototype, "mipLevels", {
                        get: function () {
                            return this._nMipLevels;
                        }/**@inline*/ ,
                        set: function (nMipLevels) {
                            this._nMipLevels = nMipLevels;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Texture.prototype, "desiredIntegerBitDepth", {
                        get: function () {
                            return this._iDesiredIntegerBitDepth;
                        }/**@inline*/ ,
                        set: function (iDesiredIntegerBitDepth) {
                            this._iDesiredIntegerBitDepth = iDesiredIntegerBitDepth;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Texture.prototype, "desiredFloatBitDepth", {
                        get: function () {
                            return this._iDesiredFloatBitDepth;
                        }/**@inline*/ ,
                        set: function (iDesiredFloatBitDepth) {
                            this._iDesiredFloatBitDepth = iDesiredFloatBitDepth;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Texture.prototype, "srcWidth", {
                        get: function () {
                            return this._iSrcWidth;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Texture.prototype, "srcHeight", {
                        get: function () {
                            return this._iSrcHeight;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Texture.prototype, "srcDepth", {
                        get: function () {
                            return this._iSrcWidth;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Texture.prototype, "desiredFormat", {
                        get: function () {
                            return this._eDesiredFormat;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Texture.prototype, "srcFormat", {
                        get: function () {
                            return this._eSrcFormat;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Texture.prototype.getFlags = function () {
                        return this._iFlags;
                    }/**@inline*/ ;
                    Texture.prototype.setFlags = function (iFlags) {
                        this._iFlags = iFlags;
                    }/**@inline*/ ;
                    Texture.prototype.isTexture2D = function () {
                        return this._eTextureType === akra.ETextureTypes.TEXTURE_2D;
                    }/**@inline*/ ;
                    Texture.prototype.isTextureCube = function () {
                        return this._eTextureType === akra.ETextureTypes.TEXTURE_CUBE_MAP;
                    }/**@inline*/ ;
                    Texture.prototype.isCompressed = function () {
                        return (this._eFormat >= akra.EPixelFormats.DXT1 && this._eFormat <= akra.EPixelFormats.DXT5) || (this._eFormat >= akra.EPixelFormats.PVRTC_RGB2 && this._eFormat <= akra.EPixelFormats.PVRTC_RGBA4);
                    }/**@inline*/ ;
                    Texture.prototype.isValid = function () {
                        return akra.isDefAndNotNull(this._isInternalResourceCreated);
                    }/**@inline*/ ;
                    Texture.prototype.calculateSize = function () {
                        return this.getNumFaces() * akra.pixelUtil.getMemorySize(this._iWidth, this._iHeight, this._iDepth, this._eFormat);
                    }/**@inline*/ ;
                    Texture.prototype.getNumFaces = function () {
                        return this._eTextureType === akra.ETextureTypes.TEXTURE_CUBE_MAP ? 6 : 1;
                    }/**@inline*/ ;
                    Texture.prototype.getSize = function () {
                        return this._iResourceSize;
                    };
                    Texture.prototype.getBuffer = function (iFace, iMipmap) {
                        return null;
                    };
                    Texture.prototype.create = function (iWidth, iHeight, iDepth, pPixels, iFlags, nMipLevels, eTextureType, eFormat) {
                        if (typeof pPixels === "undefined") { pPixels = null; }
                        if (typeof iFlags === "undefined") { iFlags = 0; }
                        if (typeof nMipLevels === "undefined") { nMipLevels = 0; }
                        if (typeof eTextureType === "undefined") { eTextureType = akra.ETextureTypes.TEXTURE_2D; }
                        if (typeof eFormat === "undefined") { eFormat = akra.EPixelFormats.R8G8B8; }
                        this._iWidth = iWidth;
                        this._iHeight = iHeight;
                        this._iDepth = iDepth;
                        this._iFlags = iFlags;
                        this._nMipLevels = nMipLevels;
                        this._eTextureType = eTextureType;
                        this._eFormat = eFormat;
                        if(akra.isDef(pPixels.length)) {
                            if(pPixels instanceof Array) {
                                pPixels = new Uint8Array(pPixels);
                            }
                            return this.loadRawData(pPixels, iWidth, iHeight, eFormat);
                        } else {
                            return this.createInternalTexture(pPixels);
                        }
                    };
                    Texture.prototype.destroy = function () {
                        this.freeInternalTexture();
                    };
                    Texture.prototype.destroyResource = function () {
                        this.destroy();
                        this.notifyDestroyed();
                        return true;
                    };
                    Texture.prototype.setParameter = function (eParam, eValue) {
                        if(!this.isValid()) {
                            return false;
                        }
                        this._pParams[eParam] = eValue;
                        return true;
                    };
                    Texture.prototype.loadRawData = function (pStream, iWidth, iHeight, eFormat) {
                        var pTempImg = this.getManager().imagePool.findResource(".temp_image");
                        if(akra.isNull(pTempImg)) {
                            pTempImg = this.getManager().imagePool.createResource(".temp_image");
                            //pTempImg.create();
                                                    }
                        pTempImg.loadRawData(pStream, iWidth, iHeight, eFormat);
                        var isLoaded = this.loadImage(pTempImg);
                        this.getManager().imagePool.destroyResource(pTempImg);
                        return isLoaded;
                    };
                    Texture.prototype.loadImage = function (pImage) {
                        var isLoaded = this._loadImages(pImage, true);
                        if(isLoaded) {
                            this.notifyLoaded();
                            return true;
                        } else {
                            return false;
                        }
                    };
                    Texture.prototype.loadImages = function (pImages) {
                        var isLoaded = this._loadImages(pImages);
                        if(isLoaded) {
                            this.notifyLoaded();
                            return true;
                        } else {
                            return false;
                        }
                    };
                    Texture.prototype._loadImages = function () {
                        if(this.isResourceLoaded()) {
                            akra.logger.setSourceLocation("core/pool/resources/Texture.ts", 276);
                            akra.logger.warning("Yoy try to load texture when it already have been loaded. All texture data was destoyed.");
                            ; ;
                            this.freeInternalTexture();
                        }
                        var pMainImage = null;
                        var pImageList = null;
                        if(arguments.length === 2) {
                            pMainImage = arguments[0];
                        } else {
                            pImageList = arguments[0];
                            if(pImageList.length === 0) {
                                akra.logger.setSourceLocation("core/pool/resources/Texture.ts", 289);
                                akra.logger.criticalError("Cannot load empty list of images");
                                ; ;
                                return false;
                            }
                            pMainImage = pImageList[0];
                        }
                        this._iSrcWidth = this._iWidth = pMainImage.width;
                        this._iSrcHeight = this._iHeight = pMainImage.height;
                        this._iSrcDepth = this._iDepth = pMainImage.depth;
                        // Get source image format and adjust if required
                        this._eSrcFormat = pMainImage.format;
                        if(this._eDesiredFormat !== akra.EPixelFormats.UNKNOWN) {
                            // If have desired format, use it
                            this._eFormat = this._eDesiredFormat;
                        } else {
                            // Get the format according with desired bit depth
                            this._eFormat = akra.pixelUtil.getFormatForBitDepths(this._eSrcFormat, this._iDesiredIntegerBitDepth, this._iDesiredFloatBitDepth);
                        }
                        // The custom mipmaps in the image have priority over everything
                        var iImageMips = pMainImage.numMipMaps;
                        if(iImageMips > 0) {
                            this._nMipLevels = this._nRequestedMipLevels = iImageMips;
                            // Disable flag for auto mip generation
                            ((this._iFlags) &= ~(akra.ETextureFlags.AUTOMIPMAP));
                        }
                        // Create the texture
                        this.createInternalTexture(null);
                        // Check if we're loading one image with multiple faces
                        // or a vector of images representing the faces
                        var iFaces = 0;
                        var isMultiImage = false;
                        if(!akra.isNull(pImageList) && pImageList.length > 1) {
                            iFaces = pImageList.length;
                            isMultiImage = true;
                        } else {
                            iFaces = pMainImage.numFaces;
                            isMultiImage = false;
                        }
                        // Check wether number of faces in images exceeds number of faces
                        // in this texture. If so, clamp it.
                        if(iFaces > this.getNumFaces()) {
                            iFaces = this.getNumFaces();
                        }
                        // Main loading loop
                        // imageMips == 0 if the image has no custom mipmaps, otherwise contains the number of custom mips
                        var mip = 0;
                        var i = 0;
                        for(mip = 0; mip <= iImageMips; ++mip) {
                            for(i = 0; i < iFaces; ++i) {
                                var pSrc;
                                if(isMultiImage) {
                                    // Load from multiple images
                                    pSrc = pImageList[i].getPixels(0, mip);
                                } else {
                                    // Load from faces of images[0] or main Image
                                    pSrc = pMainImage.getPixels(i, mip);
                                }
                                // Sets to treated format in case is difference
                                pSrc.format = this._eSrcFormat;
                                // Destination: entire texture. blitFromMemory does the scaling to
                                // a power of two for us when needed
                                this.getBuffer(i, mip).blitFromMemory(pSrc);
                            }
                        }
                        // Update size (the final size, not including temp space)
                        this._iResourceSize = this.getNumFaces() * akra.pixelUtil.getMemorySize(this._iWidth, this._iHeight, this._iDepth, this._eFormat);
                        return true;
                    };
                    Texture.prototype.convertToImage = function (pDestImage, bIncludeMipMaps) {
                        var iNumMips = bIncludeMipMaps ? this._nMipLevels + 1 : 1;
                        var iDataSize = akra.pixelUtil.calculateSizeForImage(iNumMips, this._nMipLevels, this._iWidth, this._iHeight, this._iDepth, this._eFormat);
                        var pPixData = new Uint8Array(iDataSize);
                        // if there are multiple faces and mipmaps we must pack them into the data
                        // faces, then mips
                        var pCurrentPixData = pPixData;
                        var iFace = 0;
                        var mip = 0;
                        for(iFace = 0; iFace < this.getNumFaces(); ++iFace) {
                            for(mip = 0; mip < iNumMips; ++mip) {
                                var iMipDataSize = akra.pixelUtil.getMemorySize(this._iWidth, this._iHeight, this._iDepth, this._eFormat);
                                var pPixBox = new akra.pixelUtil.PixelBox(this._iWidth, this._iHeight, this._iDepth, this._eFormat, pCurrentPixData);
                                this.getBuffer(iFace, mip).blitToMemory(pPixBox);
                                pCurrentPixData = pCurrentPixData.subarray(iMipDataSize);
                            }
                        }
                        // load, and tell Image to delete the memory when it's done.
                        pDestImage.loadDynamicImage(pPixData, this._iWidth, this._iHeight, this._iDepth, this._eFormat, true, this.getNumFaces(), iNumMips - 1);
                    };
                    Texture.prototype.copyToTexture = function (pTarget) {
                        if(pTarget.getNumFaces() !== this.getNumFaces()) {
                            akra.logger.setSourceLocation("core/pool/resources/Texture.ts", 404);
                            akra.logger.criticalError("Texture types must match");
                            ; ;
                        }
                        var nMipLevels = Math.min(this._nMipLevels, pTarget.mipLevels);
                        if((((this._iFlags) & (akra.ETextureFlags.AUTOMIPMAP)) != 0) || (((this.getFlags()) & (akra.ETextureFlags.AUTOMIPMAP)) != 0)) {
                            nMipLevels = 0;
                        }
                        var iFace = 0, mip = 0;
                        for(iFace = 0; iFace < this.getNumFaces(); iFace++) {
                            for(mip = 0; mip <= nMipLevels; mip++) {
                                pTarget.getBuffer(iFace, mip).blit(this.getBuffer(iFace, mip));
                            }
                        }
                    };
                    Texture.prototype.createInternalTexture = function (cFillColor) {
                        if (typeof cFillColor === "undefined") { cFillColor = null; }
                        if(!this._isInternalResourceCreated) {
                            this.createInternalTextureImpl(cFillColor);
                            this._isInternalResourceCreated = true;
                            this.notifyCreated();
                            return true;
                        }
                        return false;
                    };
                    Texture.prototype.freeInternalTexture = function () {
                        if(this._isInternalResourceCreated) {
                            this.freeInternalTextureImpl();
                            this._isInternalResourceCreated = false;
                            this.notifyDestroyed();
                            return true;
                        }
                        return false;
                    };
                    Texture.prototype.getNativeFormat = function (eTextureType, eFormat, iFlags) {
                        if (typeof eTextureType === "undefined") { eTextureType = this._eTextureType; }
                        if (typeof eFormat === "undefined") { eFormat = this._eFormat; }
                        if (typeof iFlags === "undefined") { iFlags = this._iFlags; }
                        return null;
                    };
                    Texture.prototype.createInternalTextureImpl = function (cFillColor) {
                        if (typeof cFillColor === "undefined") { cFillColor = null; }
                        return false;
                    };
                    Texture.prototype.freeInternalTextureImpl = function () {
                        return false;
                    };
                    return Texture;
                })(pool.ResourcePoolItem);
                resources.Texture = Texture;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    ; ;
    (function (EEntityTypes) {
        EEntityTypes._map = [];
        EEntityTypes._map[0] = "UNKNOWN";
        EEntityTypes.UNKNOWN = 0;
        EEntityTypes._map[1] = "NODE";
        EEntityTypes.NODE = 1;
        EEntityTypes._map[2] = "JOINT";
        EEntityTypes.JOINT = 2;
        EEntityTypes._map[3] = "SCENE_NODE";
        EEntityTypes.SCENE_NODE = 3;
        EEntityTypes._map[4] = "SCENE_OBJECT";
        EEntityTypes.SCENE_OBJECT = 4;
        EEntityTypes._map[5] = "MODEL";
        EEntityTypes.MODEL = 5;
        EEntityTypes._map[6] = "TERRAIN_SECTION";
        EEntityTypes.TERRAIN_SECTION = 6;
        EEntityTypes._map[7] = "TEXT3D";
        EEntityTypes.TEXT3D = 7;
        EEntityTypes._map[8] = "SPRITE";
        EEntityTypes.SPRITE = 8;
        EEntityTypes._map[9] = "CAMERA";
        EEntityTypes.CAMERA = 9;
        EEntityTypes._map[10] = "EMITTER";
        EEntityTypes.EMITTER = 10;
        EEntityTypes._map[11] = "TOTAL";
        EEntityTypes.TOTAL = 11;
    })(akra.EEntityTypes || (akra.EEntityTypes = {}));
    var EEntityTypes = akra.EEntityTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    ; ;
    ; ;
    ; ;
    (function (ENodeInheritance) {
        ENodeInheritance._map = [];
        //inheritance only position
        ENodeInheritance.POSITION = 0;
        ENodeInheritance._map[1] = "ROTSCALE";
        //inheritance rotation and scale only
        ENodeInheritance.ROTSCALE = 1;
        ENodeInheritance._map[2] = "ALL";
        //inheritance all
        ENodeInheritance.ALL = 2;
    })(akra.ENodeInheritance || (akra.ENodeInheritance = {}));
    var ENodeInheritance = akra.ENodeInheritance;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    (function (ECameraParameters) {
        ECameraParameters._map = [];
        ECameraParameters.CONST_ASPECT = 1;
    })(akra.ECameraParameters || (akra.ECameraParameters = {}));
    var ECameraParameters = akra.ECameraParameters;
    (function (ECameraTypes) {
        ECameraTypes._map = [];
        ECameraTypes._map[0] = "PERSPECTIVE";
        ECameraTypes.PERSPECTIVE = 0;
        ECameraTypes._map[1] = "ORTHO";
        ECameraTypes.ORTHO = 1;
        ECameraTypes._map[2] = "OFFSET_ORTHO";
        ECameraTypes.OFFSET_ORTHO = 2;
    })(akra.ECameraTypes || (akra.ECameraTypes = {}));
    var ECameraTypes = akra.ECameraTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EFramebuffer) {
        EFramebuffer._map = [];
        EFramebuffer._map[0] = "FRONT";
        EFramebuffer.FRONT = 0;
        EFramebuffer._map[1] = "BACK";
        EFramebuffer.BACK = 1;
        EFramebuffer._map[2] = "AUTO";
        EFramebuffer.AUTO = 2;
    })(akra.EFramebuffer || (akra.EFramebuffer = {}));
    var EFramebuffer = akra.EFramebuffer;
    ; ;
    (function (EStatFlags) {
        EStatFlags._map = [];
        EStatFlags.NONE = 0;
        EStatFlags.FPS = 1;
        EStatFlags.AVG_FPS = 2;
        EStatFlags.BEST_FPS = 4;
        EStatFlags.WORST_FPS = 8;
        EStatFlags.TRIANGLE_COUNT = 16;
        EStatFlags.ALL = 65535;
    })(akra.EStatFlags || (akra.EStatFlags = {}));
    var EStatFlags = akra.EStatFlags;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ENodeCreateMode) {
        ENodeCreateMode._map = [];
        ENodeCreateMode._map[0] = "k_Default";
        ENodeCreateMode.k_Default = 0;
        ENodeCreateMode._map[1] = "k_Necessary";
        ENodeCreateMode.k_Necessary = 1;
        ENodeCreateMode._map[2] = "k_Not";
        ENodeCreateMode.k_Not = 2;
    })(akra.ENodeCreateMode || (akra.ENodeCreateMode = {}));
    var ENodeCreateMode = akra.ENodeCreateMode;
    (function (EParserCode) {
        EParserCode._map = [];
        EParserCode._map[0] = "k_Pause";
        EParserCode.k_Pause = 0;
        EParserCode._map[1] = "k_Ok";
        EParserCode.k_Ok = 1;
        EParserCode._map[2] = "k_Error";
        EParserCode.k_Error = 2;
    })(akra.EParserCode || (akra.EParserCode = {}));
    var EParserCode = akra.EParserCode;
    (function (EParserType) {
        EParserType._map = [];
        EParserType._map[0] = "k_LR0";
        EParserType.k_LR0 = 0;
        EParserType._map[1] = "k_LR1";
        EParserType.k_LR1 = 1;
        EParserType._map[2] = "k_LALR";
        EParserType.k_LALR = 2;
    })(akra.EParserType || (akra.EParserType = {}));
    var EParserType = akra.EParserType;
    (function (EParseMode) {
        EParseMode._map = [];
        EParseMode.k_AllNode = 1;
        EParseMode.k_Negate = 2;
        EParseMode.k_Add = 4;
        EParseMode.k_Optimize = 8;
        EParseMode.k_DebugMode = 16;
    })(akra.EParseMode || (akra.EParseMode = {}));
    var EParseMode = akra.EParseMode;
    (function (ETokenType) {
        ETokenType._map = [];
        ETokenType.k_NumericLiteral = 1;
        ETokenType._map[2] = "k_CommentLiteral";
        ETokenType.k_CommentLiteral = 2;
        ETokenType._map[3] = "k_StringLiteral";
        ETokenType.k_StringLiteral = 3;
        ETokenType._map[4] = "k_PunctuatorLiteral";
        ETokenType.k_PunctuatorLiteral = 4;
        ETokenType._map[5] = "k_WhitespaceLiteral";
        ETokenType.k_WhitespaceLiteral = 5;
        ETokenType._map[6] = "k_IdentifierLiteral";
        ETokenType.k_IdentifierLiteral = 6;
        ETokenType._map[7] = "k_KeywordLiteral";
        ETokenType.k_KeywordLiteral = 7;
        ETokenType._map[8] = "k_Unknown";
        ETokenType.k_Unknown = 8;
        ETokenType._map[9] = "k_End";
        ETokenType.k_End = 9;
    })(akra.ETokenType || (akra.ETokenType = {}));
    var ETokenType = akra.ETokenType;
    (function (EOperationType) {
        EOperationType._map = [];
        EOperationType.k_Error = 100;
        EOperationType._map[101] = "k_Shift";
        EOperationType.k_Shift = 101;
        EOperationType._map[102] = "k_Reduce";
        EOperationType.k_Reduce = 102;
        EOperationType._map[103] = "k_Success";
        EOperationType.k_Success = 103;
        EOperationType._map[104] = "k_Pause";
        EOperationType.k_Pause = 104;
        EOperationType._map[105] = "k_Ok";
        EOperationType.k_Ok = 105;
    })(akra.EOperationType || (akra.EOperationType = {}));
    var EOperationType = akra.EOperationType;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    ; ;
    (function (ERenderDataTypes) {
        ERenderDataTypes._map = [];
        /*<! положить данные в текстуру, и больше ничего не делать.*/
        ERenderDataTypes.ISOLATED = 0;
        ERenderDataTypes._map[1] = "INDEXED";
        /*<! обычные даннае из текстуры, доступные по индексу.*/
        ERenderDataTypes.INDEXED = 1;
        ERenderDataTypes._map[2] = "I2I";
        /*<! данные по 2йному индексу.*/
        ERenderDataTypes.I2I = 2;
        ERenderDataTypes._map[3] = "DIRECT";
        /*<! непосредственно данные для атрибута.*/
        ERenderDataTypes.DIRECT = 3;
    })(akra.ERenderDataTypes || (akra.ERenderDataTypes = {}));
    var ERenderDataTypes = akra.ERenderDataTypes;
    ; ;
    (function (ERenderDataOptions) {
        ERenderDataOptions._map = [];
        /*<! использовать индекс на индекс упаковку данных*/
        ERenderDataOptions.ADVANCED_INDEX = (1 << (16));
        ERenderDataOptions.SINGLE_INDEX = (1 << (17));
        /*<! создать RenderData как классические данные, с данными только в аттрибутах, без использования видео буфферов.*/
        /*<! определяет, будет ли объект редерится*/
        ERenderDataOptions.RENDERABLE = (1 << (18));
    })(akra.ERenderDataOptions || (akra.ERenderDataOptions = {}));
    var ERenderDataOptions = akra.ERenderDataOptions;
    //applyMe(): bool;
    })(akra || (akra = {}));
//#include "IHardwareBuffer.ts"
var akra;
(function (akra) {
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    (function (EMeshOptions) {
        EMeshOptions._map = [];
        EMeshOptions.HB_READABLE = akra.EHardwareBufferFlags.READABLE;
        EMeshOptions.RD_ADVANCED_INDEX = akra.ERenderDataOptions.ADVANCED_INDEX;
    })(akra.EMeshOptions || (akra.EMeshOptions = {}));
    var EMeshOptions = akra.EMeshOptions;
    ; ;
    (function (EMeshCloneOptions) {
        EMeshCloneOptions._map = [];
        /*<! copy only geometry*/
        EMeshCloneOptions.GEOMETRY_ONLY = 0;
        /*<! use shared geometry*/
        EMeshCloneOptions.SHARED_GEOMETRY = 1;
    })(akra.EMeshCloneOptions || (akra.EMeshCloneOptions = {}));
    var EMeshCloneOptions = akra.EMeshCloneOptions;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    ; ;
    ; ;
    ; ;
    (function (EDataFlowTypes) {
        EDataFlowTypes._map = [];
        /*!< The data stream can be marked up its index.*/
        EDataFlowTypes.MAPPABLE = 1;
        /*!< The data stream cannot be marked up its index.*/
        EDataFlowTypes.UNMAPPABLE = 0;
    })(akra.EDataFlowTypes || (akra.EDataFlowTypes = {}));
    var EDataFlowTypes = akra.EDataFlowTypes;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    ; ;
    ; ;
    (function (EVertexBufferTypes) {
        EVertexBufferTypes._map = [];
        EVertexBufferTypes._map[0] = "UNKNOWN";
        EVertexBufferTypes.UNKNOWN = 0;
        EVertexBufferTypes._map[1] = "VBO";
        EVertexBufferTypes.VBO = 1;
        EVertexBufferTypes._map[2] = "TBO";
        EVertexBufferTypes.TBO = 2;
    })(akra.EVertexBufferTypes || (akra.EVertexBufferTypes = {}));
    var EVertexBufferTypes = akra.EVertexBufferTypes;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EFrameBufferTypes) {
        EFrameBufferTypes._map = [];
        EFrameBufferTypes.COLOR = 1;
        EFrameBufferTypes.DEPTH = 2;
        EFrameBufferTypes.STENCIL = 4;
    })(akra.EFrameBufferTypes || (akra.EFrameBufferTypes = {}));
    var EFrameBufferTypes = akra.EFrameBufferTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    ; ;
    ; ;
    ; ;
    (function (EViewportTypes) {
        EViewportTypes._map = [];
        EViewportTypes.DEFAULT = -1;
        EViewportTypes.DSVIEWPORT = 1;
    })(akra.EViewportTypes || (akra.EViewportTypes = {}));
    var EViewportTypes = akra.EViewportTypes;
})(akra || (akra = {}));
; ;
; ;
var akra;
(function (akra) {
    (function (geometry) {
        var Circle = (function () {
            function Circle(fCenterX, fCenterY, fRadius) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        var pCircle = arguments[0];
                        this.center = new akra.Vec2(pCircle.center);
                        this.radius = pCircle.radius;
                        break;

                    }
                    case 2: {
                        var v2fCenter = arguments[0];
                        var fRadius = arguments[1];
                        this.center = new akra.Vec2(v2fCenter);
                        this.radius = fRadius;
                        break;

                    }
                    case 3: {
                        this.center = new akra.Vec2(arguments[0], arguments[1]);
                        this.radius = arguments[2];
                        break;

                    }
                    default: {
                        this.center = new akra.Vec2();
                        this.radius = 0.0;
                        break;

                    }
                }
            }
            Circle.prototype.set = function (fCenterX, fCenterY, fRadius) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        var pCircle = arguments[0];
                        this.center.set(pCircle.center);
                        this.radius = pCircle.radius;
                        break;

                    }
                    case 2: {
                        var v2fCenter = arguments[0];
                        var fRadius = arguments[1];
                        this.center.set(v2fCenter);
                        this.radius = fRadius;
                        break;

                    }
                    case 3: {
                        this.center.set(arguments[0], arguments[1]);
                        this.radius = arguments[2];
                        break;

                    }
                    default: {
                        this.center.set(0.0);
                        this.radius = 0.0;

                    }
                }
                return this;
            };
            Circle.prototype.clear = /**@inline*/ function () {
                this.center.clear();
                this.radius = 0.0;
                return this;
            };
            Circle.prototype.isEqual = /**@inline*/ function (pCircle) {
                return this.center.isEqual(pCircle.center) && (this.radius == pCircle.radius);
            };
            Circle.prototype.isClear = /**@inline*/ function () {
                return this.center.isClear() && (this.radius === 0.0);
            };
            Circle.prototype.isValid = /**@inline*/ function () {
                return (this.radius >= 0.0);
            };
            Circle.prototype.offset = /**@inline*/ function (v2fOffset) {
                this.center.add(v2fOffset);
                return this;
            };
            Circle.prototype.expand = /**@inline*/ function (fInc) {
                this.radius += fInc;
                return this;
            };
            Circle.prototype.normalize = /**@inline*/ function () {
                this.radius = akra.math.abs(this.radius);
                return this;
            };
            return Circle;
        })();
        geometry.Circle = Circle;        
        ; ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
; ;
var akra;
(function (akra) {
    (function (geometry) {
        var Rect2d = (function () {
            function Rect2d(fX0, fX1, fY0, fY1) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        this.set(arguments[0]);
                        break;

                    }
                    case 2: {
                        this.set(arguments[0], arguments[1]);
                        break;

                    }
                    case 4: {
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;

                    }
                    default: {
                        this.x0 = this.x1 = this.y0 = this.y1 = 0.0;
                        break;

                    }
                }
            }
            Object.defineProperty(Rect2d.prototype, "left", {
                get: /**@inline*/ function () {
                    return this.x0;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rect2d.prototype, "top", {
                get: function () {
                    return this.y0;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rect2d.prototype, "width", {
                get: function () {
                    return this.x1 - this.x0;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rect2d.prototype, "height", {
                get: function () {
                    return this.y1 - this.y0;
                },
                enumerable: true,
                configurable: true
            });
            Rect2d.prototype.set = function (fX0, fX1, fY0, fY1) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        if(arguments[0] instanceof Rect2d) {
                            var pRect = arguments[0];
                            this.x0 = pRect.x0;
                            this.x1 = pRect.x1;
                            this.y0 = pRect.y0;
                            this.y1 = pRect.y1;
                        } else {
                            var v2fSizes = arguments[0];
                            this.x1 = v2fSizes.x * 0.5;
                            this.x0 = -this.x1;
                            this.y1 = v2fSizes.y * 0.5;
                            this.y0 = -this.y1;
                        }
                        break;

                    }
                    case 2: {
                        var fSizeX = arguments[0];
                        var fSizeY = arguments[1];
                        this.x1 = fSizeX * 0.5;
                        this.x0 = -this.x1;
                        this.y1 = fSizeY * 0.5;
                        this.y0 = -this.y1;
                        break;

                    }
                    case 4: {
                        this.x0 = arguments[0];
                        this.x1 = arguments[1];
                        this.y0 = arguments[2];
                        this.y1 = arguments[3];
                        break;

                    }
                    default: {
                        this.x0 = this.x1 = this.y0 = this.y1 = 0.0;
                        break;

                    }
                }
                return this;
            };
            Rect2d.prototype.setFloor = function (pRect) {
                this.x0 = akra.math.floor(pRect.x0);
                this.x1 = akra.math.floor(pRect.x1);
                this.y0 = akra.math.floor(pRect.y0);
                this.y1 = akra.math.floor(pRect.y1);
                return this;
            };
            Rect2d.prototype.setCeil = function (pRect) {
                this.x0 = akra.math.ceil(pRect.x0);
                this.x1 = akra.math.ceil(pRect.x1);
                this.y0 = akra.math.ceil(pRect.y0);
                this.y1 = akra.math.ceil(pRect.y1);
                return this;
            };
            Rect2d.prototype.clear = /**@inline*/ function () {
                this.x0 = this.x1 = this.y0 = this.y1 = 0.0;
                return this;
            };
            Rect2d.prototype.addSelf = function (v2fVec) {
                if(akra.isFloat(arguments[0])) {
                    var fValue = arguments[0];
                    this.x0 += fValue;
                    this.x1 += fValue;
                    this.y0 += fValue;
                    this.y1 += fValue;
                } else {
                    var v2fVec = arguments[0];
                    this.x0 += v2fVec.x;
                    this.x1 += v2fVec.x;
                    this.y0 += v2fVec.y;
                    this.y1 += v2fVec.y;
                }
                return this;
            };
            Rect2d.prototype.subSelf = function (v2fVec) {
                if(akra.isFloat(arguments[0])) {
                    var fValue = arguments[0];
                    this.x0 -= fValue;
                    this.x1 -= fValue;
                    this.y0 -= fValue;
                    this.y1 -= fValue;
                } else {
                    var v2fVec = arguments[0];
                    this.x0 -= v2fVec.x;
                    this.x1 -= v2fVec.x;
                    this.y0 -= v2fVec.y;
                    this.y1 -= v2fVec.y;
                }
                return this;
            };
            Rect2d.prototype.multSelf = function (v2fVec) {
                if(akra.isFloat(arguments[0])) {
                    var fValue = arguments[0];
                    this.x0 *= fValue;
                    this.x1 *= fValue;
                    this.y0 *= fValue;
                    this.y1 *= fValue;
                } else {
                    var v2fVec = arguments[0];
                    this.x0 *= v2fVec.x;
                    this.x1 *= v2fVec.x;
                    this.y0 *= v2fVec.y;
                    this.y1 *= v2fVec.y;
                }
                return this;
            };
            Rect2d.prototype.divSelf = function (v2fVec) {
                if(akra.isFloat(arguments[0])) {
                    var fValue = arguments[0];
                    akra.logger.setSourceLocation("geometry/Rect2d.ts", 196);
                    akra.logger.assert(fValue != 0.0, "divide by zero error");
                    ; ;
                    var fInvValue = 1.0 / fValue;
                    this.x0 *= fInvValue;
                    this.x1 *= fInvValue;
                    this.y0 *= fInvValue;
                    this.y1 *= fInvValue;
                } else {
                    var v2fVec = arguments[0];
                    akra.logger.setSourceLocation("geometry/Rect2d.ts", 208);
                    akra.logger.assert(v2fVec.x != 0.0, "divide by zero error");
                    ; ;
                    akra.logger.setSourceLocation("geometry/Rect2d.ts", 209);
                    akra.logger.assert(v2fVec.y != 0.0, "divide by zero error");
                    ; ;
                    var fInvX = 1.0 / v2fVec.x;
                    var fInvY = 1.0 / v2fVec.y;
                    this.x0 *= fInvX;
                    this.x1 *= fInvX;
                    this.y0 *= fInvY;
                    this.y1 *= fInvY;
                }
                return this;
            };
            Rect2d.prototype.offset = function (fOffsetX, fOffsetY) {
                if(arguments.length === 1) {
                    var v2fOffset = arguments[0];
                    this.x0 += v2fOffset.x;
                    this.x1 += v2fOffset.x;
                    this.y0 += v2fOffset.y;
                    this.y1 += v2fOffset.y;
                } else {
                    this.x0 += arguments[0];
                    this.x1 += arguments[0];
                    this.y0 += arguments[1];
                    this.y1 += arguments[1];
                }
                return this;
            };
            Rect2d.prototype.expand = function (fValueX, fValueY) {
                if(arguments.length == 1) {
                    if(akra.isFloat(arguments[0])) {
                        var fValue = arguments[0];
                        this.x0 -= fValue;
                        this.x1 += fValue;
                        this.y0 -= fValue;
                        this.y1 += fValue;
                    } else {
                        var v2fValue = v2fValue;
                        this.x0 -= v2fValue.x;
                        this.x1 += v2fValue.x;
                        this.y0 -= v2fValue.y;
                        this.y1 += v2fValue.y;
                    }
                } else {
                    //arguments.length == 2
                    this.x0 -= arguments[0];
                    this.x1 += arguments[0];
                    this.y0 -= arguments[1];
                    this.y1 += arguments[1];
                }
                return this;
            };
            Rect2d.prototype.expandX = function (fValue) {
                this.x0 -= fValue;
                this.x1 += fValue;
                return this;
            };
            Rect2d.prototype.expandY = function (fValue) {
                this.y0 -= fValue;
                this.y1 += fValue;
                return this;
            };
            Rect2d.prototype.resize = function (fSizeX, fSizeY) {
                var fSizeX, fSizeY;
                if(arguments.length == 1) {
                    var v2fSize = arguments[0];
                    fSizeX = v2fSize.x;
                    fSizeY = v2fSize.y;
                } else {
                    fSizeX = arguments[0];
                    fSizeY = arguments[1];
                }
                this.x1 = (this.x0 + this.x1 + fSizeX) * 0.5;
                this.x0 = this.x1 - fSizeX;
                this.y1 = (this.y0 + this.y1 + fSizeY) * 0.5;
                this.y0 = this.y1 - fSizeY;
                return this;
            };
            Rect2d.prototype.resizeX = /**@inline*/ function (fSize) {
                this.x1 = (this.x0 + this.x1 + fSize) * 0.5;
                this.x0 = this.x1 - fSize;
                return this;
            };
            Rect2d.prototype.resizeY = /**@inline*/ function (fSize) {
                this.y1 = (this.y0 + this.y1 + fSize) * 0.5;
                this.y0 = this.y1 - fSize;
                return this;
            };
            Rect2d.prototype.resizeMax = function (fSpanX, fSpanY) {
                if(arguments.length == 1) {
                    var v2fSpan = arguments[0];
                    this.x1 = this.x0 + v2fSpan.x;
                    this.y1 = this.y0 + v2fSpan.y;
                } else {
                    this.x1 = this.x0 + arguments[0];
                    this.y1 = this.y0 + arguments[1];
                }
                return this;
            };
            Rect2d.prototype.resizeMaxX = /**@inline*/ function (fSpan) {
                this.x1 = this.x0 + fSpan;
                return this;
            };
            Rect2d.prototype.resizeMaxY = /**@inline*/ function (fSpan) {
                this.y1 = this.y0 + fSpan;
                return this;
            };
            Rect2d.prototype.resizeMin = function (fSpanX, fSpanY) {
                if(arguments.length == 1) {
                    var v2fSpan = arguments[0];
                    this.x0 = this.x1 - v2fSpan.x;
                    this.y0 = this.y1 - v2fSpan.y;
                } else {
                    this.x0 = this.x1 - arguments[0];
                    this.y0 = this.y1 - arguments[1];
                }
                return this;
            };
            Rect2d.prototype.resizeMinX = /**@inline*/ function (fSpan) {
                this.x0 = this.x1 - fSpan;
                return this;
            };
            Rect2d.prototype.resizeMinY = /**@inline*/ function (fSpan) {
                this.y0 = this.y1 - fSpan;
                return this;
            };
            Rect2d.prototype.unionPoint = function (fX, fY) {
                if(arguments.length == 1) {
                    var v2fPoint = arguments[0];
                    this.x0 = akra.math.min(this.x0, v2fPoint.x);
                    this.x1 = akra.math.max(this.x1, v2fPoint.x);
                    this.y0 = akra.math.min(this.y0, v2fPoint.y);
                    this.y1 = akra.math.max(this.y1, v2fPoint.y);
                } else {
                    var fX = arguments[0];
                    var fY = arguments[1];
                    this.x0 = akra.math.min(this.x0, fX);
                    this.x1 = akra.math.max(this.x1, fX);
                    this.y0 = akra.math.min(this.y0, fY);
                    this.y1 = akra.math.max(this.y1, fY);
                }
                return this;
            };
            Rect2d.prototype.unionRect = function (pRect) {
                this.normalize();
                pRect.normalize();
                this.x0 = akra.math.min(this.x0, pRect.x0);
                this.x1 = akra.math.max(this.x1, pRect.x1);
                this.y0 = akra.math.min(this.y0, pRect.y0);
                this.y1 = akra.math.max(this.y1, pRect.y1);
                return this;
            };
            Rect2d.prototype.negate = function (pDestination) {
                if(!akra.isDef(pDestination)) {
                    pDestination = this;
                }
                return pDestination.set(-this.x1, -this.x0, -this.y1, -this.y0);
            };
            Rect2d.prototype.normalize = function () {
                var fTmp;
                if(this.x0 > this.x1) {
                    fTmp = this.x0;
                    this.x0 = this.x1;
                    this.x1 = fTmp;
                }
                if(this.y0 > this.y1) {
                    fTmp = this.y0;
                    this.y0 = this.y1;
                    this.y1 = fTmp;
                }
                return this;
            };
            Rect2d.prototype.isEqual = /**@inline*/ function (pRect) {
                return this.x0 == pRect.x0 && this.x1 == pRect.x1 && this.y0 == pRect.y0 && this.y1 == pRect.y1;
            };
            Rect2d.prototype.isClear = /**@inline*/ function () {
                return this.x0 == 0.0 && this.x1 == 0.0 && this.y0 == 0.0 && this.y1 == 0.0;
            };
            Rect2d.prototype.isValid = /**@inline*/ function () {
                return this.x0 <= this.x1 && this.y0 <= this.y1;
            };
            Rect2d.prototype.isPointInRect = /**@inline*/ function (v2fPoint) {
                var x = v2fPoint.x;
                var y = v2fPoint.y;
                return (this.x0 <= x && x <= this.x1) && (this.y0 <= y && y <= this.y1);
            };
            Rect2d.prototype.midPoint = function (v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = new akra.Vec2();
                }
                v2fDestination.x = (this.x0 + this.x1) * 0.5;
                v2fDestination.y = (this.y0 + this.y1) * 0.5;
                return v2fDestination;
            };
            Rect2d.prototype.midX = /**@inline*/ function () {
                return (this.x0 + this.x1) * 0.5;
            };
            Rect2d.prototype.midY = /**@inline*/ function () {
                return (this.y0 + this.y1) * 0.5;
            };
            Rect2d.prototype.size = function (v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = new akra.Vec2();
                }
                v2fDestination.x = this.x1 - this.x0;
                v2fDestination.y = this.y1 - this.y0;
                return v2fDestination;
            };
            Rect2d.prototype.sizeX = /**@inline*/ function () {
                return this.x1 - this.x0;
            };
            Rect2d.prototype.sizeY = /**@inline*/ function () {
                return this.y1 - this.y0;
            };
            Rect2d.prototype.minPoint = function (v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = new akra.Vec2();
                }
                v2fDestination.x = this.x0;
                v2fDestination.y = this.y0;
                return v2fDestination;
            };
            Rect2d.prototype.maxPoint = function (v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = new akra.Vec2();
                }
                v2fDestination.x = this.x1;
                v2fDestination.y = this.y1;
                return v2fDestination;
            };
            Rect2d.prototype.area = /**@inline*/ function () {
                return (this.x1 - this.x0) * (this.y1 - this.y0);
            };
            Rect2d.prototype.corner = /**
            * counter-clockwise
            * x0,y0 -> x1,y0 -> x1,y1 -> x0,y1;
            */
            function (iIndex, v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = new akra.Vec2();
                }
                akra.logger.setSourceLocation("geometry/Rect2d.ts", 547);
                akra.logger.assert(0 <= iIndex && iIndex < 4, "invalid index");
                ; ;
                switch(iIndex) {
                    case 0: {
                        v2fDestination.set(this.x0, this.y0);
                        break;

                    }
                    case 1: {
                        v2fDestination.set(this.x1, this.y0);
                        break;

                    }
                    case 2: {
                        v2fDestination.set(this.x1, this.y1);
                        break;

                    }
                    case 3: {
                        v2fDestination.set(this.x0, this.y1);
                        break;

                    }
                }
                ; ;
                return v2fDestination;
            };
            Rect2d.prototype.createBoundingCircle = function (pCircle) {
                if(!akra.isDef(pCircle)) {
                    pCircle = new geometry.Circle();
                }
                var fX0 = this.x0, fX1 = this.x1;
                var fY0 = this.y0, fY1 = this.y1;
                var fHalfSizeX = (fX1 - fX0) * 0.5;
                var fHalfSizeY = (fY1 - fY0) * 0.5;
                pCircle.set((fX0 + fX1) * 0.5, (fY0 + fY1) * 0.5, akra.math.sqrt(fHalfSizeX * fHalfSizeX + fHalfSizeY * fHalfSizeY));
                return pCircle;
            };
            Rect2d.prototype.toString = function () {
                return "(" + this.x0 + ", " + this.y0 + ") --> (" + this.x1 + ", " + this.y1 + ")";
            };
            return Rect2d;
        })();
        geometry.Rect2d = Rect2d;        
        ; ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var Viewport = (function () {
            function Viewport(pCamera, pTarget, csRenderMethod, fLeft, fTop, fWidth, fHeight, iZIndex) {
                if (typeof csRenderMethod === "undefined") { csRenderMethod = null; }
                if (typeof fLeft === "undefined") { fLeft = 0.0; }
                if (typeof fTop === "undefined") { fTop = 0.0; }
                if (typeof fWidth === "undefined") { fWidth = 1.0; }
                if (typeof fHeight === "undefined") { fHeight = 1.0; }
                if (typeof iZIndex === "undefined") { iZIndex = 0; }
                this._cBackColor = new akra.Color(akra.Color.BLACK);
                this._fDepthClearValue = 1.0;
                this._bClearEveryFrame = true;
                this._iClearBuffers = akra.EFrameBufferTypes.COLOR | akra.EFrameBufferTypes.DEPTH;
                this._bUpdated = false;
                // protected _bShowOverlays: bool = true;
                // protected _bShowSkies: bool = true;
                // protected _bShowShadows: bool = true;
                this._iVisibilityMask = 4294967295;
                // protected _sRQSequenceName: string;
                // protected mRQSequence: RenderQueueInvocationSequence;
                this.sMaterialSchemeName = akra.DEFAULT_MATERIAL_NAME;
                // static _eDefaultOrientationMode: EOrientationModes;
                this._isAutoUpdated = true;
                this._csDefaultRenderMethod = null;
                this._iGuid = akra.sid();
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this._pTarget = pTarget;
                this._fRelLeft = fLeft;
                this._fRelTop = fTop;
                this._fRelWidth = fWidth;
                this._fRelHeight = fHeight;
                this._iZIndex = iZIndex;
                this._csDefaultRenderMethod = csRenderMethod;
                this._updateDimensions();
                this._setCamera(pCamera);
            }
            Object.defineProperty(Viewport.prototype, "zIndex", {
                get: /**@inline*/ function () {
                    return this._iZIndex;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Viewport.prototype, "left", {
                get: function () {
                    return this._fRelLeft;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Viewport.prototype, "top", {
                get: function () {
                    return this._fRelTop;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Viewport.prototype, "width", {
                get: function () {
                    return this._fRelWidth;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Viewport.prototype, "height", {
                get: function () {
                    return this._fRelHeight;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Viewport.prototype, "actualLeft", {
                get: function () {
                    return this._iActLeft;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Viewport.prototype, "actualTop", {
                get: function () {
                    return this._iActTop;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Viewport.prototype, "actualWidth", {
                get: function () {
                    return this._iActWidth;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Viewport.prototype, "actualHeight", {
                get: function () {
                    return this._iActHeight;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Viewport.prototype, "backgroundColor", {
                get: function () {
                    return this._cBackColor;
                }/**@inline*/ ,
                set: function (cColor) {
                    this._cBackColor = cColor;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Viewport.prototype, "depthClear", {
                get: function () {
                    return this._fDepthClearValue;
                }/**@inline*/ ,
                set: function (fDepthClearValue) {
                    this._fDepthClearValue = fDepthClearValue;
                },
                enumerable: true,
                configurable: true
            });
            Viewport.prototype.destroy = function () {
                var pRenderer = this._pTarget.getRenderer();
                if(pRenderer && pRenderer._getViewport() === this) {
                    pRenderer._setViewport(null);
                }
            };
            Viewport.prototype.clear = function (iBuffers, cColor, iDepth) {
                if (typeof iBuffers === "undefined") { iBuffers = 1; }
                if (typeof cColor === "undefined") { cColor = akra.Color.BLACK; }
                if (typeof iDepth === "undefined") { iDepth = 1.0; }
                var pRenderer = this._pTarget.getRenderer();
                if(pRenderer) {
                    var pCurrentViewport = pRenderer._getViewport();
                    if(pCurrentViewport && pCurrentViewport == this) {
                        pRenderer.clearFrameBuffer(iBuffers, cColor, iDepth);
                    } else {
                        if(pCurrentViewport) {
                            pRenderer._setViewport(this);
                            pRenderer.clearFrameBuffer(iBuffers, cColor, iDepth);
                            pRenderer._setViewport(pCurrentViewport);
                        }
                    }
                }
            }/**@inline*/ ;
            Viewport.prototype.getTarget = function () {
                return this._pTarget;
            }/**@inline*/ ;
            Viewport.prototype.getCamera = function () {
                return this._pCamera;
            };
            Viewport.prototype.setCamera = function (pCamera) {
                if(this._pCamera) {
                    if(this._pCamera._getLastViewport() == this) {
                        this._pCamera._keepLastViewport(null);
                    }
                }
                if(this._pCamera) {
                    // update aspect ratio of new camera if needed.
                    if(!pCamera.isConstantAspect()) {
                        pCamera.aspect = (this._iActWidth / this._iActHeight);
                    }
                }
                this._setCamera(pCamera);
                this.viewportCameraChanged();
                return true;
            };
            Viewport.prototype._setCamera = function (pCamera) {
                this._pCamera = pCamera;
                if(pCamera) {
                    pCamera._keepLastViewport(this);
                }
            };
            Viewport.prototype.setDimensions = function (fLeft, fTop, fWidth, fHeight) {
                var pRect;
                if(akra.isNumber(arguments[0])) {
                    this._fRelLeft = fLeft;
                    this._fRelTop = fTop;
                    this._fRelWidth = fWidth;
                    this._fRelHeight = fHeight;
                } else {
                    pRect = arguments[0];
                    this._fRelLeft = pRect.left;
                    this._fRelTop = pRect.top;
                    this._fRelWidth = pRect.width;
                    this._fRelHeight = pRect.height;
                }
                this._updateDimensions();
                return true;
            };
            Viewport.prototype.getActualDimensions = function () {
                return new akra.geometry.Rect2d(this._iActLeft, this._iActTop, this._iActWidth, this._iActHeight);
            }//iBuffers=FBT_COLOUR|FBT_DEPTH
            ;
            Viewport.prototype.setClearEveryFrame = function (isClear, iBuffers) {
                this._bClearEveryFrame = isClear;
                this._iClearBuffers = iBuffers;
            }/**@inline*/ ;
            Viewport.prototype.getClearEveryFrame = function () {
                return this._bClearEveryFrame;
            }/**@inline*/ ;
            Viewport.prototype.getClearBuffers = function () {
                return this._iClearBuffers;
            }/**@inline*/ ;
            Viewport.prototype.setAutoUpdated = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                this._isAutoUpdated = bValue;
            }/**@inline*/ ;
            Viewport.prototype.isAutoUpdated = function () {
                return this._isAutoUpdated;
            };
            Viewport.prototype._updateDimensions = function () {
                var fHeight = this._pTarget.height;
                var fWidth = this._pTarget.width;
                this._iActLeft = (this._fRelLeft * fWidth);
                this._iActTop = (this._fRelTop * fHeight);
                this._iActWidth = (this._fRelWidth * fWidth);
                this._iActHeight = (this._fRelHeight * fHeight);
                // This will check if the cameras getAutoAspectRatio() property is set.
                // If it's true its aspect ratio is fit to the current viewport
                // If it's false the camera remains unchanged.
                // This allows cameras to be used to render to many viewports,
                // which can have their own dimensions and aspect ratios.
                if(this._pCamera) {
                    if(!this._pCamera.isConstantAspect()) {
                        this._pCamera.aspect = (this._iActWidth / this._iActHeight);
                    }
                }
                this._bUpdated = true;
                this.viewportDimensionsChanged();
            };
            Viewport.prototype.update = function () {
                if(this._pCamera) {
                    this.renderAsNormal(this._csDefaultRenderMethod, this._pCamera);
                }
            };
            Viewport.prototype.renderAsNormal = function (csMethod, pCamera) {
                var pVisibleObjects = pCamera.display();
                var pRenderable;
                for(var i = 0; i < pVisibleObjects.length; ++i) {
                    pRenderable = pVisibleObjects[i].getRenderable();
                    if(!akra.isNull(pRenderable)) {
                        pRenderable.render(csMethod);
                    }
                }
            }/**@inline*/ ;
            Viewport.prototype.isUpdated = function () {
                return this._bUpdated;
            }/**@inline*/ ;
            Viewport.prototype._clearUpdatedFlag = function () {
                this._bUpdated = false;
            };
            Viewport.prototype._getNumRenderedPolygons = function () {
                return this._pCamera ? this._pCamera._getNumRenderedFaces() : 0;
            };
            Viewport._pEvenetTable = new akra.events.EventTable();
            Viewport.prototype.getEventTable = /**@inline*/ function () {
                return Viewport._pEvenetTable;
            }/**@inline*/ ;
            Viewport.prototype.getGuid = function () {
                return this._iGuid;
            }/**@inline*/ ;
            Viewport.prototype.connect = function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().addDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            };
            Viewport.prototype.disconnect = /**@inline*/ function (pSender, sSignal, sSlot, eType) {
                return this.getEventTable().removeDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            }/**@inline*/ ;
            Viewport.prototype.bind = function (sSignal, fnListener, eType) {
                return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
            }/**@inline*/ ;
            Viewport.prototype.unbind = function (sSignal, fnListener, eType) {
                return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
            };
            Viewport.prototype.viewportDimensionsChanged = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).viewportDimensionsChanged;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                }
            };
            Viewport.prototype.viewportCameraChanged = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).viewportCameraChanged;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                }
            };
            return Viewport;
        })();
        render.Viewport = Viewport;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    //default parameters
    (function (ELightPointTypes) {
        ELightPointTypes._map = [];
        ELightPointTypes.PROJECT = 100;
        ELightPointTypes._map[101] = "OMNI_DIRECTIONAL";
        ELightPointTypes.OMNI_DIRECTIONAL = 101;
    })(akra.ELightPointTypes || (akra.ELightPointTypes = {}));
    var ELightPointTypes = akra.ELightPointTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var LightData = (function () {
            function LightData() {
                this.DIFFUSE = new akra.Vec4();
                this.AMBIENT = new akra.Vec4();
                this.SPECULAR = new akra.Vec4();
                this.POSITION = new akra.Vec3();
                this.ATTENUATION = new akra.Vec3();
            }
            LightData.prototype.set = function (pLightParam, v3fPosition) {
                this.DIFFUSE.set(pLightParam.diffuse);
                this.AMBIENT.set(pLightParam.ambient);
                this.SPECULAR.set(pLightParam.specular);
                this.ATTENUATION.set(pLightParam.attenuation);
                this.POSITION.set(v3fPosition);
                return this;
            };
            return LightData;
        })();
        render.LightData = LightData;        
        ; ;
        var UniformOmni = (function () {
            function UniformOmni() {
                this.LIGHT_DATA = new LightData();
            }
            UniformOmni.prototype.setLightData = function (pLightParam, v3fPosition) {
                this.LIGHT_DATA.set(pLightParam, v3fPosition);
                return this;
            };
            Object.defineProperty(UniformOmni, "stackCeil", {
                get: function () {
                    UniformOmni.stackPosition = UniformOmni.stackPosition === UniformOmni.stackSize - 1 ? 0 : UniformOmni.stackPosition;
                    return UniformOmni.stack[UniformOmni.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            UniformOmni.stackSize = 200;
            UniformOmni.stackPosition = 0;
            UniformOmni.stack = (function () {
                var pStack = new Array(UniformOmni.stackSize);
                for(var i = 0; i < UniformOmni.stackSize; i++) {
                    pStack[i] = new UniformOmni();
                }
                return pStack;
            })();
            return UniformOmni;
        })();
        render.UniformOmni = UniformOmni;        
        ; ;
        var UniformProject = (function () {
            function UniformProject() {
                this.LIGHT_DATA = new LightData();
                this.SHADOW_MATRIX = new akra.Mat4();
            }
            UniformProject.prototype.setLightData = function (pLightParam, v3fPosition) {
                this.LIGHT_DATA.set(pLightParam, v3fPosition);
                return this;
            };
            UniformProject.prototype.setMatrix = function (m4fMatrix) {
                this.SHADOW_MATRIX.set(m4fMatrix);
                return this;
            };
            Object.defineProperty(UniformProject, "stackCeil", {
                get: function () {
                    UniformProject.stackPosition = UniformProject.stackPosition === UniformProject.stackSize - 1 ? 0 : UniformProject.stackPosition;
                    return UniformProject.stack[UniformProject.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            UniformProject.stackSize = 200;
            UniformProject.stackPosition = 0;
            UniformProject.stack = (function () {
                var pStack = new Array(UniformProject.stackSize);
                for(var i = 0; i < UniformProject.stackSize; i++) {
                    pStack[i] = new UniformProject();
                }
                return pStack;
            })();
            return UniformProject;
        })();
        render.UniformProject = UniformProject;        
        ; ;
        var UniformProjectShadow = (function () {
            function UniformProjectShadow() {
                this.LIGHT_DATA = new LightData();
                this.TO_LIGHT_SPACE = new akra.Mat4();
                this.REAL_PROJECTION_MATRIX = new akra.Mat4();
                this.OPTIMIZED_PROJECTION_MATRIX = new akra.Mat4();
                this.SHADOW_SAMPLER = {
                    TEXTURE: null
                };
            }
            UniformProjectShadow.prototype.setLightData = function (pLightParam, v3fPosition) {
                this.LIGHT_DATA.set(pLightParam, v3fPosition);
                return this;
            };
            UniformProjectShadow.prototype.setMatrix = function (m4fToLightSpace, m4fRealProj, m4fOptimizedProj) {
                this.TO_LIGHT_SPACE.set(m4fToLightSpace);
                this.REAL_PROJECTION_MATRIX.set(m4fRealProj);
                this.OPTIMIZED_PROJECTION_MATRIX.set(m4fOptimizedProj);
                return this;
            };
            UniformProjectShadow.prototype.setSampler = function (sTexture) {
                this.SHADOW_SAMPLER.TEXTURE = sTexture;
                return this;
            };
            Object.defineProperty(UniformProjectShadow, "stackCeil", {
                get: function () {
                    UniformProjectShadow.stackPosition = UniformProjectShadow.stackPosition === UniformProjectShadow.stackSize - 1 ? 0 : UniformProjectShadow.stackPosition;
                    return UniformProjectShadow.stack[UniformProjectShadow.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            UniformProjectShadow.stackSize = 20;
            UniformProjectShadow.stackPosition = 0;
            UniformProjectShadow.stack = (function () {
                var pStack = new Array(UniformProjectShadow.stackSize);
                for(var i = 0; i < UniformProjectShadow.stackSize; i++) {
                    pStack[i] = new UniformProjectShadow();
                }
                return pStack;
            })();
            return UniformProjectShadow;
        })();
        render.UniformProjectShadow = UniformProjectShadow;        
        var UniformOmniShadow = (function () {
            function UniformOmniShadow() {
                this.LIGHT_DATA = new LightData();
                this.TO_LIGHT_SPACE = [
                    new akra.Mat4(), 
                    new akra.Mat4(), 
                    new akra.Mat4(), 
                    new akra.Mat4(), 
                    new akra.Mat4(), 
                    new akra.Mat4()
                ];
                this.OPTIMIZED_PROJECTION_MATRIX = [
                    new akra.Mat4(), 
                    new akra.Mat4(), 
                    new akra.Mat4(), 
                    new akra.Mat4(), 
                    new akra.Mat4(), 
                    new akra.Mat4()
                ];
                this.SHADOW_SAMPLER = [
                    {
                        "TEXTURE": null
                    }, 
                    {
                        "TEXTURE": null
                    }, 
                    {
                        "TEXTURE": null
                    }, 
                    {
                        "TEXTURE": null
                    }, 
                    {
                        "TEXTURE": null
                    }, 
                    {
                        "TEXTURE": null
                    }
                ];
            }
            UniformOmniShadow.prototype.setLightData = function (pLightParam, v3fPosition) {
                this.LIGHT_DATA.set(pLightParam, v3fPosition);
                return this;
            };
            UniformOmniShadow.prototype.setMatrix = function (m4fToLightSpace, m4fOptimizedProj, index) {
                this.TO_LIGHT_SPACE[index].set(m4fToLightSpace);
                this.OPTIMIZED_PROJECTION_MATRIX[index].set(m4fOptimizedProj);
                return this;
            };
            UniformOmniShadow.prototype.setSampler = function (sTexture, index) {
                this.SHADOW_SAMPLER[index].TEXTURE = sTexture;
                return this;
            };
            Object.defineProperty(UniformOmniShadow, "stackCeil", {
                get: function () {
                    UniformOmniShadow.stackPosition = UniformOmniShadow.stackPosition === UniformOmniShadow.stackSize - 1 ? 0 : UniformOmniShadow.stackPosition;
                    return UniformOmniShadow.stack[UniformOmniShadow.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            UniformOmniShadow.stackSize = 3;
            UniformOmniShadow.stackPosition = 0;
            UniformOmniShadow.stack = (function () {
                var pStack = new Array(UniformOmniShadow.stackSize);
                for(var i = 0; i < UniformOmniShadow.stackSize; i++) {
                    pStack[i] = new UniformOmniShadow();
                }
                return pStack;
            })();
            return UniformOmniShadow;
        })();
        render.UniformOmniShadow = UniformOmniShadow;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var RenderTechnique = (function () {
            function RenderTechnique(pMethod) {
                if (typeof pMethod === "undefined") { pMethod = null; }
                this._iGuid = akra.sid();
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this._pMethod = pMethod;
            }
            Object.defineProperty(RenderTechnique.prototype, "modified", {
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderTechnique.prototype, "totalPasses", {
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            RenderTechnique.prototype.destroy = function () {
            };
            RenderTechnique.prototype.getPass = function (n) {
                return null;
            };
            RenderTechnique.prototype.getMethod = function () {
                return null;
            };
            RenderTechnique.prototype.setMethod = function (pMethod) {
            };
            RenderTechnique.prototype.setState = function (sName, pValue) {
            };
            RenderTechnique.prototype.setForeign = function (sName, pValue) {
            };
            RenderTechnique.prototype.setStruct = function (sName, pValue) {
            };
            RenderTechnique.prototype.setTextureBySemantics = function (sName, pValue) {
            };
            RenderTechnique.prototype.setShadowSamplerArray = function (sName, pValue) {
            };
            RenderTechnique.prototype.setVec2BySemantic = function (sName, pValue) {
            };
            RenderTechnique.prototype.isReady = function () {
                return false;
            };
            RenderTechnique._pEvenetTable = new akra.events.EventTable();
            RenderTechnique.prototype.getEventTable = /**@inline*/ function () {
                return RenderTechnique._pEvenetTable;
            }/**@inline*/ ;
            RenderTechnique.prototype.getGuid = function () {
                return this._iGuid;
            }/**@inline*/ ;
            RenderTechnique.prototype.connect = function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().addDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            };
            RenderTechnique.prototype.disconnect = /**@inline*/ function (pSender, sSignal, sSlot, eType) {
                return this.getEventTable().removeDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            }/**@inline*/ ;
            RenderTechnique.prototype.bind = function (sSignal, fnListener, eType) {
                return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
            }/**@inline*/ ;
            RenderTechnique.prototype.unbind = function (sSignal, fnListener, eType) {
                return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
            };
            RenderTechnique.prototype.render = function () {
                var _recivier = this;
                this._pUnicastSlotMap = this._pUnicastSlotMap || this.getEventTable().findUnicastList(this._iGuid);
                var _unicast = (this._pUnicastSlotMap).render;
                _unicast.target ? _unicast.target[_unicast.callback](_recivier) : _unicast.listener(_recivier);
            };
            return RenderTechnique;
        })();
        render.RenderTechnique = RenderTechnique;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var RenderableObject = (function () {
            function RenderableObject() {
                this._pTechnique = null;
                this._pTechniqueMap = {
                };
                this._bShadow = false;
                this._iGuid = akra.sid();
            }
            Object.defineProperty(RenderableObject.prototype, "renderMethod", {
                get: /**@inline*/ function () {
                    return this._pTechnique.getMethod();
                }/**@inline*/ ,
                set: function (pMethod) {
                    this.switchRenderMethod(pMethod);
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderableObject.prototype, "effect", {
                get: function () {
                    return this._pTechnique.getMethod().effect;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderableObject.prototype, "surfaceMaterial", {
                get: function () {
                    return this._pTechnique.getMethod().surfaceMaterial;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderableObject.prototype, "material", {
                get: function () {
                    return this.surfaceMaterial.material;
                },
                enumerable: true,
                configurable: true
            });
            RenderableObject.prototype._setup = function (pRenderer, csDefaultMethod) {
                if (typeof csDefaultMethod === "undefined") { csDefaultMethod = null; }
                this._pRenderer = pRenderer;
                if(this.addRenderMethod(csDefaultMethod) || this.switchRenderMethod(null) === false) {
                    akra.logger.setSourceLocation("RenderableObject.ts", 45);
                    akra.logger.criticalError("cannot add & switch render method to default");
                    ; ;
                }
            }/**@inline*/ ;
            RenderableObject.prototype.getGuid = function () {
                return this._iGuid;
            }/**@inline*/ ;
            RenderableObject.prototype.getRenderer = function () {
                return this._pRenderer;
            };
            RenderableObject.prototype.destroy = function () {
                this._pRenderer = null;
                this._pTechnique = null;
                for(var i in this._pTechniqueMap) {
                    this._pTechniqueMap[i].destroy();
                }
                this._pTechniqueMap = null;
            };
            RenderableObject.prototype.addRenderMethod = function (csMethod, csName) {
                if (typeof csName === "undefined") { csName = "default"; }
                var pTechnique = new render.RenderTechnique();
                var pRmgr = this.getRenderer().getEngine().getResourceManager();
                var pMethod = null;
                if(akra.isNull(csMethod)) {
                    return false;
                }
                if(akra.isString(arguments[0])) {
                    pMethod = pRmgr.createRenderMethod((csMethod) + this.getGuid());
                    if(!akra.isDefAndNotNull(pMethod)) {
                        return false;
                    }
                    //adding empty, but NOT NULL effect & material
                    pMethod.surfaceMaterial = pRmgr.createSurfaceMaterial(csMethod + ".material." + this.getGuid());
                    pMethod.effect = pRmgr.createEffect(csMethod + ".effect." + this.getGuid());
                } else {
                    pMethod = arguments[0];
                }
                akra.logger.setSourceLocation("RenderableObject.ts", 96);
                akra.logger.assert(pMethod.getManager().getEngine().getRenderer() === this._pRenderer, "Render method should belong to the same engine instance that the renderable object.");
                ; ;
                pTechnique.setMethod(pMethod);
                //pTechnique.name = csName || DEFAULT_RT;
                this._pTechniqueMap[csName || "default"] = pTechnique;
                return true;
            };
            RenderableObject.prototype.switchRenderMethod = function (csName) {
                var pTechnique;
                var sName;
                if(akra.isString(arguments[0])) {
                    sName = csName;
                } else {
                    if(akra.isDefAndNotNull(arguments[0])) {
                        sName = (arguments[0]).findResourceName();
                        if(!akra.isDefAndNotNull(this._pTechniqueMap[sName])) {
                            if(!this.addRenderMethod(arguments[0], sName)) {
                                return false;
                            }
                        }
                    }
                }
                pTechnique = this._pTechniqueMap[sName];
                if(akra.isDefAndNotNull(pTechnique)) {
                    this._pTechnique = pTechnique;
                    return true;
                }
                return false;
            };
            RenderableObject.prototype.removeRenderMethod = function (csName) {
                var pTechnique = this._pTechniqueMap[csName];
                if(akra.isDefAndNotNull(pTechnique)) {
                    delete this._pTechniqueMap[csName || "default"];
                    return true;
                }
                return false;
            }/**@inline*/ ;
            RenderableObject.prototype.getRenderMethod = function (csName) {
                if (typeof csName === "undefined") { csName = null; }
                var pTechnique = this._pTechniqueMap[csName || "default"];
                return pTechnique ? pTechnique.getMethod() : null;
            }/**@inline*/ ;
            RenderableObject.prototype.hasShadow = function () {
                return this._bShadow;
            }/**@inline*/ ;
            RenderableObject.prototype.setShadow = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                this._bShadow = bValue;
            }/**@inline*/ ;
            RenderableObject.prototype.isReadyForRender = function () {
                return this._pTechnique.isReady();
            };
            RenderableObject.prototype.isAllMethodsLoaded = function () {
                for(var i in this._pTechniqueMap) {
                    var pMethod = this._pTechniqueMap[i].getMethod();
                    if(!akra.isDefAndNotNull(pMethod) || !pMethod.isResourceLoaded()) {
                        return false;
                    }
                }
                return true;
            };
            RenderableObject.prototype.render = function (csMethod) {
                if (typeof csMethod === "undefined") { csMethod = null; }
                //TODO("DRAW!!!!");
                akra.logger.setSourceLocation("RenderableObject.ts", 180);
                akra.logger.error("TODO(DRAW!!)");
                ; ;
            };
            RenderableObject.prototype.getTechnique = function (sName) {
                if (typeof sName === "undefined") { sName = null; }
                return this._pTechniqueMap[sName] || null;
            };
            return RenderableObject;
        })();
        render.RenderableObject = RenderableObject;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var BrowserInfo = (function (_super) {
            __extends(BrowserInfo, _super);
            function BrowserInfo() {
                _super.apply(this, arguments);

                this.sBrowser = null;
                this.sVersion = null;
                this.sOS = null;
                this.sVersionSearch = null;
            }
            Object.defineProperty(BrowserInfo.prototype, "name", {
                get: function () {
                    return this.sBrowser;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BrowserInfo.prototype, "version", {
                get: function () {
                    return this.sVersion;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BrowserInfo.prototype, "os", {
                get: function () {
                    return this.sOS;
                },
                enumerable: true,
                configurable: true
            });
            BrowserInfo.prototype.init = function () {
                this.sBrowser = this.searchString(BrowserInfo.dataBrowser) || "An unknown browser";
                this.sVersion = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
                this.sOS = this.searchString(BrowserInfo.dataOS) || "an unknown OS";
            };
            BrowserInfo.prototype.searchString = function (pDataBrowser) {
                for(var i = 0; i < pDataBrowser.length; i++) {
                    var sData = pDataBrowser[i].string;
                    var dataProp = pDataBrowser[i].prop;
                    this.sVersionSearch = pDataBrowser[i].versionSearch || pDataBrowser[i].identity;
                    if(sData) {
                        if(sData.indexOf(pDataBrowser[i].subString) != -1) {
                            return pDataBrowser[i].identity;
                        }
                    } else {
                        if(dataProp) {
                            return pDataBrowser[i].identity;
                        }
                    }
                }
                return null;
            };
            BrowserInfo.prototype.searchVersion = function (sData) {
                var iStartIndex = sData.indexOf(this.sVersionSearch);
                if(iStartIndex == -1) {
                    return null;
                }
                iStartIndex = sData.indexOf('/', iStartIndex + 1);
                if(iStartIndex == -1) {
                    return null;
                }
                var iEndIndex = sData.indexOf(' ', iStartIndex + 1);
                if(iEndIndex == -1) {
                    iEndIndex = sData.indexOf(';', iStartIndex + 1);
                    if(iEndIndex == -1) {
                        return null;
                    }
                    return sData.slice(iStartIndex + 1);
                }
                return sData.slice((iStartIndex + 1), iEndIndex);
            };
            BrowserInfo.dataBrowser = [
                {
                    string: navigator.userAgent,
                    subString: "Chrome",
                    identity: "Chrome"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "OmniWeb",
                    versionSearch: "OmniWeb/",
                    identity: "OmniWeb"
                }, 
                {
                    string: navigator.vendor,
                    subString: "Apple",
                    identity: "Safari",
                    versionSearch: "Version"
                }, 
                {
                    prop: window.opera,
                    identity: "Opera",
                    versionSearch: "Version"
                }, 
                {
                    string: navigator.vendor,
                    subString: "iCab",
                    identity: "iCab"
                }, 
                {
                    string: navigator.vendor,
                    subString: "KDE",
                    identity: "Konqueror"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "Firefox",
                    identity: "Firefox"
                }, 
                {
                    string: navigator.vendor,
                    subString: "Camino",
                    identity: "Camino"
                }, 
                {
                    string: // for newer Netscapes (6+)
                    navigator.userAgent,
                    subString: "Netscape",
                    identity: "Netscape"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "MSIE",
                    identity: "Explorer",
                    versionSearch: "MSIE"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "Gecko",
                    identity: "Mozilla",
                    versionSearch: "rv"
                }, 
                {
                    string: // for older Netscapes (4-)
                    navigator.userAgent,
                    subString: "Mozilla",
                    identity: "Netscape",
                    versionSearch: "Mozilla"
                }
            ];
            BrowserInfo.dataOS = [
                {
                    string: navigator.platform,
                    subString: "Win",
                    identity: "Windows"
                }, 
                {
                    string: navigator.platform,
                    subString: "Mac",
                    identity: "Mac"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "iPhone",
                    identity: "iPhone/iPod"
                }, 
                {
                    string: navigator.platform,
                    subString: "Linux",
                    identity: "Linux"
                }
            ];
            return BrowserInfo;
        })(util.Singleton);
        util.BrowserInfo = BrowserInfo;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var ScreenInfo = (function () {
            function ScreenInfo() { }
            Object.defineProperty(ScreenInfo.prototype, "width", {
                get: function () {
                    return screen.width;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "height", {
                get: function () {
                    return screen.height;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "aspect", {
                get: function () {
                    return screen.width / screen.height;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "pixelDepth", {
                get: function () {
                    return screen.pixelDepth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "colorDepth", {
                get: function () {
                    return screen.colorDepth;
                },
                enumerable: true,
                configurable: true
            });
            return ScreenInfo;
        })();
        util.ScreenInfo = ScreenInfo;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var ApiInfo = (function (_super) {
            __extends(ApiInfo, _super);
            function ApiInfo() {
                        _super.call(this);
                this.bWebGL = false;
                this.bWebAudio = false;
                this.bFile = false;
                this.bFileSystem = false;
                this.bWebWorker = false;
                this.bTransferableObjects = false;
                this.bLocalStorage = false;
                this.bWebSocket = false;
                var pApi = {
                };
                this.bWebAudio = ((window).AudioContext && (window).webkitAudioContext ? true : false);
                this.bFile = ((window).File && (window).FileReader && (window).FileList && (window).Blob ? true : false);
                this.bFileSystem = (this.bFile && (window).URL && (window).requestFileSystem ? true : false);
                this.bWebWorker = akra.isDef((window).Worker);
                this.bLocalStorage = akra.isDef((window).localStorage);
                this.bWebSocket = akra.isDef((window).WebSocket);
            }
            Object.defineProperty(ApiInfo.prototype, "webGL", {
                get: function () {
                    if(!this.bWebGL) {
                        this.bWebGL = ((window).WebGLRenderingContext || this.checkWebGL() ? true : false);
                    }
                    return this.bWebGL;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "transferableObjects", {
                get: function () {
                    if(!this.bTransferableObjects) {
                        this.bTransferableObjects = (this.bWebWorker && this.chechTransferableObjects() ? true : false);
                    }
                    return this.bTransferableObjects;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "file", {
                get: function () {
                    return this.bFile;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "fileSystem", {
                get: function () {
                    return this.bFileSystem;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "webAudio", {
                get: function () {
                    return this.bWebAudio;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "webWorker", {
                get: function () {
                    return this.bWebWorker;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "localStorage", {
                get: function () {
                    return this.bLocalStorage;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "webSocket", {
                get: function () {
                    return this.bWebSocket;
                },
                enumerable: true,
                configurable: true
            });
            ApiInfo.prototype.checkWebGL = function () {
                var pCanvas;
                var pDevice;
                try  {
                    pCanvas = document.createElement('canvas');
                    pDevice = pCanvas.getContext('webgl', {
                    }) || pCanvas.getContext('experimental-webgl', {
                    });
                    if(pDevice) {
                        return true;
                    }
                } catch (e) {
                }
                return false;
            };
            ApiInfo.prototype.chechTransferableObjects = function () {
                var pBlob = new Blob([
                    "onmessage = function(e) { postMessage(true); }"
                ]);
                var sBlobURL = (window).URL.createObjectURL(pBlob);
                var pWorker = new Worker(sBlobURL);
                var pBuffer = new ArrayBuffer(1);
                try  {
                    pWorker.postMessage(pBuffer, [
                        pBuffer
                    ]);
                } catch (e) {
                    akra.logger.setSourceLocation("util/ApiInfo.ts", 101);
                    akra.logger.log('transferable objects not supported in your browser...');
                    ; ;
                }
                pWorker.terminate();
                if(pBuffer.byteLength) {
                    return false;
                }
                return true;
            };
            return ApiInfo;
        })(util.Singleton);
        util.ApiInfo = ApiInfo;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    var Pathinfo = (function () {
        function Pathinfo(pPath) {
            this._sDirname = null;
            this._sExtension = null;
            this._sFilename = null;
            if(akra.isDef(pPath)) {
                this.set(pPath);
            }
        }
        Object.defineProperty(Pathinfo.prototype, "path", {
            get: /**@inline*/ function () {
                return this.toString();
            }/**@inline*/ ,
            set: function (sPath) {
                this.set(sPath);
            }/**@inline*/ ,
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pathinfo.prototype, "dirname", {
            get: function () {
                return this._sDirname;
            }/**@inline*/ ,
            set: function (sDirname) {
                this._sDirname = sDirname;
            }/**@inline*/ ,
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pathinfo.prototype, "filename", {
            get: function () {
                return this._sFilename;
            }/**@inline*/ ,
            set: function (sFilename) {
                this._sFilename = sFilename;
            }/**@inline*/ ,
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pathinfo.prototype, "ext", {
            get: function () {
                return this._sExtension;
            }/**@inline*/ ,
            set: function (sExtension) {
                this._sExtension = sExtension;
            }/**@inline*/ ,
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pathinfo.prototype, "basename", {
            get: function () {
                return (this._sFilename ? this._sFilename + (this._sExtension ? "." + this._sExtension : "") : "");
            }/**@inline*/ ,
            set: function (sBasename) {
                var nPos = sBasename.lastIndexOf(".");
                if(nPos < 0) {
                    this._sFilename = sBasename.substr(0);
                    this._sExtension = null;
                } else {
                    this._sFilename = sBasename.substr(0, nPos);
                    this._sExtension = sBasename.substr(nPos + 1);
                }
            },
            enumerable: true,
            configurable: true
        });
        Pathinfo.prototype.set = function (sPath) {
            if(akra.isString(sPath)) {
                var pParts = sPath.replace('\\', '/').split('/');
                this.basename = pParts.pop();
                this._sDirname = pParts.join('/');
            } else {
                if(sPath instanceof Pathinfo) {
                    this._sDirname = sPath.dirname;
                    this._sFilename = sPath.filename;
                    this._sExtension = sPath.ext;
                } else {
                    //critical_error
                    akra.logger.setSourceLocation("Pathinfo.ts", 68);
                    akra.logger.error("Unexpected data type was used.");
                    ; ;
                }
            }
        };
        Pathinfo.prototype.isAbsolute = function () {
            return this._sDirname[0] === "/";
        };
        Pathinfo.prototype.toString = function () {
            return (this._sDirname ? this._sDirname + "/" : "") + (this.basename);
        };
        return Pathinfo;
    })();
    akra.Pathinfo = Pathinfo;    
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var URI = (function () {
            function URI(pUri) {
                this.sScheme = null;
                this.sUserinfo = null;
                this.sHost = null;
                this.nPort = 0;
                this.sPath = null;
                this.sQuery = null;
                this.sFragment = null;
                if(pUri) {
                    this.set(pUri);
                }
            }
            Object.defineProperty(URI.prototype, "urn", {
                get: function () {
                    return (this.sPath ? this.sPath : "") + (this.sQuery ? '?' + this.sQuery : "") + (this.sFragment ? '#' + this.sFragment : "");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "url", {
                get: function () {
                    return (this.sScheme ? this.sScheme : "") + this.authority;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "authority", {
                get: function () {
                    return (this.sHost ? '//' + (this.sUserinfo ? this.sUserinfo + '@' : "") + this.sHost + (this.nPort ? ':' + this.nPort : "") : "");
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "scheme", {
                get: function () {
                    return this.sScheme;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "protocol", {
                get: function () {
                    if(!this.sScheme) {
                        return this.sScheme;
                    }
                    return (this.sScheme.substr(0, this.sScheme.lastIndexOf(':')));
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "userinfo", {
                get: function () {
                    return this.sUserinfo;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "host", {
                get: function () {
                    return this.sHost;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "port", {
                get: function () {
                    return this.nPort;
                }/**@inline*/ ,
                set: function (iPort) {
                    this.nPort = iPort;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "path", {
                get: function () {
                    return this.sPath;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "query", {
                get: function () {
                    return this.sQuery;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "fragment", {
                get: function () {
                    return this.sFragment;
                },
                enumerable: true,
                configurable: true
            });
            URI.prototype.set = function (pData) {
                if(akra.isString(pData)) {
                    var pUri = URI.uriExp.exec(pData);
                    akra.logger.setSourceLocation("URI.ts", 86);
                    akra.logger.assert(pUri !== null, 'Invalid URI format used.\nused uri: ' + pData);
                    ; ;
                    if(!pUri) {
                        return null;
                    }
                    this.sScheme = pUri[1] || null;
                    this.sUserinfo = pUri[2] || null;
                    this.sHost = pUri[3] || null;
                    this.nPort = parseInt(pUri[4]) || null;
                    this.sPath = pUri[5] || pUri[6] || null;
                    this.sQuery = pUri[7] || null;
                    this.sFragment = pUri[8] || null;
                    return this;
                } else {
                    if(pData instanceof URI) {
                        return this.set(pData.toString());
                    }
                }
                akra.logger.setSourceLocation("URI.ts", 107);
                akra.logger.error('Unexpected data type was used.');
                ; ;
                return null;
            };
            URI.prototype.toString = function () {
                return this.url + this.urn;
            }//------------------------------------------------------------------//
            //----- Validate a URI -----//
            //------------------------------------------------------------------//
            //- The different parts are kept in their own groups and can be recombined
            //  depending on the scheme:
            //  - http as $1://$3:$4$5?$7#$8
            //  - ftp as $1://$2@$3:$4$5
            //  - mailto as $1:$6?$7
            //- groups are as follows:
            //  1   == scheme
            //  2   == userinfo
            //  3   == host
            //  4   == port
            //  5,6 == path (5 if it has an authority, 6 if it doesn't)
            //  7   == query
            //  8   == fragment
            ;
            URI.uriExp = new RegExp("^([a-z0-9+.-]+:)?(?:\\/\\/(?:((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*)@)?((?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*)(?::(\\d*))?(\\/(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?|(\\/?(?:[a-z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})*(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?)(?:\\?((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?$", "i");
            return URI;
        })();
        util.URI = URI;        
        /*
        composed as follows:
        ^
        ([a-z0-9+.-]+):							#scheme
        (?:
        //							#it has an authority:
        (?:((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*)@)?	#userinfo
        ((?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*)		#host
        (?::(\d*))?						#port
        (/(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?	#path
        |
        #it doesn't have an authority:
        (/?(?:[a-z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})+(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?	#path
        )
        (?:
        \?((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*)	#query string
        )?
        (?:
        #((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*)	#fragment
        )?
        $
        */
            })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
// #include "ReferenceCounter.ts"
// #include "Singleton.ts"
// #include "BrowserInfo.ts"
// #include "ApiInfo.ts"
// #include "ScreenInfo.ts"
// #include "DeviceInfo.ts"
// #include "UtilTimer.ts"
// #include "Entity.ts"
// #include "ThreadManager.ts"
var akra;
(function (akra) {
    (function (util) {
        util.uri = function (sUri) {
            return new akra.util.URI(sUri);
        };
        // export var pathinfo: (sPath: string) => IPathinfo;
        // export var pathinfo: (pPath: IPathinfo) => IPathinfo;
        util.pathinfo;
        util.pathinfo = function (pPath) {
            return new akra.Pathinfo(pPath);
        };
        //string to array buffer
        util.stoab = function (s) {
            var pCodeList = new Array(len);
            for(var i = 0, len = s.length; i < len; ++i) {
                /*& 0xFF;*/
                pCodeList[i] = s.charCodeAt(i);
            }
            return (new Uint8Array(pCodeList)).buffer;
        };
        util.abtos = function (pBuf) {
            var pData = new Uint8Array(pBuf);
            var s = "";
            for(var n = 0; n < pData.length; ++n) {
                s += String.fromCharCode(pData[n]);
            }
            return s;
        };
        function abtota(pBuffer, eType) {
            switch(eType) {
                case akra.EDataTypes.FLOAT: {
                    return new Float32Array(pBuffer);

                }
                case akra.EDataTypes.SHORT: {
                    return new Int16Array(pBuffer);

                }
                case akra.EDataTypes.UNSIGNED_SHORT: {
                    return new Uint16Array(pBuffer);

                }
                case akra.EDataTypes.INT: {
                    return new Int32Array(pBuffer);

                }
                case akra.EDataTypes.UNSIGNED_INT: {
                    return new Uint32Array(pBuffer);

                }
                case akra.EDataTypes.BYTE: {
                    return new Int8Array(pBuffer);

                }
                default:
                case akra.EDataTypes.UNSIGNED_BYTE: {
                    return new Uint8Array(pBuffer);

                }
            }
        }
        util.abtota = abtota;
        function parseJSON(sJSON) {
            return eval('(' + sJSON + ')');
        }
        util.parseJSON = parseJSON;
        ; ;
        /**
        * Преобразование html-сформированного текста
        * в dom.
        */
        function parseHTML(sHTML, useDocFragment) {
            if (typeof useDocFragment === "undefined") { useDocFragment = true; }
            var pDivEl = document.createElement('div');
            var pDocFrag;
            pDivEl.innerHTML = sHTML;
            if(!useDocFragment) {
                return pDivEl.childNodes;
            }
            pDocFrag = document.createDocumentFragment();
            for(var i = 0, len = pDivEl.childNodes.length; i < len; ++i) {
                if(!akra.isDef(pDivEl.childNodes[i])) {
                    continue;
                }
                pDocFrag.appendChild(pDivEl.childNodes[i]);
            }
            return pDocFrag;
        }
        util.parseHTML = parseHTML;
        ; ;
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (info) {
                        function canvas(id) {
            var pCanvas = akra.isString(id) ? document.getElementById(id) : id;
            return {
                width: akra.isInt(pCanvas.width) ? pCanvas.width : parseInt(pCanvas.style.width),
                height: akra.isInt(pCanvas.height) ? pCanvas.height : parseInt(pCanvas.style.height),
                id: pCanvas.id
            };
        }
        info.canvas = canvas;
        info.browser = new akra.util.BrowserInfo();
        info.api = new akra.util.ApiInfo();
        info.screen = new akra.util.ScreenInfo();
        info.uri = akra.util.uri(document.location.href);
        var is;
        (function (is) {
            /**
            * show status - online or offline
            */
            is.online;
            /**
            * perform test on mobile device
            */
            is.mobile = (/mobile|iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i).test(navigator.userAgent.toLowerCase());
            is.linux = info.browser.os === 'Linux';
            is.windows = info.browser.os === 'Windows';
            is.mac = info.browser.os === 'Mac';
            is.iPhone = info.browser.os === 'iPhone';
        })(is || (is = {}));
        //TODO: move it to [akra.info.is] module, when typescript access this.
                Object.defineProperty(is, 'online', {
            get: function () {
                return navigator.onLine;
            }
        });
    })(akra.info || (akra.info = {}));
    var info = akra.info;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var DSViewport = (function (_super) {
            __extends(DSViewport, _super);
            function DSViewport(pCamera, pTarget, csRenderMethod, fLeft, fTop, fWidth, fHeight, iZIndex) {
                if (typeof csRenderMethod === "undefined") { csRenderMethod = null; }
                if (typeof fLeft === "undefined") { fLeft = 0.0; }
                if (typeof fTop === "undefined") { fTop = 0.0; }
                if (typeof fWidth === "undefined") { fWidth = 1.0; }
                if (typeof fHeight === "undefined") { fHeight = 1.0; }
                if (typeof iZIndex === "undefined") { iZIndex = 0; }
                        _super.call(this, pCamera, pTarget, null, fLeft, fTop, fWidth, fHeight, iZIndex);
                this._pDeferredView = null;
                this._pDeferredSkyTexture = null;
                this._pLightingUnifoms = {
                    omni: [],
                    project: [],
                    omniShadows: [],
                    projectShadows: [],
                    textures: [],
                    samplersOmni: [],
                    samplersProject: []
                };
                this._pLightPoints = null;
                var pEngine = this.getTarget().getRenderer().getEngine();
                var pResMgr = pEngine.getResourceManager();
                var pDeferredData = new Array(2);
                var pDeferredTextures = new Array(2);
                var pDepthTexture;
                var pDefferedView = this._pDeferredView = new akra.render.RenderableObject();
                var iGuid = akra.sid();
                var iWidth = akra.math.ceilingPowerOfTwo(this.actualWidth);
                var iHeight = akra.math.ceilingPowerOfTwo(this.actualHeight);
                if(akra.info.browser.name === "Firefox") {
                    iWidth = akra.math.min(iWidth, 1024);
                    iHeight = akra.math.min(iHeight, 1024);
                }
                pDepthTexture = this._pDeferredDepthTexture = pResMgr.createTexture("deferred-depth-texture-" + iGuid);
                pDepthTexture.create(iWidth, iHeight, 1, null, 0, 0, akra.ETextureTypes.TEXTURE_2D, akra.EPixelFormats.DEPTH);
                for(var i = 0; i < 2; ++i) {
                    pDeferredTextures[i] = this._pDefferedColorTextures[i] = pResMgr.createTexture("deferred-color-texture-" + i + "-" + iGuid);
                    pDeferredTextures[i].create(iWidth, iHeight, 1, null, 0, 0, akra.ETextureTypes.TEXTURE_2D, akra.EPixelFormats.FLOAT32_RGBA);
                    pDeferredData[i] = pDeferredTextures[i].getBuffer().getRenderTarget();
                    pDeferredData[i].addViewport(this.getCamera(), "deferred_shading_pass_" + i);
                    pDeferredData[i].attachDepthTexture(pDepthTexture);
                }
                //TODO >>>
                // pResMgr.loadAFXEffect("prepare_deferred_shading.afx");
                // pResMgr.loadAFXEffect("base_deferred_shading.afx");
                // pResMgr.loadAFXEffect("lights_and_shadows_deferred_shading.afx");
                // pResMgr.loadAFXEffect("skybox_deferred_shading.afx");
                // pResMgr.loadAFXEffect("fxaa_deferred_shading.afx");
                var pDSMethod = pResMgr.createRenderMethod(".deferred_shading");
                var pDSEffect = pResMgr.createEffect(".deferred_shading");
                // pDSEffect.addComponent("akra.system.prepareForDeferredShading");
                pDSEffect.addComponent("akra.system.deferredShading");
                pDSEffect.addComponent("akra.system.omniLighting");
                pDSEffect.addComponent("akra.system.projectLighting");
                pDSEffect.addComponent("akra.system.omniShadowsLighting");
                pDSEffect.addComponent("akra.system.projectShadowsLighting");
                pDSEffect.addComponent("akra.system.skybox", 1);
                pDSMethod.effect = pDSEffect;
                pDefferedView.renderMethod = pDSMethod;
                this.connect(pDefferedView.getTechnique(), "render", "_onRender");
            }
            DSViewport.prototype.update = function () {
                this.prepareForDeferredShading();
                var pLights = this.getCamera().display("light");
                for(var i = 0; i < pLights.length; i++) {
                    pLights[i]._calculateShadows();
                }
                this._pLightPoints = pLights;
                //prepare deferred textures
                this._pDefferedColorTextures[0].getBuffer().getRenderTarget().update();
                this._pDefferedColorTextures[1].getBuffer().getRenderTarget().update();
                //render defferred
                this._pDeferredView.render();
                return true;
            };
            DSViewport.prototype.prepareForDeferredShading = function () {
                var pNodeList = this.getCamera().display();
                for(var i = 0; i < pNodeList.length; ++i) {
                    var pRenderable = pNodeList[i].getRenderable();
                    if(pRenderable) {
                        for(var j = 0; j < 2; ++j) {
                            var sMethod = "deferred_shading_pass_" + j;
                            var pMethod = pRenderable.getRenderMethod(sMethod);
                            var pTechCurr = pRenderable.getTechnique();
                            var pTechnique = pRenderable.getTechnique(sMethod);
                            if(akra.isNull(pTechnique) || pTechCurr.modified >= pTechnique.modified) {
                                if(!pRenderable.addRenderMethod(pRenderable.getRenderMethod(), sMethod)) {
                                    akra.logger.setSourceLocation("DSViewport2.ts", 134);
                                    akra.logger.criticalError("cannot clone active render method");
                                    ; ;
                                }
                                pTechnique = pRenderable.getTechnique(sMethod);
                                for(var k = 0; k < pTechnique.totalPasses; ++k) {
                                    var pPass = pTechnique.getPass(k);
                                    if(akra.isNull(pPass.getRenderTarget())) {
                                        pPass.data.blend("akra.system.prepareForDeferredShading.pass" + j);
                                    }
                                }
                            }
                        }
                    }
                }
                ; ;
            };
            DSViewport.prototype.setSkybox = function (pSkyTexture) {
                if(pSkyTexture.textureType !== akra.ETextureTypes.TEXTURE_CUBE_MAP) {
                    return null;
                }
                this._pDeferredSkyTexture = pSkyTexture;
                return true;
            };
            DSViewport.prototype.setFXAA = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                var pEffect = this._pDeferredView.renderMethod.effect;
                if(bValue) {
                    pEffect.addComponent("akra.system.fxaa", 2);
                } else {
                    pEffect.delComponent("akra.system.fxaa", 2);
                }
            };
            DSViewport.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                this._pDeferredDepthTexture.destroyResource();
                this._pDefferedColorTextures[0].destroyResource();
                this._pDefferedColorTextures[1].destroyResource();
                this._pDeferredView.destroy();
                this._pDeferredView = null;
                this._pDeferredSkyTexture = null;
            };
            DSViewport.prototype._onRender = function (pTechnique, iPass) {
                switch(iPass) {
                    case 2: {
                        var pLightUniforms = this._pLightingUnifoms;
                        var pLightPoints = this._pLightPoints;
                        var pCamera = this.getCamera();
                        var pDepthTexture = this._pDeferredDepthTexture;
                        var pDeferredTextures = this._pDefferedColorTextures;
                        this.createLightingUniforms(pCamera, pLightPoints, pLightUniforms);
                        pTechnique.setState("lights.omni", pLightUniforms.omni.length);
                        pTechnique.setState("lights.project", pLightUniforms.project.length);
                        pTechnique.setState("lights.omniShadows", pLightUniforms.omniShadows.length);
                        pTechnique.setState("lights.projectShadows", pLightUniforms.projectShadows.length);
                        pTechnique.setForeign("nOmni", pLightUniforms.omni.length);
                        pTechnique.setForeign("nProject", pLightUniforms.project.length);
                        pTechnique.setForeign("nOmniShadows", pLightUniforms.omniShadows.length);
                        pTechnique.setForeign("nProjectShadows", pLightUniforms.projectShadows.length);
                        pTechnique.setStruct("points_omni", pLightUniforms.omni);
                        pTechnique.setStruct("points_project", pLightUniforms.project);
                        pTechnique.setStruct("points_omni_shadows", pLightUniforms.omniShadows);
                        pTechnique.setStruct("points_project_shadows", pLightUniforms.projectShadows);
                        for(var i = 0; i < pLightUniforms.textures.length; i++) {
                            pTechnique.setTextureBySemantics("TEXTURE" + i, pLightUniforms.textures[i]);
                        }
                        pTechnique.setShadowSamplerArray("project_shadow_sampler", pLightUniforms.samplersProject);
                        pTechnique.setShadowSamplerArray("omni_shadow_sampler", pLightUniforms.samplersOmni);
                        pTechnique.setVec2BySemantic("SCREEN_TEXTURE_RATIO", akra.vec2(this.actualWidth / pDepthTexture.width, this.actualHeight / pDepthTexture.height));
                        pTechnique.setTextureBySemantics("DEFERRED_TEXTURE0", pDeferredTextures[0]);
                        pTechnique.setTextureBySemantics("DEFERRED_TEXTURE1", pDeferredTextures[1]);
                        pTechnique.setTextureBySemantics("SCENE_DEPTH_TEXTURE", pDepthTexture);
                        break;
                        //case 1;
                        
                    }
                }
            };
            DSViewport.prototype.resetUniforms = /**@inline*/ function () {
                var pUniforms = this._pLightingUnifoms;
                pUniforms.omni.clear();
                pUniforms.project.clear();
                pUniforms.omniShadows.clear();
                pUniforms.projectShadows.clear();
                pUniforms.textures.clear();
                pUniforms.samplersProject.clear();
                pUniforms.samplersOmni.clear();
            };
            DSViewport.prototype.createLightingUniforms = function (pCamera, pLightPoints, pUniforms) {
                var pLight;
                var pOmniLight;
                var pProjectLight;
                var i, j;
                var pUniformData;
                var pCameraView = pCamera.viewMatrix;
                var v4fLightPosition = akra.vec4();
                var v3fLightTransformPosition = akra.vec3();
                var v4fTemp = akra.vec4();
                var pShadowCaster;
                var m4fShadow, m4fToLightSpace;
                var iLastTextureIndex = 0;
                var sTexture = "TEXTURE";
                this.resetUniforms();
                for(i = 0; i < pLightPoints.length; i++) {
                    pLight = pLightPoints[i];
                    if(!pLight.isEnabled()) {
                        continue;
                    }
                    v4fLightPosition.set(pLight.worldPosition, 1.0);
                    pCameraView.multiplyVec4(v4fLightPosition, v4fTemp);
                    v3fLightTransformPosition.set(v4fTemp.x, v4fTemp.y, v4fTemp.z);
                    if(pLight.type === akra.ELightPointTypes.OMNI_DIRECTIONAL) {
                        pOmniLight = pLight;
                        if(pLight.isShadowCaster()) {
                            pUniformData = render.UniformOmniShadow.stackCeil;
                            (pUniformData).setLightData(pLight.params, v3fLightTransformPosition);
                            var pDepthCube = pOmniLight.getDepthTextureCube();
                            var pShadowCasterCube = pOmniLight.getShadowCaster();
                            var pOptimizedProjCube = pOmniLight.optimizedProjectionCube;
                            for(j = 0; j < 6; ++j) {
                                pShadowCaster = pShadowCasterCube[j];
                                m4fToLightSpace = pShadowCaster.viewMatrix.multiply(pCamera.worldMatrix, akra.mat4());
                                pUniforms.textures.push(pDepthCube[j]);
                                sTexture = "TEXTURE" + (pUniforms.textures.length - 1);
                                (pUniformData).setSampler(sTexture, j);
                                pUniforms.samplersOmni.push((pUniformData).SHADOW_SAMPLER[j]);
                                (pUniformData).setMatrix(m4fToLightSpace, pOptimizedProjCube[j], j);
                            }
                            pUniforms.omniShadows.push(pUniformData);
                        } else {
                            pUniformData = render.UniformOmni.stackCeil;
                            (pUniformData).setLightData(pLight.params, v3fLightTransformPosition);
                            pUniforms.omni.push(pUniformData);
                        }
                    } else {
                        if(pLight.type === akra.ELightPointTypes.PROJECT) {
                            pProjectLight = pLight;
                            if(pLight.isShadowCaster()) {
                                pUniformData = render.UniformProjectShadow.stackCeil;
                                (pUniformData).setLightData(pLight.params, v3fLightTransformPosition);
                                pShadowCaster = pProjectLight.getShadowCaster();
                                m4fToLightSpace = pShadowCaster.viewMatrix.multiply(pCamera.worldMatrix, akra.mat4());
                                pUniforms.textures.push(pProjectLight.getDepthTexture());
                                sTexture = "TEXTURE" + (pUniforms.textures.length - 1);
                                (pUniformData).setSampler(sTexture);
                                pUniforms.samplersProject.push((pUniformData).SHADOW_SAMPLER);
                                (pUniformData).setMatrix(m4fToLightSpace, pShadowCaster.projectionMatrix, pProjectLight.optimizedProjection);
                                pUniforms.projectShadows.push(pUniformData);
                            } else {
                                pUniformData = render.UniformProject.stackCeil;
                                (pUniformData).setLightData(pLight.params, v3fLightTransformPosition);
                                pShadowCaster = pProjectLight.getShadowCaster();
                                m4fShadow = pShadowCaster.projViewMatrix.multiply(pCamera.worldMatrix, akra.mat4());
                                (pUniformData).setMatrix(m4fShadow);
                                pUniforms.project.push(pUniformData);
                            }
                        } else {
                            akra.logger.setSourceLocation("DSViewport2.ts", 338);
                            akra.logger.criticalError("Invalid light point type detected.");
                            ; ;
                        }
                    }
                }
            };
            return DSViewport;
        })(render.Viewport);
        render.DSViewport = DSViewport;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
/* Define the number of priority groups for the render system's render targets. */
var akra;
(function (akra) {
    (function (render) {
        var RenderTarget = (function () {
            function RenderTarget(pRenderer) {
                this._iPriority = 4;
                this._pDepthBuffer = null;
                this._pDepthPixelBuffer = null;
                this._isActive = true;
                this._isAutoUpdate = true;
                this._bHwGamma = false;
                this._iGuid = akra.sid();
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this._pRenderer = pRenderer;
                this._pTimer = pRenderer.getEngine().getTimer();
                this.resetStatistics();
            }
            /**@inline*/             Object.defineProperty(RenderTarget.prototype, "name", {
                get: /**@inline*/ function () {
                    return this._sName;
                }/**@inline*/ ,
                set: function (sName) {
                    this._sName = sName;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderTarget.prototype, "width", {
                get: function () {
                    return this._iWidth;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderTarget.prototype, "height", {
                get: function () {
                    return this._iHeight;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderTarget.prototype, "colorDepth", {
                get: function () {
                    return this._iColorDepth;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderTarget.prototype, "totalViewports", {
                get: function () {
                    return this._pViewportList.length;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderTarget.prototype, "totalFrames", {
                get: function () {
                    return this._iFrameCount;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderTarget.prototype, "priority", {
                get: function () {
                    return this._iPriority;
                },
                enumerable: true,
                configurable: true
            });
            RenderTarget.prototype.getRenderer = function () {
                return this._pRenderer;
            };
            RenderTarget.prototype.destroy = function () {
                var pViewport;
                for(var i in this._pViewportList) {
                    pViewport = this._pViewportList[i];
                    this.viewportRemoved(pViewport);
                    pViewport.destroy();
                }
                this.detachDepthBuffer();
                akra.logger.setSourceLocation("render/RenderTarget.ts", 88);
                akra.logger.log("RenderTarget '%s'\n Average FPS: %s\n Best FPS: %s\n Worst FPS: %s", this._sName, this._pFrameStats.fps.avg, this._pFrameStats.fps.best, this._pFrameStats.fps.worst);
                ; ;
            };
            RenderTarget.prototype.getDepthBuffer = function () {
                return this._pDepthBuffer;
            };
            RenderTarget.prototype.attachDepthBuffer = function (pBuffer) {
                var isOk = false;
                if((isOk = pBuffer.isCompatible(this))) {
                    this.detachDepthBuffer();
                    this._pDepthBuffer = pBuffer;
                    this._pDepthBuffer._notifyRenderTargetAttached(this);
                }
                return isOk;
            };
            RenderTarget.prototype.attachDepthPixelBuffer = function (pBuffer) {
                if(this._iWidth !== pBuffer.width || this._iHeight !== pBuffer.height) {
                    return false;
                }
                var eFormat = pBuffer.format;
                if(eFormat !== akra.EPixelFormats.DEPTH || eFormat !== akra.EPixelFormats.DEPTH_BYTE) {
                    return false;
                }
                this.detachDepthPixelBuffer();
                this._pDepthPixelBuffer = pBuffer;
                return true;
            };
            RenderTarget.prototype.detachDepthPixelBuffer = function () {
                if(this._pDepthPixelBuffer) {
                    this._pDepthPixelBuffer = null;
                }
            };
            RenderTarget.prototype.detachDepthBuffer = function () {
                if(this._pDepthBuffer) {
                    this._pDepthBuffer._notifyRenderTargetDetached(this);
                    this._pDepthBuffer = null;
                }
            };
            RenderTarget.prototype.attachDepthTexture = function (pTexture) {
                return false;
            };
            RenderTarget.prototype.detachDepthTexture = function () {
            };
            RenderTarget.prototype._detachDepthBuffer = function () {
                this._pDepthBuffer = null;
            };
            RenderTarget.prototype._beginUpdate = function () {
                this.preUpdate();
                this._pFrameStats.polygonsCount = 0;
            };
            RenderTarget.prototype._updateAutoUpdatedViewports = function (bUpdateStatistics) {
                if (typeof bUpdateStatistics === "undefined") { bUpdateStatistics = true; }
                var pViewport;
                for(var i in this._pViewportList) {
                    pViewport = this._pViewportList[i];
                    if(pViewport.isAutoUpdated()) {
                        this._updateViewport(pViewport, bUpdateStatistics);
                    }
                }
            };
            RenderTarget.prototype._endUpdate = function () {
                this.postUpdate();
                this.updateStats();
            };
            RenderTarget.prototype._updateViewport = function (pViewportPtr, bUpdateStatistics) {
                if (typeof bUpdateStatistics === "undefined") { bUpdateStatistics = true; }
                var pViewport;
                var iZIndex;
                if(akra.isNumber(arguments[0])) {
                    iZIndex = arguments[0];
                    pViewport = this._pViewportList[iZIndex];
                    akra.logger.setSourceLocation("render/RenderTarget.ts", 186);
                    akra.logger.assert(akra.isDefAndNotNull(pViewport), "No viewport with given z-index : %s", iZIndex, "RenderTarget::_updateViewport");
                    ; ;
                } else {
                    pViewport = arguments[0];
                }
                akra.logger.setSourceLocation("render/RenderTarget.ts", 193);
                akra.logger.assert(pViewport.getTarget() == this, "RenderTarget::_updateViewport the requested viewport is not bound to the rendertarget!");
                ; ;
                this.viewportPreUpdate(pViewport);
                pViewport.update();
                if(bUpdateStatistics) {
                    this._pFrameStats.polygonsCount += pViewport._getNumRenderedPolygons();
                }
                this.viewportPostUpdate(pViewport);
            };
            RenderTarget.prototype.addViewport = function (pCamera, csRenderMethod, iZIndex, fLeft, fTop, fWidth, fHeight) {
                if (typeof csRenderMethod === "undefined") { csRenderMethod = null; }
                if (typeof iZIndex === "undefined") { iZIndex = 0; }
                if (typeof fLeft === "undefined") { fLeft = 0.0; }
                if (typeof fTop === "undefined") { fTop = 0.0; }
                if (typeof fWidth === "undefined") { fWidth = 1.0; }
                if (typeof fHeight === "undefined") { fHeight = 1.0; }
                var pViewport = this._pViewportList[iZIndex];
                if(akra.isDefAndNotNull(pViewport)) {
                    akra.logger.setSourceLocation("render/RenderTarget.ts", 213);
                    akra.logger.criticalError("Can't create another viewport for %s with Z-index %s 					because a viewport exists with this Z-Order already.", this._sName, iZIndex, "RenderTarget::addViewport");
                    ; ;
                }
                if(akra.isNumber(arguments[1]) && arguments[1] >= 0) {
                    pViewport = new render.DSViewport(pCamera, this, null, fLeft, fTop, fWidth, fHeight, iZIndex);
                } else {
                    pViewport = new render.Viewport(pCamera, this, akra.isNumber(arguments[1]) ? null : csRenderMethod, fLeft, fTop, fWidth, fHeight, iZIndex);
                }
                this._pViewportList[iZIndex] = pViewport;
                this.viewportAdded(pViewport);
                return pViewport;
            };
            RenderTarget.prototype.removeViewport = function (iZIndex) {
                var pViewport = this._pViewportList[iZIndex];
                if(akra.isDefAndNotNull(pViewport)) {
                    this.viewportRemoved(pViewport);
                    this._pViewportList.splice(iZIndex, 1);
                    pViewport = null;
                    return true;
                }
                return false;
            };
            RenderTarget.prototype.removeAllViewports = function () {
                var pViewport;
                var iTotal;
                for(var i in this._pViewportList) {
                    pViewport = this._pViewportList[i];
                    this.viewportRemoved(pViewport);
                }
                iTotal = this._pViewportList.length;
                (this._pViewportList).clear();
                return iTotal;
            }/**@inline*/ ;
            RenderTarget.prototype.getStatistics = function () {
                return this._pFrameStats;
            }/**@inline*/ ;
            RenderTarget.prototype.getLastFPS = function () {
                return this._pFrameStats.fps.last;
            }/**@inline*/ ;
            RenderTarget.prototype.getAverageFPS = function () {
                return this._pFrameStats.fps.avg;
            }/**@inline*/ ;
            RenderTarget.prototype.getBestFPS = function () {
                return this._pFrameStats.fps.best;
            }/**@inline*/ ;
            RenderTarget.prototype.getWorstFPS = function () {
                return this._pFrameStats.fps.worst;
            }/**@inline*/ ;
            RenderTarget.prototype.getPolygonCount = function () {
                return this._pFrameStats.polygonsCount;
            }/**@inline*/ ;
            RenderTarget.prototype.getBestFrameTime = function () {
                return this._pFrameStats.time.best;
            }/**@inline*/ ;
            RenderTarget.prototype.getWorstFrameTime = function () {
                return this._pFrameStats.time.worst;
            };
            RenderTarget.prototype.resetStatistics = function () {
                var pStats = this._pFrameStats;
                pStats.fps.avg = 0.0;
                pStats.fps.best = 0.0;
                pStats.fps.last = 0.0;
                pStats.fps.worst = 999.0;
                pStats.polygonsCount = 0;
                pStats.time.best = 9999999;
                pStats.time.worst = 0;
                //FIXME: get right time!!!
                this._fLastTime = this._pTimer.appTime;
                this._fLastSecond = this._fLastTime;
                this._iFrameCount = 0;
            };
            RenderTarget.prototype.updateStats = function () {
                this._iFrameCount++;
                var fThisTime = this._pTimer.appTime;
                var fFrameTime = fThisTime - this._fLastTime;
                this._fLastTime = fThisTime;
                this._pFrameStats.time.best = akra.math.min(this._pFrameStats.time.best, fFrameTime);
                this._pFrameStats.time.worst = akra.math.min(this._pFrameStats.time.worst, fFrameTime);
                if(fThisTime - this._fLastTime > 1) {
                    this._pFrameStats.fps.last = this._iFrameCount / (fThisTime - this._fLastSecond);
                    if(this._pFrameStats.fps.avg == 0.0) {
                        this._pFrameStats.fps.avg = this._pFrameStats.fps.last;
                    } else {
                        this._pFrameStats.fps.avg = (this._pFrameStats.fps.avg + this._pFrameStats.fps.last) / 2.0;
                        this._pFrameStats.fps.best = akra.math.max(this._pFrameStats.fps.best, this._pFrameStats.fps.last);
                        this._pFrameStats.fps.worst = akra.math.max(this._pFrameStats.fps.worst, this._pFrameStats.fps.last);
                        this._fLastSecond = fThisTime;
                        this._iFrameCount = 0;
                    }
                }
            };
            RenderTarget.prototype.getCustomAttribute = function (sName) {
                return null;
            };
            RenderTarget.prototype.getViewport = function (iIndex) {
                akra.logger.setSourceLocation("render/RenderTarget.ts", 348);
                akra.logger.assert(iIndex < this._pViewportList.length, "Index out of bounds");
                ; ;
                for(var i in this._pViewportList) {
                    if(iIndex--) {
                        continue;
                    }
                    return this._pViewportList[i];
                }
                return null;
            };
            RenderTarget.prototype.getViewportByZIndex = function (iZIndex) {
                var pViewport = this._pViewportList[iZIndex];
                akra.logger.setSourceLocation("render/RenderTarget.ts", 365);
                akra.logger.assert(akra.isDefAndNotNull(pViewport), "No viewport with given z-index : " + String(iZIndex), "RenderTarget::getViewportByZIndex");
                ; ;
                return pViewport;
            }/**@inline*/ ;
            RenderTarget.prototype.hasViewportByZIndex = function (iZIndex) {
                return akra.isDefAndNotNull(this._pViewportList[iZIndex]);
            }/**@inline*/ ;
            RenderTarget.prototype.isActive = function () {
                return this._isActive;
            };
            RenderTarget.prototype.setActive = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                this._isActive = bValue;
            }/**@inline*/ ;
            RenderTarget.prototype.setAutoUpdated = function (isAutoUpdate) {
                if (typeof isAutoUpdate === "undefined") { isAutoUpdate = true; }
                this._isAutoUpdate = isAutoUpdate;
            };
            RenderTarget.prototype._notifyCameraRemoved = function (pCamera) {
                var isRemoved = false;
                for(var i in this._pViewportList) {
                    var pViewport = this._pViewportList[i];
                    if(pViewport.getCamera() === pCamera) {
                        pViewport.setCamera(null);
                        isRemoved = true;
                    }
                }
                if(isRemoved) {
                    this.cameraRemoved(pCamera);
                }
            }/**@inline*/ ;
            RenderTarget.prototype.setAutoUpdare = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                this._isAutoUpdate = bValue;
            }/**@inline*/ ;
            RenderTarget.prototype.isAutoUpdated = function () {
                return this._isAutoUpdate;
            }/**@inline*/ ;
            RenderTarget.prototype.isPrimary = function () {
                // RenderWindow will override and return true for the primary window
                return false;
            };
            RenderTarget.prototype.update = function () {
                this.updateImpl();
            };
            RenderTarget.prototype.readPixels = function (ppDest, eFramebuffer) {
                return null;
            };
            RenderTarget.prototype.updateImpl = function () {
                this._beginUpdate();
                this._updateAutoUpdatedViewports(true);
                this._endUpdate();
            };
            RenderTarget._pEvenetTable = new akra.events.EventTable();
            RenderTarget.prototype.getEventTable = /**@inline*/ function () {
                return RenderTarget._pEvenetTable;
            }/**@inline*/ ;
            RenderTarget.prototype.getGuid = function () {
                return this._iGuid;
            }/**@inline*/ ;
            RenderTarget.prototype.connect = function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().addDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            };
            RenderTarget.prototype.disconnect = /**@inline*/ function (pSender, sSignal, sSlot, eType) {
                return this.getEventTable().removeDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            }/**@inline*/ ;
            RenderTarget.prototype.bind = function (sSignal, fnListener, eType) {
                return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
            }/**@inline*/ ;
            RenderTarget.prototype.unbind = function (sSignal, fnListener, eType) {
                return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
            };
            RenderTarget.prototype.preUpdate = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).preUpdate;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                }
            };
            RenderTarget.prototype.viewportPreUpdate = function (pViewport) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).viewportPreUpdate;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pViewport) : _broadcast[i].listener(_recivier, pViewport);
                }
            };
            RenderTarget.prototype.viewportPostUpdate = function (pViewport) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).viewportPostUpdate;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pViewport) : _broadcast[i].listener(_recivier, pViewport);
                }
            };
            RenderTarget.prototype.viewportAdded = function (pViewport) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).viewportAdded;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pViewport) : _broadcast[i].listener(_recivier, pViewport);
                }
            };
            RenderTarget.prototype.viewportRemoved = function (pViewport) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).viewportRemoved;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pViewport) : _broadcast[i].listener(_recivier, pViewport);
                }
            };
            RenderTarget.prototype.postUpdate = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).postUpdate;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                }
            };
            RenderTarget.prototype.cameraRemoved = function (pCamera) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).cameraRemoved;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pCamera) : _broadcast[i].listener(_recivier, pCamera);
                }
            };
            return RenderTarget;
        })();
        render.RenderTarget = RenderTarget;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        render.SShaderPrefixes = {
            k_Sampler: "A_s_",
            k_Header: "A_h_",
            k_Attribute: "A_a_",
            k_Offset: "A_o_",
            k_Texture: "TEXTURE",
            k_Texcoord: "TEXCOORD",
            k_Texmatrix: "TEXMATRIX",
            k_Temp: "TEMP_",
            k_BlendType: "AUTO_BLEND_TYPE_"
        };
        render.ZEROSAMPLER = 19;
        render.SSystemSemantics = {
            MODEL_MATRIX: "MODEL_MATRIX",
            VIEW_MATRIX: "VIEW_MATRIX",
            PROJ_MATRIX: "PROJ_MATRIX",
            NORMAL_MATRIX: "NORMAL_MATRIX",
            BIND_MATRIX: "BIND_SHAPE_MATRIX",
            RENDER_OBJECT_ID: "RENDER_OBJECT_ID"
        };
        var Renderer = (function () {
            function Renderer(pEngine) {
                this._pEngine = pEngine;
            }
            /**@inline*/             Renderer.prototype.getEngine = function () {
                return this._pEngine;
            };
            Renderer.prototype.hasCapability = function (eCapability) {
                return false;
            };
            Renderer.prototype.debug = function (bValue) {
                return false;
            };
            Renderer.prototype.enableAPITrace = function () {
                return false;
            };
            Renderer.prototype.isDebug = function () {
                return false;
            };
            Renderer.prototype.isValid = function () {
                return false;
            }/**@inline*/ ;
            Renderer.prototype.getError = function () {
                return null;
            };
            Renderer.prototype.clearFrameBuffer = function (iBuffer, cColor, iDepth) {
            };
            Renderer.prototype.attachRenderTarget = function (pTarget) {
                for(var i = 0; i < this._pRenderTargets.length; i++) {
                    if(this._pRenderTargets[i] === pTarget) {
                        return false;
                    }
                }
                this._pRenderTargets.push(pTarget);
                return true;
            };
            Renderer.prototype.detachRenderTarget = function (pTarget) {
                for(var i = 0; i < this._pRenderTargets.length; i++) {
                    if(this._pRenderTargets[i] === pTarget) {
                        this._pRenderTargets.splice(i, 1);
                        return true;
                    }
                }
                return false;
            };
            Renderer.prototype.destroyRenderTarget = function (pTarget) {
                var hasTarget = this.detachRenderTarget(pTarget);
                if(hasTarget) {
                    pTarget.destroy();
                    pTarget = null;
                }
            }/**@inline*/ ;
            Renderer.prototype._disableAllTextureUnits = function () {
                this._disableTextureUnitsFrom(0);
            }/**@inline*/ ;
            Renderer.prototype._disableTextureUnitsFrom = function (iUnit) {
            };
            Renderer.prototype._initRenderTargets = function () {
                // Init stats
                for(var i = 0; i < this._pRenderTargets.length; ++i) {
                    this._pRenderTargets[i].resetStatistics();
                }
            };
            Renderer.prototype._updateAllRenderTargets = function () {
                var pTarget;
                for(var i in this._pPrioritisedRenderTargets) {
                    pTarget = this._pPrioritisedRenderTargets[i];
                    if(pTarget.isActive() && pTarget.isAutoUpdated()) {
                        pTarget.update();
                    }
                }
            };
            Renderer.prototype._setViewport = function (pViewport) {
            };
            Renderer.prototype._getViewport = function () {
                return null;
            };
            return Renderer;
        })();
        render.Renderer = Renderer;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
; ;
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLRenderer = (function (_super) {
            __extends(WebGLRenderer, _super);
            function WebGLRenderer(pEngine, pCanvas) {
                        _super.call(this, pEngine);
                if(akra.isDef(pCanvas)) {
                    //get HTMLCanvasElement by id
                    if(akra.isString(pCanvas)) {
                        this._pCanvas = document.getElementById(pCanvas);
                    } else {
                        this._pCanvas = pCanvas;
                    }
                } else {
                    this._pCanvas = document.createElement('canvas');
                }
                this._pWebGLContext = webgl.createContext(this._pCanvas);
                this._pWebGLFramebufferList = new Array(32);
                for(var i = 0; i < this._pWebGLFramebufferList.length; ++i) {
                    this._pWebGLFramebufferList[i] = this._pWebGLContext.createFramebuffer();
                }
            }
            /**@inline*/             WebGLRenderer.prototype.getHTMLCanvas = function () {
                return this._pCanvas;
            }/**@inline*/ ;
            WebGLRenderer.prototype.getWebGLContext = function () {
                return this._pWebGLContext;
            }/** Buffer Objects. */
            /**@inline*/ ;
            WebGLRenderer.prototype.bindWebGLBuffer = function (eTarget, pBuffer) {
                this._pWebGLContext.bindBuffer(eTarget, pBuffer);
            }/**@inline*/ ;
            WebGLRenderer.prototype.createWebGLBuffer = function () {
                return this._pWebGLContext.createBuffer();
            }/**@inline*/ ;
            WebGLRenderer.prototype.deleteWebGLBuffer = function (pBuffer) {
                this._pWebGLContext.deleteBuffer(pBuffer);
            }/** Texture Objects. */
            /**@inline*/ ;
            WebGLRenderer.prototype.bindWebGLTexture = function (eTarget, pTexture) {
                this._pWebGLContext.bindTexture(eTarget, pTexture);
            }/**@inline*/ ;
            WebGLRenderer.prototype.activateWebGLTexture = function (iSlot) {
                this._pWebGLContext.activeTexture(iSlot);
            }/**@inline*/ ;
            WebGLRenderer.prototype.createWebGLTexture = function () {
                return this._pWebGLContext.createTexture();
            }/**@inline*/ ;
            WebGLRenderer.prototype.deleteWebGLTexture = function (pTexture) {
                this._pWebGLContext.deleteTexture(pTexture);
            }/** Framebuffer Objects */
            /**@inline*/ ;
            WebGLRenderer.prototype.createWebGLFramebuffer = function () {
                if(this._pWebGLFramebufferList.length === 0) {
                    akra.logger.setSourceLocation("webgl/WebGLRenderer.ts", 89);
                    akra.logger.criticalError("WebGL framebuffer limit exidit");
                    ; ;
                }
                return this._pWebGLFramebufferList.pop();
            }/**@inline*/ ;
            WebGLRenderer.prototype.bindWebGLFramebuffer = function (eTarget, pBuffer) {
                this._pWebGLContext.bindFramebuffer(eTarget, pBuffer);
            }/**@inline*/ ;
            WebGLRenderer.prototype.deleteWebGLFramebuffer = function (pBuffer) {
                this._pWebGLFramebufferList.push(pBuffer);
            }/** Renderbuffer Objects */
            /**@inline*/ ;
            WebGLRenderer.prototype.createWebGLRenderbuffer = function () {
                return this._pWebGLContext.createRenderbuffer();
            }/**@inline*/ ;
            WebGLRenderer.prototype.bindWebGLRenderbuffer = function (eTarget, pBuffer) {
                this._pWebGLContext.bindRenderbuffer(eTarget, pBuffer);
            }/**@inline*/ ;
            WebGLRenderer.prototype.deleteWebGLRenderbuffer = function (pBuffer) {
                this._pWebGLContext.deleteRenderbuffer(pBuffer);
            }/**@inline*/ ;
            WebGLRenderer.prototype.createWebGLProgram = function () {
                return this._pWebGLContext.createProgram();
            }/**@inline*/ ;
            WebGLRenderer.prototype.deleteWebGLProgram = function (pProgram) {
                this._pWebGLContext.deleteProgram(pProgram);
            }/**@inline*/ ;
            WebGLRenderer.prototype.useWebGLProgram = function (pProgram) {
                this._pWebGLContext.useProgram(pProgram);
            }/**@inline*/ ;
            WebGLRenderer.prototype.disableAllWebGLVertexAttribs = function () {
                //TODO: check attrib array from last shader program
                var i = 0;
                for(i = 0; i < 16; i++) {
                    this._pWebGLContext.disableVertexAttribArray(i);
                }
            };
            return WebGLRenderer;
        })(akra.render.Renderer);
        webgl.WebGLRenderer = WebGLRenderer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        function computeLog(iValue) {
            var i = 0;
            /* Error! */
            if(iValue === 0) {
                return -1;
            }
            for(; ; ) {
                if(iValue & 1) {
                    /* Error! */
                    if(iValue !== 1) {
                        return -1;
                    }
                    return i;
                }
                iValue = iValue >> 1;
                i++;
            }
        }
        webgl.computeLog = computeLog;
        var WebGLTextureBuffer = (function (_super) {
            __extends(WebGLTextureBuffer, _super);
            function WebGLTextureBuffer() {
                        _super.call(this);
                this._eTarget = null;
                this._eFaceTarget = null;
                this._pWebGLTexture = null;
                this._iFace = 0;
                this._iLevel = 0;
                this._bSoftwareMipmap = false;
                this._pRTTList = null;
            }
            WebGLTextureBuffer.prototype._clearRTT = function (iZOffset) {
                this._pRTTList[iZOffset] = null;
            };
            WebGLTextureBuffer.prototype.create = function () {
                if(arguments.length < 6) {
                    akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 53);
                    akra.logger.criticalError("Invalid number of params. For WebGLTextureBuffer");
                    ; ;
                }
                var eTarget = arguments[0];
                var pTexture = arguments[1];
                var iWidth = arguments[2];
                var iHeight = arguments[3];
                var iInternalFormat = arguments[4];
                var iFormat = arguments[5];
                var iFace = arguments[6];
                var iLevel = arguments[7];
                var iFlags = arguments[8];
                var bSoftwareMipmap = arguments[9];
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                pWebGLRenderer.bindWebGLTexture(eTarget, pTexture);
                this._eTarget = eTarget;
                this._pWebGLTexture = pTexture;
                this._iFace = iFace;
                this._iLevel = iLevel;
                this._bSoftwareMipmap = bSoftwareMipmap;
                this._eFaceTarget = eTarget;
                if(eTarget === 34067) {
                    this._eFaceTarget = 34069 + iFace;
                }
                this._iWidth = iLevel === 0 ? iWidth : iWidth / Math.pow(2.0, iLevel);
                this._iHeight = iLevel === 0 ? iHeight : iHeight / Math.pow(2.0, iLevel);
                this._iDepth = 1;
                this._iWebGLInternalFormat = iInternalFormat;
                this._eFormat = akra.webgl.getClosestAkraFormat(iInternalFormat, iFormat);
                this._iRowPitch = this._iWidth;
                this._iSlicePitch = this._iHeight * this._iWidth;
                this.byteLength = akra.pixelUtil.getMemorySize(this._iWidth, this._iHeight, this._iDepth, this._eFormat);
                this._pBuffer = new akra.pixelUtil.PixelBox(this._iWidth, this._iHeight, this._iDepth, this._eFormat);
                if(this._iWidth === 0 || this._iHeight === 0 || this._iDepth === 0) {
                    // We are invalid, do not allocate a buffer
                    return false;
                }
                // Is this a render target?
                if((((this._iFlags) & (akra.ETextureFlags.RENDERTARGET)) != 0)) {
                    // Create render target for each slice
                    this._pRTTList = new Array();
                    for(var iZOffset = 0; iZOffset < this._iDepth; ++iZOffset) {
                        var pRenderTexture = new webgl.WebGLRenderTexture(pWebGLRenderer, this);
                        this._pRTTList.push(pRenderTexture);
                        pWebGLRenderer.attachRenderTarget(pRenderTexture);
                    }
                }
                var pProgram = this.getManager().shaderProgramPool.findResource("WEBGL_blit_texture_buffer");
                if(akra.isNull(pProgram)) {
                    pProgram = this.getManager().shaderProgramPool.createResource("WEBGL_blit_texture_buffer");
                    pProgram.create("																									\n	        	attribute vec2 POSITION;																			\n				attribute vec3 TEXCOORD;																			\n				                      																				\n				varying vec3 texcoord;																				\n				                   																					\n				void main(void){																					\n				    texcoord = TEXCOORD;																			\n				    gl_Position = vec4(POSITION, 0., 1.);															\n				}																									\n				", "													\n				#ifdef GL_ES                        				\n				    precision highp float;          				\n				#endif												\n				varying vec3 texcoord;              				\n				uniform sampler2D uSampler;        					\n																	\n				void main(void) {  									\n					vec4 color;										\n					color = texture2D(uSampler, texcoord.xy);      	\n				    gl_FragColor = color;           				\n				}                                   				\n				");
                }
                return true;
            };
            WebGLTextureBuffer.prototype.destroy = function () {
                if((((this._iFlags) & (akra.ETextureFlags.RENDERTARGET)) != 0)) {
                    // Delete all render targets that are not yet deleted via _clearSliceRTT because the rendertarget
                    // was deleted by the user.
                    var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                    for(var i = 0; i < this._pRTTList.length; i++) {
                        pWebGLRenderer.destroyRenderTarget(this._pRTTList[i]);
                    }
                }
            }//upload(download) data to(from) videocard.
            ;
            WebGLTextureBuffer.prototype.upload = function (pData, pDestBox) {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLTexture(this._eTarget, this._pWebGLTexture);
                if(akra.pixelUtil.isCompressed(pData.format)) {
                    if(pData.format !== this._eFormat || !pData.isConsecutive()) {
                        akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 166);
                        akra.logger.criticalError("Compressed images must be consecutive, in the source format");
                        ; ;
                    }
                    var iWebGLFormat = akra.webgl.getClosestWebGLInternalFormat(this._eFormat);
                    // Data must be consecutive and at beginning of buffer as PixelStorei not allowed
                    // for compressed formats
                    if(pDestBox.left === 0 && pDestBox.top === 0) {
                        pWebGLContext.compressedTexImage2D(this._eFaceTarget, this._iLevel, iWebGLFormat, pDestBox.width, pDestBox.height, 0, pData.data);
                    } else {
                        pWebGLContext.compressedTexSubImage2D(this._eFaceTarget, this._iLevel, pDestBox.left, pDestBox.top, pDestBox.width, pDestBox.height, iWebGLFormat, pData.data);
                    }
                } else {
                    if(this._bSoftwareMipmap) {
                        if(pData.width !== pData.rowPitch) {
                            // TODO
                            akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 191);
                            akra.logger.criticalError("Unsupported texture format");
                            ; ;
                        }
                        if(pData.height * pData.width !== pData.slicePitch) {
                            // TODO
                            akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 196);
                            akra.logger.criticalError("Unsupported texture format");
                            ; ;
                        }
                        pWebGLContext.pixelStorei(3317, 1);
                        this.buildMipmaps(pData);
                    } else {
                        if(pData.width !== pData.rowPitch) {
                            // TODO
                            akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 205);
                            akra.logger.criticalError("Unsupported texture format");
                            ; ;
                        }
                        if(pData.height * pData.width !== pData.slicePitch) {
                            // TODO
                            akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 210);
                            akra.logger.criticalError("Unsupported texture format");
                            ; ;
                        }
                        if((pData.width * akra.pixelUtil.getNumElemBytes(pData.format)) & 3) {
                            // Standard alignment of 4 is not right
                            pWebGLContext.pixelStorei(3317, 1);
                        }
                        pWebGLContext.texSubImage2D(this._eFaceTarget, this._iLevel, pDestBox.left, pDestBox.top, pDestBox.width, pDestBox.height, akra.webgl.getWebGLOriginFormat(pData.format), akra.webgl.getWebGLOriginDataType(pData.format), pData.data);
                    }
                }
                if((((this._iFlags) & (akra.ETextureFlags.AUTOMIPMAP)) != 0) && !this._bSoftwareMipmap && (this._iLevel === 0)) {
                    pWebGLContext.generateMipmap(this._eFaceTarget);
                }
                pWebGLContext.pixelStorei(3317, 4);
                this.notifyAltered();
            };
            WebGLTextureBuffer.prototype.download = function (pData) {
                // if(data.getWidth() != getWidth() ||
                //     data.getHeight() != getHeight() ||
                //     data.getDepth() != getDepth())
                //     OGRE_EXCEPT(Exception::ERR_INVALIDPARAMS, "only download of entire buffer is supported by GL",
                //         "GLTextureBuffer::download");
                // glBindTexture( mTarget, mTextureID );
                // if(PixelUtil::isCompressed(data.format))
                // {
                //     if(data.format != mFormat || !data.isConsecutive())
                //         OGRE_EXCEPT(Exception::ERR_INVALIDPARAMS,
                //         "Compressed images must be consecutive, in the source format",
                //         "GLTextureBuffer::download");
                //     // Data must be consecutive and at beginning of buffer as PixelStorei not allowed
                //     // for compressed formate
                //     glGetCompressedTexImageNV(mFaceTarget, mLevel, data.data);
                // }
                // else
                // {
                //     if((data.getWidth()*PixelUtil::getNumElemBytes(data.format)) & 3) {
                //         // Standard alignment of 4 is not right
                //         glPixelStorei(GL_PACK_ALIGNMENT, 1);
                //     }
                //     // We can only get the entire texture
                //     glGetTexImageNV(mFaceTarget, mLevel,
                //         GLES2PixelUtil::getGLOriginFormat(data.format), GLES2PixelUtil::getGLOriginDataType(data.format),
                //         data.data);
                //     // Restore defaults
                //     glPixelStorei(GL_PACK_ALIGNMENT, 4);
                // }
                akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 266);
                akra.logger.criticalError("Downloading texture buffers is not supported by OpenGL ES");
                ; ;
            };
            WebGLTextureBuffer.prototype.buildMipmaps = function (pData) {
                var iWidth = 0;
                var iHeight = 0;
                var iLogW = 0;
                var iLogH = 0;
                var iLevel = 0;
                var pScaled = new akra.pixelUtil.PixelBox();
                pScaled.data = pData.data;
                pScaled.left = pData.left;
                pScaled.right = pData.right;
                pScaled.top = pData.top;
                pScaled.bottom = pData.bottom;
                pScaled.front = pData.front;
                pScaled.back = pData.back;
                iWidth = pData.width;
                iHeight = pData.height;
                iLogW = computeLog(iWidth);
                iLogH = computeLog(iHeight);
                iLevel = (iLogW > iLogH ? iLogW : iLogH);
                var mip = 0;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                for(mip = 0; mip <= iLevel; mip++) {
                    var iWebGLFormat = akra.webgl.getWebGLOriginFormat(pScaled.format);
                    var iWebGLDataType = akra.webgl.getWebGLOriginDataType(pScaled.format);
                    pWebGLContext.texImage2D(this._eFaceTarget, mip, iWebGLFormat, iWidth, iHeight, 0, iWebGLFormat, iWebGLDataType, pScaled.data);
                    if(mip !== 0) {
                        pScaled.data = null;
                    }
                    if(iWidth > 1) {
                        iWidth = iWidth / 2;
                    }
                    if(iHeight > 1) {
                        iHeight = iHeight / 2;
                    }
                    var iSizeInBytes = akra.pixelUtil.getMemorySize(iWidth, iHeight, 1, pData.format);
                    pScaled = new akra.pixelUtil.PixelBox(iWidth, iHeight, 1, pData.format);
                    pScaled.data = new Uint8Array(iSizeInBytes);
                    pData.scale(pScaled, akra.EFilters.LINEAR);
                }
                // Delete the scaled data for the last level
                if(iLevel > 0) {
                    pScaled.data = null;
                }
            };
            WebGLTextureBuffer.prototype._bindToFramebuffer = function (iAttachment, iZOffset) {
                akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 335);
                akra.logger.assert(iZOffset < this._iDepth);
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLContext.framebufferTexture2D(36160, iAttachment, this._eFaceTarget, this._pWebGLTexture, this._iLevel);
            };
            WebGLTextureBuffer.prototype._copyFromFramebuffer = function (iZOffset) {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLTexture(this._eTarget, this._pWebGLTexture);
                pWebGLContext.copyTexSubImage2D(this._eFaceTarget, this._iLevel, 0, 0, 0, 0, this._iWidth, this._iHeight);
            }/**@inline*/ ;
            WebGLTextureBuffer.prototype._getTarget = function () {
                return this._eTarget;
            }/**@inline*/ ;
            WebGLTextureBuffer.prototype._getWebGLTexture = function () {
                return this._pWebGLTexture;
            };
            WebGLTextureBuffer.prototype.blit = function (pSource, pSrcBox, pDestBox) {
                if(arguments.length == 1) {
                    return this.blit(pSource, new akra.geometry.Box(0, 0, 0, pSource.width, pSource.height, pSource.depth), new akra.geometry.Box(0, 0, 0, this._iWidth, this._iHeight, this._iDepth));
                } else {
                    var pSourceTexture = pSource;
                    // TODO: Check for FBO support first
                    // Destination texture must be 2D or Cube
                    // Source texture must be 2D
                    if(!(((pSourceTexture.getFlags()) & (akra.ETextureFlags.RENDERTARGET)) != 0) && pSourceTexture._getTarget() === 3553) {
                        return this.blitFromTexture(pSourceTexture, pSrcBox, pDestBox);
                    } else {
                        return _super.prototype.blit.call(this, pSource, pSrcBox, pDestBox);
                    }
                }
            }//-----------------------------------------------------------------------------
            // Very fast texture-to-texture blitter and hardware bi/trilinear scaling implementation using FBO
            // Destination texture must be 1D, 2D, 3D, or Cube
            // Source texture must be 1D, 2D or 3D
            // Supports compressed formats as both source and destination format, it will use the hardware DXT compressor
            // if available.
            ;
            WebGLTextureBuffer.prototype.blitFromTexture = function (pSource, pSrcBox, pDestBox) {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer._disableTextureUnitsFrom(0);
                pWebGLRenderer.activateWebGLTexture(33984);
                // Disable alpha, depth and scissor testing, disable blending,
                // and disable culling
                pWebGLContext.disable(2929);
                pWebGLContext.disable(3089);
                pWebGLContext.disable(3042);
                pWebGLContext.disable(2884);
                // Set up source texture
                pWebGLRenderer.bindWebGLTexture(pSource._getTarget(), pSource._getWebGLTexture());
                // Set filtering modes depending on the dimensions and source
                if(pSrcBox.width === pDestBox.width && pSrcBox.height === pDestBox.height && pSrcBox.depth === pDestBox.depth) {
                    // Dimensions match -- use nearest filtering (fastest and pixel correct)
                    pWebGLContext.texParameteri(pSource._getTarget(), 10241, 9728);
                    pWebGLContext.texParameteri(pSource._getTarget(), 10240, 9728);
                } else {
                    // Dimensions don't match -- use bi or trilinear filtering depending on the
                    // source texture.
                    if((((pSource.getFlags()) & (akra.ETextureFlags.AUTOMIPMAP)) != 0)) {
                        // Automatic mipmaps, we can safely use trilinear filter which
                        // brings greatly improved quality for minimisation.
                        pWebGLContext.texParameteri(pSource._getTarget(), 10241, 9987);
                        pWebGLContext.texParameteri(pSource._getTarget(), 10240, 9729);
                    } else {
                        // Manual mipmaps, stay safe with bilinear filtering so that no
                        // intermipmap leakage occurs.
                        pWebGLContext.texParameteri(pSource._getTarget(), 10241, 9729);
                        pWebGLContext.texParameteri(pSource._getTarget(), 10240, 9729);
                    }
                }
                // Clamp to edge (fastest)
                pWebGLContext.texParameteri(pSource._getTarget(), 10242, 33071);
                pWebGLContext.texParameteri(pSource._getTarget(), 10243, 33071);
                //Store old binding so it can be restored later
                var pOldFramebuffer = pWebGLContext.getParameter(36006);
                var pFramebuffer = pWebGLRenderer.createWebGLFramebuffer();
                pWebGLRenderer.bindWebGLFramebuffer(36160, pFramebuffer);
                var pTempWebGLTexture = null;
                if(!akra.webgl.checkFBOAttachmentFormat(this._eFormat) || pSource === this) {
                    // If target format not directly supported, create intermediate texture
                    var iGLTempFormat = akra.webgl.getClosestWebGLInternalFormat(akra.webgl.getSupportedAlternative(this._eFormat));
                    pTempWebGLTexture = pWebGLRenderer.createWebGLTexture();
                    pWebGLRenderer.bindWebGLTexture(3553, pTempWebGLTexture);
                    // Allocate temporary texture of the size of the destination area
                    pWebGLContext.texImage2D(3553, 0, iGLTempFormat, akra.math.ceilingPowerOfTwo(pDestBox.width), akra.math.ceilingPowerOfTwo(pDestBox.height), 0, 6408, 5121, null);
                    pWebGLContext.framebufferTexture2D(36160, 36064, 3553, pTempWebGLTexture, 0);
                    // Set viewport to size of destination slice
                    pWebGLContext.viewport(0, 0, pDestBox.width, pDestBox.height);
                } else {
                    // We are going to bind directly, so set viewport to size and position of destination slice
                    pWebGLContext.viewport(pDestBox.left, pDestBox.top, pDestBox.width, pDestBox.height);
                }
                //Get WebGL program
                var pWebGLShaderProgram = this.getManager().shaderProgramPool.findResource("WEBGL_blit_texture_buffer");
                pWebGLRenderer.disableAllWebGLVertexAttribs();
                pWebGLRenderer.useWebGLProgram(pWebGLShaderProgram);
                var iPosAttrIndex = 0;
                var iTexAttrIndex = 0;
                iPosAttrIndex = pWebGLShaderProgram.getWebGLAttributeLocation("POSITION");
                iTexAttrIndex = pWebGLShaderProgram.getWebGLAttributeLocation("TEXCOORD");
                pWebGLContext.enableVertexAttribArray(iPosAttrIndex);
                pWebGLContext.enableVertexAttribArray(iTexAttrIndex);
                var pSquareVertices = new Float32Array([
                    -1.0, 
                    -1.0, 
                    1.0, 
                    -1.0, 
                    -1.0, 
                    1.0, 
                    1.0, 
                    1.0
                ]);
                var pTexCoords = new Float32Array(12);
                var pPositionBuffer = pWebGLRenderer.createWebGLBuffer();
                var pTexCoordsBuffer = pWebGLRenderer.createWebGLBuffer();
                pWebGLRenderer.bindWebGLBuffer(34962, pPositionBuffer);
                pWebGLContext.bufferData(34962, pSquareVertices, 35040);
                pWebGLContext.vertexAttribPointer(iPosAttrIndex, 2, 5126, false, 0, 0);
                pWebGLShaderProgram.setInt("uSampler", 0);
                // Process each destination slice
                var iSlice = 0;
                for(iSlice = pDestBox.front; iSlice < pDestBox.back; ++iSlice) {
                    if(akra.isNull(pTempWebGLTexture)) {
                        // Bind directly
                        this._bindToFramebuffer(36064, iSlice);
                    }
                    /// Calculate source texture coordinates
                    var u1 = pSrcBox.left / pSource.width;
                    var v1 = pSrcBox.top / pSource.height;
                    var u2 = pSrcBox.right / pSource.width;
                    var v2 = pSrcBox.bottom / pSource.height;
                    /// Calculate source slice for this destination slice
                    var w = (iSlice - pDestBox.front) / pDestBox.depth;
                    /// Get slice # in source
                    w = w * pSrcBox.depth + pSrcBox.front;
                    /// Normalise to texture coordinate in 0.0 .. 1.0
                    w = (w + 0.5) / pSource.depth;
                    pTexCoords[0] = u1;
                    pTexCoords[1] = v1;
                    pTexCoords[2] = w;
                    pTexCoords[3] = u2;
                    pTexCoords[4] = v1;
                    pTexCoords[5] = w;
                    pTexCoords[6] = u2;
                    pTexCoords[7] = v2;
                    pTexCoords[8] = w;
                    pTexCoords[9] = u1;
                    pTexCoords[10] = v2;
                    pTexCoords[11] = w;
                    /// Finally we're ready to rumble
                    pWebGLRenderer.bindWebGLTexture(pSource._getTarget(), pSource._getWebGLTexture());
                    pWebGLContext.enable(pSource._getTarget());
                    pWebGLRenderer.bindWebGLBuffer(34962, pTexCoordsBuffer);
                    pWebGLContext.bufferData(34962, pTexCoords, 35040);
                    pWebGLContext.vertexAttribPointer(iTexAttrIndex, 3, 5126, false, 0, 0);
                    pWebGLContext.drawArrays(5, 0, 4);
                    pWebGLContext.disable(pSource._getTarget());
                    if(!akra.isNull(pTempWebGLTexture)) {
                        if(pSource === this) {
                            //set width, height and _pWebGLTexture
                            pWebGLRenderer.deleteWebGLTexture(this._pWebGLTexture);
                            this._pWebGLTexture = pTempWebGLTexture;
                            this._iWidth = akra.math.ceilingPowerOfTwo(pDestBox.width);
                            this._iHeight = akra.math.ceilingPowerOfTwo(pDestBox.height);
                        } else {
                            // Copy temporary texture
                            pWebGLRenderer.bindWebGLTexture(this._eTarget, this._pWebGLTexture);
                            switch(this._eTarget) {
                                case 3553:
                                case 34067: {
                                    pWebGLContext.copyTexSubImage2D(this._eFaceTarget, this._iLevel, pDestBox.left, pDestBox.top, 0, 0, pDestBox.width, pDestBox.height);
                                    break;

                                }
                            }
                        }
                    }
                }
                pWebGLContext.disableVertexAttribArray(iPosAttrIndex);
                pWebGLContext.disableVertexAttribArray(iTexAttrIndex);
                pWebGLRenderer.deleteWebGLBuffer(pPositionBuffer);
                pWebGLRenderer.deleteWebGLBuffer(pTexCoordsBuffer);
                // Finish up
                if(!akra.isNull(pTempWebGLTexture)) {
                    // Generate mipmaps
                    if((((this._iFlags) & (akra.ETextureFlags.AUTOMIPMAP)) != 0)) {
                        pWebGLRenderer.bindWebGLTexture(this._eTarget, this._pWebGLTexture);
                        pWebGLContext.generateMipmap(this._eTarget);
                    }
                }
                // Reset source texture to sane state
                pWebGLRenderer.bindWebGLTexture(this._eTarget, this._pWebGLTexture);
                // Detach texture from temporary framebuffer
                pWebGLContext.framebufferRenderbuffer(36160, 36064, 36161, null);
                // Restore old framebuffer
                pWebGLRenderer.bindWebGLFramebuffer(36160, pOldFramebuffer);
                if(pSource !== this) {
                    pWebGLRenderer.deleteWebGLTexture(pTempWebGLTexture);
                }
                pWebGLRenderer.deleteWebGLFramebuffer(pFramebuffer);
                pTempWebGLTexture = null;
                this.notifyAltered();
                return true;
            };
            WebGLTextureBuffer.prototype.blitFromMemory = function () {
                if(arguments.length === 1) {
                    return _super.prototype.blitFromMemory.call(this, arguments[0]);
                }
                // Fall back to normal GLHardwarePixelBuffer::blitFromMemory in case
                // - FBO is not supported
                // - Either source or target is luminance due doesn't looks like supported by hardware
                // - the source dimensions match the destination ones, in which case no scaling is needed
                // TODO: Check that extension is NOT available
                var pSourceOrigin = arguments[0];
                var pDestBox = arguments[1];
                if(akra.pixelUtil.isLuminance(pSourceOrigin.format) || akra.pixelUtil.isLuminance(this._eFormat) || (pSourceOrigin.width === pDestBox.width && pSourceOrigin.height === pDestBox.height && pSourceOrigin.depth === pDestBox.depth)) {
                    return _super.prototype.blitFromMemory.call(this, pSourceOrigin, pDestBox);
                }
                if(!this._pBuffer.contains(pDestBox)) {
                    akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 626);
                    akra.logger.criticalError("Destination box out of range");
                    ; ;
                }
                var pSource;
                // First, convert the srcbox to a OpenGL compatible pixel format
                if(webgl.getWebGLOriginFormat(pSourceOrigin.format) === 0) {
                    // Convert to buffer internal format
                    var iSizeInBytes = akra.pixelUtil.getMemorySize(pSourceOrigin.width, pSourceOrigin.height, pSourceOrigin.depth, this._eFormat);
                    pSource = new akra.pixelUtil.PixelBox(pSourceOrigin.width, pSourceOrigin.height, pSourceOrigin.depth, this._eFormat, new Uint8Array(iSizeInBytes));
                    akra.pixelUtil.bulkPixelConversion(pSourceOrigin, pSource);
                } else {
                    // No conversion needed
                    pSource = pSourceOrigin;
                }
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                // Create temporary texture to store source data
                var pTempWebGLTexture = null;
                var eTarget = 3553;
                var iWidth = akra.math.ceilingPowerOfTwo(pSource.width);
                var iHeight = akra.math.ceilingPowerOfTwo(pSource.height);
                var iWebGLFormat = webgl.getClosestWebGLInternalFormat(pSource.format);
                var iWebGLDataType = webgl.getWebGLOriginDataType(pSource.format);
                pTempWebGLTexture = pWebGLRenderer.createWebGLTexture();
                if(akra.isNull(pTempWebGLTexture)) {
                    akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 659);
                    akra.logger.error("Can not create WebGL texture");
                    ; ;
                    return false;
                }
                pWebGLRenderer.bindWebGLTexture(eTarget, pTempWebGLTexture);
                pWebGLContext.texImage2D(eTarget, 0, iWebGLFormat, iWidth, iHeight, 0, iWebGLFormat, iWebGLDataType, null);
                var pTextureBufferPool = this.getManager().textureBufferPool;
                var pTempTexBuffer = pTextureBufferPool.createResource(".temp");
                pTempTexBuffer.create(eTarget, pTempWebGLTexture, iWidth, iHeight, iWebGLFormat, pSource.format, 0, 0, akra.ETextureFlags.AUTOMIPMAP | akra.EHardwareBufferFlags.STATIC, false);
                // Upload data to 0,0,0 in temporary texture
                var pTempBoxTarget = new akra.geometry.Box(0, 0, 0, pSource.width, pSource.height, pSource.depth);
                pTempTexBuffer.upload(pSource, pTempBoxTarget);
                //Blit
                this.blitFromTexture(pTempTexBuffer, pTempBoxTarget, pDestBox);
                //Delete temp data
                pTextureBufferPool.destroyResource(pTempTexBuffer);
                pWebGLRenderer.deleteWebGLTexture(pTempWebGLTexture);
                pTempWebGLTexture = null;
                pTempBoxTarget = null;
                return true;
            };
            WebGLTextureBuffer.prototype.getRenderTarget = function (iZOffest) {
                if (typeof iZOffest === "undefined") { iZOffest = 0; }
                akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 694);
                akra.logger.assert((((this._iFlags) & (akra.ETextureFlags.RENDERTARGET)) != 0));
                ; ;
                akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 695);
                akra.logger.assert(iZOffest < this._iDepth);
                ; ;
                return this._pRTTList[iZOffest];
            };
            WebGLTextureBuffer.prototype.resize = function (iWidth, iHeight) {
                if(arguments.length === 1) {
                    akra.logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 702);
                    akra.logger.criticalError("resize with one parametr not available for WebGLTextureBuffer");
                    ; ;
                    return false;
                }
                var pSrcBox = new akra.geometry.Box(0, 0, 0, this._iWidth, this._iHeight, this._iDepth);
                var pDestBox = new akra.geometry.Box(0, 0, 0, iWidth, iHeight, this._iDepth);
                return this.blitFromTexture(this, pSrcBox, pDestBox);
            };
            return WebGLTextureBuffer;
        })(webgl.WebGLPixelBuffer);
        webgl.WebGLTextureBuffer = WebGLTextureBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLInternalTexture = (function (_super) {
            __extends(WebGLInternalTexture, _super);
            function WebGLInternalTexture() {
                        _super.call(this);
                this._pSurfaceList = null;
                this._pWebGLTexture = null;
            }
            WebGLInternalTexture.prototype.getWebGLTextureTarget = function () {
                switch(this._eTextureType) {
                    case akra.ETextureTypes.TEXTURE:
                    case akra.ETextureTypes.TEXTURE_2D: {
                        return 3553;

                    }
                    case akra.ETextureTypes.TEXTURE_CUBE_MAP: {
                        return 34067;

                    }
                    default: {
                        return 0;

                    }
                }
            };
            WebGLInternalTexture.prototype.createInternalTextureImpl = function (cFillColor) {
                if (typeof cFillColor === "undefined") { cFillColor = null; }
                if(!akra.isNull(cFillColor)) {
                    akra.logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 36);
                    akra.logger.warning("Texture can create with filled only by default(black) color");
                    ; ;
                    //TODO: must implement filling by color
                                    }
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                // Convert to nearest power-of-two size if required
                this._iWidth = akra.math.ceilingPowerOfTwo(this._iWidth);
                this._iHeight = akra.math.ceilingPowerOfTwo(this._iHeight);
                this._iDepth = akra.math.ceilingPowerOfTwo(this._iDepth);
                // Adjust format if required
                this._eFormat = this.getNativeFormat(this._eTextureType, this._eFormat, this._iFlags);
                // Check requested number of mipmaps
                var nMaxMips = akra.webgl.getMaxMipmaps(this._iWidth, this._iHeight, this._iDepth, this._eFormat);
                if(akra.pixelUtil.isCompressed(this._eFormat) && (this._nMipLevels === 0)) {
                    this._nRequestedMipLevels = 0;
                }
                this._nMipLevels = this._nRequestedMipLevels;
                if(this._nMipLevels > nMaxMips) {
                    this._nMipLevels = nMaxMips;
                }
                var iWebGLTarget = this.getWebGLTextureTarget();
                this._pWebGLTexture = pWebGLRenderer.createWebGLTexture();
                pWebGLRenderer.bindWebGLTexture(iWebGLTarget, this._pWebGLTexture);
                this._isMipmapsHardwareGenerated = pWebGLRenderer.hasCapability(akra.ERenderCapabilities.AUTOMIPMAP);
                // Set some misc default parameters, these can of course be changed later
                pWebGLContext.texParameteri(iWebGLTarget, 10241, 9728);
                pWebGLContext.texParameteri(iWebGLTarget, 10240, 9728);
                pWebGLContext.texParameteri(iWebGLTarget, 10242, 33071);
                pWebGLContext.texParameteri(iWebGLTarget, 10243, 33071);
                var iWebGLFormat = akra.webgl.getClosestWebGLInternalFormat(this._eFormat);
                var iWebGLDataType = akra.webgl.getWebGLOriginDataType(this._eFormat);
                var iWidth = this._iWidth;
                var iHeight = this._iHeight;
                var iDepth = this._iDepth;
                if(akra.pixelUtil.isCompressed(this._eFormat)) {
                    // Compressed formats
                    var iSize = akra.pixelUtil.getMemorySize(iWidth, iHeight, iDepth, this._eFormat);
                    // Provide temporary buffer filled with zeroes as glCompressedTexImageXD does not
                    // accept a 0 pointer like normal glTexImageXD
                    // Run through this process for every mipmap to pregenerate mipmap pyramid
                    //TODO: можем мы можем подать просто null, надо проверить
                    var pTmpData = new Uint8Array(iSize);
                    var pEmptyData;
                    var mip = 0;
                    for(mip = 0; mip <= this._nMipLevels; mip++) {
                        iSize = akra.pixelUtil.getMemorySize(iWidth, iHeight, iDepth, this._eFormat);
                        pEmptyData = pTmpData.subarray(0, iSize);
                        switch(this._eTextureType) {
                            case akra.ETextureTypes.TEXTURE:
                            case akra.ETextureTypes.TEXTURE_2D: {
                                pWebGLContext.compressedTexImage2D(3553, mip, iWebGLFormat, iWidth, iHeight, 0, pTmpData);
                                break;

                            }
                            case akra.ETextureTypes.TEXTURE_CUBE_MAP: {
                                var iFace = 0;
                                for(iFace = 0; iFace < 6; iFace++) {
                                    pWebGLContext.compressedTexImage2D(34069 + iFace, mip, iWebGLFormat, iWidth, iHeight, 0, pTmpData);
                                }
                                break;

                            }
                            default: {
                                break;

                            }
                        }
                        ; ;
                        if(iWidth > 1) {
                            iWidth = iWidth / 2;
                        }
                        if(iHeight > 1) {
                            iHeight = iHeight / 2;
                        }
                        if(iDepth > 1) {
                            iDepth = iDepth / 2;
                        }
                    }
                    pTmpData = null;
                    pEmptyData = null;
                } else {
                    var mip = 0;
                    // Run through this process to pregenerate mipmap pyramid
                    for(mip = 0; mip <= this._nMipLevels; mip++) {
                        // Normal formats
                        switch(this._eTextureType) {
                            case akra.ETextureTypes.TEXTURE:
                            case akra.ETextureTypes.TEXTURE_2D: {
                                pWebGLContext.texImage2D(3553, mip, iWebGLFormat, iWidth, iHeight, 0, iWebGLFormat, iWebGLDataType, null);
                                break;

                            }
                            case akra.ETextureTypes.TEXTURE_CUBE_MAP: {
                                var iFace = 0;
                                for(iFace = 0; iFace < 6; iFace++) {
                                    pWebGLContext.texImage2D(34069 + iFace, mip, iWebGLFormat, iWidth, iHeight, 0, iWebGLFormat, iWebGLDataType, null);
                                }
                                break;

                            }
                            default: {
                                break;

                            }
                        }
                        if(iWidth > 1) {
                            iWidth = iWidth / 2;
                        }
                        if(iHeight > 1) {
                            iHeight = iHeight / 2;
                        }
                        if(iDepth > 1) {
                            iDepth = iDepth / 2;
                        }
                    }
                }
                this._createSurfaceList();
                // Get final internal format
                this._eFormat = this.getBuffer(0, 0).format;
                return false;
            };
            WebGLInternalTexture.prototype.freeInternalTextureImpl = function () {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.deleteWebGLTexture(this._pWebGLTexture);
                this._pWebGLTexture = null;
                for(var i = 0; i < this._pSurfaceList.length; i++) {
                    this._pSurfaceList[i].release();
                }
                this._pSurfaceList = null;
                return true;
            };
            WebGLInternalTexture.prototype._createSurfaceList = function () {
                this._pSurfaceList = new Array();
                // For all faces and mipmaps, store surfaces as IPixelBuffer
                var bWantGeneratedMips = (((this._iFlags) & (akra.ETextureFlags.AUTOMIPMAP)) != 0);
                // Do mipmapping in software? (uses GLU) For some cards, this is still needed. Of course,
                // only when mipmap generation is desired.
                var bDoSoftware = bWantGeneratedMips && !this._isMipmapsHardwareGenerated && this._nMipLevels !== 0;
                var iFace = 0;
                var mip = 0;
                var pTextureBufferPool = this.getManager().textureBufferPool;
                var sResourceName = this.findResourceName();
                for(iFace = 0; iFace < this._nMipLevels; iFace++) {
                    var iWidth = this._iWidth;
                    var iHeight = this._iHeight;
                    for(mip = 0; mip <= this._nMipLevels; mip++) {
                        var pBuf = pTextureBufferPool.createResource(sResourceName + "_" + iFace + "_" + mip);
                        pBuf.create(this.getWebGLTextureTarget(), this._pWebGLTexture, iWidth, iHeight, akra.webgl.getClosestWebGLInternalFormat(this._eFormat), akra.webgl.getWebGLOriginDataType(this._eFormat), iFace, mip, this._iFlags, bDoSoftware && mip === 0);
                        this._pSurfaceList.push(pBuf);
                        //check error
                        if(pBuf.width === 0 || pBuf.height === 0 || pBuf.depth === 0) {
                            akra.logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 222);
                            akra.logger.criticalError("Zero sized texture surface on texture " + sResourceName + " face " + iFace + " mipmap " + mip + ". The GL driver probably refused to create the texture.");
                            ; ;
                        }
                    }
                }
            };
            WebGLInternalTexture.prototype.getBuffer = function (iFace, iMipmap) {
                if (typeof iFace === "undefined") { iFace = 1; }
                if (typeof iMipmap === "undefined") { iMipmap = 0; }
                if(iFace >= this.getNumFaces()) {
                    akra.logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 231);
                    akra.logger.criticalError("Face index out of range");
                    ; ;
                }
                if(iMipmap > this._nMipLevels) {
                    akra.logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 235);
                    akra.logger.criticalError("Mipmap index out of range");
                    ; ;
                }
                var idx = iFace * (this._nMipLevels + 1) + iMipmap;
                akra.logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 239);
                akra.logger.assert(idx < this._pSurfaceList.length);
                ; ;
                return this._pSurfaceList[idx];
            };
            WebGLInternalTexture.prototype.getNativeFormat = function (eTextureType, eFormat, iFlags) {
                if (typeof eTextureType === "undefined") { eTextureType = this._eTextureType; }
                if (typeof eFormat === "undefined") { eFormat = this._eFormat; }
                if (typeof iFlags === "undefined") { iFlags = this._iFlags; }
                var pRenderer = this.getManager().getEngine().getRenderer();
                if(akra.pixelUtil.isCompressed(eFormat) && !pRenderer.hasCapability(akra.ERenderCapabilities.TEXTURE_COMPRESSION_DXT) && !pRenderer.hasCapability(akra.ERenderCapabilities.TEXTURE_COMPRESSION_PVRTC)) {
                    return akra.EPixelFormats.A8R8G8B8;
                }
                // if floating point textures not supported, revert to PF_A8R8G8B8
                if(akra.pixelUtil.isFloatingPoint(eFormat) && pRenderer.hasCapability(akra.ERenderCapabilities.TEXTURE_FLOAT)) {
                    return akra.EPixelFormats.A8R8G8B8;
                }
                // Check if this is a valid rendertarget format
                if((((iFlags) & (akra.ETextureFlags.RENDERTARGET)) != 0)) {
                    /// Get closest supported alternative
                    /// If mFormat is supported it's returned
                    return akra.webgl.getSupportedAlternative(eFormat);
                }
                // Supported
                return eFormat;
            };
            WebGLInternalTexture.prototype.createRenderTexture = function () {
                // Create the GL texture
                // This already does everything necessary
                return this.createInternalTexture();
            };
            return WebGLInternalTexture;
        })(akra.core.pool.resources.Texture);
        webgl.WebGLInternalTexture = WebGLInternalTexture;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ; ;
    akra.DeclarationUsages = {
        POSITION: "POSITION",
        POSITION1: "POSITION1",
        POSITION2: "POSITION2",
        POSITION3: "POSITION3",
        BLENDWEIGHT: "BLENDWEIGHT",
        BLENDINDICES: "BLENDINDICES",
        BLENDMETA: "BLENDMETA",
        NORMAL: "NORMAL",
        NORMAL1: "NORMAL1",
        NORMAL2: "NORMAL2",
        NORMAL3: "NORMAL3",
        PSIZE: "PSIZE",
        TEXCOORD: "TEXCOORD",
        TEXCOORD1: "TEXCOORD1",
        TEXCOORD2: "TEXCOORD2",
        TEXCOORD3: "TEXCOORD3",
        TEXCOORD4: "TEXCOORD4",
        TEXCOORD5: "TEXCOORD5",
        TANGENT: "TANGENT",
        BINORMAL: "BINORMAL",
        TESSFACTOR: "TESSFACTOR",
        COLOR: "COLOR",
        FOG: "FOG",
        DEPTH: "DEPTH",
        SAMPLE: "SAMPLE",
        INDEX: "INDEX",
        INDEX0: "INDEX0",
        INDEX1: "INDEX1",
        INDEX2: "INDEX2",
        INDEX3: "INDEX3",
        INDEX11: //system indices starts from 10	    INDEX10 	: "INDEX10",
        "INDEX11",
        INDEX12: "INDEX12",
        INDEX13: "INDEX13",
        MATERIAL: "MATERIAL",
        MATERIAL1: "MATERIAL1",
        MATERIAL2: "MATERIAL2",
        DIFFUSE: "DIFFUSE",
        AMBIENT: "AMBIENT",
        SPECULAR: "SPECULAR",
        EMISSIVE: "EMISSIVE",
        SHININESS: "SHININESS",
        UNKNOWN: "UNKNOWN",
        END: "\a\n\r"
    };
    akra.DeclUsages = akra.DeclarationUsages;
    ///DEBUG!!!
    function VE_CUSTOM(sUsage, eType, iCount, iOffset) {
        if (typeof eType === "undefined") { eType = akra.EDataTypes.FLOAT; }
        if (typeof iCount === "undefined") { iCount = 1; }
        return {
            count: iCount,
            type: eType,
            usage: sUsage,
            offset: iOffset
        };
    }
    akra.VE_CUSTOM = VE_CUSTOM;
    function VE_FLOAT(sName, iOffset) {
        return VE_CUSTOM(sName, akra.EDataTypes.FLOAT, 1, iOffset);
    }
    akra.VE_FLOAT = VE_FLOAT;
    ; ;
    function VE_FLOAT2(sName, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = 2; }
        return VE_CUSTOM(sName, akra.EDataTypes.FLOAT, 2, iOffset);
    }
    akra.VE_FLOAT2 = VE_FLOAT2;
    ; ;
    function VE_FLOAT3(sName, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = 3; }
        return VE_CUSTOM(sName, akra.EDataTypes.FLOAT, 3, iOffset);
    }
    akra.VE_FLOAT3 = VE_FLOAT3;
    ; ;
    function VE_FLOAT4(sName, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = 4; }
        return VE_CUSTOM(sName, akra.EDataTypes.FLOAT, 4, iOffset);
    }
    akra.VE_FLOAT4 = VE_FLOAT4;
    ; ;
    function VE_FLOAT4x4(sName, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = 16; }
        return VE_CUSTOM(sName, akra.EDataTypes.FLOAT, 16, iOffset);
    }
    akra.VE_FLOAT4x4 = VE_FLOAT4x4;
    ; ;
    function VE_VEC2(sName, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = 2; }
        return VE_CUSTOM(sName, akra.EDataTypes.FLOAT, 2, iOffset);
    }
    akra.VE_VEC2 = VE_VEC2;
    ; ;
    function VE_VEC3(sName, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = 3; }
        return VE_CUSTOM(sName, akra.EDataTypes.FLOAT, 3, iOffset);
    }
    akra.VE_VEC3 = VE_VEC3;
    ; ;
    function VE_VEC4(sName, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = 4; }
        return VE_CUSTOM(sName, akra.EDataTypes.FLOAT, 4, iOffset);
    }
    akra.VE_VEC4 = VE_VEC4;
    ; ;
    function VE_MAT4(sName, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = 16; }
        return VE_CUSTOM(sName, akra.EDataTypes.FLOAT, 16, iOffset);
    }
    akra.VE_MAT4 = VE_MAT4;
    ; ;
    function VE_INT(sName, iOffset) {
        return VE_CUSTOM(sName, akra.EDataTypes.INT, 1, iOffset);
    }
    akra.VE_INT = VE_INT;
    ; ;
    function VE_END(iOffset) {
        if (typeof iOffset === "undefined") { iOffset = 0; }
        return VE_CUSTOM(akra.DeclUsages.END, akra.EDataTypes.UNSIGNED_BYTE, 0, iOffset);
    }
    akra.VE_END = VE_END;
    ; ;
    akra.createVertexDeclaration;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (data) {
        (function (EVertexDataLimits) {
            EVertexDataLimits._map = [];
            EVertexDataLimits.k_MaxElementsSize = 256;
        })(data.EVertexDataLimits || (data.EVertexDataLimits = {}));
        var EVertexDataLimits = data.EVertexDataLimits;
        ; ;
        var VertexData = (function () {
            function VertexData(pVertexBuffer, id, iOffset, iCount, pDecl) {
                this._iGuid = akra.sid();
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this._pVertexBuffer = pVertexBuffer;
                this._iOffset = iOffset;
                this._iLength = iCount;
                this._iId = id;
                this._pVertexDeclaration = null;
                this._iStride = 0;
                if(akra.isInt(pDecl)) {
                    this._iStride = pDecl;
                } else {
                    this.setVertexDeclaration(pDecl);
                }
                akra.logger.setSourceLocation("data/VertexData.ts", 58);
                akra.logger.assert(pVertexBuffer.byteLength >= this.byteLength + this.byteOffset, "vertex data out of array linits");
                ; ;
            }
            Object.defineProperty(VertexData.prototype, "id", {
                get: /**@inline*/ function () {
                    return this._iId;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VertexData.prototype, "length", {
                get: function () {
                    return this._iLength;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VertexData.prototype, "byteOffset", {
                get: /**@inline*/ function () {
                    return this._iOffset;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VertexData.prototype, "byteLength", {
                get: /**@inline*/ function () {
                    return this._iLength * this._iStride;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VertexData.prototype, "buffer", {
                get: /**@inline*/ function () {
                    return this._pVertexBuffer;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VertexData.prototype, "stride", {
                get: /**@inline*/ function () {
                    return this._iStride;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VertexData.prototype, "startIndex", {
                get: /**@inline*/ function () {
                    var iIndex = this.byteOffset / this.stride;
                    akra.logger.setSourceLocation("data/VertexData.ts", 34);
                    akra.logger.assert(iIndex % 1 == 0, "cannot calc first element index");
                    ; ;
                    return iIndex;
                },
                enumerable: true,
                configurable: true
            });
            VertexData.prototype.getCount = function () {
            };
            VertexData.prototype.resourceHandle = function () {
            };
            VertexData.prototype.getOffset = function () {
            };
            VertexData.prototype.getVertexDeclaration = function () {
                return this._pVertexDeclaration;
            };
            VertexData.prototype.setVertexDeclaration = function (pDecl) {
                if(this._pVertexDeclaration) {
                    akra.logger.setSourceLocation("data/VertexData.ts", 79);
                    akra.logger.error("vertex declaration already exists");
                    ; ;
                    return false;
                }
                var iStride = pDecl.stride;
                this._pVertexDeclaration = pDecl.clone();
                akra.logger.setSourceLocation("data/VertexData.ts", 90);
                akra.logger.assert(iStride < EVertexDataLimits.k_MaxElementsSize, "stride max is 255 bytes");
                ; ;
                akra.logger.setSourceLocation("data/VertexData.ts", 92);
                akra.logger.assert(iStride <= this.stride, "stride in VertexDeclaration grather than stride in construtor");
                ; ;
                return true;
            }/**@inline*/ ;
            VertexData.prototype.getVertexElementCount = function () {
                return this._pVertexDeclaration.length;
            };
            VertexData.prototype.hasSemantics = function (sUsage) {
                if(this._pVertexDeclaration != null) {
                    return this._pVertexDeclaration.hasSemantics(sUsage);
                }
                return false;
            };
            VertexData.prototype.destroy = function () {
                this._pVertexDeclaration = null;
                this._iLength = 0;
            };
            VertexData.prototype.extend = function (pDecl, pData) {
                if (typeof pData === "undefined") { pData = null; }
                pDecl = akra.createVertexDeclaration(pDecl);
                if(akra.isNull(pData)) {
                    pData = new Uint8Array(this.length * pDecl.stride);
                } else {
                    pData = new Uint8Array(pData.buffer);
                }
                akra.logger.setSourceLocation("data/VertexData.ts", 124);
                akra.logger.assert(this.length === pData.byteLength / pDecl.stride, 'invalid data size for extending');
                ; ;
                var nCount = this._iLength;
                //strides modifications
                var nStrideNew = pDecl.stride;
                var nStridePrev = this.stride;
                var nStrideNext = nStridePrev + nStrideNew;
                //total bytes after extending
                var nTotalSize = nStrideNext * this.length;
                var pDeclNew = this.getVertexDeclaration().clone();
                //data migration
                var pDataPrev = new Uint8Array(this.getData());
                var pDataNext = new Uint8Array(nTotalSize);
                for(var i = 0, iOffset; i < nCount; ++i) {
                    iOffset = i * nStrideNext;
                    pDataNext.set(pDataPrev.subarray(i * nStridePrev, (i + 1) * nStridePrev), iOffset);
                    pDataNext.set((pData).subarray(i * nStrideNew, (i + 1) * nStrideNew), iOffset + nStridePrev);
                }
                if(!pDeclNew.extend(pDecl)) {
                    return false;
                }
                if(!this.resize(nCount, pDeclNew)) {
                    return false;
                }
                return this.setData(pDataNext, 0, nStrideNext);
            };
            VertexData.prototype.resize = function (nCount, pDecl) {
                var iStride = 0;
                var iOldOffset = this.byteOffset;
                var pOldVertexBuffer;
                var pOldVertexDeclaration;
                var iOldStride;
                if(arguments.length == 2) {
                    if(akra.isInt(pDecl)) {
                        iStride = pDecl;
                    } else {
                        iStride = (pDecl).stride;
                    }
                    if(nCount * iStride <= this.byteLength) {
                        this._iLength = nCount;
                        this._iStride = iStride;
                        this._pVertexDeclaration = null;
                        if(!akra.isInt(pDecl)) {
                            this.setVertexDeclaration(pDecl);
                        }
                        return true;
                    } else {
                        pOldVertexBuffer = this.buffer;
                        pOldVertexBuffer.freeVertexData(this);
                        if(pOldVertexBuffer.getEmptyVertexData(nCount, pDecl, this) !== this) {
                            return false;
                        }
                        if(this.byteOffset != iOldOffset) {
                            akra.logger.setSourceLocation("data/VertexData.ts", 195);
                            akra.logger.warning("vertex data moved from " + iOldOffset + " ---> " + this.byteOffset);
                            ; ;
                            this.relocation(this, iOldOffset, this.byteOffset);
                        }
                        return true;
                    }
                } else {
                    if(arguments.length == 1) {
                        if(nCount <= this.length) {
                            this._iLength = nCount;
                            return true;
                        } else {
                            pOldVertexBuffer = this.buffer;
                            pOldVertexDeclaration = this.getVertexDeclaration();
                            iOldStride = this.stride;
                            pOldVertexBuffer.freeVertexData(this);
                            if(pOldVertexBuffer.getEmptyVertexData(nCount, iOldStride, this) == null) {
                                return false;
                            }
                            this.setVertexDeclaration(pOldVertexDeclaration);
                            if(this.byteOffset != iOldOffset) {
                                akra.logger.setSourceLocation("data/VertexData.ts", 221);
                                akra.logger.warning("vertex data moved from " + iOldOffset + " ---> " + this.byteOffset);
                                ; ;
                                this.relocation(this, iOldOffset, this.byteOffset);
                            }
                            return true;
                        }
                    }
                }
                return false;
            };
            VertexData.prototype.applyModifier = function (sUsage, fnModifier) {
                var pData = this.getTypedData(sUsage);
                fnModifier(pData);
                return this.setData(pData, sUsage);
            };
            VertexData.prototype.setData = function (pData, iOffset, iSize, nCountStart, nCount) {
                var iStride;
                var pVertexBuffer = this._pVertexBuffer;
                var pBackupBuf;
                var pDataU8;
                var k;
                var iOffsetBuffer;
                var pDeclaration = this._pVertexDeclaration;
                var pElement;
                switch(arguments.length) {
                    case 5: {
                        iStride = this.stride;
                        pDataU8 = new Uint8Array(pData.buffer);
                        if(iStride != iSize) {
                            //FIXME: очень тормознутое место, крайне медленно работает...
                            if(pVertexBuffer.isBackupPresent() && nCount > 1) {
                                pBackupBuf = new Uint8Array(this._pVertexBuffer.byteLength);
                                this._pVertexBuffer.readData(pBackupBuf);
                                iOffsetBuffer = this.byteOffset;
                                for(var i = nCountStart; i < nCount + nCountStart; i++) {
                                    for(k = 0; k < iSize; k++) {
                                        pBackupBuf[iStride * i + iOffset + iOffsetBuffer + k] = pDataU8[iSize * (i - nCountStart) + k];
                                    }
                                }
                                pVertexBuffer.writeData(pBackupBuf, 0, pVertexBuffer.byteLength);
                            } else {
                                for(var i = nCountStart; i < nCount + nCountStart; i++) {
                                    pVertexBuffer.writeData(/*pData.buffer.slice*/
                                    pDataU8.subarray(iSize * (i - nCountStart), iSize * (i - nCountStart) + iSize), iStride * i + iOffset + this.byteOffset, iSize);
                                }
                            }
                        } else {
                            pVertexBuffer.writeData(/*pData.buffer.slice*/
                            pDataU8.subarray(0, iStride * nCount), iOffset + this.byteOffset, iStride * nCount);
                        }
                        return true;

                    }
                    case 4: {
                        pElement = null;
                        if(akra.isString(arguments[1])) {
                            pElement = pDeclaration.findElement(arguments[1]);
                            if(pElement) {
                                return this.setData(pData, pElement.offset, pElement.size, arguments[2], arguments[3]);
                            }
                            return false;
                        }
                        nCountStart = nCountStart || 0;
                        if(!nCount) {
                            nCount = pData.byteLength / iSize;
                        }
                        return this.setData(pData, iOffset, iSize, nCountStart, nCount);

                    }
                    case 2:
                    case 3: {
                        var pDeclaration = this._pVertexDeclaration, pElement = null;
                        if(akra.isString(arguments[1])) {
                            pElement = pDeclaration.findElement(arguments[1]);
                            if(pElement) {
                                arguments[2] = arguments[2] || 0;
                                if(!arguments[3]) {
                                    arguments[3] = pData.buffer.byteLength / pElement.size;
                                }
                                return this.setData(pData, pElement.offset, pElement.size, arguments[2], arguments[3]);
                            }
                            return false;
                        } else {
                            if(arguments.length === 3) {
                                nCountStart = nCountStart || 0;
                                if(!nCount) {
                                    nCount = pData.byteLength / iSize;
                                }
                                return this.setData(pData, iOffset, iSize, nCountStart, nCount);
                            }
                        }
                        return false;

                    }
                    case 1: {
                        return this.setData(pData, this._pVertexDeclaration[0].eUsage);

                    }
                    default: {
                        return false;

                    }
                }
            };
            VertexData.prototype.getData = function (iOffset, iSize, iFrom, iCount) {
                switch(arguments.length) {
                    case 4:
                    case 2: {
                        if(akra.isString(arguments[0])) {
                            return null;
                        }
                        iFrom = iFrom || 0;
                        iCount = iCount || this._iLength;
                        iCount = akra.math.min(iCount, this._iLength);
                        var iStride = this.stride;
                        var pBufferData = new Uint8Array(iSize * this.length);
                        for(var i = iFrom; i < iCount; i++) {
                            this._pVertexBuffer.readData(iStride * i + iOffset + this.byteOffset, iSize, pBufferData.subarray(i * iSize, i * iSize + iSize));
                            //pBufferData.set(new Uint8Array(), i * iSize);
                                                    }
                        return pBufferData.buffer;

                    }
                    case 3:
                    case 1: {
                        var pDeclaration = this._pVertexDeclaration, pElement = null;
                        if(akra.isString("string")) {
                            pElement = pDeclaration.findElement(arguments[0]);
                            if(pElement) {
                                return this.getData(pElement.offset, pElement.size, arguments[1], arguments[2]);
                            }
                            return null;
                        }
                        return null;

                    }
                    case 0: {
                        return this.getData(0, this._pVertexDeclaration.stride);

                    }
                    default: {
                        return null;

                    }
                }
            };
            VertexData.prototype.getTypedData = function (sUsage, iFrom, iCount) {
                sUsage = sUsage || this._pVertexDeclaration[0].sUsage;
                var pVertexElement = this._pVertexDeclaration.findElement(sUsage);
                if(pVertexElement) {
                    return akra.util.abtota(this.getData(sUsage, iFrom, iCount), pVertexElement.type);
                }
                return null;
            }/**@inline*/ ;
            VertexData.prototype.getBufferHandle = function () {
                return this._pVertexBuffer.resourceHandle;
            };
            VertexData.prototype.toString = function () {
                if(akra.DEBUG) {
                    var s = "";
                    s += "          VERTEX DATA  #" + this.id + "\n";
                    s += "---------------+-----------------------\n";
                    s += "        BUFFER : " + this.getBufferHandle() + "\n";
                    s += "          SIZE : " + this.byteLength + " b.\n";
                    s += "        OFFSET : " + this.byteOffset + " b.\n";
                    s += "---------------+-----------------------\n";
                    s += " MEMBERS COUNT : " + this.length + " \n";
                    s += "        STRIDE : " + this.stride + " \n";
                    s += "---------------+-----------------------\n";
                    s += this.getVertexDeclaration().toString();
                    return s;
                }
                return null;
            };
            VertexData._pEvenetTable = new akra.events.EventTable();
            VertexData.prototype.getEventTable = /**@inline*/ function () {
                return VertexData._pEvenetTable;
            }/**@inline*/ ;
            VertexData.prototype.getGuid = function () {
                return this._iGuid;
            }/**@inline*/ ;
            VertexData.prototype.connect = function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().addDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            };
            VertexData.prototype.disconnect = /**@inline*/ function (pSender, sSignal, sSlot, eType) {
                return this.getEventTable().removeDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            }/**@inline*/ ;
            VertexData.prototype.bind = function (sSignal, fnListener, eType) {
                return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
            }/**@inline*/ ;
            VertexData.prototype.unbind = function (sSignal, fnListener, eType) {
                return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
            };
            VertexData.prototype.relocation = function (pTarget, iFrom, iTo) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).relocation;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pTarget, iFrom, iTo) : _broadcast[i].listener(_recivier, pTarget, iFrom, iTo);
                }
            };
            return VertexData;
        })();
        data.VertexData = VertexData;        
        // BEGIN_EVENT_TABLE(VertexData);
        // relocation(pTarget: IVertexData, iFrom: uint, iTo: uint): void {
        // 	EMIT_BROADCAST(relocation, CALL(pTarget, iFrom, iTo));
        // }
        // END_EVENT_TABLE();
            })(akra.data || (akra.data = {}));
    var data = akra.data;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var MemoryBuffer = (function (_super) {
                    __extends(MemoryBuffer, _super);
                    function MemoryBuffer() {
                        _super.apply(this, arguments);

                    }
                    Object.defineProperty(MemoryBuffer.prototype, "byteLength", {
                        get: /**@inline*/ function () {
                            return this._pData.byteLength;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    MemoryBuffer.prototype.create = function (iByteSize, iFlags) {
                        if (typeof iFlags === "undefined") { iFlags = akra.EHardwareBufferFlags.DYNAMIC; }
                        ((iFlags) &= ~(akra.EHardwareBufferFlags.BACKUP_COPY | akra.EHardwareBufferFlags.DISCARDABLE | akra.EHardwareBufferFlags.ALIGNMENT));
                        var isCreated = _super.prototype.create.call(this, iFlags | akra.EHardwareBufferFlags.SOFTWARE);
                        this._pData = new Uint8Array(iByteSize);
                        return isCreated;
                    };
                    MemoryBuffer.prototype.destroy = function () {
                        _super.prototype.destroy.call(this);
                        this._pData = null;
                    };
                    MemoryBuffer.prototype.resize = function (iSize) {
                        var pData = new Uint8Array(iSize);
                        pData.set(this._pData);
                        this._pData = pData;
                        this.notifyAltered();
                        return true;
                    };
                    MemoryBuffer.prototype.lockImpl = function (iOffset, iLength, iLockFlags) {
                        return this._pData.subarray(iOffset, iOffset + iLength);
                    };
                    MemoryBuffer.prototype.readData = function (iOffset, iSize, ppDest) {
                        if(arguments.length < 3) {
                            ppDest = arguments[0];
                            iOffset = 0;
                            iSize = ppDest.byteLength;
                        }
                        akra.logger.setSourceLocation("MemoryBuffer.ts", 55);
                        akra.logger.assert((iOffset + iSize) <= this.byteLength);
                        ; ;
                        akra.memcpy((ppDest).buffer, 0, this._pData.buffer, iOffset, iSize);
                        return true;
                    };
                    MemoryBuffer.prototype.writeData = function (pData, iOffset, iSize, bDiscardWholeBuffer) {
                        if (typeof bDiscardWholeBuffer === "undefined") { bDiscardWholeBuffer = false; }
                        akra.logger.setSourceLocation("MemoryBuffer.ts", 64);
                        akra.logger.assert((iOffset + iSize) <= this.byteLength);
                        ; ;
                        if(arguments.length < 3) {
                            iOffset = 0;
                            iSize = pData.byteLength;
                        }
                        akra.memcpy(this._pData.buffer, 0, (pData).buffer, iOffset, iSize);
                        this.notifyAltered();
                        return true;
                    };
                    return MemoryBuffer;
                })(resources.HardwareBuffer);
                resources.MemoryBuffer = MemoryBuffer;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var VertexBuffer = (function (_super) {
                    __extends(VertexBuffer, _super);
                    function VertexBuffer() {
                        /*pManager*/
                                        _super.call(this);
                        this._pVertexDataArray = [];
                        this._iDataCounter = 0;
                    }
                    Object.defineProperty(VertexBuffer.prototype, "type", {
                        get: /**@inline*/ function () {
                            return akra.EVertexBufferTypes.UNKNOWN;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(VertexBuffer.prototype, "length", {
                        get: function () {
                            return this._pVertexDataArray.length;
                        }/*pManager: IResourcePoolManager*/
                        ,
                        enumerable: true,
                        configurable: true
                    });
                    VertexBuffer.prototype.create = function (iByteSize, iFlags, pData) {
                        _super.prototype.create.call(this, iFlags || 0);
                        if((((iFlags) & (akra.EHardwareBufferFlags.BACKUP_COPY)) != 0)) {
                            this._pBackupCopy = new resources.MemoryBuffer();
                            this._pBackupCopy.create(iByteSize);
                            this._pBackupCopy.writeData(pData, 0, iByteSize);
                        }
                        return true;
                    };
                    VertexBuffer.prototype.destroy = function () {
                        _super.prototype.destroy.call(this);
                        this._pBackupCopy.destroy();
                        this.freeVertexData();
                        this._iDataCounter = 0;
                    };
                    VertexBuffer.prototype.getVertexData = function (iOffset, iCount, pData) {
                        var pDecl = akra.createVertexDeclaration(pData);
                        var pVertexData = new akra.data.VertexData(this, this._iDataCounter++, iOffset, iCount, pDecl);
                        this._pVertexDataArray.push(pVertexData);
                        this.notifyAltered();
                        return pVertexData;
                    };
                    VertexBuffer.prototype.getEmptyVertexData = function (iCount, pDeclData, ppVertexDataIn) {
                        var pDecl;
                        var pHole = [];
                        var i;
                        var pVertexData;
                        var iTemp;
                        var iStride = 0;
                        var iAligStart;
                        while(true) {
                            pHole[0] = {
                                start: 0,
                                end: this.byteLength
                            };
                            for(var k = 0; k < this._pVertexDataArray.length; ++k) {
                                pVertexData = this._pVertexDataArray[k];
                                for(i = 0; i < pHole.length; i++) {
                                    //Полностью попадает внутрь
                                    if(pVertexData.byteOffset > pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength < pHole[i].end) {
                                        iTemp = pHole[i].end;
                                        pHole[i].end = pVertexData.byteOffset;
                                        pHole.splice(i + 1, 0, {
                                            start: pVertexData.byteOffset + pVertexData.byteLength,
                                            end: iTemp
                                        });
                                        i--;
                                    } else {
                                        if(pVertexData.byteOffset == pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength < pHole[i].end) {
                                            pHole[i].start = pVertexData.byteOffset + pVertexData.byteLength;
                                        } else {
                                            if(pVertexData.byteOffset > pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength == pHole[i].end) {
                                            } else {
                                                if(pVertexData.byteOffset == pHole[i].start && pVertexData.byteLength == (pHole[i].end - pHole[i].start)) {
                                                    pHole.splice(i, 1);
                                                    i--;
                                                } else {
                                                    //Перекрывает снизу
                                                    if(pVertexData.byteOffset < pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength > pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength < pHole[i].end) {
                                                        pHole[i].start = pVertexData.byteOffset + pVertexData.byteLength;
                                                    } else {
                                                        if(pVertexData.byteOffset < pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength > pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength == pHole[i].end) {
                                                            pHole.splice(i, 1);
                                                            i--;
                                                        } else {
                                                            //Перекрывается сверху
                                                            if(pVertexData.byteOffset + pVertexData.byteLength > pHole[i].end && pVertexData.byteOffset > pHole[i].start && pVertexData.byteOffset < pHole[i].end) {
                                                                pHole[i].end = pVertexData.byteOffset;
                                                            } else {
                                                                if(pVertexData.byteOffset + pVertexData.byteLength > pHole[i].end && pVertexData.byteOffset == pHole[i].start && pVertexData.byteOffset < pHole[i].end) {
                                                                    pHole.splice(i, 1);
                                                                    i--;
                                                                } else {
                                                                    //полнстью перекрывает
                                                                    if(pVertexData.byteOffset < pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength > pHole[i].end) {
                                                                        i--;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            pHole.sort(function (a, b) {
                                return ((a.end - a.start) - (b.end - b.start));
                            });
                            if(akra.isInt(pDeclData)) {
                                pDecl = akra.createVertexDeclaration(pDeclData);
                                iStride = pDecl.stride;
                            } else {
                                iStride = pDeclData;
                            }
                            for(i = 0; i < pHole.length; i++) {
                                iAligStart = this.isAligned() ? akra.math.alignUp(pHole[i].start, akra.math.nok(iStride, 4)) : akra.math.alignUp(pHole[i].start, iStride);
                                if((pHole[i].end - iAligStart) >= iCount * iStride) {
                                    if(arguments.length == 2) {
                                        pVertexData = new akra.data.VertexData(this, this._iDataCounter++, iAligStart, iCount, pDeclData);
                                        this._pVertexDataArray.push(pVertexData);
                                        this.notifyAltered();
                                        return pVertexData;
                                    } else {
                                        if(arguments.length == 3) {
                                            ((ppVertexDataIn).constructor).call(ppVertexDataIn, this, iAligStart, iCount, pDeclData);
                                            this._pVertexDataArray.push(ppVertexDataIn);
                                            this.notifyAltered();
                                            return ppVertexDataIn;
                                        }
                                    }
                                    return null;
                                }
                            }
                            if(this.resize(akra.math.max(this.byteLength * 2, this.byteLength + iCount * iStride)) == false) {
                                break;
                            }
                        }
                        return null;
                    };
                    VertexBuffer.prototype.freeVertexData = function (pVertexData) {
                        if(arguments.length == 0) {
                            for(var i = 0; i < this._pVertexDataArray.length; i++) {
                                this._pVertexDataArray[Number(i)].destroy();
                            }
                            this._pVertexDataArray = null;
                        } else {
                            for(var i = 0; i < this._pVertexDataArray.length; i++) {
                                if(this._pVertexDataArray[i] == pVertexData) {
                                    pVertexData.destroy();
                                    this._pVertexDataArray.splice(i, 1);
                                    this.notifyAltered();
                                    return true;
                                }
                            }
                            return false;
                        }
                        this.notifyAltered();
                        return true;
                    };
                    VertexBuffer.prototype.allocateData = function (pDeclData, pData) {
                        var pDecl = akra.createVertexDeclaration(pDeclData);
                        var pVertexData;
                        var iCount = pData.byteLength / pDecl.stride;
                        akra.logger.setSourceLocation("core/pool/resources/VertexBuffer.ts", 216);
                        akra.logger.assert(iCount === akra.math.floor(iCount), 'Data size should be a multiple of the vertex declaration.');
                        ; ;
                        pVertexData = this.getEmptyVertexData(iCount, pDecl);
                        pVertexData.setData(pData, 0, pDecl.stride);
                        return pVertexData;
                    };
                    return VertexBuffer;
                })(resources.HardwareBuffer);
                resources.VertexBuffer = VertexBuffer;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLVertexBuffer = (function (_super) {
            __extends(WebGLVertexBuffer, _super);
            function WebGLVertexBuffer() {
                /*pManager*/
                        _super.call(this);
                this._pLockData = null;
            }
            Object.defineProperty(WebGLVertexBuffer.prototype, "type", {
                get: /**@inline*/ function () {
                    return akra.EVertexBufferTypes.VBO;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WebGLVertexBuffer.prototype, "byteLength", {
                get: function () {
                    return this._iByteSize;
                }/*pManager: IResourcePoolManager*/
                ,
                enumerable: true,
                configurable: true
            });
            WebGLVertexBuffer.prototype.create = function (iByteSize, iFlags, pData) {
                if (typeof iFlags === "undefined") { iFlags = akra.EHardwareBufferFlags.STATIC; }
                if (typeof pData === "undefined") { pData = null; }
                iByteSize = akra.math.max(iByteSize, 1024);
                if((((iFlags) & (akra.EHardwareBufferFlags.READABLE)) != 0)) {
                    ((iFlags) |= (akra.EHardwareBufferFlags.BACKUP_COPY));
                }
                _super.prototype.create.call(this, iByteSize, iFlags, pData);
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var i;
                akra.logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 45);
                akra.logger.assert(this._pWebGLBuffer == null, "webgl buffer already allocated");
                ; ;
                this._iByteSize = iByteSize;
                this._iFlags = iFlags;
                pWebGLContext = pWebGLRenderer.getWebGLContext();
                akra.logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 51);
                akra.logger.assert(pWebGLContext !== null, "cannot grab webgl context");
                ; ;
                //Софтварного рендеринга буфера у нас нет
                akra.logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 54);
                akra.logger.assert(!this.isSoftware(), "no sftware rendering");
                ; ;
                //Если есть локальная копия то буфер можно читать
                if(this.isBackupPresent()) {
                    ((this._iFlags) |= (akra.EHardwareBufferFlags.READABLE));
                }
                akra.logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 62);
                akra.logger.assert(!pData || pData.byteLength <= iByteSize, "Размер переданного массива больше переданного размера буфера");
                ; ;
                this._pWebGLBuffer = pWebGLRenderer.createWebGLBuffer();
                if(!this._pWebGLBuffer) {
                    akra.logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 68);
                    akra.logger.criticalError("Не удалось создать буфер");
                    ; ;
                    this.destroy();
                    return false;
                }
                pWebGLRenderer.bindWebGLBuffer(34962, this._pWebGLBuffer);
                pWebGLContext.bufferData(34962, this._iByteSize, webgl.getWebGLUsage(this._iFlags));
                if(pData) {
                    pWebGLContext.bufferSubData(34962, 0, akra.isArrayBuffer(pData) ? pData : pData.buffer);
                }
                return true;
            };
            WebGLVertexBuffer.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                var pWebGLRenderer = this.getEngine().getRenderer();
                pWebGLRenderer.deleteWebGLBuffer(this._pWebGLBuffer);
                this._pWebGLBuffer = null;
                this._iByteSize = 0;
            };
            WebGLVertexBuffer.prototype.readData = function (iOffset, iSize, ppDest) {
                akra.logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 99);
                akra.logger.assert(!akra.isNull(this._pWebGLBuffer), "Буффер еще не создан");
                ; ;
                if(!this.isBackupPresent()) {
                    return false;
                }
                if(arguments.length === 1) {
                    this._pBackupCopy.readData(arguments[0]);
                } else {
                    this._pBackupCopy.readData(iOffset, iSize, ppDest);
                }
                return true;
            };
            WebGLVertexBuffer.prototype.writeData = function (pData, iOffset, iSize, bDiscardWholeBuffer) {
                if (typeof bDiscardWholeBuffer === "undefined") { bDiscardWholeBuffer = false; }
                akra.logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 119);
                akra.logger.assert(!akra.isNull(this._pWebGLBuffer), "WebGL buffer not exists");
                ; ;
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLBuffer(34962, this._pWebGLBuffer);
                akra.logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 126);
                akra.logger.assert(pData.byteLength <= iSize, "Размер переданного массива больше переданного размера");
                ; ;
                akra.logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 127);
                akra.logger.assert(this.byteLength >= iOffset + iSize, "Данные выйдут за предел буфера");
                ; ;
                var pU8Data = null;
                if(akra.isArrayBuffer(pData)) {
                    pU8Data = new Uint8Array(pData);
                } else {
                    pU8Data = new Uint8Array(pData.buffer, pData.byteOffset, pData.byteLength);
                }
                pU8Data = pU8Data.subarray(0, iSize);
                pWebGLContext.bufferSubData(34962, iOffset, pU8Data);
                if(this.isBackupPresent()) {
                    this._pBackupCopy.writeData(pU8Data, iOffset);
                }
                this.notifyAltered();
                return true;
            };
            WebGLVertexBuffer.prototype.resize = function (iSize) {
                var eUsage;
                var pData;
                var iMax = 0;
                var pVertexData;
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                if(this.isBackupPresent()) {
                    return false;
                }
                if(iSize < this.byteLength) {
                    for(var k = 0; k < this._pVertexDataArray.length; ++k) {
                        pVertexData = this._pVertexDataArray[k];
                        if(pVertexData.byteOffset + pVertexData.byteLength > iMax) {
                            iMax = pVertexData.byteOffset + pVertexData.byteLength;
                        }
                    }
                    akra.logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 174);
                    akra.logger.assert(iMax <= iSize, "Уменьшение невозможно. Страая разметка не укладывается в новый размер");
                    ; ;
                }
                if(pWebGLContext.isBuffer(this._pWebGLBuffer)) {
                    pWebGLRenderer.deleteWebGLBuffer(this._pWebGLBuffer);
                }
                eUsage = webgl.getWebGLUsage(this._iFlags);
                this._pWebGLBuffer = pWebGLRenderer.createWebGLBuffer();
                if(!this._pWebGLBuffer) {
                    akra.logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 186);
                    akra.logger.criticalError("Не удалось создать буфер");
                    ; ;
                    this.destroy();
                    return false;
                }
                pWebGLRenderer.bindWebGLBuffer(34962, this._pWebGLBuffer);
                pWebGLContext.bufferData(34962, iSize, eUsage);
                pData = new Uint8Array(this._iByteSize);
                if(this.readData(pData)) {
                    akra.logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 199);
                    akra.logger.warning("cannot read data from buffer");
                    ; ;
                    return false;
                }
                this.writeData(pData, 0, this._iByteSize);
                this._pBackupCopy.resize(iSize);
                this._iByteSize = iSize;
                this.notifyAltered();
                return true;
            }/**@inline*/ ;
            WebGLVertexBuffer.prototype.getWebGLBuffer = function () {
                return this._pWebGLBuffer;
            };
            WebGLVertexBuffer.prototype.lockImpl = function (iOffset, iSize, iLockFlags) {
                var pRetData = new Uint8Array(iSize);
                this.readData(iOffset, iSize, pRetData);
                this._pLockData = pRetData;
                return pRetData;
            };
            WebGLVertexBuffer.prototype.unlockImpl = function () {
                this.writeData(this._pLockData, this._iLockStart, this._iLockSize);
            };
            WebGLVertexBuffer.prototype.copyBackupToRealImpl = function (pRealData, pBackupData, iLockFlags) {
                pRealData.set(pBackupData);
            };
            return WebGLVertexBuffer;
        })(akra.core.pool.resources.VertexBuffer);
        webgl.WebGLVertexBuffer = WebGLVertexBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLShaderProgram = (function (_super) {
            __extends(WebGLShaderProgram, _super);
            function WebGLShaderProgram() {
                _super.apply(this, arguments);

            }
            WebGLShaderProgram.prototype.create = function (csVertex, csPixel) {
                if(arguments.length > 0) {
                    return this.compile(csVertex || "void main(void){gl_Position = vec4(0., 0., 0., 1.);}", csPixel || "void main(void){}");
                }
                return false;
            };
            WebGLShaderProgram.prototype.destroy = function () {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                pWebGLRenderer.deleteWebGLProgram(this._pWebGLProgram);
                this._pWebGLUniformLocations = null;
                this._pWebGLAttributeLocations = null;
                this._pWebGLAttributesInfo = null;
                this.notifyDestroyed();
                this.notifyDisabled();
            };
            WebGLShaderProgram.prototype.compile = function (csVertex, csPixel) {
                if (typeof csVertex === "undefined") { csVertex = "void main(void){gl_Position = vec4(0., 0., 0., 1.);}"; }
                if (typeof csPixel === "undefined") { csPixel = "void main(void){}"; }
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var pWebGLProgram = this._pWebGLProgram = pWebGLRenderer.createWebGLProgram();
                var pWebGLVs = this.createWebGLShader(35633, csVertex);
                var pWebGLFs = this.createWebGLShader(35632, csPixel);
                /** because, if not all units correctly activated, can obtained wronf link status */
                pWebGLRenderer._disableAllTextureUnits();
                pWebGLContext.attachShader(pWebGLProgram, pWebGLVs);
                pWebGLContext.attachShader(pWebGLProgram, pWebGLFs);
                pWebGLContext.linkProgram(pWebGLProgram);
                if(!this.isLinked()) {
                    akra.logger.setSourceLocation("WebGLShaderProgram.ts", 66);
                    akra.logger.error("cannot link GLSL program(guid: %d)", this.getGuid());
                    ; ;
                    if(webgl.hasExtension("WEBGL_debug_shaders")) {
                        akra.logger.setSourceLocation("WebGLShaderProgram.ts", 72);
                        akra.logger.log("translated(from GLSL) VS shader: \n %s\ntranslated(from GLSL) PS shader: \n%s", pWebGLContext.getTranslatedShaderSource(pWebGLVs), pWebGLContext.getTranslatedShaderSource(pWebGLFs));
                        ; ;
                    }
                    var sInfo = pWebGLContext.getProgramInfoLog(pWebGLProgram);
                    akra.logger.setSourceLocation("WebGLShaderProgram.ts", 77);
                    akra.logger.log("shader program errors: \n %s\n\nvertex code:\n %s\n\n pixel code: %s", sInfo, csVertex, csPixel);
                    ; ;
                    return false;
                }
                pWebGLContext.validateProgram(pWebGLProgram);
                if(!this.isValid()) {
                    akra.logger.setSourceLocation("WebGLShaderProgram.ts", 86);
                    akra.logger.warning("GLSL program not valid(guid: %d)", this.getGuid());
                    ; ;
                    akra.logger.setSourceLocation("WebGLShaderProgram.ts", 88);
                    akra.logger.log(pWebGLContext.getProgramInfoLog(pWebGLProgram));
                    ; ;
                }
                this.obtainWebGLUniforms();
                this.obtainWebGLAttributes();
                this.notifyCreated();
                this.notifyRestored();
                return true;
            };
            WebGLShaderProgram.prototype.isLinked = function () {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                return akra.isDefAndNotNull(this._pWebGLProgram) && pWebGLContext.getProgramParameter(this._pWebGLProgram, 35714);
            };
            WebGLShaderProgram.prototype.isValid = function () {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                return akra.isDefAndNotNull(this._pWebGLProgram) && pWebGLContext.getProgramParameter(this._pWebGLProgram, 35715);
            };
            WebGLShaderProgram.prototype.isActive = function () {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                return (akra.isDefAndNotNull(this._pWebGLProgram) && pWebGLContext.getParameter(35725) === this._pWebGLProgram);
            };
            WebGLShaderProgram.prototype.setFloat = function (sName, fValue) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    return false;
                }
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                pWebGLContext.uniform1f(iLoc, fValue);
                return true;
            };
            WebGLShaderProgram.prototype.setInt = function (sName, iValue) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    return false;
                }
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                pWebGLContext.uniform1i(iLoc, iValue);
                return true;
            };
            WebGLShaderProgram.prototype.setVec2 = function (sName, x, y) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    return false;
                }
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                if(arguments.length == 2) {
                    pWebGLContext.uniform2f(iLoc, arguments[1].x, arguments[1].y);
                } else {
                    pWebGLContext.uniform2f(iLoc, arguments[1], arguments[2]);
                }
                return true;
            };
            WebGLShaderProgram.prototype.setVec2i = function (sName, x, y) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    return false;
                }
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                if(arguments.length == 2) {
                    pWebGLContext.uniform2i(iLoc, arguments[1].x, arguments[1].y);
                } else {
                    pWebGLContext.uniform2i(iLoc, arguments[1], arguments[2]);
                }
                return true;
            };
            WebGLShaderProgram.prototype.setVec3 = function (sName, x, y, z) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    return false;
                }
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                if(arguments.length == 2) {
                    pWebGLContext.uniform3f(iLoc, arguments[1].x, arguments[1].y, arguments[1].z);
                } else {
                    pWebGLContext.uniform3f(iLoc, arguments[1], arguments[2], arguments[3]);
                }
                return true;
            };
            WebGLShaderProgram.prototype.setVec3i = function (sName, x, y, z) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    return false;
                }
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                if(arguments.length == 2) {
                    pWebGLContext.uniform3i(iLoc, arguments[1].x, arguments[1].y, arguments[1].z);
                } else {
                    pWebGLContext.uniform3i(iLoc, arguments[1], arguments[2], arguments[3]);
                }
                return true;
            };
            WebGLShaderProgram.prototype.setVec4 = function (sName, x, y, z, w) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    return false;
                }
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                if(arguments.length == 2) {
                    pWebGLContext.uniform4f(iLoc, arguments[1].x, arguments[1].y, arguments[1].z, arguments[1].w);
                } else {
                    pWebGLContext.uniform4f(iLoc, arguments[1], arguments[2], arguments[3], arguments[3]);
                }
                return true;
            };
            WebGLShaderProgram.prototype.setVec4i = function (sName, x, y, z, w) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    return false;
                }
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                if(arguments.length == 2) {
                    pWebGLContext.uniform4i(iLoc, arguments[1].x, arguments[1].y, arguments[1].z, arguments[1].w);
                } else {
                    pWebGLContext.uniform4i(iLoc, arguments[1], arguments[2], arguments[3], arguments[3]);
                }
                return true;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setMat3 = function (sName, m3fValue) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    return false;
                }
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                pWebGLContext.uniformMatrix3fv(iLoc, false, m3fValue.data);
                return true;
            };
            WebGLShaderProgram.prototype.setMat4 = function (sName, m4fValue) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    return false;
                }
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                pWebGLContext.uniformMatrix4fv(iLoc, false, m4fValue.data);
                return true;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setFloat32Array = function (sName, pValue) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    return false;
                }
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                pWebGLContext.uniform1fv(iLoc, pValue);
                return true;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setInt32Array = function (sName, pValue) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    return false;
                }
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                pWebGLContext.uniform1iv(iLoc, pValue);
                return true;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setVec2Array = function (sName, pValue) {
                return false;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setVec2iArray = function (sName, pValue) {
                return false;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setVec3Array = function (sName, pValue) {
                return false;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setVec3iArray = function (sName, pValue) {
                return false;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setVec4Array = function (sName, pValue) {
                return false;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setVec4iArray = function (sName, pValue) {
                return false;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setMat3Array = function (sName, pValue) {
                return false;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setMat4Array = function (sName, pValue) {
                return false;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setStruct = function (sName, pData) {
                return false;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setSampler2D = function (sName, pData) {
                return false;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setSampler2DToStruct = function (sName, pData) {
                return false;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.setTexture = function (sName, pData) {
                return false;
            }//applyVertexBuffer(sName: string, pBuffer: IVertexBuffer);
            /**@inline*/ ;
            WebGLShaderProgram.prototype.applyVertexData = function (sName, pData) {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                var pVertexBuffer = pData.buffer;
                var iStride = pData.stride;
                if(pVertexBuffer.type !== akra.EVertexBufferTypes.VBO) {
                    return false;
                }
                var pVertexDecl = pData.getVertexDeclaration();
                var pVertexElement;
                var iLoc;
                for(var i = 0; i < pVertexDecl.length; ++i) {
                    pVertexElement = pVertexDecl[i];
                    iLoc = this.getWebGLAttributeLocation(pVertexElement.usage);
                    if(iLoc < 0) {
                        akra.logger.setSourceLocation("WebGLShaderProgram.ts", 352);
                        akra.logger.warning("founded invalid GLSL attribute location(guid: %s): %s", this.getGuid(), pVertexElement.usage);
                        ; ;
                        continue;
                    }
                    pWebGLRenderer.bindWebGLBuffer(34962, (pVertexBuffer).getWebGLBuffer());
                    pWebGLContext.vertexAttribPointer(iLoc, pVertexElement.count, pVertexElement.type, false, iStride, pVertexElement.offset);
                }
                return true;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.getWebGLAttributeLocation = function (sName) {
                return this._pWebGLAttributeLocations[sName] || -1;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.getWebGLUniformLocation = function (sName) {
                var iLoc = this._pWebGLUniformLocations[sName];
                if(!akra.isDef(iLoc)) {
                    akra.logger.setSourceLocation("WebGLShaderProgram.ts", 379);
                    akra.logger.warning("could not find location for GLSL attribute(guid: %s): %s", this.getGuid(), sName);
                    ; ;
                }
                return null;
            }/**@inline*/ ;
            WebGLShaderProgram.prototype.getWebGLProgram = function () {
                return this._pWebGLProgram;
            };
            WebGLShaderProgram.prototype.createWebGLShader = function (eType, csCode) {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var pWebGLShader = pWebGLContext.createShader(eType);
                pWebGLContext.shaderSource(pWebGLShader, csCode);
                pWebGLContext.compileShader(pWebGLShader);
                if(!pWebGLContext.getShaderParameter(pWebGLShader, 35713)) {
                    akra.logger.setSourceLocation("WebGLShaderProgram.ts", 401);
                    akra.logger.error("cannot compile GLSL shader(guid: %d)", this.getGuid());
                    ; ;
                    var sInfo = pWebGLContext.getShaderInfoLog(pWebGLShader);
                    var sCode = pWebGLContext.getShaderSource(pWebGLShader) || csCode;
                    akra.logger.setSourceLocation("WebGLShaderProgram.ts", 406);
                    akra.logger.log("shader errors: \n %s \n----------\n %s", sInfo, sCode);
                    ; ;
                    return null;
                }
                return pWebGLShader;
            };
            WebGLShaderProgram.prototype.obtainWebGLUniforms = function () {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                var nUniforms = pWebGLContext.getProgramParameter(this._pWebGLProgram, 35718);
                var pUniformLocations = {
                };
                var iLoc;
                var pUniformInfo;
                for(var i = 0; i < nUniforms; ++i) {
                    pUniformInfo = pWebGLContext.getActiveUniform(this._pWebGLProgram, i);
                    iLoc = pWebGLContext.getUniformLocation(this._pWebGLProgram, pUniformInfo.name);
                    pUniformLocations[pUniformInfo.name] = iLoc;
                }
                this._pWebGLUniformLocations = pUniformLocations;
            };
            WebGLShaderProgram.prototype.obtainWebGLAttributes = function () {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                ; ;
                var nAttributes = pWebGLContext.getProgramParameter(this._pWebGLProgram, 35721);
                var pAttributeLocations = {
                };
                var pAttributesInfo = [];
                var iLoc;
                var pAttributeInfo;
                for(var i = 0; i < nAttributes; ++i) {
                    pAttributeInfo = pWebGLContext.getActiveAttrib(this._pWebGLProgram, i);
                    iLoc = pWebGLContext.getAttribLocation(this._pWebGLProgram, pAttributeInfo.name);
                    if(iLoc < 0 || !akra.isDef(iLoc)) {
                        akra.logger.setSourceLocation("WebGLShaderProgram.ts", 445);
                        akra.logger.warning("could not get GLSL attribute location(guid: %s): %s", this.getGuid(), pAttributeInfo.name);
                        ; ;
                    }
                    pAttributeLocations[pAttributeInfo.name] = iLoc;
                    pAttributesInfo[iLoc] = pAttributeInfo;
                }
                this._pWebGLAttributeLocations = pAttributeLocations;
                this._pWebGLAttributesInfo = pAttributesInfo;
            };
            return WebGLShaderProgram;
        })(akra.core.pool.ResourcePoolItem);
        webgl.WebGLShaderProgram = WebGLShaderProgram;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLVertexTexture = (function (_super) {
            __extends(WebGLVertexTexture, _super);
            function WebGLVertexTexture() {
                /*pManager*/
                        _super.call(this);
                this._iWidth = 0;
                this._iHeight = 0;
                this._ePixelFormat = akra.EPixelFormats.FLOAT32_RGBA;
                //переменная нужна, чтобы проигнорировать обновление копии, обычно, это не требуется
                this._bForceUpdateBackupCopy = true;
                this._pLockData = null;
            }
            Object.defineProperty(WebGLVertexTexture.prototype, "type", {
                get: /**@inline*/ function () {
                    return akra.EVertexBufferTypes.TBO;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WebGLVertexTexture.prototype, "byteLength", {
                get: function () {
                    return akra.pixelUtil.getMemorySize(this._iWidth, this._iHeight, 1, this._ePixelFormat);
                }/*pManager: IResourcePoolManager*/
                ,
                enumerable: true,
                configurable: true
            });
            WebGLVertexTexture.prototype.create = function (iByteSize, iFlags, pData) {
                if (typeof iFlags === "undefined") { iFlags = akra.EHardwareBufferFlags.STATIC; }
                if (typeof pData === "undefined") { pData = null; }
                var iMinWidth = 32;
                var iWidth, iHeight;
                var pTextureData = null;
                var pDataU8 = pData;
                iByteSize = akra.math.max(iByteSize, akra.pixelUtil.getMemorySize(iMinWidth, iMinWidth, 1, this._ePixelFormat));
                if((((iFlags) & (akra.EHardwareBufferFlags.READABLE)) != 0)) {
                    ((iFlags) |= (akra.EHardwareBufferFlags.BACKUP_COPY));
                }
                _super.prototype.create.call(this, iByteSize, iFlags, pData);
                var pPOTSize = akra.math.calcPOTtextureSize(akra.math.ceil(iByteSize / akra.pixelUtil.getNumElemBytes(this._ePixelFormat)));
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var i;
                iWidth = pPOTSize[0];
                iHeight = pPOTSize[1];
                akra.logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 61);
                akra.logger.assert(this._pWebGLTexture == null, "webgl texture already allocated");
                ; ;
                this._iWidth = iWidth;
                this._iHeight = iHeight;
                this._iFlags = iFlags;
                akra.logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 67);
                akra.logger.assert(pWebGLContext !== null, "cannot grab webgl context");
                ; ;
                //Софтварного рендеринга буфера у нас нет
                akra.logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 70);
                akra.logger.assert(!this.isSoftware(), "no sftware rendering");
                ; ;
                //Если есть локальная копия то буфер можно читать
                if(this.isBackupPresent()) {
                    ((this._iFlags) |= (akra.EHardwareBufferFlags.READABLE));
                }
                akra.logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 78);
                akra.logger.assert(!pData || pData.byteLength <= iByteSize, "Размер переданного массива больше переданного размера буфера");
                ; ;
                this._pWebGLTexture = pWebGLRenderer.createWebGLTexture();
                this._eWebGLFormat = webgl.getWebGLOriginFormat(this._ePixelFormat);
                this._eWebGLType = webgl.getWebGLOriginDataType(this._ePixelFormat);
                if(!this._pWebGLTexture) {
                    akra.logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 85);
                    akra.logger.criticalError("Не удалось создать буфер");
                    ; ;
                    this.destroy();
                    return false;
                }
                if(pData) {
                    if(pData.BYTES_PER_ELEMENT > 1) {
                        pDataU8 = new Uint8Array(pData, pData.byteOffset, pData.byteLength);
                    }
                    pTextureData = new Uint8Array(this.byteLength);
                    pTextureData.set(pDataU8);
                }
                pWebGLRenderer.bindWebGLTexture(3553, this._pWebGLTexture);
                pWebGLContext.texImage2D(3553, 0, this._eWebGLFormat, this._iWidth, this._iHeight, 0, this._eWebGLFormat, this._eWebGLType, pTextureData);
                var pProgram = this.getManager().shaderProgramPool.findResource("WEBGL_update_vertex_texture");
                if(akra.isNull(pProgram)) {
                    pProgram = this.getManager().shaderProgramPool.createResource("WEBGL_update_vertex_texture");
                    pProgram.create("																									\n	        	uniform sampler2D sourceTexture;																	\n				attribute vec4  VALUE;																				\n				attribute float INDEX;																				\n				attribute float SHIFT;																				\n				                      																				\n				uniform vec2 size;																					\n				varying vec4 color;																					\n				                   																					\n				void main(void){																					\n				    vec4 value = VALUE;																				\n				    float  serial = INDEX;																			\n				                          																			\n				    int shift = int(SHIFT);																			\n				    if (shift != 0) {																				\n				        color = texture2D(sourceTexture,                                        					\n				            vec2((mod(serial, size.x) +.5 ) / size.x, (floor(serial / size.x) + .5) / size.y)		\n				            );																						\n																													\n																													\n				        if (shift == 1) {																			\n				            color = vec4(color.r, value.gba);														\n				        }																							\n				        else if (shift == 2) {																		\n				            color = vec4(color.rg, value.ba);														\n				        }																							\n				        else if (shift == 3) {																		\n				            color = vec4(color.rgb, value.a);														\n				        }																							\n				        else if (shift == -1) {																		\n				            color = vec4(value.r, color.gba);														\n				        }																							\n				        else if (shift == -2) {																		\n				            color = vec4(value.rg, color.ba);														\n				        }																							\n				        else {																						\n				            color = vec4(value.rgb, color.a);														\n				        }																							\n				    }																								\n				    else {																							\n				        color = value;																				\n				    }																								\n				    gl_Position = vec4(2. * (mod(serial, size.x) + .5) / size.x - 1.,								\n				                    2. * (floor(serial / size.x)  + .5) / size.y - 1., 0., 1.);						\n				}																									\n				", "									\n				#ifdef GL_ES                        \n				    precision highp float;          \n				#endif								\n				varying vec4 color;                 \n				                                    \n				void main(void) {                   \n				    gl_FragColor = color;           \n				}                                   \n				");
                }
                return true;
            };
            WebGLVertexTexture.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                pWebGLRenderer.deleteWebGLTexture(this._pWebGLTexture);
                this._pWebGLTexture = null;
            };
            WebGLVertexTexture.prototype.readData = function (iOffset, iSize, ppDest) {
                akra.logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 184);
                akra.logger.assert(!akra.isNull(this._pWebGLTexture), "Буффер еще не создан");
                ; ;
                if(!this.isBackupPresent()) {
                    return false;
                }
                if(arguments.length === 1) {
                    this._pBackupCopy.readData(arguments[0]);
                } else {
                    this._pBackupCopy.readData(iOffset, iSize, ppDest);
                }
                return true;
            };
            WebGLVertexTexture.prototype.writeData = function (pData, iOffset, iSize, bDiscardWholeBuffer) {
                if (typeof bDiscardWholeBuffer === "undefined") { bDiscardWholeBuffer = false; }
                /*предпологается, что float*/
                                var iTypeSize = akra.pixelUtil.getComponentTypeBits(this._ePixelFormat) / 8, nElementsPerPix = /*число float'ов в пикселе*/
                akra.pixelUtil.getComponentCount(this._ePixelFormat), iFrom, iCount;
                /*номер float'a с которого начинается обновление*/
                /*исло float'ов для обновления*/
                /*данные для обновления*/
                var pBufferData;
                /*смещение внутри первого пикселя*/
                                var iLeftShift, iRightShift, iBeginPix, iEndPix, nPixels, nElements;
                /*смещение внутри последнего пикселя*/
                /*пиксель с которого начинается обновление*/
                /*пиксель на котором заканчивается обновление*/
                /*число пикселей*/
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var pDataU8 = pData;
                akra.logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 222);
                akra.logger.assert(bDiscardWholeBuffer === false, "Discard option temporary unsupported.");
                ; ;
                if(pData.BYTES_PER_ELEMENT > 1) {
                    pDataU8 = new Uint8Array(pData.buffer, pData.byteOffset, pData.byteLength);
                }
                iOffset = iOffset || 0;
                iSize = iSize || pData.byteLength;
                pDataU8 = pDataU8.subarray(0, iSize);
                if(this.byteLength < iOffset + iSize) {
                    this.resize(iOffset + iSize);
                }
                if(this.isBackupPresent() && this._bForceUpdateBackupCopy) {
                    this._pBackupCopy.writeData(pDataU8, iOffset);
                }
                this._bForceUpdateBackupCopy = true;
                akra.logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 243);
                akra.logger.assert(iOffset % iTypeSize === 0 && iSize % iTypeSize === 0, "Incorrect data size or offset");
                ; ;
                iFrom = iOffset / iTypeSize;
                iCount = iSize / iTypeSize;
                iLeftShift = iFrom % nElementsPerPix;
                iRightShift = ((iFrom + iCount) % nElementsPerPix);
                iBeginPix = Math.floor(iFrom / nElementsPerPix);
                iEndPix = Math.floor((iFrom + iCount) / nElementsPerPix);
                nPixels = Math.ceil((iFrom + iCount) / nElementsPerPix) - Math.floor(iFrom / nElementsPerPix);
                nElements = nPixels * nElementsPerPix;
                pBufferData = new Float32Array(pDataU8.buffer, pDataU8.byteOffset);
                if(iLeftShift === 0 && iRightShift === 0) {
                    var iWidth = this._iWidth;
                    var iYmin = Math.floor(iBeginPix / iWidth);
                    var iYmax = Math.ceil(iEndPix / iWidth);
                    var iXbegin = iBeginPix % iWidth;
                    var iXend = iEndPix % iWidth;
                    var iHeight = iYmax - iYmin;
                    var iBeginElement = 0, iEndElement = 0;
                    //hack: if iEndPixel is first pixel from next row
                    iXend = (iXend === 0 ? iWidth : iXend);
                    //FIX THIS, move this function from here...
                    function updatePixelRect(iX, iY, iW, iH) {
                        iBeginElement = iEndElement;
                        iEndElement = iW * iH * nElementsPerPix + iEndElement;
                        pWebGLRenderer.bindWebGLTexture(3553, this._pWebGLTexture);
                        pWebGLContext.texSubImage2D(3553, 0, iX, iY, iW, iH, this._eWebGLFormat, this._eWebGLType, pBufferData.subarray(iBeginElement, iEndElement));
                    }
                    ; ;
                    if(iHeight === 1) {
                        updatePixelRect(iXbegin, iYmin, iXend - iXbegin, 1);
                    } else {
                        updatePixelRect(iXbegin, iYmin, iWidth - iXbegin, 1);
                        if(iHeight > 2) {
                            updatePixelRect(0, iYmin + 1, iWidth, iHeight - 2);
                        }
                        updatePixelRect(0, iYmax - 1, iXend, 1);
                    }
                } else {
                    if(this.isBackupPresent()) {
                        var iRealOffset = iBeginPix * nElementsPerPix * iTypeSize;
                        var iRealSize = nElements * iTypeSize;
                        var pTempData = this._pBackupCopy.lock(iRealOffset, iRealSize);
                        //var iTotalSize: uint 	= iRealOffset + iRealSize;
                        this._bForceUpdateBackupCopy = false;
                        return this.writeData(pTempData, iRealOffset, iRealSize);
                    } else {
                        var pMarkupDataIndex = new Float32Array(nPixels);
                        var pMarkupDataShift = new Float32Array(nPixels);
                        var pRealData = new Float32Array(nElements);
                        pMarkupDataIndex[0] = iBeginPix;
                        pMarkupDataShift[0] = iLeftShift;
                        pMarkupDataIndex[nPixels - 1] = iBeginPix + nPixels - 1;
                        pMarkupDataShift[nPixels - 1] = -iRightShift;
                        for(var i = 1; i < nPixels - 1; ++i) {
                            pMarkupDataIndex[i] = iBeginPix + i;
                        }
                        for(var i = 0; i < iCount; i++) {
                            pRealData[iLeftShift + i] = pBufferData[i];
                        }
                        var pShaderSource;
                        var pWebGLFramebuffer = pWebGLRenderer.createWebGLFramebuffer();
                        var pWebGLProgram = this.getManager().shaderProgramPool.findResource("WEBGL_update_vertex_texture");
                        var pValueBuffer = pWebGLRenderer.createWebGLBuffer();
                        var pMarkupIndexBuffer = pWebGLRenderer.createWebGLBuffer();
                        var pMarkupShiftBuffer = pWebGLRenderer.createWebGLBuffer();
                        akra.logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 335);
                        akra.logger.assert(akra.isDef(pWebGLProgram), "cound not find WEBGL_update_vertex_texture program");
                        ; ;
                        pWebGLRenderer.disableAllWebGLVertexAttribs();
                        pWebGLRenderer.bindWebGLFramebuffer(36160, pWebGLFramebuffer);
                        pWebGLRenderer.useWebGLProgram(pWebGLProgram.getWebGLProgram());
                        //FIXME: set weblg states (GL_DEPTH_FUNC, GL_***)
                        pWebGLContext.framebufferTexture2D(36160, 36064, 3553, this._pWebGLTexture, 0);
                        pWebGLRenderer.bindWebGLBuffer(34962, pValueBuffer);
                        pWebGLContext.bufferData(34962, pRealData, 35040);
                        pWebGLContext.vertexAttribPointer(pWebGLProgram.getWebGLAttributeLocation("VALUE"), 4, 5126, false, 0, 0);
                        pWebGLRenderer.bindWebGLBuffer(34962, pMarkupIndexBuffer);
                        pWebGLContext.bufferData(34962, pMarkupDataIndex, 35040);
                        pWebGLContext.vertexAttribPointer(pWebGLProgram.getWebGLAttributeLocation("INDEX"), 1, 5126, false, 0, 0);
                        pWebGLRenderer.bindWebGLBuffer(34962, pMarkupShiftBuffer);
                        pWebGLContext.bufferData(34962, pMarkupDataShift, 35040);
                        pWebGLContext.vertexAttribPointer(pWebGLProgram.getWebGLAttributeLocation("SHIFT"), 1, 5126, false, 0, 0);
                        pWebGLRenderer.bindWebGLTexture(3553, this._pWebGLTexture);
                        pWebGLRenderer.activateWebGLTexture(33984);
                        pWebGLContext.uniform2i("size", this._iWidth, this._iHeight);
                        pWebGLContext.uniform1i("sourceTexture", 0);
                        pWebGLContext.viewport(0, 0, this._iWidth, this._iHeight);
                        pWebGLContext.drawArrays(0, 0, nPixels);
                        pWebGLContext.flush();
                        pWebGLContext.framebufferTexture2D(36160, 36064, 3553, null, 0);
                        pWebGLRenderer.bindWebGLBuffer(34962, null);
                        pWebGLRenderer.deleteWebGLBuffer(pValueBuffer);
                        pWebGLRenderer.deleteWebGLBuffer(pMarkupShiftBuffer);
                        pWebGLRenderer.deleteWebGLBuffer(pMarkupIndexBuffer);
                        pWebGLRenderer.bindWebGLFramebuffer(36160, null);
                        pWebGLRenderer.deleteWebGLFramebuffer(pWebGLFramebuffer);
                    }
                }
                return true;
            };
            WebGLVertexTexture.prototype.resize = function (iSize) {
                var eUsage;
                var pData;
                var iMax = 0;
                var pVertexData;
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                if(this.isBackupPresent()) {
                    return false;
                }
                if(iSize < this.byteLength) {
                    for(var k = 0; k < this._pVertexDataArray.length; ++k) {
                        pVertexData = this._pVertexDataArray[k];
                        if(pVertexData.byteOffset + pVertexData.byteLength > iMax) {
                            iMax = pVertexData.byteOffset + pVertexData.byteLength;
                        }
                    }
                    akra.logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 410);
                    akra.logger.assert(iMax <= iSize, "Уменьшение невозможно. Страая разметка не укладывается в новый размер");
                    ; ;
                }
                if(pWebGLContext.isTexture(this._pWebGLTexture)) {
                    pWebGLRenderer.deleteWebGLTexture(this._pWebGLTexture);
                }
                this._pWebGLTexture = pWebGLRenderer.createWebGLTexture();
                if(!this._pWebGLTexture) {
                    akra.logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 421);
                    akra.logger.criticalError("Не удалось создать текстуру");
                    ; ;
                    this.destroy();
                    return false;
                }
                pWebGLRenderer.bindWebGLTexture(3553, this._pWebGLTexture);
                pData = new Uint8Array(this.byteLength);
                if(this.readData(pData)) {
                    akra.logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 433);
                    akra.logger.warning("cannot read data from buffer");
                    ; ;
                    return false;
                }
                this.writeData(pData, 0, this.byteLength);
                this._pBackupCopy.resize(iSize);
                this.notifyAltered();
                return true;
            };
            WebGLVertexTexture.prototype.lockImpl = function (iOffset, iSize, iLockFlags) {
                var pRetData = new Uint8Array(iSize);
                this.readData(iOffset, iSize, pRetData);
                this._pLockData = pRetData;
                return pRetData;
            };
            WebGLVertexTexture.prototype.unlockImpl = function () {
                this.writeData(this._pLockData, this._iLockStart, this._iLockSize);
            };
            WebGLVertexTexture.prototype.copyBackupToRealImpl = function (pRealData, pBackupData, iLockFlags) {
                pRealData.set(pBackupData);
            };
            return WebGLVertexTexture;
        })(akra.core.pool.resources.VertexBuffer);
        webgl.WebGLVertexTexture = WebGLVertexTexture;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (data) {
        var IndexData = (function () {
            function IndexData(pIndexBuffer, id, iOffset, iCount, ePrimitiveType, eElementsType) {
                if (typeof ePrimitiveType === "undefined") { ePrimitiveType = akra.EPrimitiveTypes.TRIANGLELIST; }
                if (typeof eElementsType === "undefined") { eElementsType = akra.EDataTypes.UNSIGNED_SHORT; }
                akra.logger.setSourceLocation("data/IndexData.ts", 36);
                akra.logger.assert(eElementsType == akra.EDataTypes.UNSIGNED_SHORT || eElementsType == akra.EDataTypes.UNSIGNED_BYTE || eElementsType == akra.EDataTypes.UNSIGNED_INT, "supported only short, byte, uint data types.");
                ; ;
                this._pIndexBuffer = pIndexBuffer;
                this._iOffset = iOffset;
                this._iLength = iCount;
                this._iId = id;
                akra.logger.setSourceLocation("data/IndexData.ts", 43);
                akra.logger.assert(pIndexBuffer.byteLength >= this.byteLength + this.byteOffset, "out of buffer limits.");
                ; ;
            }
            Object.defineProperty(IndexData.prototype, "id", {
                get: /**@inline*/ function () {
                    return this._iId;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IndexData.prototype, "type", {
                get: function () {
                    return this._eElementsType;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IndexData.prototype, "length", {
                get: /**@inline*/ function () {
                    return this._iLength;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IndexData.prototype, "bytesPerIndex", {
                get: /**@inline*/ function () {
                    return akra.getTypeSize(this._eElementsType);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IndexData.prototype, "byteOffset", {
                get: /**@inline*/ function () {
                    return this._iOffset;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IndexData.prototype, "byteLength", {
                get: /**@inline*/ function () {
                    return this._iLength * this.bytesPerIndex;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IndexData.prototype, "buffer", {
                get: /**@inline*/ function () {
                    return this._pIndexBuffer;
                },
                enumerable: true,
                configurable: true
            });
            IndexData.prototype.getData = function (iOffset, iSize) {
                akra.logger.setSourceLocation("data/IndexData.ts", 48);
                akra.logger.assert(iOffset + iSize <= this.byteLength, "out of buffer limits");
                ; ;
                var pBuffer = new Uint8Array(iSize);
                if(this._pIndexBuffer.readData(this.byteOffset + iOffset, iSize, pBuffer)) {
                    return pBuffer.buffer;
                }
                akra.logger.setSourceLocation("data/IndexData.ts", 55);
                akra.logger.error("cannot read data from index buffer");
                ; ;
                return null;
            };
            IndexData.prototype.setData = function (pData, iOffset, iCount) {
                if (typeof iOffset === "undefined") { iOffset = 0; }
                if (typeof iCount === "undefined") { iCount = pData.byteLength / this.bytesPerIndex; }
                akra.logger.setSourceLocation("data/IndexData.ts", 61);
                akra.logger.assert((iOffset + iCount) * this.bytesPerIndex <= this.byteLength, "out of buffer limits.");
                ; ;
                return this._pIndexBuffer.writeData(pData, this.byteOffset + iOffset * this.bytesPerIndex, iCount * this.bytesPerIndex);
            };
            IndexData.prototype.destroy = function () {
                this._pIndexBuffer = null;
                this._iOffset = undefined;
                this._iLength = undefined;
                this._eElementsType = undefined;
                this._eElementsType = undefined;
            }/**@inline*/ ;
            IndexData.prototype.getPrimitiveType = function () {
                return this._ePrimitiveType;
            }/**@inline*/ ;
            IndexData.prototype.getPrimitiveCount = function (iIndexCount) {
                switch(arguments.length) {
                    case 0: {
                        // when no count is specified, use the total count of indices
                        return this.getPrimitiveCount(this.length);

                    }
                    case 1: {
                        var iCount = iIndexCount;
                        switch(this._ePrimitiveType) {
                            case akra.EPrimitiveTypes.TRIANGLELIST: {
                                return iCount / 3.0;

                            }
                            case akra.EPrimitiveTypes.POINTLIST: {
                                return iCount;

                            }
                            case akra.EPrimitiveTypes.TRIANGLESTRIP:
                            case akra.EPrimitiveTypes.TRIANGLEFAN: {
                                return iCount / 3 - 2;

                            }
                            default: {
                                akra.logger.setSourceLocation("data/IndexData.ts", 98);
                                akra.logger.error("todo: count for other types..");
                                ; ;

                            }
                        }

                    }
                }
                return 0;
            }/**@inline*/ ;
            IndexData.prototype.getBufferHandle = function () {
                return this._pIndexBuffer.resourceHandle;
            };
            return IndexData;
        })();
        data.IndexData = IndexData;        
    })(akra.data || (akra.data = {}));
    var data = akra.data;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var IndexBuffer = (function (_super) {
                    __extends(IndexBuffer, _super);
                    function IndexBuffer() {
                        /*pManager*/
                                        _super.call(this);
                        this._pIndexDataArray = [];
                        this._iDataCounter = 0;
                    }
                    Object.defineProperty(IndexBuffer.prototype, "length", {
                        get: /**@inline*/ function () {
                            return this._pIndexDataArray.length;
                        }/*pManager: IResourcePoolManager*/
                        ,
                        enumerable: true,
                        configurable: true
                    });
                    IndexBuffer.prototype.create = function (iByteSize, iFlags, pData) {
                        _super.prototype.create.call(this, iFlags || 0);
                        if((((iFlags) & (akra.EHardwareBufferFlags.BACKUP_COPY)) != 0)) {
                            this._pBackupCopy = new resources.MemoryBuffer();
                            this._pBackupCopy.create(iByteSize);
                            this._pBackupCopy.writeData(pData, 0, iByteSize);
                        }
                        return true;
                    };
                    IndexBuffer.prototype.destroy = function () {
                        _super.prototype.destroy.call(this);
                        this._pBackupCopy.destroy();
                        this.freeIndexData();
                        this._iDataCounter = 0;
                    };
                    IndexBuffer.prototype.getIndexData = function (iOffset, iCount, ePrimitiveType, eElementsType) {
                        var pIndexData = new akra.data.IndexData(this, this._iDataCounter++, iOffset, iCount, ePrimitiveType, eElementsType);
                        this._pIndexDataArray.push(pIndexData);
                        return pIndexData;
                    };
                    IndexBuffer.prototype.getEmptyIndexData = function (iCount, ePrimitiveType, eElementsType) {
                        var pHole = new Array();
                        var i;
                        var pIndexData;
                        pHole[0] = {
                            start: 0,
                            end: this.byteLength
                        };
                        //console.log(pHole[0].end);
                        for(var k = 0; k < this._pIndexDataArray.length; ++k) {
                            pIndexData = this._pIndexDataArray[k];
                            for(i = 0; i < pHole.length; i++) {
                                //console.log("pHole:",pHole[i].start,pHole[i].end);
                                //Полностью попадает внутрь
                                if(pIndexData.byteOffset > pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength < pHole[i].end) {
                                    var iTemp = pHole[i].end;
                                    pHole[i].end = pIndexData.byteOffset;
                                    pHole.splice(i + 1, 0, {
                                        start: pIndexData.byteOffset + pIndexData.byteLength,
                                        end: iTemp
                                    });
                                    i--;
                                } else {
                                    if(pIndexData.byteOffset == pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength < pHole[i].end) {
                                        pHole[i].start = pIndexData.byteOffset + pIndexData.byteLength;
                                    } else {
                                        if(pIndexData.byteOffset > pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength == pHole[i].end) {
                                        } else {
                                            if(pIndexData.byteOffset == pHole[i].start && pIndexData.byteLength == (pHole[i].end - pHole[i].start)) {
                                                pHole.splice(i, 1);
                                                i--;
                                            } else {
                                                //Перекрывает снизу
                                                if(pIndexData.byteOffset < pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength > pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength < pHole[i].end) {
                                                    pHole[i].start = pIndexData.byteOffset + pIndexData.byteLength;
                                                } else {
                                                    if(pIndexData.byteOffset < pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength > pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength == pHole[i].end) {
                                                        pHole.splice(i, 1);
                                                        i--;
                                                    } else {
                                                        //Перекрывается сверху
                                                        if(pIndexData.byteOffset + pIndexData.byteLength > pHole[i].end && pIndexData.byteOffset > pHole[i].start && pIndexData.byteOffset < pHole[i].end) {
                                                            pHole[i].end = pIndexData.byteOffset;
                                                        } else {
                                                            if(pIndexData.byteOffset + pIndexData.byteLength > pHole[i].end && pIndexData.byteOffset == pHole[i].start && pIndexData.byteOffset < pHole[i].end) {
                                                                pHole.splice(i, 1);
                                                                i--;
                                                            } else {
                                                                //полнстью перекрывает
                                                                if(pIndexData.byteOffset < pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength > pHole[i].end) {
                                                                    i--;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        pHole.sort(function (a, b) {
                            return ((a.end - a.start) - (b.end - b.start));
                        });
                        for(i = 0; i < pHole.length; i++) {
                            if((pHole[i].end - pHole[i].start) >= iCount * akra.getTypeSize(eElementsType)) {
                                pIndexData = new akra.data.IndexData(this, this._iDataCounter++, pHole[i].start, iCount, ePrimitiveType, eElementsType);
                                this._pIndexDataArray.push(pIndexData);
                                return pIndexData;
                            }
                        }
                        return null;
                    };
                    IndexBuffer.prototype.freeIndexData = function (pIndexData) {
                        if(arguments.length == 0) {
                            for(var i = 0; i < this._pIndexDataArray.length; i++) {
                                this._pIndexDataArray[Number(i)].destroy();
                            }
                            this._pIndexDataArray = null;
                        } else {
                            for(var i = 0; i < this._pIndexDataArray.length; i++) {
                                if(this._pIndexDataArray[i] == pIndexData) {
                                    pIndexData.destroy();
                                    this._pIndexDataArray.splice(i, 1);
                                    this.notifyAltered();
                                    return true;
                                }
                            }
                            return false;
                        }
                        this.notifyAltered();
                        return true;
                    };
                    IndexBuffer.prototype.allocateData = function (ePrimitiveType, eElementsType, pData) {
                        var pIndexData;
                        var iCount = pData.byteLength / akra.getTypeSize(eElementsType);
                        akra.logger.setSourceLocation("core/pool/resources/IndexBuffer.ts", 164);
                        akra.logger.assert(iCount === akra.math.floor(iCount), "data size should be a multiple of the vertex declaration");
                        ; ;
                        pIndexData = this.getEmptyIndexData(iCount, ePrimitiveType, eElementsType);
                        pIndexData.setData(pData);
                        return pIndexData;
                    };
                    return IndexBuffer;
                })(resources.HardwareBuffer);
                resources.IndexBuffer = IndexBuffer;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLIndexBuffer = (function (_super) {
            __extends(WebGLIndexBuffer, _super);
            function WebGLIndexBuffer() {
                /*pManager*/
                        _super.call(this);
                this._pLockData = null;
            }
            Object.defineProperty(WebGLIndexBuffer.prototype, "byteLength", {
                get: /**@inline*/ function () {
                    return this._iByteSize;
                }/*pManager: IResourcePoolManager*/
                ,
                enumerable: true,
                configurable: true
            });
            WebGLIndexBuffer.prototype.create = function (iByteSize, iFlags, pData) {
                if (typeof iFlags === "undefined") { iFlags = akra.EHardwareBufferFlags.STATIC; }
                if (typeof pData === "undefined") { pData = null; }
                iByteSize = akra.math.max(iByteSize, 1024);
                if((((iFlags) & (akra.EHardwareBufferFlags.READABLE)) != 0)) {
                    ((iFlags) |= (akra.EHardwareBufferFlags.BACKUP_COPY));
                }
                _super.prototype.create.call(this, iByteSize, iFlags, pData);
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var i;
                akra.logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 45);
                akra.logger.assert(this._pWebGLBuffer == null, "webgl buffer already allocated");
                ; ;
                this._iByteSize = iByteSize;
                this._iFlags = iFlags;
                pWebGLContext = pWebGLRenderer.getWebGLContext();
                akra.logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 51);
                akra.logger.assert(pWebGLContext !== null, "cannot grab webgl context");
                ; ;
                //Софтварного рендеринга буфера у нас нет
                akra.logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 54);
                akra.logger.assert(!this.isSoftware(), "no sftware rendering");
                ; ;
                //Если есть локальная копия то буфер можно читать
                if(this.isBackupPresent()) {
                    ((this._iFlags) |= (akra.EHardwareBufferFlags.READABLE));
                }
                akra.logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 62);
                akra.logger.assert(!pData || pData.byteLength <= iByteSize, "Размер переданного массива больше переданного размера буфера");
                ; ;
                this._pWebGLBuffer = pWebGLRenderer.createWebGLBuffer();
                if(!this._pWebGLBuffer) {
                    akra.logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 68);
                    akra.logger.criticalError("cannot create WebGL index buffer");
                    ; ;
                    this.destroy();
                    return false;
                }
                pWebGLRenderer.bindWebGLBuffer(34963, this._pWebGLBuffer);
                pWebGLContext.bufferData(34963, this._iByteSize, webgl.getWebGLUsage(this._iFlags));
                if(pData) {
                    pWebGLContext.bufferSubData(34963, 0, akra.isArrayBuffer(pData) ? pData : pData.buffer);
                }
                return true;
            };
            WebGLIndexBuffer.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                var pWebGLRenderer = this.getEngine().getRenderer();
                pWebGLRenderer.deleteWebGLBuffer(this._pWebGLBuffer);
                this._pWebGLBuffer = null;
                this._iByteSize = 0;
            };
            WebGLIndexBuffer.prototype.readData = function (iOffset, iSize, ppDest) {
                akra.logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 99);
                akra.logger.assert(!akra.isNull(this._pWebGLBuffer), "WebGL buffer not exists");
                ; ;
                if(!this.isBackupPresent()) {
                    return false;
                }
                if(arguments.length === 1) {
                    this._pBackupCopy.readData(arguments[0]);
                } else {
                    this._pBackupCopy.readData(iOffset, iSize, ppDest);
                }
                return true;
            };
            WebGLIndexBuffer.prototype.writeData = function (pData, iOffset, iSize, bDiscardWholeBuffer) {
                if (typeof bDiscardWholeBuffer === "undefined") { bDiscardWholeBuffer = false; }
                akra.logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 119);
                akra.logger.assert(!akra.isNull(this._pWebGLBuffer), "WebGL buffer not exists");
                ; ;
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLBuffer(34963, this._pWebGLBuffer);
                akra.logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 126);
                akra.logger.assert(pData.byteLength <= iSize, "Размер переданного массива больше переданного размера");
                ; ;
                akra.logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 127);
                akra.logger.assert(this.byteLength >= iOffset + iSize, "Данные выйдут за предел буфера");
                ; ;
                var pU8Data = null;
                if(akra.isArrayBuffer(pData)) {
                    pU8Data = new Uint8Array(pData);
                } else {
                    pU8Data = new Uint8Array(pData.buffer, pData.byteOffset, pData.byteLength);
                }
                pU8Data = pU8Data.subarray(0, iSize);
                pWebGLContext.bufferSubData(34963, iOffset, pU8Data);
                if(this.isBackupPresent()) {
                    this._pBackupCopy.writeData(pU8Data, iOffset);
                }
                this.notifyAltered();
                return true;
            };
            WebGLIndexBuffer.prototype.resize = function (iSize) {
                var eUsage;
                var pData;
                var iMax = 0;
                var pIndexData;
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                if(this.isBackupPresent()) {
                    return false;
                }
                if(iSize < this.byteLength) {
                    for(var k = 0; k < this._pIndexDataArray.length; ++k) {
                        pIndexData = this._pIndexDataArray[k];
                        if(pIndexData.byteOffset + pIndexData.byteLength > iMax) {
                            iMax = pIndexData.byteOffset + pIndexData.byteLength;
                        }
                    }
                    akra.logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 174);
                    akra.logger.assert(iMax <= iSize, "Уменьшение невозможно. Страая разметка не укладывается в новый размер");
                    ; ;
                }
                if(pWebGLContext.isBuffer(this._pWebGLBuffer)) {
                    pWebGLRenderer.deleteWebGLBuffer(this._pWebGLBuffer);
                }
                eUsage = webgl.getWebGLUsage(this._iFlags);
                this._pWebGLBuffer = pWebGLRenderer.createWebGLBuffer();
                if(!this._pWebGLBuffer) {
                    akra.logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 186);
                    akra.logger.criticalError("cannot create WebGL index buffer");
                    ; ;
                    this.destroy();
                    return false;
                }
                pWebGLRenderer.bindWebGLBuffer(34963, this._pWebGLBuffer);
                pWebGLContext.bufferData(34963, iSize, eUsage);
                pData = new Uint8Array(this._iByteSize);
                if(this.readData(pData)) {
                    akra.logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 199);
                    akra.logger.warning("cannot read data from buffer");
                    ; ;
                    return false;
                }
                this.writeData(pData, 0, this._iByteSize);
                this._pBackupCopy.resize(iSize);
                this._iByteSize = iSize;
                this.notifyAltered();
                return true;
            }/**@inline*/ ;
            WebGLIndexBuffer.prototype.getWebGLBuffer = function () {
                return this._pWebGLBuffer;
            };
            WebGLIndexBuffer.prototype.lockImpl = function (iOffset, iSize, iLockFlags) {
                var pRetData = new Uint8Array(iSize);
                this.readData(iOffset, iSize, pRetData);
                this._pLockData = pRetData;
                return pRetData;
            };
            WebGLIndexBuffer.prototype.unlockImpl = function () {
                this.writeData(this._pLockData, this._iLockStart, this._iLockSize);
            };
            WebGLIndexBuffer.prototype.copyBackupToRealImpl = function (pRealData, pBackupData, iLockFlags) {
                pRealData.set(pBackupData);
            };
            return WebGLIndexBuffer;
        })(akra.core.pool.resources.IndexBuffer);
        webgl.WebGLIndexBuffer = WebGLIndexBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLInternalRenderBuffer = (function (_super) {
            __extends(WebGLInternalRenderBuffer, _super);
            function WebGLInternalRenderBuffer() {
                        _super.call(this);
                this._pWebGLRenderbuffer = null;
            }
            WebGLInternalRenderBuffer.prototype.create = function () {
                if(arguments.length !== 4) {
                    akra.logger.setSourceLocation("webgl/WebGLInternalRenderbuffer.ts", 20);
                    akra.logger.criticalError("Invalid number of arguments. For PixelBuffer it must be four");
                    ; ;
                }
                var iWebGLFormat = arguments[0];
                var iWidth = arguments[1];
                var iHeight = arguments[2];
                var bCreateStorage = arguments[3];
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                _super.prototype.create.call(this, iWidth, iHeight, 1, akra.webgl.getClosestAkraFormat(iWebGLFormat, akra.EPixelFormats.A8R8G8B8), 0);
                this._iWebGLInternalFormat = iWebGLFormat;
                this._pWebGLRenderbuffer = pWebGLRenderer.createWebGLRenderbuffer();
                pWebGLRenderer.bindWebGLRenderbuffer(36161, this._pWebGLRenderbuffer);
                if(bCreateStorage) {
                    pWebGLContext.renderbufferStorage(36161, iWebGLFormat, iWidth, iHeight);
                }
                this.notifyCreated();
                return true;
            };
            WebGLInternalRenderBuffer.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                pWebGLRenderer.deleteWebGLRenderbuffer(this._pWebGLRenderbuffer);
                this._pWebGLRenderbuffer = null;
            };
            WebGLInternalRenderBuffer.prototype._bindToFramebuffer = function (iAttachment, iZOffset) {
                akra.logger.setSourceLocation("webgl/WebGLInternalRenderbuffer.ts", 55);
                akra.logger.assert(iZOffset < this._iDepth);
                ; ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLContext.framebufferRenderbuffer(36160, iAttachment, 36161, this._pWebGLRenderbuffer);
            };
            return WebGLInternalRenderBuffer;
        })(webgl.WebGLPixelBuffer);
        webgl.WebGLInternalRenderBuffer = WebGLInternalRenderBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var DepthBuffer = (function (_super) {
                    __extends(DepthBuffer, _super);
                    function DepthBuffer() {
                                        _super.call(this);
                        this._iBitDepth = 0;
                        this._iWidth = 0;
                        this._iHeight = 0;
                        this._isManual = false;
                        this._pAttachedRenderTargetsList = null;
                    }
                    /**@inline*/                     Object.defineProperty(DepthBuffer.prototype, "bitDepth", {
                        get: function () {
                            return this._iBitDepth;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(DepthBuffer.prototype, "width", {
                        get: function () {
                            return this._iWidth;
                        }/**@inline*/ ,
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(DepthBuffer.prototype, "height", {
                        get: function () {
                            return this._iHeight;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    DepthBuffer.prototype.create = function (iBitDepth, iWidth, iHeight, isManual) {
                        this._iBitDepth = iBitDepth;
                        this._iWidth = iWidth;
                        this._iHeight = iHeight;
                        this._isManual = isManual;
                        this._pAttachedRenderTargetsList = [];
                        this.notifyCreated();
                        return true;
                    };
                    DepthBuffer.prototype.destroy = function () {
                        this.detachFromAllRenderTargets();
                        this._pAttachedRenderTargetsList = null;
                    };
                    DepthBuffer.prototype.destroyResource = function () {
                        this.destroy();
                        this.notifyDestroyed();
                        return true;
                    };
                    DepthBuffer.prototype.isManual = function () {
                        return this._isManual;
                    };
                    DepthBuffer.prototype.isCompatible = function (pTarget) {
                        if(this._iWidth >= pTarget.width && this._iHeight >= pTarget.height) {
                            return true;
                        }
                        return false;
                    };
                    DepthBuffer.prototype._notifyRenderTargetAttached = function (pTarget) {
                        akra.logger.setSourceLocation("core/pool/resources/DepthBuffer.ts", 70);
                        akra.logger.assert(this._pAttachedRenderTargetsList.indexOf(pTarget) === -1, "RenderTarget alrady has been attached to this DepthBuffer");
                        ; ;
                        this._pAttachedRenderTargetsList.push(pTarget);
                    };
                    DepthBuffer.prototype._notifyRenderTargetDetached = function (pTarget) {
                        var index = this._pAttachedRenderTargetsList.indexOf(pTarget);
                        akra.logger.setSourceLocation("core/pool/resources/DepthBuffer.ts", 78);
                        akra.logger.assert(index !== -1, "Can not detach RenderTarget from DepthBuffer beacuse it hasn`t been attached to it");
                        ; ;
                        this._pAttachedRenderTargetsList.splice(index, 1);
                    };
                    DepthBuffer.prototype.detachFromAllRenderTargets = function () {
                        var i = 0;
                        for(i = 0; i < this._pAttachedRenderTargetsList.length; i++) {
                            //If we call, detachDepthBuffer, we'll invalidate the iterators
                            this._pAttachedRenderTargetsList[i].detachDepthBuffer();
                        }
                        this._pAttachedRenderTargetsList.clear();
                    };
                    return DepthBuffer;
                })(pool.ResourcePoolItem);
                resources.DepthBuffer = DepthBuffer;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var RenderTexture = (function (_super) {
            __extends(RenderTexture, _super);
            function RenderTexture(pRenderer, pBuffer, iZOffset) {
                        _super.call(this, pRenderer);
                this._pBuffer = null;
                this._iZOffset = 0;
                this._pBuffer = pBuffer;
                this._iZOffset = iZOffset;
                this._iWidth = pBuffer.width;
                this._iHeight = pBuffer.height;
                this._iColorDepth = akra.pixelUtil.getNumElemBits(pBuffer.format);
            }
            RenderTexture.prototype.destroy = function () {
                this._pBuffer._clearRTT(this._iZOffset);
                this._pBuffer = null;
            }/**@inline*/ ;
            RenderTexture.prototype.suggestPixelFormat = function () {
                return this._pBuffer.format;
            };
            RenderTexture.prototype.copyContentsToMemory = function (pDest, eBuffer) {
                if(eBuffer === akra.EFramebuffer.AUTO) {
                    eBuffer = akra.EFramebuffer.FRONT;
                }
                if(eBuffer !== akra.EFramebuffer.FRONT) {
                    akra.logger.setSourceLocation("render/RenderTexture.ts", 41);
                    akra.logger.criticalError("Invalid buffer.");
                    ; ;
                }
                this._pBuffer.blitToMemory(pDest);
            };
            return RenderTexture;
        })(render.RenderTarget);
        render.RenderTexture = RenderTexture;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLRenderTexture = (function (_super) {
            __extends(WebGLRenderTexture, _super);
            function WebGLRenderTexture(pRenderer, pTarget) {
                        _super.call(this, pRenderer, pTarget, 0);
                this._pFrameBuffer = null;
                this._pFrameBuffer = new webgl.WebGLInternalFrameBuffer(pRenderer);
                this._pFrameBuffer.bindSurface(36064, pTarget);
                this._iWidth = this._pFrameBuffer.width;
                this._iHeight = this._pFrameBuffer.height;
            }
            WebGLRenderTexture.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
            };
            WebGLRenderTexture.prototype.requiresTextureFlipping = function () {
                return true;
            };
            WebGLRenderTexture.prototype.getCustomAttribute = function (sName) {
                if(sName === "FBO") {
                    return this._pFrameBuffer;
                }
            };
            WebGLRenderTexture.prototype.swapBuffers = function () {
                this._pFrameBuffer.swapBuffers();
            };
            WebGLRenderTexture.prototype.attachDepthBuffer = function (pDepthBuffer) {
                var bResult = false;
                bResult = _super.prototype.attachDepthBuffer.call(this, pDepthBuffer);
                if(bResult) {
                    this._pFrameBuffer.attachDepthBuffer(pDepthBuffer);
                }
                return bResult;
            };
            WebGLRenderTexture.prototype.attachDepthPixelBuffer = function (pBuffer) {
                var bResult = false;
                bResult = _super.prototype.attachDepthPixelBuffer.call(this, pBuffer);
                if(bResult) {
                    if(pBuffer.format !== akra.EPixelFormats.DEPTH_BYTE) {
                        this.detachDepthPixelBuffer();
                        return false;
                    }
                    this._pFrameBuffer.bindSurface(36096, pBuffer);
                    (pBuffer).addRef();
                }
                return bResult;
            };
            WebGLRenderTexture.prototype.detachDepthPixelBuffer = function () {
                this._pFrameBuffer.unbindSurface(36096);
                (this._pDepthPixelBuffer).release();
                _super.prototype.detachDepthPixelBuffer.call(this);
            };
            WebGLRenderTexture.prototype.detachDepthBuffer = function () {
                this._pFrameBuffer.detachDepthBuffer();
                _super.prototype.detachDepthBuffer.call(this);
            };
            return WebGLRenderTexture;
        })(akra.render.RenderTexture);
        webgl.WebGLRenderTexture = WebGLRenderTexture;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLInternalFrameBuffer = (function () {
            function WebGLInternalFrameBuffer(pWebGLRenderer) {
                this._pWebGLRenderer = null;
                this._pWebGLFramebuffer = null;
                this._pAttachments = null;
                this._pWebGLRenderer = pWebGLRenderer;
                this._pWebGLFramebuffer = this._pWebGLRenderer.createWebGLFramebuffer();
                this._pAttachments = {
                };
                for(var i = 0; i < akra.webgl.maxColorAttachments; i++) {
                    this._pAttachments[36064 + i] = null;
                }
                this._pAttachments[36096] = null;
                this._pAttachments[36128] = null;
                this._pAttachments[33306] = null;
            }
            WebGLInternalFrameBuffer.prototype.destroy = function () {
                this._pWebGLRenderer.deleteWebGLFramebuffer(this._pWebGLFramebuffer);
                this._pWebGLFramebuffer = null;
            }/**@inline*/ ;
            Object.defineProperty(WebGLInternalFrameBuffer.prototype, "width", {
                get: function () {
                    return this._pAttachments[36064].width;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WebGLInternalFrameBuffer.prototype, "height", {
                get: function () {
                    return this._pAttachments[36064].height;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WebGLInternalFrameBuffer.prototype, "format", {
                get: function () {
                    return this._pAttachments[36064].format;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            WebGLInternalFrameBuffer.prototype.getColorAttachment = function (iAttachment) {
                return this._pAttachments[36064 + iAttachment];
            }/**@inline*/ ;
            WebGLInternalFrameBuffer.prototype.getAttachment = function (iWebGLAttachment) {
                return this._pAttachments[iWebGLAttachment];
            };
            WebGLInternalFrameBuffer.prototype.bindSurface = function (iWebGLAttachment, pSurface) {
                if(!akra.isDef(this._pAttachments[iWebGLAttachment])) {
                    return;
                }
                this.releaseAttachment(iWebGLAttachment);
                this._pAttachments[iWebGLAttachment] = pSurface;
                if(this.checkAttachment(iWebGLAttachment)) {
                    this.bind();
                    (pSurface)._bindToFramebuffer(iWebGLAttachment, 0);
                    (pSurface).addRef();
                }
            };
            WebGLInternalFrameBuffer.prototype.unbindSurface = function (iWebGLAttachment) {
                if(!akra.isDef(this._pAttachments[iWebGLAttachment])) {
                    return;
                }
                var pWebGLContext = this._pWebGLRenderer.getWebGLContext();
                this.releaseAttachment(iWebGLAttachment);
                this._pAttachments[iWebGLAttachment] = null;
                pWebGLContext.framebufferRenderbuffer(36160, iWebGLAttachment, 36161, null);
            }/**@inline*/ ;
            WebGLInternalFrameBuffer.prototype.bindColorSurface = function (iAttachment, pSurface) {
                this.bindSurface(36064 + iAttachment, pSurface);
            }/**@inline*/ ;
            WebGLInternalFrameBuffer.prototype.bind = function () {
                this._pWebGLRenderer.bindWebGLFramebuffer(36160, this._pWebGLFramebuffer);
            };
            WebGLInternalFrameBuffer.prototype.attachDepthBuffer = function (pDepthBuffer) {
                if(!akra.isNull(pDepthBuffer)) {
                    var pDepthRenderBuffer = (pDepthBuffer).depthBuffer;
                    var pStencilRenderBuffer = (pDepthBuffer).stencilBuffer;
                    if(!akra.isNull(pDepthRenderBuffer)) {
                        pDepthRenderBuffer._bindToFramebuffer(36096, 0);
                        this.releaseAttachment(36096);
                        this._pAttachments[36096] = pDepthRenderBuffer;
                        pDepthRenderBuffer.addRef();
                    }
                    if(!akra.isNull(pStencilRenderBuffer)) {
                        pStencilRenderBuffer._bindToFramebuffer(36128, 0);
                        this.releaseAttachment(36128);
                        this._pAttachments[36128] = pStencilRenderBuffer;
                        pDepthRenderBuffer.addRef();
                    }
                    if(!this.checkAttachment(36096) || !this.checkAttachment(36128)) {
                        akra.logger.setSourceLocation("webgl/WebGLInternalFrameBuffer.ts", 117);
                        akra.logger.error("Invalid frame buffer depthbuffer attachment. Wrong size.");
                        ; ;
                        return;
                    }
                } else {
                    var pWebGLContext = this._pWebGLRenderer.getWebGLContext();
                    pWebGLContext.framebufferRenderbuffer(36160, 36096, 36161, null);
                    pWebGLContext.framebufferRenderbuffer(36160, 36128, 36161, null);
                    this.releaseAttachment(36096);
                    this.releaseAttachment(36128);
                    this._pAttachments[36096] = null;
                    this._pAttachments[36128] = null;
                }
            };
            WebGLInternalFrameBuffer.prototype.detachDepthBuffer = function () {
                var pWebGLContext = this._pWebGLRenderer.getWebGLContext();
                this._pWebGLRenderer.bindWebGLFramebuffer(36160, this._pWebGLFramebuffer);
                pWebGLContext.framebufferRenderbuffer(36160, 36096, 36161, null);
                pWebGLContext.framebufferRenderbuffer(36160, 36128, 36161, null);
                this.releaseAttachment(36096);
                this.releaseAttachment(36128);
                this._pAttachments[36096] = null;
                this._pAttachments[36128] = null;
            };
            WebGLInternalFrameBuffer.prototype.swapBuffers = function () {
            };
            WebGLInternalFrameBuffer.prototype.checkAttachment = function (iWebGLAttachment) {
                if(iWebGLAttachment === 36064) {
                    var isOk = true;
                    for(var i = 1; i < akra.webgl.maxColorAttachments; i++) {
                        isOk = this.checkAttachment(36064 + i);
                        if(!isOk) {
                            return false;
                        }
                    }
                    isOk = this.checkAttachment(36096);
                    if(!isOk) {
                        return false;
                    }
                    isOk = this.checkAttachment(36128);
                    if(!isOk) {
                        return false;
                    }
                    isOk = this.checkAttachment(33306);
                    if(!isOk) {
                        return false;
                    }
                    return true;
                } else {
                    var pBuffer = this._pAttachments[iWebGLAttachment];
                    if(akra.isNull(pBuffer)) {
                        return true;
                    }
                    if(this.width === 0 && this.height === 0) {
                        return true;
                    }
                    if(this.width !== pBuffer.width && this.height !== pBuffer.height) {
                        return false;
                    }
                    if(iWebGLAttachment > 36064 && iWebGLAttachment < 36064 + akra.webgl.maxColorAttachments) {
                        if(!akra.isNull(this._pAttachments[36064]) && this.format !== pBuffer.format) {
                            return false;
                        }
                    }
                    return true;
                }
            };
            WebGLInternalFrameBuffer.prototype.releaseAttachment = /**@inline*/ function (iWebGLAttachment) {
                if(!akra.isNull(this._pAttachments[iWebGLAttachment])) {
                    this._pAttachments[iWebGLAttachment].release();
                }
            };
            return WebGLInternalFrameBuffer;
        })();
        webgl.WebGLInternalFrameBuffer = WebGLInternalFrameBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLDepthBuffer = (function (_super) {
            __extends(WebGLDepthBuffer, _super);
            function WebGLDepthBuffer() {
                        _super.call(this);
                this._pDepthBuffer = null;
                this._pStencilBuffer = null;
            }
            /**@inline*/             Object.defineProperty(WebGLDepthBuffer.prototype, "depthBuffer", {
                get: function () {
                    return this._pDepthBuffer;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WebGLDepthBuffer.prototype, "stencilBuffer", {
                get: function () {
                    return this._pStencilBuffer;
                },
                enumerable: true,
                configurable: true
            });
            WebGLDepthBuffer.prototype.create = function () {
                if(arguments.length !== 5) {
                    akra.logger.setSourceLocation("webgl/WebGLDepthBuffer.ts", 30);
                    akra.logger.criticalError("Invalid number of arguments. For WebGLDepthBuffer it must be five");
                    ; ;
                }
                _super.prototype.create.call(this, 0, arguments[2], arguments[3], arguments[4]);
                var pDepth = arguments[0];
                var pStencil = arguments[1];
                this._pDepthBuffer = pDepth;
                this._pStencilBuffer = pStencil;
                if(!akra.isNull(pDepth)) {
                    switch(pDepth._getWebGLFormat()) {
                        case 33189: {
                            this._iBitDepth = 16;
                            break;

                        }
                        case 33190:
                        case 33191:
                        case 35056: {
                            if(akra.webgl.hasExtension("OES_depth24") || akra.webgl.hasExtension("OES_depth32") || akra.webgl.hasExtension("OES_packed_depth_stencil")) {
                                this._iBitDepth = 32;
                            }
                            break;

                        }
                    }
                }
                return true;
            };
            WebGLDepthBuffer.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                if(!akra.isNull(this._pStencilBuffer) && this._pStencilBuffer !== this._pDepthBuffer) {
                    this._pStencilBuffer.release();
                }
                if(!akra.isNull(this._pDepthBuffer)) {
                    this._pDepthBuffer.release();
                }
                this._pStencilBuffer = null;
                this._pDepthBuffer = null;
            };
            WebGLDepthBuffer.prototype.isCompatible = function (pTarget) {
                if(this._iWidth >= pTarget.width && this._iHeight >= pTarget.height) {
                    return true;
                }
                return false;
            };
            return WebGLDepthBuffer;
        })(akra.core.pool.resources.DepthBuffer);
        webgl.WebGLDepthBuffer = WebGLDepthBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            //is this class really singleton??
            var ResourcePoolManager = (function () {
                function ResourcePoolManager(pEngine) {
                    /** Списки пулов по семействам ресурсов */
                    this.pResourceFamilyList = null;
                    /** Карта пулов по коду ресурса */
                    this.pResourceTypeMap = null;
                    /** Ресурс для ожидания остальных */
                    this.pWaiterResource = null;
                    //super();
                    this.pEngine = pEngine;
                    this.pResourceFamilyList = new Array(akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES);
                    for(var i = 0; i < akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES; i++) {
                        this.pResourceFamilyList[i] = new Array();
                    }
                    this.pResourceTypeMap = new Array();
                    /*this*/
                    this.pWaiterResource = new core.pool.ResourcePoolItem();
                    this.createDeviceResource();
                }
                Object.defineProperty(ResourcePoolManager.prototype, "surfaceMaterialPool", {
                    get: function () {
                        return this.pSurfaceMaterialPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "effectPool", {
                    get: function () {
                        return this.pEffectPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "renderMethodPool", {
                    get: function () {
                        return this.pRenderMethodPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "vertexBufferPool", {
                    get: function () {
                        return this.pVertexBufferPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "indexBufferPool", {
                    get: function () {
                        return this.pIndexBufferPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "modelPool", {
                    get: function () {
                        return this.pModelPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "imagePool", {
                    get: function () {
                        return this.pImagePool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "texturePool", {
                    get: function () {
                        return this.pTexturePool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "videoBufferPool", {
                    get: function () {
                        return this.pVideoBufferPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "shaderProgramPool", {
                    get: function () {
                        return this.pShaderProgramPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "componentPool", {
                    get: function () {
                        return this.pComponentPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "textureBufferPool", {
                    get: function () {
                        return this.pTextureBufferPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "renderBufferPool", {
                    get: function () {
                        return this.pRenderBufferPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "depthBufferPool", {
                    get: function () {
                        return this.pDepthBufferPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                ResourcePoolManager.prototype.initialize = function () {
                    this.registerDeviceResources();
                    return true;
                };
                ResourcePoolManager.prototype.destroy = function () {
                    this.unregisterDeviceResources();
                };
                ResourcePoolManager.prototype.registerResourcePool = function (pCode, pPool) {
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 108);
                    akra.logger.assert(pCode.family >= 0 && pCode.family < akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES, "invalid code familyi index");
                    ; ;
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 110);
                    akra.logger.assert(!akra.isDef(this.pResourceTypeMap[pCode.toNumber()]), "Resource type code already registered");
                    ; ;
                    this.pResourceTypeMap[pCode.toNumber()] = pPool;
                    this.pResourceFamilyList[pCode.family].push(pPool);
                };
                ResourcePoolManager.prototype.unregisterResourcePool = function (pCode) {
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 117);
                    akra.logger.assert(pCode.family >= 0, "invalid family index");
                    ; ;
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 118);
                    akra.logger.assert(pCode.family < akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES, "invalid family index");
                    ; ;
                    var iCode = pCode.toNumber();
                    var pPool = null;
                    if(this.pResourceTypeMap[iCode] != undefined) {
                        pPool = this.pResourceTypeMap[iCode];
                        delete this.pResourceTypeMap[iCode];
                    }
                    if(pPool != null) {
                        for(var i in this.pResourceFamilyList[pCode.family]) {
                            if(this.pResourceFamilyList[pCode.family][i] == pPool) {
                                delete this.pResourceFamilyList[pCode.family][i];
                                return pPool;
                            }
                        }
                    }
                    return pPool;
                };
                ResourcePoolManager.prototype.destroyResourceFamily = function (eFamily) {
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 141);
                    akra.logger.assert(eFamily < akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES, "invalid family index");
                    ; ;
                    for(var i in this.pResourceFamilyList[eFamily]) {
                        this.pResourceFamilyList[eFamily][i].destroyAll();
                    }
                };
                ResourcePoolManager.prototype.restoreResourceFamily = function (eFamily) {
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 150);
                    akra.logger.assert(eFamily >= 0, "invalid family index");
                    ; ;
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 151);
                    akra.logger.assert(eFamily < akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES, "invalid family index");
                    ; ;
                    for(var i in this.pResourceFamilyList[eFamily]) {
                        this.pResourceFamilyList[eFamily][i].restoreAll();
                    }
                };
                ResourcePoolManager.prototype.disableResourceFamily = function (eFamily) {
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 159);
                    akra.logger.assert(eFamily >= 0, "invalid family index");
                    ; ;
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 160);
                    akra.logger.assert(eFamily < akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES, "invalid family index");
                    ; ;
                    for(var i in this.pResourceFamilyList[eFamily]) {
                        this.pResourceFamilyList[eFamily][i].disableAll();
                    }
                };
                ResourcePoolManager.prototype.cleanResourceFamily = function (eFamily) {
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 168);
                    akra.logger.assert(eFamily >= 0, "invalid family index");
                    ; ;
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 169);
                    akra.logger.assert(eFamily < akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES, "invalid family index");
                    ; ;
                    for(var i in this.pResourceFamilyList[eFamily]) {
                        this.pResourceFamilyList[eFamily][i].clean();
                    }
                };
                ResourcePoolManager.prototype.destroyResourceType = function (pCode) {
                    if(akra.isDef(this.pResourceTypeMap[pCode.toNumber()])) {
                        this.pResourceTypeMap[pCode.toNumber()].destroyAll();
                    }
                };
                ResourcePoolManager.prototype.restoreResourceType = function (pCode) {
                    if(akra.isDef(this.pResourceTypeMap[pCode.toNumber()])) {
                        this.pResourceTypeMap[pCode.toNumber()].restoreAll();
                    }
                };
                ResourcePoolManager.prototype.disableResourceType = function (pCode) {
                    if(akra.isDef(this.pResourceTypeMap[pCode.toNumber()])) {
                        this.pResourceTypeMap[pCode.toNumber()].disableAll();
                    }
                };
                ResourcePoolManager.prototype.cleanResourceType = function (pCode) {
                    if(akra.isDef(this.pResourceTypeMap[pCode.toNumber()])) {
                        this.pResourceTypeMap[pCode.toNumber()].clean();
                    }
                };
                ResourcePoolManager.prototype.findResourcePool = function (pCode) {
                    if(akra.isDef(this.pResourceTypeMap[pCode.toNumber()])) {
                        return this.pResourceTypeMap[pCode.toNumber()];
                    }
                    return null;
                };
                ResourcePoolManager.prototype.findResourceHandle = function (pCode, sName) {
                    var pPool = this.findResourcePool(pCode);
                    var iHandle = akra.INVALID_INDEX;
                    if(!akra.isNull(pPool)) {
                        iHandle = pPool.findResourceHandle(sName);
                    }
                    return iHandle;
                };
                ResourcePoolManager.prototype.findResource = function (pCode, sName) {
                    var pPool = this.findResourcePool(pCode);
                    var pResult = null;
                    var iHandle;
                    if(akra.isString(arguments[1])) {
                        iHandle = pPool.findResourceHandle(sName);
                    } else {
                        if(akra.isInt(arguments[1])) {
                            iHandle = arguments[1];
                        }
                    }
                    if(pPool != null && iHandle != akra.INVALID_INDEX) {
                        pResult = pPool.getResource(iHandle);
                    }
                    return pResult;
                };
                ResourcePoolManager.prototype.monitorInitResources = function (fnMonitor) {
                    var me = this;
                    this.pWaiterResource.setStateWatcher(akra.EResourceItemEvents.LOADED, function () {
                        fnMonitor.apply(me, arguments);
                    });
                };
                ResourcePoolManager.prototype.setLoadedAllRoutine = function (fnCallback) {
                    var pPool;
                    var pResource;
                    var iHandleResource;
                    var pWaiterResouse = this.pWaiterResource;
                    var fnResCallback = function (iFlagBit, iResourceFlags, isSetting) {
                        if(iFlagBit == akra.EResourceItemEvents.LOADED && isSetting) {
                            fnCallback();
                        }
                    };
                    pWaiterResouse.notifyLoaded();
                    for(var n = 0; n < akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES; n++) {
                        for(var i = 0; i < ResourcePoolManager.pTypedResourseTotal[n]; i++) {
                            pPool = this.findResourcePool(new pool.ResourceCode(n, i));
                            if(pPool) {
                                var pResources = pPool.getResources();
                                var pResource;
                                for(var i = 0; i < pResources.length; ++i) {
                                    pResource = pResources[i];
                                    pWaiterResouse.sync(pResource, akra.EResourceItemEvents.LOADED);
                                }
                            }
                        }
                    }
                    if(pWaiterResouse.isResourceLoaded()) {
                        fnCallback();
                    } else {
                        pWaiterResouse.setChangesNotifyRoutine(fnResCallback);
                    }
                };
                ResourcePoolManager.prototype.destroyAll = function () {
                    for(var i = 0; i < akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES; i++) {
                        this.destroyResourceFamily(i);
                    }
                };
                ResourcePoolManager.prototype.restoreAll = function () {
                    for(var i = 0; i < akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES; i++) {
                        this.restoreResourceFamily(i);
                    }
                };
                ResourcePoolManager.prototype.disableAll = function () {
                    for(var i = 0; i < akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES; i++) {
                        this.disableResourceFamily(i);
                    }
                };
                ResourcePoolManager.prototype.clean = function () {
                    for(var i = 0; i < akra.EResourceFamilies.TOTAL_RESOURCE_FAMILIES; i++) {
                        this.cleanResourceFamily(i);
                    }
                };
                ResourcePoolManager.prototype.createDeviceResources = function () {
                    return true;
                };
                ResourcePoolManager.prototype.destroyDeviceResources = function () {
                    this.disableDeviceResources();
                    // then destroy...
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 320);
                    akra.logger.log("Destroying Video Device Resources\n");
                    ; ;
                    this.destroyResourceFamily(akra.EResourceFamilies.VIDEO_RESOURCE);
                    return true;
                };
                ResourcePoolManager.prototype.restoreDeviceResources = function () {
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 328);
                    akra.logger.log("Restoring Video Device Resources\n");
                    ; ;
                    this.restoreResourceFamily(akra.EResourceFamilies.VIDEO_RESOURCE);
                    return true;
                };
                ResourcePoolManager.prototype.disableDeviceResources = function () {
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 334);
                    akra.logger.log("Disabling Video Device Resources\n");
                    ; ;
                    this.disableResourceFamily(akra.EResourceFamilies.VIDEO_RESOURCE);
                    return true;
                }/**@inline*/ ;
                ResourcePoolManager.prototype.getEngine = function () {
                    return this.pEngine;
                };
                ResourcePoolManager.prototype.createRenderMethod = function (sResourceName) {
                    return this.renderMethodPool.createResource(sResourceName);
                };
                ResourcePoolManager.prototype.createTexture = function (sResourceName) {
                    return this.texturePool.createResource(sResourceName);
                };
                ResourcePoolManager.prototype.createEffect = function (sResourceName) {
                    return this.effectPool.createResource(sResourceName);
                };
                ResourcePoolManager.prototype.createSurfaceMaterial = function (sResourceName) {
                    return this.surfaceMaterialPool.createResource(sResourceName);
                };
                ResourcePoolManager.prototype.createDeviceResource = function () {
                    this.pSurfaceMaterialPool = new pool.ResourcePool(this, pool.resources.SurfaceMaterial);
                    this.pSurfaceMaterialPool.initialize(16);
                    this.pEffectPool = new pool.ResourcePool(this, pool.resources.Effect);
                    this.pEffectPool.initialize(16);
                    this.pRenderMethodPool = new pool.ResourcePool(this, pool.resources.RenderMethod);
                    this.pRenderMethodPool.initialize(16);
                    this.pModelPool = new pool.ResourcePool(this, pool.resources.Model);
                    this.pModelPool.initialize(16);
                    this.pImagePool = new pool.ResourcePool(this, pool.resources.Img);
                    this.pImagePool.initialize(16);
                    this.pTexturePool = new pool.ResourcePool(this, akra.webgl.WebGLInternalTexture);
                    this.pTexturePool.initialize(16);
                    this.pIndexBufferPool = new pool.ResourcePool(this, akra.webgl.WebGLIndexBuffer);
                    this.pIndexBufferPool.initialize(16);
                    this.pVertexBufferPool = new pool.ResourcePool(this, akra.webgl.WebGLVertexBuffer);
                    this.pVertexBufferPool.initialize(16);
                    this.pVideoBufferPool = new pool.ResourcePool(this, akra.webgl.WebGLVertexTexture);
                    this.pVideoBufferPool.initialize(16);
                    this.pTextureBufferPool = new pool.ResourcePool(this, akra.webgl.WebGLTextureBuffer);
                    this.pTextureBufferPool.initialize(16);
                    this.pShaderProgramPool = new pool.ResourcePool(this, akra.webgl.WebGLShaderProgram);
                    this.pShaderProgramPool.initialize(16);
                    this.pRenderBufferPool = new pool.ResourcePool(this, akra.webgl.WebGLInternalRenderBuffer);
                    this.pRenderBufferPool.initialize(16);
                    this.pDepthBufferPool = new pool.ResourcePool(this, akra.webgl.WebGLDepthBuffer);
                    this.pDepthBufferPool.initialize(16);
                    this.pComponentPool = new pool.ResourcePool(this, pool.resources.Component);
                    this.pComponentPool.initialize(16);
                };
                ResourcePoolManager.prototype.registerDeviceResources = function () {
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 407);
                    akra.logger.log("Registering Video Device Resources\n");
                    ; ;
                    this.pTexturePool.registerResourcePool(new pool.ResourceCode(akra.EResourceFamilies.VIDEO_RESOURCE, akra.EVideoResources.TEXTURE_RESOURCE));
                    this.pVertexBufferPool.registerResourcePool(new pool.ResourceCode(akra.EResourceFamilies.VIDEO_RESOURCE, akra.EVideoResources.VERTEXBUFFER_RESOURCE));
                    this.pIndexBufferPool.registerResourcePool(new pool.ResourceCode(akra.EResourceFamilies.VIDEO_RESOURCE, akra.EVideoResources.INDEXBUFFER_RESOURCE));
                    this.pEffectPool.registerResourcePool(new pool.ResourceCode(akra.EResourceFamilies.VIDEO_RESOURCE, akra.EVideoResources.EFFECT_RESOURCE));
                    this.pRenderMethodPool.registerResourcePool(new pool.ResourceCode(akra.EResourceFamilies.VIDEO_RESOURCE, akra.EVideoResources.RENDERMETHOD_RESOURCE));
                    this.pModelPool.registerResourcePool(new pool.ResourceCode(akra.EResourceFamilies.VIDEO_RESOURCE, akra.EVideoResources.MODEL_RESOURCE));
                    this.pImagePool.registerResourcePool(new pool.ResourceCode(akra.EResourceFamilies.VIDEO_RESOURCE, akra.EVideoResources.IMAGE_RESOURCE));
                    this.pSurfaceMaterialPool.registerResourcePool(new pool.ResourceCode(akra.EResourceFamilies.VIDEO_RESOURCE, akra.EVideoResources.SURFACEMATERIAL_RESOURCE));
                    this.pVideoBufferPool.registerResourcePool(new pool.ResourceCode(akra.EResourceFamilies.VIDEO_RESOURCE, akra.EVideoResources.VIDEOBUFFER_RESOURCE));
                    this.pShaderProgramPool.registerResourcePool(new pool.ResourceCode(akra.EResourceFamilies.VIDEO_RESOURCE, akra.EVideoResources.SHADERPROGRAM_RESOURCE));
                    this.pComponentPool.registerResourcePool(new pool.ResourceCode(akra.EResourceFamilies.VIDEO_RESOURCE, akra.EVideoResources.COMPONENT_RESOURCE));
                };
                ResourcePoolManager.prototype.unregisterDeviceResources = function () {
                    akra.logger.setSourceLocation("pool/ResourcePoolManager.ts", 455);
                    akra.logger.log("Unregistering Video Device Resources");
                    ; ;
                    this.pTexturePool.unregisterResourcePool();
                    this.pVertexBufferPool.unregisterResourcePool();
                    this.pIndexBufferPool.unregisterResourcePool();
                    this.pEffectPool.unregisterResourcePool();
                    this.pRenderMethodPool.unregisterResourcePool();
                    this.pModelPool.unregisterResourcePool();
                    this.pImagePool.unregisterResourcePool();
                    this.pSurfaceMaterialPool.unregisterResourcePool();
                    this.pVideoBufferPool.unregisterResourcePool();
                    this.pShaderProgramPool.unregisterResourcePool();
                    this.pComponentPool.unregisterResourcePool();
                };
                ResourcePoolManager.pTypedResourseTotal = [
                    akra.EVideoResources.TOTAL_VIDEO_RESOURCES, 
                    akra.EAudioResources.TOTAL_AUDIO_RESOURCES, 
                    akra.EGameResources.TOTAL_GAME_RESOURCES
                ];
                return ResourcePoolManager;
            })();
            pool.ResourcePoolManager = ResourcePoolManager;            
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        /*	export enum EEntityStates {
        //обновился ли сам узел?
        k_Updated = 0x01,
        //есть ли среди потомков обновленные узлы
        k_DescendantsUpdtated = 0x02,
        //если ли обновленные узлы среди братьев или их потомках
        k_SiblingsUpdated = 0x04
        }*/
        var Entity = (function (_super) {
            __extends(Entity, _super);
            function Entity() {
                _super.apply(this, arguments);

                this._sName = null;
                this._pParent = null;
                this._pSibling = null;
                this._pChild = null;
                this._eType = akra.EEntityTypes.UNKNOWN;
                this._iGuid = akra.sid();
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
            }
            Object.defineProperty(Entity.prototype, "name", {
                get: // protected _iStateFlags: int = 0;
                /**@inline*/ function () {
                    return this._sName;
                }/**@inline*/ ,
                set: function (sName) {
                    this._sName = sName;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "parent", {
                get: function () {
                    return this._pParent;
                }/**@inline*/ ,
                set: function (pParent) {
                    this.attachToParent(pParent);
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "sibling", {
                get: function () {
                    return this._pSibling;
                }/**@inline*/ ,
                set: function (pSibling) {
                    this._pSibling = pSibling;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "child", {
                get: function () {
                    return this._pChild;
                }/**@inline*/ ,
                set: function (pChild) {
                    this._pChild = pChild;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "type", {
                get: function () {
                    return this._eType;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "depth", {
                get: function () {
                    var iDepth = -1;
                    for(var pEntity = this; pEntity; pEntity = pEntity.parent , ++iDepth) {
                    }
                    ; ;
                    return iDepth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "root", {
                get: function () {
                    for(var pEntity = this, iDepth = -1; pEntity.parent; pEntity = pEntity.parent , ++iDepth) {
                    }
                    ; ;
                    return pEntity;
                },
                enumerable: true,
                configurable: true
            });
            Entity.prototype.create = function () {
                return true;
            };
            Entity.prototype.destroy = function () {
                // destroy anything attached to this node
                //	destroySceneObject();
                // promote any children up to our parent
                this.promoteChildren();
                // now remove ourselves from our parent
                this.detachFromParent();
                // we should now be removed from the tree, and have no dependants
                akra.logger.setSourceLocation("util/Entity.ts", 64);
                akra.logger.assert(this.referenceCount() == 0, "Attempting to delete a scene node which is still in use");
                ; ;
                akra.logger.setSourceLocation("util/Entity.ts", 65);
                akra.logger.assert(this._pSibling == null, "Failure Destroying Node");
                ; ;
                akra.logger.setSourceLocation("util/Entity.ts", 66);
                akra.logger.assert(this._pChild == null, "Failure Destroying Node");
                ; ;
            };
            Entity.prototype.findEntity = function (sName) {
                var pEntity = null;
                if(this._sName === sName) {
                    return this;
                }
                if(this._pSibling) {
                    pEntity = this._pSibling.findEntity(sName);
                }
                if(pEntity == null && this._pChild) {
                    pEntity = this._pChild.findEntity(sName);
                }
                return pEntity;
            };
            Entity.prototype.explore = function (fn) {
                if(fn(this) === false) {
                    return;
                }
                if(this._pSibling) {
                    this._pSibling.explore(fn);
                }
                if(this._pChild) {
                    this._pChild.explore(fn);
                }
            };
            Entity.prototype.childOf = function (pParent) {
                for(var pEntity = this; pEntity; pEntity = pEntity.parent) {
                    if(pEntity.parent === pParent) {
                        return true;
                    }
                }
                return false;
            }/**
            * Returns the current number of siblings of this object.
            */
            ;
            Entity.prototype.siblingCount = function () {
                var iCount = 0;
                if(this._pParent) {
                    var pNextSibling = this._pParent.child;
                    if(pNextSibling) {
                        while(pNextSibling) {
                            pNextSibling = pNextSibling.sibling;
                            ++iCount;
                        }
                    }
                }
                return iCount;
            }/**
            * Returns the current number of children of this object
            */
            ;
            Entity.prototype.childCount = function () {
                var iCount = 0;
                var pNextChild = this.child;
                if(pNextChild) {
                    ++iCount;
                    while(pNextChild) {
                        pNextChild = pNextChild.sibling;
                        ++iCount;
                    }
                }
                return iCount;
            }// inline isUpdated(): bool {
            // 	return TEST_BIT(this._iStateFlags, EEntityStates.k_Updated);
            // }
            // inline hasUpdatedSubNodes(): bool {
            // 	return TEST_BIT(this._iStateFlags, EEntityStates.k_DescendantsUpdtated);
            // }
            ;
            Entity.prototype.recursiveUpdate = function () {
                var bUpdated = false;
                // update myself
                if(this.update()) {
                    // SET_ALL(this._iStateFlags, EEntityStates.k_Updated);
                    bUpdated = true;
                }
                // update my sibling
                if(this._pSibling && this._pSibling.recursiveUpdate()) {
                    // SET_ALL(this._iStateFlags, EEntityStates.k_SiblingsUpdated);
                    bUpdated = true;
                }
                // update my child
                if(this._pChild && this._pChild.recursiveUpdate()) {
                    // SET_ALL(this._iStateFlags, EEntityStates.k_DescendantsUpdtated);
                    bUpdated = true;
                }
                /* (this._iStateFlags != 0);*/
                return bUpdated;
            };
            Entity.prototype.recursivePreUpdate = function () {
                // clear the flags from the previous update
                this.prepareForUpdate();
                // update my sibling
                if(this._pSibling) {
                    this._pSibling.recursivePreUpdate();
                }
                // update my child
                if(this._pChild) {
                    this._pChild.recursivePreUpdate();
                }
            };
            Entity.prototype.prepareForUpdate = function () {
                //this._iStateFlags = 0;
                            };
            Entity.prototype.hasParent = /** Parent is not undef */
            /**@inline*/ function () {
                return akra.isDefAndNotNull(this._pParent);
            }/** Child is not undef*/
            /**@inline*/ ;
            Entity.prototype.hasChild = function () {
                return akra.isDefAndNotNull(this._pChild);
            }/** Sibling is not undef */
            /**@inline*/ ;
            Entity.prototype.hasSibling = function () {
                return akra.isDefAndNotNull(this._pSibling);
            }/**
            * Checks to see if the provided item is a sibling of this object
            */
            ;
            Entity.prototype.isASibling = function (pSibling) {
                if(!pSibling) {
                    return false;
                }
                // if the sibling we are looking for is me, or my FirstSibling, return true
                if(this == pSibling || this._pSibling == pSibling) {
                    return true;
                }
                // if we have a sibling, continue searching
                if(this._pSibling) {
                    return this._pSibling.isASibling(pSibling);
                }
                // it's not us, and we have no sibling to check. This is not a sibling of ours.
                return false;
            }/** Checks to see if the provided item is a child of this object. (one branch depth only) */
            ;
            Entity.prototype.isAChild = function (pChild) {
                if(!pChild) {
                    return (false);
                }
                // if the sibling we are looking for is my FirstChild return true
                if(this._pChild == pChild) {
                    return (true);
                }
                // if we have a child, continue searching
                if(this._pChild) {
                    return (this._pChild.isASibling(pChild));
                }
                // it's not us, and we have no child to check. This is not a sibling of ours.
                return (false);
            }/**
            * Checks to see if the provided item is a child or sibling of this object. If SearchEntireTree
            * is TRUE, the check is done recursivly through all siblings and children. SearchEntireTree
            * is FALSE by default.
            */
            ;
            Entity.prototype.isInFamily = function (pEntity, bSearchEntireTree) {
                if(!pEntity) {
                    return (false);
                }
                // if the model we are looking for is me or my immediate family, return true
                if(this == pEntity || this._pChild == pEntity || this._pSibling == pEntity) {
                    return (true);
                }
                // if not set to seach entire tree, just check my siblings and kids
                if(!bSearchEntireTree) {
                    if(this.isASibling(pEntity)) {
                        return (true);
                    }
                    if(this._pChild && this._pChild.isASibling(pEntity)) {
                        return (true);
                    }
                } else// seach entire Tree!!!
                 {
                    if(this._pSibling && this._pSibling.isInFamily(pEntity, bSearchEntireTree)) {
                        return (true);
                    }
                    if(this._pChild && this._pChild.isInFamily(pEntity, bSearchEntireTree)) {
                        return (true);
                    }
                }
                return (false);
            }/**
            * Adds the provided ModelSpace object to the descendant list of this object. The provided
            * ModelSpace object is removed from any parent it may already belong to.
            */
            ;
            Entity.prototype.addSibling = function (pSibling) {
                if(pSibling) {
                    // replace objects current sibling pointer with this new one
                    pSibling.sibling = this._pSibling;
                    this.sibling = pSibling;
                }
                return pSibling;
            }/**
            * Adds the provided ModelSpace object to the descendant list of this object. The provided
            * ModelSpace object is removed from any parent it may already belong to.
            */
            ;
            Entity.prototype.addChild = function (pChild) {
                if(pChild) {
                    // Replace the new child's sibling pointer with our old first child.
                    pChild.sibling = this._pChild;
                    // the new child becomes our first child pointer.
                    this._pChild = pChild;
                }
                return pChild;
            }/**
            * Removes a specified child object from this parent object. If the child is not the
            * FirstChild of this object, all of the Children are searched to find the object to remove.
            */
            ;
            Entity.prototype.removeChild = function (pChild) {
                if(this._pChild && pChild) {
                    if(this._pChild == pChild) {
                        this._pChild = pChild.sibling;
                        pChild.sibling = null;
                    } else {
                        var pTempNode = this._pChild;
                        // keep searching until we find the node who's sibling is our target
                        // or we reach the end of the sibling chain
                        while(pTempNode && (pTempNode.sibling != pChild)) {
                            pTempNode = pTempNode.sibling;
                        }
                        // if we found the proper item, set it's FirstSibling to be the FirstSibling of the child
                        // we are removing
                        if(pTempNode) {
                            pTempNode.sibling = pChild.sibling;
                            pChild.sibling = null;
                        }
                    }
                }
                return pChild;
            }/** Removes all Children from this parent object */
            ;
            Entity.prototype.removeAllChildren = function () {
                // keep removing children until end of chain is reached
                while(!akra.isNull(this._pChild)) {
                    var pNextSibling = this._pChild.sibling;
                    this._pChild.detachFromParent();
                    this._pChild = pNextSibling;
                }
            }/** Attaches this object ot a new parent. Same as calling the parent's addChild() routine. */
            ;
            Entity.prototype.attachToParent = function (pParent) {
                if(pParent != this._pParent) {
                    this.detachFromParent();
                    if(pParent) {
                        this._pParent = pParent;
                        this._pParent.addChild(this);
                        this._pParent.addRef();
                        this.attached();
                        return true;
                    }
                }
                return false;
            };
            Entity.prototype.detachFromParent = function () {
                // tell our current parent to release us
                if(this._pParent) {
                    this._pParent.removeChild(this);
                    //TODO: разобраться что за херня!!!!
                    if(this._pParent) {
                        this._pParent.release();
                    }
                    this._pParent = null;
                    // my world matrix is now my local matrix
                    this.detached();
                    return true;
                }
                return false;
            }/**
            * Attaches this object's children to it's parent, promoting them up the tree
            */
            ;
            Entity.prototype.promoteChildren = function () {
                // Do I have any children to promote?
                while(!akra.isNull(this._pChild)) {
                    var pNextSibling = this._pChild.sibling;
                    this._pChild.attachToParent(this._pParent);
                    this._pChild = pNextSibling;
                }
            };
            Entity.prototype.relocateChildren = function (pParent) {
                if(pParent != this) {
                    // Do I have any children to relocate?
                    while(!akra.isNull(this._pChild)) {
                        var pNextSibling = this._pChild.sibling;
                        this._pChild.attachToParent(pParent);
                        this._pChild = pNextSibling;
                    }
                }
            };
            Entity.prototype.update = function () {
                return false;
            };
            Entity.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if(!isRecursive) {
                    return '<entity' + (this._sName ? ' ' + this._sName : "") + '>';
                }
                var pSibling = this.sibling;
                var pChild = this.child;
                var s = "";
                for(var i = 0; i < iDepth; ++i) {
                    s += ':  ';
                }
                s += '+----[depth: ' + this.depth + ']' + this.toString() + '\n';
                if(pChild) {
                    s += pChild.toString(true, iDepth + 1);
                }
                if(pSibling) {
                    s += pSibling.toString(true, iDepth);
                }
                return s;
            };
            Entity._pEvenetTable = new akra.events.EventTable();
            Entity.prototype.getEventTable = /**@inline*/ function () {
                return Entity._pEvenetTable;
            }/**@inline*/ ;
            Entity.prototype.getGuid = function () {
                return this._iGuid;
            }/**@inline*/ ;
            Entity.prototype.connect = function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().addDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            };
            Entity.prototype.disconnect = /**@inline*/ function (pSender, sSignal, sSlot, eType) {
                return this.getEventTable().removeDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            }/**@inline*/ ;
            Entity.prototype.bind = function (sSignal, fnListener, eType) {
                return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
            }/**@inline*/ ;
            Entity.prototype.unbind = function (sSignal, fnListener, eType) {
                return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
            };
            Entity.prototype.attached = function () {
                var _recivier = this;
                this._pUnicastSlotMap = this._pUnicastSlotMap || this.getEventTable().findUnicastList(this._iGuid);
                var _unicast = (this._pUnicastSlotMap).attached;
                _unicast.target ? _unicast.target[_unicast.callback](_recivier) : _unicast.listener(_recivier);
            };
            Entity.prototype.detached = function () {
                var _recivier = this;
                this._pUnicastSlotMap = this._pUnicastSlotMap || this.getEventTable().findUnicastList(this._iGuid);
                var _unicast = (this._pUnicastSlotMap).detached;
                _unicast.target ? _unicast.target[_unicast.callback](_recivier) : _unicast.listener(_recivier);
            };
            return Entity;
        })(util.ReferenceCounter);
        util.Entity = Entity;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        (function (ENodeUpdateFlags) {
            ENodeUpdateFlags._map = [];
            ENodeUpdateFlags.k_SetForDestruction = 0;
            ENodeUpdateFlags._map[1] = "k_NewOrientation";
            //if changed scale, otation or position
            ENodeUpdateFlags.k_NewOrientation = 1;
            ENodeUpdateFlags._map[2] = "k_NewWorldMatrix";
            // k_NewTranslation,
            // k_NewScale,
            ENodeUpdateFlags.k_NewWorldMatrix = 2;
            ENodeUpdateFlags._map[3] = "k_NewLocalMatrix";
            ENodeUpdateFlags.k_NewLocalMatrix = 3;
            ENodeUpdateFlags._map[4] = "k_RebuildInverseWorldMatrix";
            ENodeUpdateFlags.k_RebuildInverseWorldMatrix = 4;
            ENodeUpdateFlags._map[5] = "k_RebuildNormalMatrix";
            ENodeUpdateFlags.k_RebuildNormalMatrix = 5;
        })(scene.ENodeUpdateFlags || (scene.ENodeUpdateFlags = {}));
        var ENodeUpdateFlags = scene.ENodeUpdateFlags;
        ; ;
        var Node = (function (_super) {
            __extends(Node, _super);
            function Node() {
                _super.apply(this, arguments);

                this._m4fLocalMatrix = null;
                this._m4fWorldMatrix = null;
                this._m4fInverseWorldMatrix = null;
                this._m3fNormalMatrix = null;
                this._v3fWorldPosition = null;
                this._qRotation = null;
                this._v3fTranslation = null;
                this._v3fScale = null;
                this._iUpdateFlags = 0;
                this._eInheritance = akra.ENodeInheritance.POSITION;
            }
            Object.defineProperty(Node.prototype, "localOrientation", {
                get: /**@inline*/ function () {
                    return this._qRotation;
                }/**@inline*/ ,
                set: function (qOrient) {
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
                    this._qRotation.set(qOrient);
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "localPosition", {
                get: function () {
                    return this._v3fTranslation;
                }/**@inline*/ ,
                set: function (v3fPosition) {
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
                    this._v3fTranslation.set(v3fPosition);
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "localScale", {
                get: function () {
                    return this._v3fScale;
                }/**@inline*/ ,
                set: function (v3fScale) {
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
                    this._v3fScale.set(v3fScale);
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "localMatrix", {
                get: function () {
                    return this._m4fLocalMatrix;
                }/**@inline*/ ,
                set: function (m4fLocalMatrix) {
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewLocalMatrix)));
                    this._m4fLocalMatrix.set(m4fLocalMatrix);
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "worldMatrix", {
                get: function () {
                    return this._m4fWorldMatrix;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "worldPosition", {
                get: function () {
                    return this._v3fWorldPosition;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "inverseWorldMatrix", {
                get: function () {
                    if(((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_RebuildInverseWorldMatrix))) != 0)) {
                        this._m4fWorldMatrix.inverse(this._m4fInverseWorldMatrix);
                        ((this._iUpdateFlags) &= ~(1 << (ENodeUpdateFlags.k_RebuildInverseWorldMatrix)));
                    }
                    return this._m4fInverseWorldMatrix;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "normalMatrix", {
                get: function () {
                    if(((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_RebuildNormalMatrix))) != 0)) {
                        this._m4fWorldMatrix.toMat3(this._m3fNormalMatrix).inverse().transpose();
                        ((this._iUpdateFlags) &= ~(1 << (ENodeUpdateFlags.k_RebuildNormalMatrix)));
                    }
                    return this._m3fNormalMatrix;
                },
                enumerable: true,
                configurable: true
            });
            Node.prototype.update = function () {
                // derived classes update the local matrix
                // then call this base function to complete
                // the update
                return this.recalcWorldMatrix();
            };
            Node.prototype.prepareForUpdate = function () {
                _super.prototype.prepareForUpdate.call(this);
                // clear the temporary flags
                ((this._iUpdateFlags) &= ~((1 << (ENodeUpdateFlags.k_NewLocalMatrix)) | (1 << (ENodeUpdateFlags.k_NewOrientation)) | (1 << (ENodeUpdateFlags.k_NewWorldMatrix))));
            }/**@inline*/ ;
            Node.prototype.setInheritance = function (eInheritance) {
                this._eInheritance = eInheritance;
            }/**@inline*/ ;
            Node.prototype.getInheritance = function () {
                return this._eInheritance;
            }/**@inline*/ ;
            Node.prototype.isWorldMatrixNew = function () {
                return ((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewWorldMatrix))) != 0);
            }/**@inline*/ ;
            Node.prototype.isLocalMatrixNew = function () {
                return ((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewLocalMatrix))) != 0);
            };
            Node.prototype.recalcWorldMatrix = function () {
                var isParentMoved = this._pParent && (this._pParent).isWorldMatrixNew();
                var isOrientModified = ((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewOrientation))) != 0);
                var isLocalModified = ((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewLocalMatrix))) != 0);
                if(isOrientModified || isParentMoved || isLocalModified) {
                    var m4fLocal = this._m4fLocalMatrix;
                    var m4fWorld = this._m4fWorldMatrix;
                    var m4fParent = (this._pParent).worldMatrix;
                    var m4fOrient = Node._m4fTemp;
                    var v3fTemp = Node._v3fTemp;
                    var pWorldData = m4fWorld.data;
                    var pParentData = m4fParent.data;
                    var pOrientData = m4fOrient.data;
                    this._qRotation.toMat4(m4fOrient);
                    m4fOrient.setTranslation(this._v3fTranslation);
                    m4fOrient.scaleLeft(this._v3fScale);
                    m4fOrient.multiply(m4fLocal);
                    if(this._pParent) {
                        if(this._eInheritance === akra.ENodeInheritance.ALL) {
                            m4fParent.multiply(m4fOrient, m4fWorld);
                        } else {
                            if(this._eInheritance === akra.ENodeInheritance.POSITION) {
                                m4fWorld.set(m4fOrient);
                                pWorldData[12] = pParentData[12] + pOrientData[12];
                                pWorldData[13] = pParentData[13] + pOrientData[13];
                                pWorldData[14] = pParentData[14] + pOrientData[14];
                            } else {
                                if(this._eInheritance === akra.ENodeInheritance.ROTSCALE) {
                                    var p11 = pParentData[0], p12 = pParentData[4], p13 = pParentData[8];
                                    var p21 = pParentData[1], p22 = pParentData[5], p23 = pParentData[9];
                                    var p31 = pParentData[2], p32 = pParentData[6], p33 = pParentData[10];
                                    var l11 = pOrientData[0], l12 = pOrientData[4], l13 = pOrientData[8];
                                    var l21 = pOrientData[1], l22 = pOrientData[5], l23 = pOrientData[9];
                                    var l31 = pOrientData[2], l32 = pOrientData[6], l33 = pOrientData[10];
                                    pWorldData[0] = p11 * l11 + p12 * l21 + p13 * l31;
                                    pWorldData[4] = p11 * l12 + p12 * l22 + p13 * l32;
                                    pWorldData[8] = p11 * l13 + p12 * l23 + p13 * l33;
                                    pWorldData[12] = pOrientData[12];
                                    pWorldData[1] = p21 * l11 + p22 * l21 + p23 * l31;
                                    pWorldData[5] = p21 * l12 + p22 * l22 + p23 * l32;
                                    pWorldData[9] = p21 * l13 + p22 * l23 + p23 * l33;
                                    pWorldData[13] = pOrientData[13];
                                    pWorldData[2] = p31 * l11 + p32 * l21 + p33 * l31;
                                    pWorldData[6] = p31 * l12 + p32 * l22 + p33 * l32;
                                    pWorldData[10] = p31 * l13 + p32 * l23 + p33 * l33;
                                    pWorldData[14] = pOrientData[14];
                                    pWorldData[3] = pOrientData[3];
                                    pWorldData[7] = pOrientData[7];
                                    pWorldData[11] = pOrientData[11];
                                    pWorldData[15] = pOrientData[15];
                                }
                            }
                        }
                    } else {
                        m4fWorld.set(m4fOrient);
                    }
                    this._v3fWorldPosition.x = pWorldData[12];
                    this._v3fWorldPosition.y = pWorldData[13];
                    this._v3fWorldPosition.z = pWorldData[14];
                    // set the flag that our world matrix has changed
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewWorldMatrix)));
                    // and it's inverse & vectors are out of date
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_RebuildInverseWorldMatrix)));
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_RebuildNormalMatrix)));
                    return true;
                }
                return false;
            };
            Node.prototype.setPosition = function (fX, fY, fZ) {
                var pPos = arguments.length === 1 ? arguments[0] : akra.vec3(fX, fY, fZ);
                var v3fTranslation = this._v3fTranslation;
                v3fTranslation.set(pPos);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.addPosition = function (fX, fY, fZ) {
                var pPos = arguments.length === 1 ? arguments[0] : akra.vec3(fX, fY, fZ);
                var v3fTranslation = this._v3fTranslation;
                v3fTranslation.add(pPos);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.addRelPosition = function (fX, fY, fZ) {
                var pPos = arguments.length === 1 ? arguments[0] : akra.vec3(fX, fY, fZ);
                var v3fTranslation = this._v3fTranslation;
                this._qRotation.multiplyVec3(pPos);
                v3fTranslation.add(pPos);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRotationByMatrix = function (matrix) {
                matrix.toQuat4(this._qRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRotationByAxisAngle = function (v3fAxis, fAngle) {
                akra.Quat4.fromAxisAngle(v3fAxis, fAngle, this._qRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRotationByForwardUp = function (v3fForward, v3fUp) {
                akra.Quat4.fromForwardUp(v3fForward, v3fUp, this._qRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRotationByEulerAngles = function (fYaw, fPitch, fRoll) {
                akra.Quat4.fromYawPitchRoll(fYaw, fPitch, fRoll, this._qRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRotationByXYZAxis = function (fX, fY, fZ) {
                akra.Quat4.fromYawPitchRoll(fY, fX, fZ, this._qRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRotation = function (q4fRotation) {
                this._qRotation.set(q4fRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.addRelRotationByMatrix = function (matrix) {
                this.addRelRotation(arguments[0].toQuat4(Node._q4fTemp));
            };
            Node.prototype.addRelRotationByAxisAngle = function (v3fAxis, fAngle) {
                this.addRelRotation(akra.Quat4.fromAxisAngle(v3fAxis, fAngle, Node._q4fTemp));
            };
            Node.prototype.addRelRotationByForwardUp = function (v3fForward, v3fUp) {
                this.addRelRotation(akra.Quat4.fromForwardUp(v3fForward, v3fUp, Node._q4fTemp));
            };
            Node.prototype.addRelRotationByEulerAngles = function (fYaw, fPitch, fRoll) {
                this.addRelRotation(akra.Quat4.fromYawPitchRoll(fYaw, fPitch, fRoll, Node._q4fTemp));
            };
            Node.prototype.addRelRotationByXYZAxis = function (fX, fY, fZ) {
                this.addRelRotation(akra.Quat4.fromYawPitchRoll(fY, fX, fZ, Node._q4fTemp));
            };
            Node.prototype.addRelRotation = function (q4fRotation) {
                this._qRotation.multiply(q4fRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.addRotationByMatrix = function (matrix) {
                this.addRotation(arguments[0].toQuat4(Node._q4fTemp));
            };
            Node.prototype.addRotationByAxisAngle = function (v3fAxis, fAngle) {
                this.addRotation(akra.Quat4.fromAxisAngle(v3fAxis, fAngle, Node._q4fTemp));
            };
            Node.prototype.addRotationByForwardUp = function (v3fForward, v3fUp) {
                this.addRotation(akra.Quat4.fromForwardUp(v3fForward, v3fUp, Node._q4fTemp));
            };
            Node.prototype.addRotationByEulerAngles = function (fYaw, fPitch, fRoll) {
                this.addRotation(akra.Quat4.fromYawPitchRoll(fYaw, fPitch, fRoll, Node._q4fTemp));
            };
            Node.prototype.addRotationByXYZAxis = function (fX, fY, fZ) {
                this.addRotation(akra.Quat4.fromYawPitchRoll(fY, fX, fZ, Node._q4fTemp));
            };
            Node.prototype.addRotation = function (q4fRotation) {
                q4fRotation.multiplyVec3(this._v3fTranslation);
                q4fRotation.multiply(this._qRotation, this._qRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.scale = function (fX, fY, fZ) {
                var pScale = arguments.length === 1 ? arguments[0] : akra.vec3(fX);
                var v3fScale = this._v3fScale;
                v3fScale.scale(pScale);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.attachToParent = function (pParent) {
                if(_super.prototype.attachToParent.call(this, pParent)) {
                    // adjust my local matrix to be relative to this new parent
                    var m4fInvertedParentMatrix = akra.mat4();
                    (this._pParent)._m4fWorldMatrix.inverse(m4fInvertedParentMatrix);
                    return true;
                }
                return false;
            };
            Node.prototype.detachFromParent = function () {
                if(_super.prototype.detachFromParent.call(this)) {
                    this._m4fWorldMatrix.identity();
                    return true;
                }
                return false;
            };
            Node.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if(!isRecursive) {
                    return '<node' + (this.name ? " " + this.name : "") + '>';
                }
                var pSibling = this.sibling;
                var pChild = this.child;
                var s = "";
                for(var i = 0; i < iDepth; ++i) {
                    s += ':  ';
                }
                s += '+----[depth: ' + this.depth + ']' + this.toString() + '\n';
                if(pChild) {
                    s += pChild.toString(true, iDepth + 1);
                }
                if(pSibling) {
                    s += pSibling.toString(true, iDepth);
                }
                return s;
            };
            Node._v3fTemp = akra.vec3();
            Node._v4fTemp = akra.vec4();
            Node._m3fTemp = akra.mat3();
            Node._m4fTemp = akra.mat4();
            Node._q4fTemp = akra.quat4();
            return Node;
        })(akra.util.Entity);
        scene.Node = Node;        
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        var SceneNode = (function (_super) {
            __extends(SceneNode, _super);
            function SceneNode(pScene) {
                        _super.call(this);
                this._pScene = null;
                this.scene = pScene;
                this.type = akra.EEntityTypes.SCENE_NODE;
            }
            Object.defineProperty(SceneNode.prototype, "scene", {
                get: /**@inline*/ function () {
                    return this._pScene;
                }/**@inline*/ ,
                set: function (pScene) {
                    this._pScene = pScene;
                },
                enumerable: true,
                configurable: true
            });
            SceneNode.prototype.create = function () {
                _super.prototype.create.call(this);
                this._m4fLocalMatrix = new akra.Mat4(1);
                this._m4fWorldMatrix = new akra.Mat4(1);
                this._m4fInverseWorldMatrix = new akra.Mat4(1);
                this._m3fNormalMatrix = new akra.Mat3();
                this._v3fWorldPosition = new akra.Vec3();
                this._v3fTranslation = new akra.Vec3(0);
                this._v3fScale = new akra.Vec3(1);
                this._qRotation = new akra.Quat4(0, 1);
                return true;
            };
            SceneNode.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
            };
            SceneNode.prototype.render = function () {
            };
            SceneNode.prototype.recursiveRender = function () {
                // render myself
                this.prepareForRender();
                this.render();
                // render my sibling
                if(this.sibling) {
                    ((this.sibling)).recursiveRender();
                }
                // render my child
                if(this.child) {
                    ((this.child)).recursiveRender();
                }
            };
            SceneNode.prototype.prepareForRender = function () {
            };
            SceneNode.prototype.attachToParent = function (pParent) {
                if((pParent).scene !== this._pScene) {
                    akra.logger.setSourceLocation("SceneNode.ts", 68);
                    akra.logger.warning("transfer of the scene node between trees scene - forbidden");
                    ; ;
                    return false;
                }
                return _super.prototype.attachToParent.call(this, pParent);
            };
            SceneNode.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if(!isRecursive) {
                    return "<scene_node" + (this.name ? " " + this.name : "") + ">";
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            return SceneNode;
        })(scene.Node);
        scene.SceneNode = SceneNode;        
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
; ;
var akra;
(function (akra) {
    (function (geometry) {
        var Sphere = (function () {
            function Sphere(fCenterX, fCenterY, fCenterZ, fRadius) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        var pSphere = arguments[0];
                        this.center = new akra.Vec3(pSphere.v3fCenter);
                        this.radius = pSphere.fRadius;
                        break;

                    }
                    case 2: {
                        var v3fCenter = arguments[0];
                        var fRadius = arguments[1];
                        this.center = new akra.Vec3(v3fCenter);
                        this.radius = fRadius;
                        break;

                    }
                    case 4: {
                        this.center = new akra.Vec3(arguments[0], arguments[1], arguments[2]);
                        this.radius = arguments[3];
                        break;

                    }
                    default: {
                        this.center = new akra.Vec3();
                        this.radius = 0.0;
                        break;

                    }
                }
            }
            Object.defineProperty(Sphere.prototype, "circle", {
                get: function () {
                    var v3fCenter = this.center;
                    return new geometry.Circle(v3fCenter.x, v3fCenter.y, this.radius);
                },
                set: function (pCircle) {
                    var v3fCenter = this.center;
                    var v2fCircleCenter = pCircle.center;
                    v3fCenter.x = v2fCircleCenter.x;
                    v3fCenter.y = v2fCircleCenter.y;
                    this.radius = pCircle.radius;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Sphere.prototype, "z", {
                get: function () {
                    return this.center.z;
                },
                set: function (fZ) {
                    this.center.z = fZ;
                },
                enumerable: true,
                configurable: true
            });
            Sphere.prototype.set = function (fCenterX, fCenterY, fCenterZ, fRadius) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        var pSphere = arguments[0];
                        this.center.set(pSphere.center);
                        this.radius = pSphere.radius;
                        break;

                    }
                    case 2: {
                        var v3fCenter = arguments[0];
                        var fRadius = arguments[1];
                        this.center.set(v3fCenter);
                        this.radius = fRadius;
                        break;

                    }
                    case 4: {
                        this.center.set(arguments[0], arguments[1], arguments[2]);
                        this.radius = arguments[3];
                        break;

                    }
                    default: {
                        this.center.set(0.0);
                        this.radius = 0.0;
                        break;

                    }
                }
                return this;
            };
            Sphere.prototype.clear = /**@inline*/ function () {
                this.center.clear();
                this.radius = 0.0;
                return this;
            };
            Sphere.prototype.isEqual = /**@inline*/ function (pSphere) {
                return this.center.isEqual(pSphere.center) && (this.radius == pSphere.radius);
            };
            Sphere.prototype.isClear = /**@inline*/ function () {
                return this.center.isClear() && (this.radius === 0.0);
            };
            Sphere.prototype.isValid = /**@inline*/ function () {
                return (this.radius >= 0.0);
            };
            Sphere.prototype.offset = /**@inline*/ function (v3fOffset) {
                this.center.add(v3fOffset);
                return this;
            };
            Sphere.prototype.expand = /**@inline*/ function (fInc) {
                this.radius += fInc;
                return this;
            };
            Sphere.prototype.normalize = /**@inline*/ function () {
                this.radius = akra.math.abs(this.radius);
                return this;
            };
            return Sphere;
        })();
        geometry.Sphere = Sphere;        
        ; ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (geometry) {
        var Rect3d = (function () {
            function Rect3d(fX0, fX1, fY0, fY1, fZ0, fZ1) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        this.set(arguments[0]);
                        break;

                    }
                    case 2: {
                        this.set(arguments[0], arguments[1]);
                        break;

                    }
                    case 3: {
                        this.set(arguments[0], arguments[1], arguments[2]);
                        break;

                    }
                    case 6: {
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                        break;

                    }
                    default: {
                        this.x0 = this.x1 = this.y0 = this.y1 = this.z0 = this.z1 = 0.0;
                        break;

                    }
                }
            }
            Object.defineProperty(Rect3d.prototype, "rect2d", {
                get: function () {
                    return new geometry.Rect2d(this.x0, this.x1, this.y0, this.y1);
                },
                set: function (pRect) {
                    this.x0 = pRect.x0;
                    this.x1 = pRect.x1;
                    this.y0 = pRect.y0;
                    this.y1 = pRect.y1;
                },
                enumerable: true,
                configurable: true
            });
            Rect3d.prototype.set = function (fX0, fX1, fY0, fY1, fZ0, fZ1) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        if(arguments[0] instanceof Rect3d) {
                            var pRect = arguments[0];
                            this.x0 = pRect.x0;
                            this.x1 = pRect.x1;
                            this.y0 = pRect.y0;
                            this.y1 = pRect.y1;
                            this.z0 = pRect.z0;
                            this.z1 = pRect.z1;
                        } else {
                            var v3fSize = arguments[0];
                            this.x1 = v3fSize.x * 0.5;
                            this.x0 = -this.x1;
                            this.y1 = v3fSize.y * 0.5;
                            this.y0 = -this.y1;
                            this.z1 = v3fSize.z * 0.5;
                            this.z0 = -this.z1;
                        }
                        break;

                    }
                    case 2: {
                        var v3fMinPoint = arguments[0];
                        var v3fMaxPoint = arguments[1];
                        this.x0 = v3fMinPoint.x;
                        this.y0 = v3fMinPoint.y;
                        this.z0 = v3fMinPoint.z;
                        this.x1 = v3fMaxPoint.x;
                        this.y1 = v3fMaxPoint.y;
                        this.z1 = v3fMaxPoint.z;
                        break;

                    }
                    case 3: {
                        var fSizeX = arguments[0];
                        var fSizeY = arguments[1];
                        var fSizeZ = arguments[2];
                        this.x1 = fSizeX * 0.5;
                        this.x0 = -this.x1;
                        this.y1 = fSizeY * 0.5;
                        this.y0 = -this.y1;
                        this.z1 = fSizeZ * 0.5;
                        this.z0 = -this.z1;
                        break;

                    }
                    case 6: {
                        this.x0 = arguments[0];
                        this.x1 = arguments[1];
                        this.y0 = arguments[2];
                        this.y1 = arguments[3];
                        this.z0 = arguments[4];
                        this.z1 = arguments[5];
                        break;

                    }
                    default: {
                        this.x0 = this.x1 = this.y0 = this.y1 = this.z0 = this.z1 = 0.0;
                        break;

                    }
                }
                return this;
            };
            Rect3d.prototype.setFloor = function (pRect) {
                this.x0 = akra.math.floor(pRect.x0);
                this.x1 = akra.math.floor(pRect.x1);
                this.y0 = akra.math.floor(pRect.y0);
                this.y1 = akra.math.floor(pRect.y1);
                this.z0 = akra.math.floor(pRect.z0);
                this.z1 = akra.math.floor(pRect.z1);
                return this;
            };
            Rect3d.prototype.setCeil = function (pRect) {
                this.x0 = akra.math.ceil(pRect.x0);
                this.x1 = akra.math.ceil(pRect.x1);
                this.y0 = akra.math.ceil(pRect.y0);
                this.y1 = akra.math.ceil(pRect.y1);
                this.z0 = akra.math.ceil(pRect.z0);
                this.z1 = akra.math.ceil(pRect.z1);
                return this;
            };
            Rect3d.prototype.clear = /**@inline*/ function () {
                this.x0 = this.x1 = this.y0 = this.y1 = this.z0 = this.z1 = 0.0;
                return this;
            };
            Rect3d.prototype.addSelf = function (v3fVec) {
                if(akra.isFloat(arguments[0])) {
                    var fValue = arguments[0];
                    this.x0 += fValue;
                    this.x1 += fValue;
                    this.y0 += fValue;
                    this.y1 += fValue;
                    this.z0 += fValue;
                    this.z1 += fValue;
                } else {
                    var v3fVec = arguments[0];
                    this.x0 += v3fVec.x;
                    this.x1 += v3fVec.x;
                    this.y0 += v3fVec.y;
                    this.y1 += v3fVec.y;
                    this.z0 += v3fVec.z;
                    this.z1 += v3fVec.z;
                }
                return this;
            };
            Rect3d.prototype.subSelf = function (v3fVec) {
                if(akra.isFloat(fValue)) {
                    var fValue = arguments[0];
                    this.x0 -= fValue;
                    this.x1 -= fValue;
                    this.y0 -= fValue;
                    this.y1 -= fValue;
                    this.z0 -= fValue;
                    this.z1 -= fValue;
                } else {
                    var v3fVec = arguments[0];
                    this.x0 -= v3fVec.x;
                    this.x1 -= v3fVec.x;
                    this.y0 -= v3fVec.y;
                    this.y1 -= v3fVec.y;
                    this.z0 -= v3fVec.z;
                    this.z1 -= v3fVec.z;
                }
                return this;
            };
            Rect3d.prototype.multSelf = function (v3fVec) {
                if(akra.isFloat(arguments[0])) {
                    var fValue = arguments[0];
                    this.x0 *= fValue;
                    this.x1 *= fValue;
                    this.y0 *= fValue;
                    this.y1 *= fValue;
                    this.z0 *= fValue;
                    this.z1 *= fValue;
                } else {
                    var v3fVec = arguments[0];
                    this.x0 *= v3fVec.x;
                    this.x1 *= v3fVec.x;
                    this.y0 *= v3fVec.y;
                    this.y1 *= v3fVec.y;
                    this.z0 *= v3fVec.z;
                    this.z1 *= v3fVec.z;
                }
                return this;
            };
            Rect3d.prototype.divSelf = function (v3fVec) {
                if(akra.isFloat(arguments[0])) {
                    var fValue = arguments[0];
                    akra.logger.setSourceLocation("geometry/Rect3d.ts", 259);
                    akra.logger.assert(fValue != 0.0, "divide by zero error");
                    ; ;
                    var fInvValue = 1.0 / fValue;
                    this.x0 *= fInvValue;
                    this.x1 *= fInvValue;
                    this.y0 *= fInvValue;
                    this.y1 *= fInvValue;
                    this.z0 *= fInvValue;
                    this.z1 *= fInvValue;
                } else {
                    var v3fVec = arguments[0];
                    akra.logger.setSourceLocation("geometry/Rect3d.ts", 273);
                    akra.logger.assert(v3fVec.x != 0.0, "divide by zero error");
                    ; ;
                    akra.logger.setSourceLocation("geometry/Rect3d.ts", 274);
                    akra.logger.assert(v3fVec.y != 0.0, "divide by zero error");
                    ; ;
                    akra.logger.setSourceLocation("geometry/Rect3d.ts", 275);
                    akra.logger.assert(v3fVec.z != 0.0, "divide by zero error");
                    ; ;
                    var fInvX = 1.0 / v3fVec.x;
                    var fInvY = 1.0 / v3fVec.y;
                    var fInvZ = 1.0 / v3fVec.z;
                    this.x0 *= fInvX;
                    this.x1 *= fInvX;
                    this.y0 *= fInvY;
                    this.y1 *= fInvY;
                    this.z0 *= fInvZ;
                    this.z1 *= fInvZ;
                }
                return this;
            };
            Rect3d.prototype.offset = function (fOffsetX, fOffsetY, fOffsetZ) {
                if(arguments.length === 1) {
                    var v3fOffset = arguments[0];
                    this.x0 += v3fOffset.x;
                    this.x1 += v3fOffset.x;
                    this.y0 += v3fOffset.y;
                    this.y1 += v3fOffset.y;
                    this.z0 += v3fOffset.z;
                    this.z1 += v3fOffset.z;
                } else {
                    this.x0 += arguments[0];
                    this.x1 += arguments[0];
                    this.y0 += arguments[1];
                    this.y1 += arguments[1];
                    this.z0 += arguments[2];
                    this.z1 += arguments[2];
                }
                return this;
            };
            Rect3d.prototype.expand = function (fValueX, fValueY, fValueZ) {
                if(arguments.length === 1) {
                    if(akra.isFloat(arguments[0])) {
                        var fValue = arguments[0];
                        this.x0 -= fValue;
                        this.x1 += fValue;
                        this.y0 -= fValue;
                        this.y1 += fValue;
                        this.z0 -= fValue;
                        this.z1 += fValue;
                    } else {
                        var v3fVec = arguments[0];
                        this.x0 -= v3fVec.x;
                        this.x1 += v3fVec.x;
                        this.y0 -= v3fVec.y;
                        this.y1 += v3fVec.y;
                        this.z0 -= v3fVec.z;
                        this.z1 += v3fVec.z;
                    }
                } else {
                    //arguments.length === 3
                    this.x0 -= arguments[0];
                    this.x1 += arguments[0];
                    this.y0 -= arguments[1];
                    this.y1 += arguments[1];
                    this.z0 -= arguments[2];
                    this.z1 += arguments[2];
                }
                return this;
            };
            Rect3d.prototype.expandX = /**@inline*/ function (fValue) {
                this.x0 -= fValue;
                this.x1 += fValue;
                return this;
            };
            Rect3d.prototype.expandY = /**@inline*/ function (fValue) {
                this.y0 -= fValue;
                this.y1 += fValue;
                return this;
            };
            Rect3d.prototype.expandZ = /**@inline*/ function (fValue) {
                this.z0 -= fValue;
                this.z1 += fValue;
                return this;
            };
            Rect3d.prototype.resize = function (fSizeX, fSizeY, fSizeZ) {
                var fSizeX, fSizeY, fSizeZ;
                if(arguments.length === 1) {
                    var v3fSize = arguments[0];
                    fSizeX = v3fSize.x;
                    fSizeY = v3fSize.y;
                    fSizeZ = v3fSize.z;
                } else {
                    fSizeX = arguments[0];
                    fSizeY = arguments[1];
                    fSizeZ = arguments[2];
                }
                this.x1 = (this.x0 + this.x1 + fSizeX) * 0.5;
                this.x0 = this.x1 - fSizeX;
                this.y1 = (this.y0 + this.y1 + fSizeY) * 0.5;
                this.y0 = this.y1 - fSizeY;
                this.z1 = (this.z0 + this.z1 + fSizeZ) * 0.5;
                this.z0 = this.z1 - fSizeZ;
                return this;
            };
            Rect3d.prototype.resizeX = /**@inline*/ function (fSize) {
                this.x1 = (this.x0 + this.x1 + fSize) * 0.5;
                this.x0 = this.x1 - fSize;
                return this;
            };
            Rect3d.prototype.resizeY = /**@inline*/ function (fSize) {
                this.y1 = (this.y0 + this.y1 + fSize) * 0.5;
                this.y0 = this.y1 - fSize;
                return this;
            };
            Rect3d.prototype.resizeZ = /**@inline*/ function (fSize) {
                this.z1 = (this.z0 + this.z1 + fSize) * 0.5;
                this.z0 = this.z1 - fSize;
                return this;
            };
            Rect3d.prototype.resizeMax = function (fSpanX, fSpanY, fSpanZ) {
                if(arguments.length === 1) {
                    var v3fSpan = arguments[0];
                    this.x1 = this.x0 + v3fSpan.x;
                    this.y1 = this.y0 + v3fSpan.y;
                    this.z1 = this.z0 + v3fSpan.z;
                } else {
                    //arguments.length === 3
                    this.x1 = this.x0 + arguments[0];
                    this.y1 = this.y0 + arguments[1];
                    this.z1 = this.z0 + arguments[2];
                }
                return this;
            };
            Rect3d.prototype.resizeMaxX = /**@inline*/ function (fSpan) {
                this.x1 = this.x0 + fSpan;
                return this;
            };
            Rect3d.prototype.resizeMaxY = /**@inline*/ function (fSpan) {
                this.y1 = this.y0 + fSpan;
                return this;
            };
            Rect3d.prototype.resizeMaxZ = /**@inline*/ function (fSpan) {
                this.z1 = this.z0 + fSpan;
                return this;
            };
            Rect3d.prototype.resizeMin = function (fSpanX, fSpanY, fSpanZ) {
                if(arguments.length === 1) {
                    var v3fSpan = arguments[0];
                    this.x0 = this.x1 - v3fSpan.x;
                    this.y0 = this.y1 - v3fSpan.y;
                    this.z0 = this.z1 - v3fSpan.z;
                } else {
                    //arguments.length === 3
                    this.x0 = this.x1 - arguments[0];
                    this.y0 = this.y1 - arguments[1];
                    this.z0 = this.z1 - arguments[2];
                }
                return this;
            };
            Rect3d.prototype.resizeMinX = /**@inline*/ function (fSpan) {
                this.x0 = this.x1 - fSpan;
                return this;
            };
            Rect3d.prototype.resizeMinY = /**@inline*/ function (fSpan) {
                this.y0 = this.y1 - fSpan;
                return this;
            };
            Rect3d.prototype.resizeMinZ = /**@inline*/ function (fSpan) {
                this.z0 = this.z1 - fSpan;
                return this;
            };
            Rect3d.prototype.unionPoint = function (fX, fY, fZ) {
                if(arguments.length === 1) {
                    var v3fPoint = arguments[0];
                    this.x0 = akra.math.min(this.x0, v3fPoint.x);
                    this.x1 = akra.math.max(this.x1, v3fPoint.x);
                    this.y0 = akra.math.min(this.y0, v3fPoint.y);
                    this.y1 = akra.math.max(this.y1, v3fPoint.y);
                    this.z0 = akra.math.min(this.z0, v3fPoint.z);
                    this.z1 = akra.math.max(this.z1, v3fPoint.z);
                } else {
                    //arguments.length === 3
                    this.x0 = akra.math.min(this.x0, arguments[0]);
                    this.x1 = akra.math.max(this.x1, arguments[0]);
                    this.y0 = akra.math.min(this.y0, arguments[1]);
                    this.y1 = akra.math.max(this.y1, arguments[1]);
                    this.z0 = akra.math.min(this.z0, arguments[2]);
                    this.z1 = akra.math.max(this.z1, arguments[2]);
                }
                return this;
            };
            Rect3d.prototype.unionRect = function (pRect) {
                this.normalize();
                pRect.normalize();
                this.x0 = akra.math.min(this.x0, pRect.x0);
                this.x1 = akra.math.max(this.x1, pRect.x1);
                this.y0 = akra.math.min(this.y0, pRect.y0);
                this.y1 = akra.math.max(this.y1, pRect.y1);
                this.z0 = akra.math.min(this.z0, pRect.z0);
                this.z1 = akra.math.max(this.z1, pRect.z1);
                return this;
            };
            Rect3d.prototype.negate = function (pDestination) {
                if(!akra.isDef(pDestination)) {
                    pDestination = this;
                }
                return pDestination.set(-this.x1, -this.x0, -this.y1, -this.y0, -this.z1, -this.z0);
            };
            Rect3d.prototype.normalize = function () {
                var fTmp;
                if(this.x0 > this.x1) {
                    fTmp = this.x0;
                    this.x0 = this.x1;
                    this.x1 = fTmp;
                }
                if(this.y0 > this.y1) {
                    fTmp = this.y0;
                    this.y0 = this.y1;
                    this.y1 = fTmp;
                }
                if(this.z0 > this.z1) {
                    fTmp = this.z0;
                    this.z0 = this.z1;
                    this.z1 = fTmp;
                }
                return this;
            };
            Rect3d.prototype.transform = function (m4fMatrix) {
                var a11 = m4fMatrix[0], a12 = m4fMatrix[4], a13 = m4fMatrix[8], a14 = m4fMatrix[12];
                var a21 = m4fMatrix[1], a22 = m4fMatrix[5], a23 = m4fMatrix[9], a24 = m4fMatrix[13];
                var a31 = m4fMatrix[2], a32 = m4fMatrix[6], a33 = m4fMatrix[10], a34 = m4fMatrix[14];
                var fX0 = this.x0, fX1 = this.x1;
                var fY0 = this.y0, fY1 = this.y1;
                var fZ0 = this.z0, fZ1 = this.z1;
                //base point
                var fBaseX = a11 * fX0 + a12 * fY0 + a13 * fZ0 + a14;
                var fBaseY = a21 * fX0 + a22 * fY0 + a23 * fZ0 + a24;
                var fBaseZ = a31 * fX0 + a32 * fY0 + a33 * fZ0 + a34;
                //new x vector
                var fXNewX = a11 * (fX1 - fX0);
                var fXNewY = a21 * (fX1 - fX0);
                var fXNewZ = a31 * (fX1 - fX0);
                //new y vector
                var fYNewX = a12 * (fY1 - fY0);
                var fYNewY = a22 * (fY1 - fY0);
                var fYNewZ = a32 * (fY1 - fY0);
                //new z vector
                var fZNewX = a13 * (fZ1 - fZ0);
                var fZNewY = a23 * (fZ1 - fZ0);
                var fZNewZ = a33 * (fZ1 - fZ0);
                var fXMultX = (fXNewX > 0.0) ? 1.0 : 0.0;
                var fYMultX = (fYNewX > 0.0) ? 1.0 : 0.0;
                var fZMultX = (fZNewX > 0.0) ? 1.0 : 0.0;
                var fXMultY = (fXNewY > 0.0) ? 1.0 : 0.0;
                var fYMultY = (fYNewY > 0.0) ? 1.0 : 0.0;
                var fZMultY = (fZNewY > 0.0) ? 1.0 : 0.0;
                var fXMultZ = (fXNewZ > 0.0) ? 1.0 : 0.0;
                var fYMultZ = (fYNewZ > 0.0) ? 1.0 : 0.0;
                var fZMultZ = (fZNewZ > 0.0) ? 1.0 : 0.0;
                this.x1 = fBaseX + fXMultX * fXNewX + fYMultX * fYNewX + fZMultX * fZNewX;
                this.y1 = fBaseY + fXMultY * fXNewY + fYMultY * fYNewY + fZMultY * fZNewY;
                this.z1 = fBaseZ + fXMultZ * fXNewZ + fYMultZ * fYNewZ + fZMultZ * fZNewZ;
                this.x0 = fBaseX + (1.0 - fXMultX) * fXNewX + (1.0 - fYMultX) * fYNewX + (1.0 - fZMultX) * fZNewX;
                this.y0 = fBaseY + (1.0 - fXMultY) * fXNewY + (1.0 - fYMultY) * fYNewY + (1.0 - fZMultY) * fZNewY;
                this.z0 = fBaseZ + (1.0 - fXMultZ) * fXNewZ + (1.0 - fYMultZ) * fYNewZ + (1.0 - fZMultZ) * fZNewZ;
                return this;
            };
            Rect3d.prototype.isEqual = /**@inline*/ function (pRect) {
                return this.x0 == pRect.x0 && this.x1 == pRect.x1 && this.y0 == pRect.y0 && this.y1 == pRect.y1 && this.z0 == pRect.z0 && this.z1 == pRect.z1;
            };
            Rect3d.prototype.isClear = /**@inline*/ function () {
                return this.x0 == 0.0 && this.x1 == 0.0 && this.y0 == 0.0 && this.y1 == 0.0 && this.z0 == 0.0 && this.z1 == 0.0;
            };
            Rect3d.prototype.isValid = /**@inline*/ function () {
                return this.x0 <= this.x1 && this.y0 <= this.y1 && this.z0 <= this.z1;
            };
            Rect3d.prototype.isPointInRect = /**@inline*/ function (v3fPoint) {
                var x = v3fPoint.x;
                var y = v3fPoint.y;
                var z = v3fPoint.z;
                return (this.x0 <= x && x <= this.x1) && (this.y0 <= y && y <= this.y1) && (this.z0 <= z && z <= this.z1);
            };
            Rect3d.prototype.midPoint = function (v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new akra.Vec3();
                }
                return v3fDestination.set((this.x0 + this.x1) * 0.5, (this.y0 + this.y1) * 0.5, (this.z0 + this.z1) * 0.5);
            };
            Rect3d.prototype.midX = /**@inline*/ function () {
                return (this.x0 + this.x1) * 0.5;
            };
            Rect3d.prototype.midY = /**@inline*/ function () {
                return (this.y0 + this.y1) * 0.5;
            };
            Rect3d.prototype.midZ = /**@inline*/ function () {
                return (this.z0 + this.z1) * 0.5;
            };
            Rect3d.prototype.size = function (v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new akra.Vec3();
                }
                return v3fDestination.set(this.x1 - this.x0, this.y1 - this.y0, this.z1 - this.z0);
            };
            Rect3d.prototype.sizeX = /**@inline*/ function () {
                return this.x1 - this.x0;
            };
            Rect3d.prototype.sizeY = /**@inline*/ function () {
                return this.y1 - this.y0;
            };
            Rect3d.prototype.sizeZ = /**@inline*/ function () {
                return this.z1 - this.z0;
            };
            Rect3d.prototype.minPoint = function (v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new akra.Vec3();
                }
                return v3fDestination.set(this.x0, this.y0, this.z0);
            };
            Rect3d.prototype.maxPoint = function (v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new akra.Vec3();
                }
                return v3fDestination.set(this.x1, this.y1, this.z1);
            };
            Rect3d.prototype.volume = /**@inline*/ function () {
                return (this.x1 - this.x0) * (this.y1 - this.y0) * (this.z1 - this.z0);
            };
            Rect3d.prototype.corner = /**
            * counter-clockwise and from bottom
            * x0,y0,z0 -> x1,y0,z0 -> x1,y1,z0 -> x0,y1,z0 ->
            * x0,y0,z1 -> x1,y0,z1 -> x1,y1,z1 -> x0,y1,z1
            */
            function (iIndex, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new akra.Vec3();
                }
                akra.logger.setSourceLocation("geometry/Rect3d.ts", 748);
                akra.logger.assert(0 <= iIndex && iIndex < 8, "invalid index");
                ; ;
                switch(iIndex) {
                    case 0: {
                        v3fDestination.set(this.x0, this.y0, this.z0);
                        break;

                    }
                    case 1: {
                        v3fDestination.set(this.x1, this.y0, this.z0);
                        break;

                    }
                    case 2: {
                        v3fDestination.set(this.x1, this.y1, this.z0);
                        break;

                    }
                    case 3: {
                        v3fDestination.set(this.x0, this.y1, this.z0);
                        break;

                    }
                    case 4: {
                        v3fDestination.set(this.x0, this.y0, this.z1);
                        break;

                    }
                    case 5: {
                        v3fDestination.set(this.x1, this.y0, this.z1);
                        break;

                    }
                    case 6: {
                        v3fDestination.set(this.x1, this.y1, this.z1);
                        break;

                    }
                    case 7: {
                        v3fDestination.set(this.x0, this.y1, this.z1);
                        break;

                    }
                }
                return v3fDestination;
            };
            Rect3d.prototype.createBoundingSphere = function (pSphere) {
                if(!akra.isDef(pSphere)) {
                    pSphere = new geometry.Sphere();
                }
                var fX0 = this.x0, fX1 = this.x1;
                var fY0 = this.y0, fY1 = this.y1;
                var fZ0 = this.z0, fZ1 = this.z1;
                var fHalfSizeX = (fX1 - fX0) * 0.5;
                var fHalfSizeY = (fY1 - fY0) * 0.5;
                var fHalfSizeZ = (fZ1 - fZ0) * 0.5;
                pSphere.set((fX0 + fX1) * 0.5, (fY0 + fY1) * 0.5, (fZ0 + fZ1) * 0.5, akra.math.sqrt(fHalfSizeX * fHalfSizeX + fHalfSizeY * fHalfSizeY + fHalfSizeZ * fHalfSizeZ));
                return pSphere;
            };
            Rect3d.prototype.toString = function () {
                return "(" + this.x0 + ", " + this.y0 + ", " + this.z0 + ") --> (" + this.x1 + ", " + this.y1 + ", " + this.z1 + ")";
            };
            return Rect3d;
        })();
        geometry.Rect3d = Rect3d;        
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        (function (ESceneObjectFlags) {
            ESceneObjectFlags._map = [];
            ESceneObjectFlags.k_NewLocalBounds = 0;
            ESceneObjectFlags._map[1] = "k_NewWorldBounds";
            ESceneObjectFlags.k_NewWorldBounds = 1;
        })(scene.ESceneObjectFlags || (scene.ESceneObjectFlags = {}));
        var ESceneObjectFlags = scene.ESceneObjectFlags;
        ; ;
        var SceneObject = (function (_super) {
            __extends(SceneObject, _super);
            function SceneObject(pScene) {
                        _super.call(this, pScene);
                this._iObjectFlags = 0;
                this._pLocalBounds = new akra.geometry.Rect3d();
                this._pWorldBounds = new akra.geometry.Rect3d();
                this._hasShadows = false;
                this._iGuid = akra.sid();
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this.type = akra.EEntityTypes.SCENE_OBJECT;
            }
            /**@inline*/             Object.defineProperty(SceneObject.prototype, "worldBounds", {
                get: /**@inline*/ function () {
                    return this._pWorldBounds;
                }/**@inline*/ ,
                set: function (pBox) {
                    this._pWorldBounds = pBox;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SceneObject.prototype, "localBounds", {
                get: function () {
                    return this._pLocalBounds;
                },
                enumerable: true,
                configurable: true
            });
            SceneObject.prototype.getRenderable = function () {
                return null;
            };
            SceneObject.prototype.accessLocalBounds = function () {
                ((this._iObjectFlags) |= (1 << (ESceneObjectFlags.k_NewLocalBounds)));
                return this._pLocalBounds;
            }/**@inline*/ ;
            SceneObject.prototype.isWorldBoundsNew = function () {
                return ((this._iObjectFlags & (1 << (ESceneObjectFlags.k_NewLocalBounds))) != 0);
            };
            SceneObject.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
            };
            SceneObject.prototype.prepareForUpdate = function () {
                _super.prototype.prepareForUpdate.call(this);
                ((this._iObjectFlags) &= ~((1 << (ESceneObjectFlags.k_NewLocalBounds)) | (1 << (ESceneObjectFlags.k_NewWorldBounds))));
            };
            SceneObject.prototype.update = function () {
                //если, обновится мировая матрица узла, то и AABB обновится
                _super.prototype.update.call(this);
                // do we need to update our local matrix?
                // derived classes update the local matrix
                // then call this base function to complete
                // the update
                return this.recalcWorldBounds();
            };
            SceneObject.prototype.recalcWorldBounds = function () {
                // nodes only get their bounds updated
                // as nessesary
                if(((this._iObjectFlags & (1 << (ESceneObjectFlags.k_NewLocalBounds))) != 0) || this.isWorldMatrixNew()) {
                    // transform our local rectangle
                    // by the current world matrix
                    this._pWorldBounds.set(this._pLocalBounds);
                    // make sure we have some degree of thickness
                    if(true) {
                        this._pWorldBounds.x1 = Math.max(this._pWorldBounds.x1, this._pWorldBounds.x0 + 0.01);
                        this._pWorldBounds.y1 = Math.max(this._pWorldBounds.y1, this._pWorldBounds.y0 + 0.01);
                        this._pWorldBounds.z1 = Math.max(this._pWorldBounds.z1, this._pWorldBounds.z0 + 0.01);
                    }
                    this._pWorldBounds.transform(this.worldMatrix);
                    // set the flag that our bounding box has changed
                    ((this._iObjectFlags) |= (1 << (ESceneObjectFlags.k_NewWorldBounds)));
                    // this.worldBoundsUpdated();
                    return true;
                }
                return false;
            };
            SceneObject.prototype.prepareForRender = function () {
            };
            SceneObject.prototype.render = function () {
                _super.prototype.render.call(this);
            };
            SceneObject.prototype.hasShadows = function () {
                return this._hasShadows;
            };
            SceneObject.prototype.setShadows = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                this._hasShadows = bValue;
            };
            SceneObject.prototype.getObjectFlags = function () {
                return this._iObjectFlags;
            };
            SceneObject.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = true; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if(!isRecursive) {
                    return "<scene_object" + (this._sName ? " " + this._sName : "") + ">";
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            SceneObject._pEvenetTable = new akra.events.EventTable();
            SceneObject.prototype.getEventTable = /**@inline*/ function () {
                return SceneObject._pEvenetTable;
            }/**@inline*/ ;
            SceneObject.prototype.getGuid = function () {
                return this._iGuid;
            }/**@inline*/ ;
            SceneObject.prototype.connect = function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().addDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            };
            SceneObject.prototype.disconnect = /**@inline*/ function (pSender, sSignal, sSlot, eType) {
                return this.getEventTable().removeDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            }/**@inline*/ ;
            SceneObject.prototype.bind = function (sSignal, fnListener, eType) {
                return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
            }/**@inline*/ ;
            SceneObject.prototype.unbind = function (sSignal, fnListener, eType) {
                return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
            };
            SceneObject.prototype.worldBoundsUpdated = function () {
                var _recivier = this;
                this._pUnicastSlotMap = this._pUnicastSlotMap || this.getEventTable().findUnicastList(this._iGuid);
                var _unicast = (this._pUnicastSlotMap).worldBoundsUpdated;
                _unicast.target ? _unicast.target[_unicast.callback](_recivier) : _unicast.listener(_recivier);
            };
            return SceneObject;
        })(scene.SceneNode);
        scene.SceneObject = SceneObject;        
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (geometry) {
        var Plane3d = (function () {
            function Plane3d(v3fPoint1, v3fPoint2, v3fPoint3) {
                this.normal = new akra.Vec3();
                this.distance = 0.0;
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        this.set(arguments[0]);
                        break;

                    }
                    case 2: {
                        this.set(arguments[0], arguments[1]);
                        break;

                    }
                    case 3: {
                        this.set(arguments[0], arguments[1], arguments[2]);
                        break;

                    }
                    default: {
                        break;

                    }
                }
            }
            Plane3d.prototype.set = function (v3fPoint1, v3fPoint2, v3fPoint3) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        var pPlane = arguments[0];
                        this.normal.set(pPlane.normal);
                        this.distance = pPlane.distance;
                        break;

                    }
                    case 2: {
                        this.normal.set(arguments[0]);
                        this.distance = arguments[1];
                        break;

                    }
                    case 3: {
                        var v3fPoint1 = arguments[0];
                        var v3fPoint2 = arguments[1];
                        var v3fPoint3 = arguments[2];
                        var x1 = v3fPoint2.x - v3fPoint1.x;
                        var y1 = v3fPoint2.y - v3fPoint1.y;
                        var z1 = v3fPoint2.z - v3fPoint1.z;
                        var x2 = v3fPoint3.x - v3fPoint1.x;
                        var y2 = v3fPoint3.y - v3fPoint1.y;
                        var z2 = v3fPoint3.z - v3fPoint1.z;
                        var x = y1 * z2 - y2 * z1;
                        var y = z1 * x2 - z2 * x1;
                        var z = x1 * y2 - x2 * y1;
                        this.distance = -(x * v3fPoint1.x + y * v3fPoint1.y + z * v3fPoint1.z);
                        this.normal.set(x, y, z);
                        break;

                    }
                    default: {
                        this.normal.clear();
                        this.distance = 0.0;
                        break;

                    }
                }
                return this.normalize();
            };
            Plane3d.prototype.clear = /**@inline*/ function () {
                this.normal.clear();
                this.distance = 0.0;
                return this;
            };
            Plane3d.prototype.normalize = function () {
                var v3fNormal = this.normal;
                var x = v3fNormal.x, y = v3fNormal.y, z = v3fNormal.z;
                var fLength = akra.math.sqrt(x * x + y * y + z * z);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    v3fNormal.x = x * fInvLength;
                    v3fNormal.y = y * fInvLength;
                    v3fNormal.z = z * fInvLength;
                    this.distance *= fInvLength;
                }
                return this;
            };
            Plane3d.prototype.isEqual = function (pPlane) {
                return this.normal.isEqual(pPlane.normal) && (this.distance == pPlane.distance);
            };
            Plane3d.prototype.projectPointToPlane = /*предполагается работа только с нормализованной плоскостью*/
            function (v3fPoint, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new akra.Vec3();
                }
                var v3fNormal = this.normal;
                var fDistance = this.distance + v3fNormal.dot(v3fPoint);
                v3fDestination.x = v3fPoint.x - fDistance * v3fNormal.x;
                v3fDestination.y = v3fPoint.y - fDistance * v3fNormal.y;
                v3fDestination.z = v3fPoint.z - fDistance * v3fNormal.z;
                return v3fDestination;
            };
            Plane3d.prototype.solveForX = function (fY, fZ) {
                /*Ax+By+Cz+D=0;
                x = -(D+By+Cz)/A;*/
                var v3fNormal = this.normal;
                if(v3fNormal.x !== 0.0) {
                    return -(this.distance + v3fNormal.y * fY + v3fNormal.z * fZ) / v3fNormal.x;
                }
                return 0.0;
            };
            Plane3d.prototype.solveForY = function (fX, fZ) {
                /*Ax+By+Cz+D=0;
                y = -(D+Ax+Cz)/B;*/
                var v3fNormal = this.normal;
                if(v3fNormal.y !== 0.0) {
                    return -(this.distance + v3fNormal.x * fX + v3fNormal.z * fZ) / v3fNormal.y;
                }
                return 0.0;
            };
            Plane3d.prototype.solveForZ = function (fX, fY) {
                /*Ax+By+Cz+D=0;
                z = -(D+Ax+By)/C;*/
                var v3fNormal = this.normal;
                if(v3fNormal.z !== 0.0) {
                    return -(this.distance + v3fNormal.x * fX + v3fNormal.y * fY) / v3fNormal.z;
                }
                return 0.0;
            };
            Plane3d.prototype.signedDistance = function (v3fPoint) {
                return this.distance + this.normal.dot(v3fPoint);
            };
            return Plane3d;
        })();
        geometry.Plane3d = Plane3d;        
        ; ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
; ;
var akra;
(function (akra) {
    (function (geometry) {
        var Plane2d = (function () {
            function Plane2d(v2fPoint1, v2fPoint2) {
                this.normal = new akra.Vec2();
                this.distance = 0.0;
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        this.set(arguments[0]);
                        break;

                    }
                    case 2: {
                        this.set(arguments[0], arguments[1]);
                        break;

                    }
                    default: {
                        break;

                    }
                }
            }
            Plane2d.prototype.set = function (v2fPoint1, v2fPoint2) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        var pPlane = arguments[0];
                        this.normal.set(pPlane.normal);
                        this.distance = pPlane.distance;
                        break;

                    }
                    case 2: {
                        if(akra.isFloat(arguments[1])) {
                            this.normal.set(arguments[0]);
                            this.distance = arguments[1];
                        } else {
                            var v2fLine = akra.vec2(arguments[1]).subtract(arguments[0]);
                            var v2fNormal = this.normal;
                            v2fNormal.set(-v2fLine.y, v2fLine.x);
                            this.distance = -v2fNormal.dot(arguments[0]);
                        }
                        break;

                    }
                    default: {
                        this.normal.clear();
                        this.distance = 0.0;
                        break;

                    }
                }
                return this.normalize();
            };
            Plane2d.prototype.clear = /**@inline*/ function () {
                this.normal.clear();
                this.distance = 0.0;
                return this;
            };
            Plane2d.prototype.normalize = function () {
                var v2fNormal = this.normal;
                var x = v2fNormal.x;
                var y = v2fNormal.y;
                var fLength = akra.math.sqrt(x * x + y * y);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    v2fNormal.x = x * fInvLength;
                    v2fNormal.y = y * fInvLength;
                    this.distance = this.distance * fInvLength;
                }
                return this;
            };
            Plane2d.prototype.isEqual = /**@inline*/ function (pPlane) {
                return this.normal.isEqual(pPlane.normal) && (this.distance == pPlane.distance);
            };
            Plane2d.prototype.projectPointToPlane = /*предполагается работа только с нормализованной плоскостью*/
            function (v2fPoint, v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = new akra.Vec2();
                }
                var v2fNormal = this.normal;
                var fDistance = this.distance + v2fNormal.dot(v2fPoint);
                v2fDestination.x = v2fPoint.x - fDistance * v2fNormal.x;
                v2fDestination.y = v2fPoint.y - fDistance * v2fNormal.y;
                return v2fDestination;
            };
            Plane2d.prototype.solveForX = function (fY) {
                /*Ax+By+d=0;
                x=-(d+By)/A;*/
                var v2fNormal = this.normal;
                if(v2fNormal.x !== 0.0) {
                    return -(this.distance + v2fNormal.y * fY) / v2fNormal.x;
                }
                return 0.0;
            };
            Plane2d.prototype.solveForY = function (fX) {
                /*Ax+By+d=0;
                y=-(d+Ax)/B;*/
                var v2fNormal = this.normal;
                if(v2fNormal.y !== 0.0) {
                    return -(this.distance + v2fNormal.x * fX) / v2fNormal.y;
                }
                return 0.0;
            };
            Plane2d.prototype.signedDistance = /*предполагается работа только с нормализованной плоскостью*/
            /**@inline*/ function (v2fPoint) {
                return this.distance + this.normal.dot(v2fPoint);
            };
            return Plane2d;
        })();
        geometry.Plane2d = Plane2d;        
        ; ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (geometry) {
        (function (EVolumeClassifications) {
            EVolumeClassifications._map = [];
            EVolumeClassifications.NO_RELATION = 0;
            EVolumeClassifications._map[1] = "EQUAL";
            EVolumeClassifications.EQUAL = 1;
            EVolumeClassifications._map[2] = "A_CONTAINS_B";
            EVolumeClassifications.A_CONTAINS_B = 2;
            EVolumeClassifications._map[3] = "B_CONTAINS_A";
            EVolumeClassifications.B_CONTAINS_A = 3;
            EVolumeClassifications._map[4] = "INTERSECTING";
            EVolumeClassifications.INTERSECTING = 4;
        })(geometry.EVolumeClassifications || (geometry.EVolumeClassifications = {}));
        var EVolumeClassifications = geometry.EVolumeClassifications;
        ; ;
        (function (EPlaneClassifications) {
            EPlaneClassifications._map = [];
            /**
            * ax+by+cz+d=0
            * PLANE_FRONT - объект находится перед плоскостью, то есть по направлению нормали
            * PLANE_BACK - объект находится за плостостью, то есть против направления нормали
            */
            EPlaneClassifications.PLANE_FRONT = 0;
            EPlaneClassifications._map[1] = "PLANE_BACK";
            EPlaneClassifications.PLANE_BACK = 1;
            EPlaneClassifications._map[2] = "PLANE_INTERSECT";
            EPlaneClassifications.PLANE_INTERSECT = 2;
        })(geometry.EPlaneClassifications || (geometry.EPlaneClassifications = {}));
        var EPlaneClassifications = geometry.EPlaneClassifications;
        ; ;
        function planeClassifyCircle(pPlane, pCircle) {
            var fDistance = pPlane.signedDistance(pCircle.center);
            var fRadius = pCircle.radius;
            if(fDistance > fRadius) {
                return EPlaneClassifications.PLANE_FRONT;
            } else {
                if(fDistance < -fRadius) {
                    return EPlaneClassifications.PLANE_BACK;
                } else {
                    return EPlaneClassifications.PLANE_INTERSECT;
                }
            }
        }
        geometry.planeClassifyCircle = planeClassifyCircle;
        ; ;
        function planeClassifySphere(pPlane, pSphere) {
            var fDistance = pPlane.signedDistance(pSphere.center);
            var fRadius = pSphere.radius;
            if(fDistance > fRadius) {
                return EPlaneClassifications.PLANE_FRONT;
            } else {
                if(fDistance < -fRadius) {
                    return EPlaneClassifications.PLANE_BACK;
                } else {
                    return EPlaneClassifications.PLANE_INTERSECT;
                }
            }
        }
        geometry.planeClassifySphere = planeClassifySphere;
        ; ;
        function planeClassifyRect2d(pPlane, pRect) {
            var v2fMinPoint = akra.vec2();
            var v2fMaxPoint = akra.vec2();
            var v2fNormal = pPlane.normal;
            if(v2fNormal.x > 0.0) {
                v2fMinPoint.x = pRect.x0;
                v2fMaxPoint.x = pRect.x1;
            } else {
                v2fMinPoint.x = pRect.x1;
                v2fMaxPoint.x = pRect.x0;
            }
            if(v2fNormal.y > 0.0) {
                v2fMinPoint.y = pRect.y0;
                v2fMaxPoint.y = pRect.y1;
            } else {
                v2fMinPoint.y = pRect.y1;
                v2fMaxPoint.y = pRect.y0;
            }
            var fMinDistance = pPlane.signedDistance(v2fMinPoint);
            var fMaxDistance = pPlane.signedDistance(v2fMaxPoint);
            if(fMinDistance * fMaxDistance <= 0.0) {
                return EPlaneClassifications.PLANE_INTERSECT;
            } else {
                if(fMaxDistance < 0.0) {
                    return EPlaneClassifications.PLANE_BACK;
                } else {
                    return EPlaneClassifications.PLANE_FRONT;
                }
            }
        }
        geometry.planeClassifyRect2d = planeClassifyRect2d;
        ; ;
        function planeClassifyRect3d(pPlane, pRect) {
            var v3fMinPoint = akra.vec3();
            var v3fMaxPoint = akra.vec3();
            var v3fNormal = pPlane.normal;
            if(v3fNormal.x > 0.0) {
                v3fMinPoint.x = pRect.x0;
                v3fMaxPoint.x = pRect.x1;
            } else {
                v3fMinPoint.x = pRect.x1;
                v3fMaxPoint.x = pRect.x0;
            }
            if(v3fNormal.y > 0.0) {
                v3fMinPoint.y = pRect.y0;
                v3fMaxPoint.y = pRect.y1;
            } else {
                v3fMinPoint.y = pRect.y1;
                v3fMaxPoint.y = pRect.y0;
            }
            var fMinDistance = pPlane.signedDistance(v3fMinPoint);
            var fMaxDistance = pPlane.signedDistance(v3fMaxPoint);
            if(fMinDistance * fMaxDistance <= 0.0) {
                return EPlaneClassifications.PLANE_INTERSECT;
            } else {
                if(fMaxDistance < 0.0) {
                    return EPlaneClassifications.PLANE_BACK;
                } else {
                    return EPlaneClassifications.PLANE_FRONT;
                }
            }
        }
        geometry.planeClassifyRect3d = planeClassifyRect3d;
        ; ;
                                        function planeClassify(pPlane, pRect) {
            var pArg0 = arguments[0];
            var pArg1 = arguments[1];
            if(pArg0 instanceof geometry.Plane2d) {
                if(pArg1 instanceof geometry.Circle) {
                    return planeClassifyCircle(pArg0, pArg1);
                } else {
                    return planeClassifyRect2d(pArg0, pArg1);
                }
            } else {
                if(pArg1 instanceof geometry.Sphere) {
                    return planeClassifySphere(pArg0, pArg1);
                } else {
                    return planeClassifyRect3d(pArg0, pArg1);
                }
            }
        }
        geometry.planeClassify = planeClassify;
        ; ;
        function classifyRect2d(pRectA, pRectB) {
            var fRectAX0 = pRectA.x0, fRectAX1 = pRectA.x1;
            var fRectAY0 = pRectA.y0, fRectAY1 = pRectA.y1;
            var fRectBX0 = pRectB.x0, fRectBX1 = pRectB.x1;
            var fRectBY0 = pRectB.y0, fRectBY1 = pRectB.y1;
            if((fRectAX1 < fRectBX0 || fRectBX1 < fRectAX0) || (fRectAY1 < fRectBY0 || fRectAY1 < fRectBY0)) {
                return EVolumeClassifications.NO_RELATION;
            }
            if((fRectAX0 == fRectBX0 && fRectAX1 == fRectBX1) && (fRectAY0 == fRectBY0 && fRectAY1 == fRectBY1)) {
                return EVolumeClassifications.EQUAL;
            }
            if((fRectAX0 <= fRectBX0 && fRectBX1 <= fRectAX1) && (fRectAY0 <= fRectBY0 && fRectBY1 <= fRectAY1)) {
                return EVolumeClassifications.A_CONTAINS_B;
            }
            if((fRectBX0 <= fRectAX0 && fRectAX1 <= fRectBX1) && (fRectBY0 <= fRectAY0 && fRectAY1 <= fRectBY1)) {
                return EVolumeClassifications.B_CONTAINS_A;
            }
            return EVolumeClassifications.INTERSECTING;
        }
        geometry.classifyRect2d = classifyRect2d;
        ; ;
        function classifyRect3d(pRectA, pRectB) {
            var fRectAX0 = pRectA.x0, fRectAX1 = pRectA.x1;
            var fRectAY0 = pRectA.y0, fRectAY1 = pRectA.y1;
            var fRectAZ0 = pRectA.z0, fRectAZ1 = pRectA.z1;
            var fRectBX0 = pRectB.x0, fRectBX1 = pRectB.x1;
            var fRectBY0 = pRectB.y0, fRectBY1 = pRectB.y1;
            var fRectBZ0 = pRectB.z0, fRectBZ1 = pRectB.z1;
            if((fRectAX1 < fRectBX0 || fRectBX1 < fRectAX0) || (fRectAY1 < fRectBY0 || fRectAY1 < fRectBY0) || (fRectAZ1 < fRectBZ0 || fRectAZ1 < fRectBZ0)) {
                return EVolumeClassifications.NO_RELATION;
            }
            if((fRectAX0 == fRectBX0 && fRectAX1 == fRectBX1) && (fRectAY0 == fRectBY0 && fRectAY1 == fRectBY1) && (fRectAZ0 == fRectBZ0 && fRectAZ1 == fRectBZ1)) {
                return EVolumeClassifications.EQUAL;
            }
            if((fRectAX0 <= fRectBX0 && fRectBX1 <= fRectAX1) && (fRectAY0 <= fRectBY0 && fRectBY1 <= fRectAY1) && (fRectAZ0 <= fRectBZ0 && fRectBZ1 <= fRectAZ1)) {
                return EVolumeClassifications.A_CONTAINS_B;
            }
            if((fRectBX0 <= fRectAX0 && fRectAX1 <= fRectBX1) && (fRectBY0 <= fRectAY0 && fRectAY1 <= fRectBY1) && (fRectBZ0 <= fRectAZ0 && fRectAZ1 <= fRectBZ1)) {
                return EVolumeClassifications.B_CONTAINS_A;
            }
            return EVolumeClassifications.INTERSECTING;
        }
        geometry.classifyRect3d = classifyRect3d;
        ; ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
; ;
var akra;
(function (akra) {
    (function (geometry) {
        var Frustum = (function () {
            function Frustum(pLeftPlane, pRightPlane, pTopPlane, pBottomPlane, pNearPlane, pFarPlane) {
                this.leftPlane = new geometry.Plane3d();
                this.rightPlane = new geometry.Plane3d();
                this.topPlane = new geometry.Plane3d();
                this.bottomPlane = new geometry.Plane3d();
                this.nearPlane = new geometry.Plane3d();
                this.farPlane = new geometry.Plane3d();
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        this.set(arguments[0]);
                        break;

                    }
                    case 6: {
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                        break;

                    }
                    default: {
                        break;

                    }
                }
            }
            Frustum.prototype.set = function (pLeftPlane, pRightPlane, pTopPlane, pBottomPlane, pNearPlane, pFarPlane) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        var pFrustum = arguments[0];
                        this.leftPlane.set(pFrustum.leftPlane);
                        this.rightPlane.set(pFrustum.rightPlane);
                        this.topPlane.set(pFrustum.topPlane);
                        this.bottomPlane.set(pFrustum.bottomPlane);
                        this.nearPlane.set(pFrustum.nearPlane);
                        this.farPlane.set(pFrustum.farPlane);
                        break;

                    }
                    case 6: {
                        this.leftPlane.set(arguments[0]);
                        this.rightPlane.set(arguments[1]);
                        this.topPlane.set(arguments[2]);
                        this.bottomPlane.set(arguments[3]);
                        this.nearPlane.set(arguments[4]);
                        this.farPlane.set(arguments[5]);
                        break;

                    }
                    default: {
                        this.leftPlane.clear();
                        this.rightPlane.clear();
                        this.topPlane.clear();
                        this.bottomPlane.clear();
                        this.nearPlane.clear();
                        this.farPlane.clear();
                        break;

                    }
                }
                return this;
            };
            Frustum.prototype.extractFromMatrix = function (m4fProjection, m4fWorld, pSearchRect) {
                var v4fLeftBottomNear = akra.vec4();
                var v4fRightBottomNear = akra.vec4();
                var v4fLeftTopNear = akra.vec4();
                var v4fRightTopNear = akra.vec4();
                var v4fLeftBottomFar = akra.vec4();
                var v4fRightBottomFar = akra.vec4();
                var v4fLeftTopFar = akra.vec4();
                var v4fRightTopFar = akra.vec4();
                m4fProjection.unproj(akra.vec3(-1, -1, -1), v4fLeftBottomNear);
                m4fProjection.unproj(akra.vec3(1, -1, -1), v4fRightBottomNear);
                m4fProjection.unproj(akra.vec3(-1, 1, -1), v4fLeftTopNear);
                m4fProjection.unproj(akra.vec3(1, 1, -1), v4fRightTopNear);
                m4fProjection.unproj(akra.vec3(-1, -1, 1), v4fLeftBottomFar);
                m4fProjection.unproj(akra.vec3(1, -1, 1), v4fRightBottomFar);
                m4fProjection.unproj(akra.vec3(-1, 1, 1), v4fLeftTopFar);
                m4fProjection.unproj(akra.vec3(1, 1, 1), v4fRightTopFar);
                if(akra.isDef(m4fWorld)) {
                    m4fWorld.multiplyVec4(v4fLeftBottomNear, v4fLeftBottomNear);
                    m4fWorld.multiplyVec4(v4fRightBottomNear, v4fRightBottomNear);
                    m4fWorld.multiplyVec4(v4fLeftTopNear, v4fLeftTopNear);
                    m4fWorld.multiplyVec4(v4fRightTopNear, v4fRightTopNear);
                    m4fWorld.multiplyVec4(v4fLeftBottomFar, v4fLeftBottomFar);
                    m4fWorld.multiplyVec4(v4fRightBottomFar, v4fRightBottomFar);
                    m4fWorld.multiplyVec4(v4fLeftTopFar, v4fLeftTopFar);
                    m4fWorld.multiplyVec4(v4fRightTopFar, v4fRightTopFar);
                }
                var v3fLeftBottomNear = v4fLeftBottomNear.xyz;
                var v3fRightBottomNear = v4fRightBottomNear.xyz;
                var v3fLeftTopNear = v4fLeftTopNear.xyz;
                var v3fRightTopNear = v4fRightTopNear.xyz;
                var v3fLeftBottomFar = v4fLeftBottomFar.xyz;
                var v3fRightBottomFar = v4fRightBottomFar.xyz;
                var v3fLeftTopFar = v4fLeftTopFar.xyz;
                var v3fRightTopFar = v4fRightTopFar.xyz;
                //filling search rectangle
                if(akra.isDef(pSearchRect)) {
                    pSearchRect.set(v3fLeftBottomNear, v3fLeftBottomNear);
                    pSearchRect.unionPoint(v3fRightBottomNear);
                    pSearchRect.unionPoint(v3fLeftTopNear);
                    pSearchRect.unionPoint(v3fRightTopNear);
                    pSearchRect.unionPoint(v3fLeftBottomFar);
                    pSearchRect.unionPoint(v3fRightBottomFar);
                    pSearchRect.unionPoint(v3fLeftTopFar);
                    pSearchRect.unionPoint(v3fRightTopFar);
                }
                //calculating planes
                this.leftPlane.set(v3fLeftTopNear, v3fLeftTopFar, v3fLeftBottomNear);
                this.rightPlane.set(v3fRightBottomFar, v3fRightTopFar, v3fRightBottomNear);
                this.topPlane.set(v3fLeftTopNear, v3fRightTopNear, v3fLeftTopFar);
                this.bottomPlane.set(v3fRightBottomFar, v3fRightBottomNear, v3fLeftBottomFar);
                this.nearPlane.set(v3fLeftTopNear, v3fLeftBottomNear, v3fRightTopNear);
                this.farPlane.set(v3fRightBottomFar, v3fLeftBottomFar, v3fRightTopFar);
                return this;
            };
            Frustum.prototype.isEqual = /**@inline*/ function (pFrustum) {
                return (this.leftPlane.isEqual(pFrustum.leftPlane) && this.rightPlane.isEqual(pFrustum.rightPlane) && this.topPlane.isEqual(pFrustum.topPlane) && this.bottomPlane.isEqual(pFrustum.bottomPlane) && this.nearPlane.isEqual(pFrustum.nearPlane) && this.farPlane.isEqual(pFrustum.farPlane));
            };
            Frustum.prototype.testPoint = function (v3fPoint) {
                if(this.leftPlane.signedDistance(v3fPoint) > 0.0 || this.rightPlane.signedDistance(v3fPoint) > 0.0 || this.topPlane.signedDistance(v3fPoint) > 0.0 || this.bottomPlane.signedDistance(v3fPoint) > 0.0 || this.nearPlane.signedDistance(v3fPoint) > 0.0 || this.farPlane.signedDistance(v3fPoint) > 0.0) {
                    return false;
                }
                return true;
            };
            Frustum.prototype.testRect = function (pRect) {
                if(geometry.planeClassifyRect3d(this.leftPlane, pRect) == geometry.EPlaneClassifications.PLANE_FRONT || geometry.planeClassifyRect3d(this.rightPlane, pRect) == geometry.EPlaneClassifications.PLANE_FRONT || geometry.planeClassifyRect3d(this.topPlane, pRect) == geometry.EPlaneClassifications.PLANE_FRONT || geometry.planeClassifyRect3d(this.bottomPlane, pRect) == geometry.EPlaneClassifications.PLANE_FRONT || geometry.planeClassifyRect3d(this.nearPlane, pRect) == geometry.EPlaneClassifications.PLANE_FRONT || geometry.planeClassifyRect3d(this.farPlane, pRect) == geometry.EPlaneClassifications.PLANE_FRONT) {
                    return false;
                }
                return true;
            };
            Frustum.prototype.testSphere = function (pSphere) {
                if(geometry.planeClassifySphere(this.leftPlane, pSphere) == geometry.EPlaneClassifications.PLANE_FRONT || geometry.planeClassifySphere(this.rightPlane, pSphere) == geometry.EPlaneClassifications.PLANE_FRONT || geometry.planeClassifySphere(this.topPlane, pSphere) == geometry.EPlaneClassifications.PLANE_FRONT || geometry.planeClassifySphere(this.bottomPlane, pSphere) == geometry.EPlaneClassifications.PLANE_FRONT || geometry.planeClassifySphere(this.nearPlane, pSphere) == geometry.EPlaneClassifications.PLANE_FRONT || geometry.planeClassifySphere(this.farPlane, pSphere) == geometry.EPlaneClassifications.PLANE_FRONT) {
                    return false;
                }
                return true;
            };
            return Frustum;
        })();
        geometry.Frustum = Frustum;        
        ; ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        (function (objects) {
            (function (ECameraFlags) {
                ECameraFlags._map = [];
                ECameraFlags.k_NewProjectionMatrix = 0;
            })(objects.ECameraFlags || (objects.ECameraFlags = {}));
            var ECameraFlags = objects.ECameraFlags;
            ; ;
            var Camera = (function (_super) {
                __extends(Camera, _super);
                function Camera(pScene) {
                                _super.call(this, pScene);
                    /** camera type */
                    this._eCameraType = akra.ECameraTypes.PERSPECTIVE;
                    /** camera options */
                    this._iCameraOptions = 0;
                    /** update projection bit flag */
                    this._iUpdateProjectionFlags = 0;
                    /** View matrix */
                    this._m4fView = new akra.Mat4();
                    /** internal, un-biased projection matrix */
                    this._m4fProj = new akra.Mat4();
                    this._m4fUnitProj = new akra.Mat4();
                    /** internal, un-biased view+projection matrix */
                    this._m4fProjView = new akra.Mat4();
                    /** Biased for use during current render stage */
                    this._m4fRenderStageProj = new akra.Mat4();
                    this._m4fRenderStageProjView = new akra.Mat4();
                    /** Search rect for scene culling */
                    this._pSearchRect = new akra.geometry.Rect3d();
                    /** Position */
                    this._v3fTargetPos = new akra.Vec3();
                    /** Attributes for projection matrix */
                    this._fFOV = akra.math.PI / 5.0;
                    this._fAspect = 4.0 / 3.0;
                    this._fNearPlane = 0.1;
                    this._fFarPlane = 500.0;
                    this._fWidth = 0.0;
                    this._fHeight = 0.0;
                    this._fMinX = 0.0;
                    this._fMaxX = 0.0;
                    this._fMinY = 0.0;
                    this._fMaxY = 0.0;
                    this._pFrustum = new akra.geometry.Frustum();
                    this._pFrustumVertices = new Array(8);
                    this.pFrustumVertices = new Array(8);
                    this._pLastViewport = null;
                    this._pCache = [
                        {
                        }, 
                        {
                        }
                    ];
                    this._iGuid = akra.sid();
                    this._pUnicastSlotMap = null;
                    this._pBroadcastSlotList = null;
                    this.type = akra.EEntityTypes.CAMERA;
                }
                Object.defineProperty(Camera.prototype, "viewMatrix", {
                    get: // protected _pPrevObjects: ISceneNode[] = null;
                    // protected _p
                    /**@inline*/ function () {
                        return this._m4fView;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Camera.prototype, "projectionMatrix", {
                    get: function () {
                        return this._m4fRenderStageProj;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Camera.prototype, "projViewMatrix", {
                    get: function () {
                        return this._m4fRenderStageProjView;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Camera.prototype, "internalProjectionMatrix", {
                    get: function () {
                        return this._m4fProj;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Camera.prototype, "internalViewProjMatrix", {
                    get: function () {
                        return this._m4fProjView;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Camera.prototype, "targetPos", {
                    get: function () {
                        return this._v3fTargetPos;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Camera.prototype, "fov", {
                    get: function () {
                        return this._fFOV;
                    }/**@inline*/ ,
                    set: function (fFOV) {
                        this._fFOV = fFOV;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Camera.prototype, "aspect", {
                    get: /**@inline*/ function () {
                        return this._fAspect;
                    }/**@inline*/ ,
                    set: function (fAspect) {
                        this._fAspect = fAspect;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Camera.prototype, "nearPlane", {
                    get: function () {
                        return this._fNearPlane;
                    }/**@inline*/ ,
                    set: function (fNearPlane) {
                        this._fNearPlane = fNearPlane;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Camera.prototype, "farPlane", {
                    get: function () {
                        return this._fFarPlane;
                    }/**@inline*/ ,
                    set: function (fFarPlane) {
                        this._fFarPlane = fFarPlane;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Camera.prototype, "viewDistance", {
                    get: function () {
                        return this._fFarPlane - this._fNearPlane;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Camera.prototype, "searchRect", {
                    get: function () {
                        return this._pSearchRect;
                    }/**@inline*/ ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Camera.prototype, "frustum", {
                    get: function () {
                        return this._pFrustum;
                    },
                    enumerable: true,
                    configurable: true
                });
                Camera.prototype.create = function () {
                    var isOK = _super.prototype.create.call(this);
                    if(isOK) {
                        this._v3fTargetPos.set(this._m4fLocalMatrix.data[8], this._m4fLocalMatrix.data[9], this._m4fLocalMatrix.data[10]);
                        this._v3fTargetPos.negate();
                        this.setProjParams(this._fFOV, this._fAspect, this._fNearPlane, this._fFarPlane);
                        this.recalcMatrices();
                        //register default display list
                        //if default display list not founded
                        if(akra.isNull(this._pScene.getDisplayList())) {
                        }
                    }
                    return isOK;
                };
                Camera.prototype.prepareForUpdate = function () {
                    _super.prototype.prepareForUpdate.call(this);
                    this.swapCache();
                    this.clearCache();
                }/**@inline*/ ;
                Camera.prototype.clearCache = function () {
                    for(var i in this._pCache[0]) {
                        this._pCache[0][i] = null;
                    }
                }/**@inline*/ ;
                Camera.prototype.swapCache = function () {
                    //храним результаты текущего и предыдущего кадров.
                    this._pCache.swap(0, 1);
                };
                Camera.prototype.display = function (csList) {
                    if (typeof csList === "undefined") { csList = null; }
                    var iCacheNode = this.scene.isUpdated() ? 0 : 1;
                    var pResult = this._pCache[iCacheNode][csList];
                    if(!akra.isDefAndNotNull(pResult)) {
                        pResult = this._pCache[iCacheNode][csList] = this._pScene._findObjects(this, csList);
                    }
                    return pResult;
                };
                Camera.prototype.setParameter = function (eParam, pValue) {
                    if(eParam === akra.ECameraParameters.CONST_ASPECT && pValue) {
                        ((this._iCameraOptions) |= (eParam));
                    }
                };
                Camera.prototype.isConstantAspect = function () {
                    return (((this._iCameraOptions) & (akra.ECameraParameters.CONST_ASPECT)) != 0);
                };
                Camera.prototype.setProjParams = function (fFOV, fAspect, fNearPlane, fFarPlane) {
                    // Set attributes for the projection matrix
                    this._fFOV = fFOV;
                    this._fAspect = fAspect;
                    this._fNearPlane = fNearPlane;
                    this._fFarPlane = fFarPlane;
                    this._eCameraType = akra.ECameraTypes.PERSPECTIVE;
                    // create the regular projection matrix
                    akra.Mat4.perspective(fFOV, fAspect, fNearPlane, fFarPlane, this._m4fProj);
                    // create a unit-space matrix
                    // for sky box geometry.
                    // this ensures that the
                    // near and far plane enclose
                    // the unit space around the camera
                    akra.Mat4.perspective(fFOV, fAspect, 0.01, 2.0, this._m4fUnitProj);
                    ((this._iUpdateProjectionFlags) |= (1 << (ECameraFlags.k_NewProjectionMatrix)));
                };
                Camera.prototype.setOrthoParams = function (fWidth, fHeight, fNearPlane, fFarPlane) {
                    akra.logger.setSourceLocation("objects/Camera.ts", 188);
                    akra.logger.criticalError("TODO: setOrthoParams();");
                    ; ;
                    /*
                    
                    this._fWidth = fWidth;
                    this._fHeight = fHeight;
                    this._fNearPlane = fNearPlane;
                    this._fFarPlane = fFarPlane;
                    this._eCameraType = ECameraTypes.ORTHO;
                    
                    // create the regular projection matrix
                    Mat4.matrixOrthoRH(fWidth, fHeight, fNearPlane, fFarPlane, this._m4fProj);
                    
                    // create a unit-space matrix
                    // for sky box geometry.
                    // this ensures that the
                    // near and far plane enclose
                    // the unit space around the camera
                    Mat4.matrixOrthoRH(fWidth, fHeight, 0.01, 2.0, this._m4fUnitProj);
                    
                    TRUE_BIT(this._iUpdateProjectionFlags, ECameraFlags.k_NewProjectionMatrix);
                    
                    */
                                    };
                Camera.prototype.setOffsetOrthoParams = function (fMinX, fMaxX, fMinY, fMaxY, fNearPlane, fFarPlane) {
                    this._fMinX = fMinX;
                    this._fMaxX = fMaxX;
                    this._fMinY = fMinY;
                    this._fMaxY = fMaxY;
                    this._fNearPlane = fNearPlane;
                    this._fFarPlane = fFarPlane;
                    this._eCameraType = akra.ECameraTypes.OFFSET_ORTHO;
                    // create the regular projection matrix
                    /*orthogonalProjection*/
                    akra.Mat4.orthogonalProjectionAsymmetric(fMinX, fMaxX, fMinY, fMaxY, fNearPlane, fFarPlane, this._m4fProj);
                    // create a unit-space matrix
                    // for sky box geometry.
                    // this ensures that the
                    // near and far plane enclose
                    // the unit space around the camera
                    /*orthogonalProjection*/
                    akra.Mat4.orthogonalProjectionAsymmetric(fMinX, fMaxX, fMinY, fMaxY, 0.01, 2.0, this._m4fUnitProj);
                    ((this._iUpdateProjectionFlags) |= (1 << (ECameraFlags.k_NewProjectionMatrix)));
                };
                Camera.prototype.recalcMatrices = function () {
                    this._v3fTargetPos.set(this._m4fLocalMatrix.data[8], this._m4fLocalMatrix.data[9], this._m4fLocalMatrix.data[10]);
                    this._v3fTargetPos.negate();
                    // the camera view matrix is the
                    // inverse of the world matrix
                    this._m4fView.set(this.inverseWorldMatrix);
                    // sky boxes use the inverse
                    // world matrix of the camera (the
                    // camera view matrix) without
                    // any translation information.
                    //this.m4fSkyBox.set(this.m4fView);
                    // this.m4fSkyBox.data[__14] = 0.0;
                    // this.m4fSkyBox.data[__24] = 0.0;
                    // this.m4fSkyBox.data[__34] = 0.0;
                    // this is combined with the unit
                    // space projection matrix to form
                    // the sky box viewing matrix
                    //this.m4fSkyBox.multiply(this.m4fUnitProj, this.m4fSkyBox);
                    // billboard objects use our world matrix
                    // without translation
                    // this.m4fBillboard.set(this.worldMatrix());
                    // this.m4fBillboard.data[__14] = 0.0;
                    // this.m4fBillboard.data[__24] = 0.0;
                    // this.m4fBillboard.data[__34] = 0.0;
                                    };
                Camera.prototype.update = function () {
                    var isUpdated = _super.prototype.update.call(this);
                    if(((this._iUpdateProjectionFlags & (1 << (ECameraFlags.k_NewProjectionMatrix))) != 0)) {
                        this.extractFrustumVertices();
                        this._m4fRenderStageProj.set(this._m4fProj);
                        if(!this.isWorldMatrixNew()) {
                            this.rebuildSearchRectAndFrustum();
                            // our view proj matrix is the inverse of our world matrix
                            // multiplied by the projection matrix
                            this._m4fProj.multiply(this._m4fView, this._m4fRenderStageProjView);
                        }
                        isUpdated = true;
                    }
                    if(this.isWorldMatrixNew()) {
                        this.recalcMatrices();
                        this.rebuildSearchRectAndFrustum();
                        // our view proj matrix is the inverse of our world matrix
                        // multiplied by the projection matrix
                        this._m4fProj.multiply(this._m4fView, this._m4fRenderStageProjView);
                    }
                    return isUpdated;
                };
                Camera.prototype.applyRenderStageBias = function (iStage) {
                    var fZ_bias = iStage > 1 ? 0.001 : 0.0;
                    this._m4fRenderStageProj.set(this._m4fProj);
                    this._m4fRenderStageProjView.set(this._m4fProjView);
                    this._m4fRenderStageProj[14] -= fZ_bias;
                    this._m4fRenderStageProjView[14] -= fZ_bias;
                };
                Camera.prototype.lookAt = function (v3f) {
                    var v3fFrom, v3fCenter, v3fUp;
                    if(arguments.length < 3) {
                        v3fFrom = this.worldPosition;
                        v3fCenter = arguments[0];
                        v3fUp = arguments[1];
                    } else {
                        v3fFrom = arguments[0];
                        v3fCenter = arguments[1];
                        v3fUp = arguments[2];
                    }
                    v3fUp = v3fUp || akra.vec3(0.0, 1.0, 0.0);
                    var v3fParentPos = (this.parent).worldPosition;
                    var m4fTemp = akra.Mat4.lookAt(v3fFrom, v3fCenter, v3fUp, akra.mat4()).inverse();
                    var pData = m4fTemp.data;
                    switch(this._eInheritance) {
                        case akra.ENodeInheritance.ALL: {
                            (this._pParent).inverseWorldMatrix.multiply(m4fTemp, m4fTemp);
                            m4fTemp.toQuat4(this._qRotation);
                            this.setPosition(pData[12], pData[13], pData[14]);
                            break;

                        }
                        case akra.ENodeInheritance.ROTSCALE: {
                            var m3fTemp = m4fTemp.toMat3();
                            m3fTemp = (this._pParent).inverseWorldMatrix.toMat3().multiply(m3fTemp, akra.mat3());
                            m3fTemp.toQuat4(this._qRotation);
                            this.setPosition(pData[12], pData[13], pData[14]);
                            break;

                        }
                        default: {
                            m4fTemp.toQuat4(this._qRotation);
                            this.setPosition(pData[12] - v3fParentPos.x, pData[13] - v3fParentPos.y, pData[14] - v3fParentPos.z);

                        }
                    }
                };
                Camera.prototype.extractFrustumVertices = function () {
                    var _pFrustumVertices = this._pFrustumVertices;
                    var m4fProj = this._m4fProj;
                    // this._pFrustumVertices, this.pFrustumVertices
                    // [0] - this._v4fLeftBottomNear;
                    // [1] - this._v4fRightBottomNear;
                    // [2] - this._v4fLeftTopNear;
                    // [3] - this._v4fRightTopNear;
                    // [4] - this._v4fLeftBottomFar;
                    // [5] - this._v4fRightBottomFar;
                    // [6] - this._v4fLeftTopFar;
                    // [7] - this._v4fRightTopFar;
                    // m4fProj.unproj(vec4(-1,-1,-1,1),this._v4fLeftBottomNear);
                    // m4fProj.unproj(vec4(1,-1,-1,1),this._v4fRightBottomNear);
                    // m4fProj.unproj(vec4(-1,1,-1,1),this._v4fLeftTopNear);
                    // m4fProj.unproj(vec4(1,1,-1,1),this._v4fRightTopNear);
                    // m4fProj.unproj(vec4(-1,-1,1,1),this._v4fLeftBottomFar);
                    // m4fProj.unproj(vec4(1,-1,1,1),this._v4fRightBottomFar);
                    // m4fProj.unproj(vec4(-1,1,1,1),this._v4fLeftTopFar);
                    // m4fProj.unproj(vec4(1,1,1,1),this._v4fRightTopFar);
                    m4fProj.unproj(akra.vec4(-1, -1, -1, 1), _pFrustumVertices[0]);
                    m4fProj.unproj(akra.vec4(1, -1, -1, 1), _pFrustumVertices[1]);
                    m4fProj.unproj(akra.vec4(-1, 1, -1, 1), _pFrustumVertices[2]);
                    m4fProj.unproj(akra.vec4(1, 1, -1, 1), _pFrustumVertices[3]);
                    m4fProj.unproj(akra.vec4(-1, -1, 1, 1), _pFrustumVertices[4]);
                    m4fProj.unproj(akra.vec4(1, -1, 1, 1), _pFrustumVertices[5]);
                    m4fProj.unproj(akra.vec4(-1, 1, 1, 1), _pFrustumVertices[6]);
                    m4fProj.unproj(akra.vec4(1, 1, 1, 1), _pFrustumVertices[7]);
                    ((this._iUpdateProjectionFlags) &= ~(1 << (ECameraFlags.k_NewProjectionMatrix)));
                };
                Camera.prototype.rebuildSearchRectAndFrustum = function () {
                    //нормали всех плоскостей frustum-а смотрят наружу
                    var m4fCameraWorld = this._m4fWorldMatrix;
                    var pFrustum = this._pFrustum;
                    // var v4fLeftBottomNear = m4fCameraWorld.multiply(this._v4fLeftBottomNear,Vec4());
                    // var v4fRightBottomNear = m4fCameraWorld.multiply(this._v4fRightBottomNear,Vec4());
                    // var v4fLeftTopNear = m4fCameraWorld.multiply(this._v4fLeftTopNear,Vec4());
                    // var v4fRightTopNear = m4fCameraWorld.multiply(this._v4fRightTopNear,Vec4());
                    // var v4fLeftBottomFar = m4fCameraWorld.multiply(this._v4fLeftBottomFar,Vec4());
                    // var v4fRightBottomFar = m4fCameraWorld.multiply(this._v4fRightBottomFar,Vec4());
                    // var v4fLeftTopFar = m4fCameraWorld.multiply(this._v4fLeftTopFar,Vec4());
                    // var v4fRightTopFar = m4fCameraWorld.multiply(this._v4fRightTopFar,Vec4());
                    var _pFrustumVertices = this._pFrustumVertices;
                    var pFrustumVertices = this.pFrustumVertices;
                    ////////////////////////////////////////////////////////////////////////////////
                    var v4fLeftBottomNear = m4fCameraWorld.multiplyVec4(_pFrustumVertices[0], pFrustumVertices[0]);
                    var v4fRightBottomNear = m4fCameraWorld.multiplyVec4(_pFrustumVertices[1], pFrustumVertices[1]);
                    var v4fLeftTopNear = m4fCameraWorld.multiplyVec4(_pFrustumVertices[2], pFrustumVertices[2]);
                    var v4fRightTopNear = m4fCameraWorld.multiplyVec4(_pFrustumVertices[3], pFrustumVertices[3]);
                    var v4fLeftBottomFar = m4fCameraWorld.multiplyVec4(_pFrustumVertices[4], pFrustumVertices[4]);
                    var v4fRightBottomFar = m4fCameraWorld.multiplyVec4(_pFrustumVertices[5], pFrustumVertices[5]);
                    var v4fLeftTopFar = m4fCameraWorld.multiplyVec4(_pFrustumVertices[6], pFrustumVertices[6]);
                    var v4fRightTopFar = m4fCameraWorld.multiplyVec4(_pFrustumVertices[7], pFrustumVertices[7]);
                    ////////////////////////////////////////////////////////////////////////////////
                    var v4fLeftBottomNearData = v4fLeftBottomNear;
                    var v4fRightBottomNearData = v4fRightBottomNear;
                    var v4fLeftTopNearData = v4fLeftTopNear;
                    var v4fRightTopNearData = v4fRightTopNear;
                    var v4fLeftBottomFarData = v4fLeftBottomFar;
                    var v4fRightBottomFarData = v4fRightBottomFar;
                    var v4fLeftTopFarData = v4fLeftTopFar;
                    var v4fRightTopFarData = v4fRightTopFar;
                    /*первый вектор*/
                                        var x1, y1, z1;
                    /*второй вектор*/
                                        var x2, y2, z2;
                    /*векторное произведение*/
                                        var x3, y3, z3;
                    /*длина скалярного произведения*/
                                        var fLength, fInvLength;
                    /*LTNLBN - left top near - left bottom near; /*from - to*/
                    var pDirectionLTNLBN = akra.vec3();
                    /*LTNRTN - left top near - right top near;*/
                    var pDirectionLTNRTN = akra.vec3();
                    /*LTNLTF - left top near - left top far;*/
                    var pDirectionLTNLTF = akra.vec3();
                    /*RBFRTF - right bottom far - right top far;*/
                    var pDirectionRBFRTF = akra.vec3();
                    /*RBFRBN - right bottom far - right bottom near;*/
                    var pDirectionRBFRBN = akra.vec3();
                    /*RBFLBF - right bottom far - left bottom far;*/
                    var pDirectionRBFLBF = akra.vec3();
                    pDirectionLTNLBN.x = v4fLeftBottomNearData.x - v4fLeftTopNearData.x;
                    pDirectionLTNLBN.y = v4fLeftBottomNearData.y - v4fLeftTopNearData.y;
                    pDirectionLTNLBN.z = v4fLeftBottomNearData.z - v4fLeftTopNearData.z;
                    pDirectionLTNRTN.x = v4fRightTopNearData.x - v4fLeftTopNearData.x;
                    pDirectionLTNRTN.y = v4fRightTopNearData.y - v4fLeftTopNearData.y;
                    pDirectionLTNRTN.z = v4fRightTopNearData.z - v4fLeftTopNearData.z;
                    pDirectionLTNLTF.x = v4fLeftTopFarData.x - v4fLeftTopNearData.x;
                    pDirectionLTNLTF.y = v4fLeftTopFarData.y - v4fLeftTopNearData.y;
                    pDirectionLTNLTF.z = v4fLeftTopFarData.z - v4fLeftTopNearData.z;
                    pDirectionRBFRTF.x = v4fRightTopFarData.x - v4fRightBottomFarData.x;
                    pDirectionRBFRTF.y = v4fRightTopFarData.y - v4fRightBottomFarData.y;
                    pDirectionRBFRTF.z = v4fRightTopFarData.z - v4fRightBottomFarData.z;
                    pDirectionRBFRBN.x = v4fRightBottomNearData.x - v4fRightBottomFarData.x;
                    pDirectionRBFRBN.y = v4fRightBottomNearData.y - v4fRightBottomFarData.y;
                    pDirectionRBFRBN.z = v4fRightBottomNearData.z - v4fRightBottomFarData.z;
                    pDirectionRBFLBF.x = v4fLeftBottomFarData.x - v4fRightBottomFarData.x;
                    pDirectionRBFLBF.y = v4fLeftBottomFarData.y - v4fRightBottomFarData.y;
                    pDirectionRBFLBF.z = v4fLeftBottomFarData.z - v4fRightBottomFarData.z;
                    /////////////////////////////////////////
                    var testPoint1 = v4fLeftTopNearData;
                    var testPoint2 = v4fRightBottomFarData;
                    /////////////////////////////////////////
                    //near plane
                    x1 = pDirectionLTNLBN.x;
                    y1 = pDirectionLTNLBN.y;
                    z1 = pDirectionLTNLBN.z;
                    x2 = pDirectionLTNRTN.x;
                    y2 = pDirectionLTNRTN.y;
                    z2 = pDirectionLTNRTN.z;
                    //normal
                    x3 = y1 * z2 - z1 * y2;
                    y3 = z1 * x2 - x1 * z2;
                    z3 = x1 * y2 - y1 * x2;
                    fLength = akra.math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
                    fInvLength = 1 / fLength;
                    x3 *= fInvLength;
                    y3 *= fInvLength;
                    z3 *= fInvLength;
                    var v3fNormalNearData = pFrustum.nearPlane.normal;
                    v3fNormalNearData.x = x3;
                    v3fNormalNearData.y = y3;
                    v3fNormalNearData.z = z3;
                    //constant
                    pFrustum.nearPlane.distance = -(testPoint1.x * x3 + testPoint1.y * y3 + testPoint1.z * z3);
                    /////////////////////////////////////////
                    //left plane
                    x1 = pDirectionLTNLTF.x;
                    y1 = pDirectionLTNLTF.y;
                    z1 = pDirectionLTNLTF.z;
                    x2 = pDirectionLTNLBN.x;
                    y2 = pDirectionLTNLBN.y;
                    z2 = pDirectionLTNLBN.z;
                    //normal
                    x3 = y1 * z2 - z1 * y2;
                    y3 = z1 * x2 - x1 * z2;
                    z3 = x1 * y2 - y1 * x2;
                    fLength = akra.math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
                    fInvLength = 1 / fLength;
                    x3 *= fInvLength;
                    y3 *= fInvLength;
                    z3 *= fInvLength;
                    var v3fNormalLeftData = pFrustum.leftPlane.normal;
                    v3fNormalLeftData.x = x3;
                    v3fNormalLeftData.y = y3;
                    v3fNormalLeftData.z = z3;
                    //constant
                    pFrustum.leftPlane.distance = -(testPoint1.x * x3 + testPoint1.y * y3 + testPoint1.z * z3);
                    /////////////////////////////////////////
                    //top plane
                    x1 = pDirectionLTNRTN.x;
                    y1 = pDirectionLTNRTN.y;
                    z1 = pDirectionLTNRTN.z;
                    x2 = pDirectionLTNLTF.x;
                    y2 = pDirectionLTNLTF.y;
                    z2 = pDirectionLTNLTF.z;
                    //normal
                    x3 = y1 * z2 - z1 * y2;
                    y3 = z1 * x2 - x1 * z2;
                    z3 = x1 * y2 - y1 * x2;
                    fLength = akra.math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
                    fInvLength = 1 / fLength;
                    x3 *= fInvLength;
                    y3 *= fInvLength;
                    z3 *= fInvLength;
                    var v3fNormalTopData = pFrustum.topPlane.normal;
                    v3fNormalTopData.x = x3;
                    v3fNormalTopData.y = y3;
                    v3fNormalTopData.z = z3;
                    //constant
                    pFrustum.topPlane.distance = -(testPoint1.x * x3 + testPoint1.y * y3 + testPoint1.z * z3);
                    /////////////////////////////////////////
                    //right plane
                    x1 = pDirectionRBFRTF.x;
                    y1 = pDirectionRBFRTF.y;
                    z1 = pDirectionRBFRTF.z;
                    x2 = pDirectionRBFRBN.x;
                    y2 = pDirectionRBFRBN.y;
                    z2 = pDirectionRBFRBN.z;
                    //normal
                    x3 = y1 * z2 - z1 * y2;
                    y3 = z1 * x2 - x1 * z2;
                    z3 = x1 * y2 - y1 * x2;
                    fLength = akra.math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
                    fInvLength = 1 / fLength;
                    x3 *= fInvLength;
                    y3 *= fInvLength;
                    z3 *= fInvLength;
                    var v3fNormalRightData = pFrustum.rightPlane.normal;
                    v3fNormalRightData.x = x3;
                    v3fNormalRightData.y = y3;
                    v3fNormalRightData.z = z3;
                    //constant
                    pFrustum.rightPlane.distance = -(testPoint2.x * x3 + testPoint2.y * y3 + testPoint2.z * z3);
                    /////////////////////////////////////////
                    //bottom plane
                    x1 = pDirectionRBFRBN.x;
                    y1 = pDirectionRBFRBN.y;
                    z1 = pDirectionRBFRBN.z;
                    x2 = pDirectionRBFLBF.x;
                    y2 = pDirectionRBFLBF.y;
                    z2 = pDirectionRBFLBF.z;
                    //normal
                    x3 = y1 * z2 - z1 * y2;
                    y3 = z1 * x2 - x1 * z2;
                    z3 = x1 * y2 - y1 * x2;
                    fLength = akra.math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
                    fInvLength = 1.0 / fLength;
                    x3 *= fInvLength;
                    y3 *= fInvLength;
                    z3 *= fInvLength;
                    var v3fNormalBottomData = pFrustum.bottomPlane.normal;
                    v3fNormalBottomData.x = x3;
                    v3fNormalBottomData.y = y3;
                    v3fNormalBottomData.z = z3;
                    //constant
                    pFrustum.bottomPlane.distance = -(testPoint2.x * x3 + testPoint2.y * y3 + testPoint2.z * z3);
                    /////////////////////////////////////////
                    //far plane
                    x1 = pDirectionRBFLBF.x;
                    y1 = pDirectionRBFLBF.y;
                    z1 = pDirectionRBFLBF.z;
                    x2 = pDirectionRBFRTF.x;
                    y2 = pDirectionRBFRTF.y;
                    z2 = pDirectionRBFRTF.z;
                    //normal
                    x3 = y1 * z2 - z1 * y2;
                    y3 = z1 * x2 - x1 * z2;
                    z3 = x1 * y2 - y1 * x2;
                    fLength = akra.math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
                    fInvLength = 1 / fLength;
                    x3 *= fInvLength;
                    y3 *= fInvLength;
                    z3 *= fInvLength;
                    var v3fNormalFarData = pFrustum.farPlane.normal;
                    v3fNormalFarData.x = x3;
                    v3fNormalFarData.y = y3;
                    v3fNormalFarData.z = z3;
                    //constant
                    pFrustum.farPlane.distance = -(testPoint2.x * x3 + testPoint2.y * y3 + testPoint2.z * z3);
                    /////////////////////////////////////////////////////////////////
                    // build a box around our frustum
                    var pWorldData = this.worldPosition;
                    var pSearchRect = this._pSearchRect;
                    pSearchRect.set(pWorldData.x, pWorldData.x, pWorldData.y, pWorldData.y, pWorldData.z, pWorldData.z);
                    pSearchRect.unionPoint(v4fLeftBottomNear);
                    pSearchRect.unionPoint(v4fRightBottomNear);
                    pSearchRect.unionPoint(v4fLeftTopNear);
                    pSearchRect.unionPoint(v4fRightTopNear);
                    pSearchRect.unionPoint(v4fLeftBottomFar);
                    pSearchRect.unionPoint(v4fRightBottomFar);
                    pSearchRect.unionPoint(v4fLeftTopFar);
                    pSearchRect.unionPoint(v4fRightTopFar);
                };
                Camera.prototype._renderScene = function (pViewport) {
                    //update the pixel display ratio
                    // if (this._eCameraType == ECameraTypes.PERSPECTIVE) {
                    // 	mPixelDisplayRatio = (2. * math.tan(this._fFOV * 0.5)) / pViewport.actualHeight;
                    // }
                    // else {
                    // 	mPixelDisplayRatio = (mTop - mBottom) / vp->getActualHeight();
                    // }
                    //notify prerender scene
                    this.preRenderScene();
                    pViewport.update();
                    //notify postrender scene
                    this.postRenderScene();
                };
                Camera.prototype._keepLastViewport = function (pViewport) {
                    this._pLastViewport = pViewport;
                };
                Camera.prototype._getLastViewport = function () {
                    return this._pLastViewport;
                };
                Camera.prototype._getNumRenderedFaces = function () {
                    return 0;
                };
                Camera.prototype._notifyRenderedFaces = function (nFaces) {
                };
                Camera.prototype.toString = function (isRecursive, iDepth) {
                    if (typeof isRecursive === "undefined") { isRecursive = false; }
                    if (typeof iDepth === "undefined") { iDepth = 0; }
                    if(!isRecursive) {
                        return "<camera" + (this._sName ? " " + this._sName : "") + ">";
                    }
                    return _super.prototype.toString.call(this, isRecursive, iDepth);
                };
                Camera._pEvenetTable = new akra.events.EventTable();
                Camera.prototype.getEventTable = /**@inline*/ function () {
                    return Camera._pEvenetTable;
                }/**@inline*/ ;
                Camera.prototype.getGuid = function () {
                    return this._iGuid;
                }/**@inline*/ ;
                Camera.prototype.connect = function (pSender, sSignal, sSlot, eType) {
                    return pSender.getEventTable().addDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
                };
                Camera.prototype.disconnect = /**@inline*/ function (pSender, sSignal, sSlot, eType) {
                    return this.getEventTable().removeDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
                }/**@inline*/ ;
                Camera.prototype.bind = function (sSignal, fnListener, eType) {
                    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
                }/**@inline*/ ;
                Camera.prototype.unbind = function (sSignal, fnListener, eType) {
                    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
                };
                Camera.prototype.preRenderScene = function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).preRenderScene;
                    var _recivier = this;
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                };
                Camera.prototype.postRenderScene = function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).postRenderScene;
                    var _recivier = this;
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                };
                return Camera;
            })(scene.SceneObject);
            objects.Camera = Camera;            
        })(scene.objects || (scene.objects = {}));
        var objects = scene.objects;
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        var Scene3d = (function () {
            function Scene3d(pSceneManager) {
                this._pDisplayListMap = {
                };
                this._isUpdated = false;
                this.type = akra.ESceneTypes.TYPE_3D;
                this._iGuid = akra.sid();
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this._pSceneManager = pSceneManager;
                this._pRootNode = this.createSceneNode("root-node");
                this._pRootNode.create();
                this._pNodeList = [];
            }
            /**@inline*/             Scene3d.prototype.isUpdated = function () {
                return this._isUpdated;
            }/**@inline*/ ;
            Scene3d.prototype.getRootNode = function () {
                return this._pRootNode;
            };
            Scene3d.prototype.recursivePreUpdate = function () {
                this._isUpdated = false;
                this._pRootNode.recursivePreUpdate();
            };
            Scene3d.prototype.recursiveUpdate = function () {
                this._isUpdated = this._pRootNode.recursiveUpdate();
            };
            Scene3d.prototype.updateCamera = function () {
                return false;
            };
            Scene3d.prototype.updateScene = function () {
                return false;
            };
            Scene3d.prototype.createSceneNode = function (sName) {
                if (typeof sName === "undefined") { sName = null; }
                var pNode = new scene.SceneNode(this);
                pNode.create();
                return this.setupNode(pNode, sName);
            };
            Scene3d.prototype.createSceneModel = function () {
                return null;
            };
            Scene3d.prototype.createCamera = function (sName) {
                if (typeof sName === "undefined") { sName = null; }
                var pCamera = new scene.objects.Camera(this);
                if(!pCamera.create()) {
                    akra.logger.setSourceLocation("Scene3d.ts", 76);
                    akra.logger.error("cannot create camera..");
                    ; ;
                    return null;
                }
                return this.setupNode(pCamera, sName);
            };
            Scene3d.prototype.createLightPoint = function () {
                return null;
            };
            Scene3d.prototype.createSprite = function () {
                return null;
            };
            Scene3d.prototype.createJoint = function () {
                return null;
            };
            Scene3d.prototype.createText3d = function () {
                return null;
            }/**@inline*/ ;
            Scene3d.prototype.getAllNodes = function () {
                return this._pNodeList;
            }/**@inline*/ ;
            Scene3d.prototype.getDisplayList = function (csName) {
                if (typeof csName === "undefined") { csName = "default"; }
                return this._pDisplayListMap[csName] || null;
            }/**@inline*/ ;
            Scene3d.prototype.addDisplayList = function (pList, csName) {
                if (typeof csName === "undefined") { csName = "default"; }
                this._pDisplayListMap[csName] = pList;
            }/**@inline*/ ;
            Scene3d.prototype.delDisplayList = function (csName) {
                if(this._pDisplayListMap[csName]) {
                    delete this._pDisplayListMap[csName];
                    return true;
                }
                return false;
            };
            Scene3d.prototype._findObjects = function (pCamera, csList) {
                if (typeof csList === "undefined") { csList = null; }
                var pList = this._pDisplayListMap[csList || "default"];
                akra.logger.setSourceLocation("Scene3d.ts", 123);
                akra.logger.assert(!akra.isNull(pList), "display list not founded.");
                ; ;
                return pList.findObjects(pCamera);
            };
            Scene3d.prototype._render = function (pCamera, pViewport) {
            };
            Scene3d.prototype.setupNode = function (pNode, sName) {
                if (typeof sName === "undefined") { sName = null; }
                pNode.name = sName;
                this.connect(pNode, "attached", "nodeAttachment", akra.EEventTypes.UNICAST);
                this.connect(pNode, "detached", "nodeDetachment", akra.EEventTypes.UNICAST);
                return pNode;
            };
            Scene3d._pEvenetTable = new akra.events.EventTable();
            Scene3d.prototype.getEventTable = /**@inline*/ function () {
                return Scene3d._pEvenetTable;
            }/**@inline*/ ;
            Scene3d.prototype.getGuid = function () {
                return this._iGuid;
            }/**@inline*/ ;
            Scene3d.prototype.connect = function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().addDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            };
            Scene3d.prototype.disconnect = /**@inline*/ function (pSender, sSignal, sSlot, eType) {
                return this.getEventTable().removeDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            }/**@inline*/ ;
            Scene3d.prototype.bind = function (sSignal, fnListener, eType) {
                return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
            }/**@inline*/ ;
            Scene3d.prototype.unbind = function (sSignal, fnListener, eType) {
                return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
            };
            Scene3d.prototype.nodeAttachment = function (pNode) {
                this._pNodeList.push(pNode);
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).nodeAttachment;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pNode) : _broadcast[i].listener(_recivier, pNode);
                }
                ; ;
            };
            Scene3d.prototype.nodeDetachment = function (pNode) {
                for(var i = 0; i < this._pNodeList.length; ++i) {
                    if(pNode == this._pNodeList[i]) {
                        this._pNodeList.splice(i, 1);
                        break;
                    }
                }
                ; ;
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).nodeDetachment;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pNode) : _broadcast[i].listener(_recivier, pNode);
                }
                ; ;
            }// BROADCAST(nodeAttachment, CALL(pNode));
            // BROADCAST(nodeDetachment, CALL(pNode));
            ;
            return Scene3d;
        })();
        scene.Scene3d = Scene3d;        
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        var SceneManager = (function () {
            function SceneManager(pEngine) {
                this._pEngine = null;
                this._pSceneList = [];
                this._fUpdateTimeCount = 0.0;
                this._fMillisecondsPerTick = 0.0333;
                this._pEngine = pEngine;
                this._pTimer = pEngine.getTimer();
            }
            SceneManager.prototype.update = function () {
                var isSceneUpdated = false;
                // add the real time elapsed to our
                // internal delay counter
                this._fUpdateTimeCount += this._pTimer.elapsedTime;
                // is there an update ready to happen?
                var fUpdateTime = this._fUpdateTimeCount;
                while(this._fUpdateTimeCount > this._fMillisecondsPerTick) {
                    // update the scene
                    this.notifyUpdateScene();
                    // subtract the time interval
                    // emulated with each tick
                    this._fUpdateTimeCount -= this._fMillisecondsPerTick;
                }
                if(fUpdateTime !== this._fUpdateTimeCount) {
                    this.notifyPreUpdateScene();
                }
            };
            SceneManager.prototype.notifyUpdateScene = function () {
                // update the scene attached to the root node
                for(var i = 0; i < this._pSceneList.length; ++i) {
                    var pScene = this._pSceneList[i];
                    if(pScene.type != akra.ESceneTypes.TYPE_3D) {
                        continue;
                    }
                    (pScene).recursiveUpdate();
                }
            };
            SceneManager.prototype.notifyPreUpdateScene = function () {
                for(var i = 0; i < this._pSceneList.length; ++i) {
                    var pScene = this._pSceneList[i];
                    if(pScene.type != akra.ESceneTypes.TYPE_3D) {
                        continue;
                    }
                    (pScene).recursivePreUpdate();
                }
            };
            SceneManager.prototype.createScene3D = function () {
                var pScene = new scene.Scene3d(this);
                this._pSceneList.push(pScene);
                return pScene;
            };
            SceneManager.prototype.createScene2D = function () {
                return null;
            };
            SceneManager.prototype.getScene3D = function (IScene) {
                if (typeof IScene === "undefined") { IScene = 0; }
                var pScene = this._pSceneList[IScene];
                if(pScene && pScene.type === akra.ESceneTypes.TYPE_3D) {
                    return pScene;
                }
                return null;
            };
            SceneManager.prototype.getScene2D = function (IScene) {
                var pScene = this._pSceneList[IScene];
                if(pScene && pScene.type === akra.ESceneTypes.TYPE_2D) {
                    return pScene;
                }
                return null;
            };
            SceneManager.prototype.getScene = function (IScene, eType) {
                return this._pSceneList[IScene] || null;
            };
            SceneManager.prototype.initialize = function () {
                //this.initText2Dlayer();
                return true;
            };
            SceneManager.prototype.destroy = function () {
            };
            return SceneManager;
        })();
        scene.SceneManager = SceneManager;        
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
/** @inline */
/*
draw2DText(iX: int = 0, iY: int = 0, sText: string = "", pFont: IFont2d = new util.Font2d()): IString2d {
return (new a.String2D(iX, iY, pFont, sStr, this.pTextLayer));
}



private initText2Dlayer(): void {
var pCanvas: HTMLCanvasElement = this.pEngine.canvas;
var x: int = findPosX(pCanvas);
var y: int = findPosY(pCanvas);

var pDiv: HTMLDivElement = <HTMLDivElement>document.createElement('div');
var pStyle: CSSStyleDeclaration = pDiv.style;
var pScreen: IScreenInfo = info.screen;

var iBorder: int = 0;

pDiv.setAttribute("id", "akra-canvas-overlay");

pStyle.width = String(pScreen.width) + "px";
pStyle.height = String(pScreen.height) + "px";

if (pCanvas.style.border != "none") {
iBorder = parseInt(pCanvas.style.border);
}

pStyle.position = 'absolute';
pStyle.left = String(x) + 'px';
pStyle.top = String(y) + 'px';

pStyle.overflow = 'hidden';
pStyle.whiteSpace = 'nowrap';

if (pCanvas.style.zIndex) {
pStyle.zIndex = pCanvas.style.zIndex + 1;
}
else {
pStyle.zIndex = 2;
}

document.body.appendChild(pDiv);

this.pTextLayer = pDiv;
}
*/
var akra;
(function (akra) {
    (function (util) {
        var UtilTimer = (function () {
            function UtilTimer() {
                this.isTimerInitialized = false;
                this.isTimerStopped = false;
                this.fTicksPerSec = 0.0;
                this.iStopTime = 0;
                this.iLastElapsedTime = 0;
                this.iBaseTime = 0;
            }
            Object.defineProperty(UtilTimer.prototype, "absoluteTime", {
                get: function () {
                    return this.execCommand(akra.EUtilTimerCommands.TIMER_GET_ABSOLUTE_TIME);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(UtilTimer.prototype, "appTime", {
                get: function () {
                    return this.execCommand(akra.EUtilTimerCommands.TIMER_GET_APP_TIME);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(UtilTimer.prototype, "elapsedTime", {
                get: function () {
                    return this.execCommand(akra.EUtilTimerCommands.TIMER_GET_ELAPSED_TIME);
                },
                enumerable: true,
                configurable: true
            });
            UtilTimer.prototype.start = function () {
                return this.execCommand(akra.EUtilTimerCommands.TIMER_START) === 0;
            };
            UtilTimer.prototype.stop = function () {
                return this.execCommand(akra.EUtilTimerCommands.TIMER_STOP) === 0;
            };
            UtilTimer.prototype.reset = function () {
                return this.execCommand(akra.EUtilTimerCommands.TIMER_RESET) === 0;
            };
            UtilTimer.prototype.execCommand = function (eCommand) {
                var fTime = 0.0;
                var fElapsedTime = 0.0;
                var iTime;
                if(this.isTimerInitialized == false) {
                    this.isTimerInitialized = true;
                    this.fTicksPerSec = 1000;
                }
                // Get either the current time or the stop time, depending
                // on whether we're stopped and what command was sent
                if(this.iStopTime != 0 && eCommand != akra.EUtilTimerCommands.TIMER_START && eCommand != akra.EUtilTimerCommands.TIMER_GET_ABSOLUTE_TIME) {
                    iTime = this.iStopTime;
                } else {
                    iTime = (new Date()).getTime();
                }
                // Return the elapsed time
                if(eCommand == akra.EUtilTimerCommands.TIMER_GET_ELAPSED_TIME) {
                    fElapsedTime = (iTime - this.iLastElapsedTime) / this.fTicksPerSec;
                    this.iLastElapsedTime = iTime;
                    return fElapsedTime;
                }
                // Return the current time
                if(eCommand == akra.EUtilTimerCommands.TIMER_GET_APP_TIME) {
                    var fAppTime = (iTime - this.iBaseTime) / this.fTicksPerSec;
                    return fAppTime;
                }
                // Reset the timer
                if(eCommand == akra.EUtilTimerCommands.TIMER_RESET) {
                    this.iBaseTime = iTime;
                    this.iLastElapsedTime = iTime;
                    this.iStopTime = 0;
                    this.isTimerStopped = false;
                    return 0;
                }
                // Start the timer
                if(eCommand == akra.EUtilTimerCommands.TIMER_START) {
                    if(this.isTimerStopped) {
                        this.iBaseTime += iTime - this.iStopTime;
                    }
                    this.iStopTime = 0;
                    this.iLastElapsedTime = iTime;
                    this.isTimerStopped = false;
                    return 0;
                }
                // Stop the timer
                if(eCommand == akra.EUtilTimerCommands.TIMER_STOP) {
                    if(!this.isTimerStopped) {
                        this.iStopTime = iTime;
                        this.iLastElapsedTime = iTime;
                        this.isTimerStopped = true;
                    }
                    return 0;
                }
                // Advance the timer by 1/10th second
                if(eCommand == akra.EUtilTimerCommands.TIMER_ADVANCE) {
                    this.iStopTime += this.fTicksPerSec / 10;
                    return 0;
                }
                if(eCommand == akra.EUtilTimerCommands.TIMER_GET_ABSOLUTE_TIME) {
                    fTime = iTime / this.fTicksPerSec;
                    return fTime;
                }
                // Invalid command specified		    return -1;
                            };
            UtilTimer.start = function start() {
                var pTimer = new UtilTimer();
                if(pTimer.start()) {
                    return pTimer;
                }
                akra.logger.setSourceLocation("util/UtilTimer.ts", 123);
                akra.logger.error('cannot start util timer');
                ; ;
                return null;
            }
            return UtilTimer;
        })();
        util.UtilTimer = UtilTimer;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        var Engine = (function () {
            function Engine() {
                this._iAppPausedCount = 0;
                /** is paused? */
                this._isActive = false;
                /** frame rendering sync / render next frame? */
                this._isFrameMoving = true;
                this._iGuid = akra.sid();
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this._pResourceManager = new core.pool.ResourcePoolManager(this);
                this._pSceneManager = new akra.scene.SceneManager(this);
                this._pParticleManager = null;
                this._pRenderer = new akra.webgl.WebGLRenderer(this);
                if(!this._pResourceManager.initialize()) {
                    akra.logger.setSourceLocation("core/Engine.ts", 52);
                    akra.logger.error('cannot initialize ResourcePoolManager');
                    ; ;
                }
                if(!this._pSceneManager.initialize()) {
                    akra.logger.setSourceLocation("core/Engine.ts", 56);
                    akra.logger.error("cannot initialize SceneManager");
                    ; ;
                }
                this._pTimer = akra.util.UtilTimer.start();
                this.pause(false);
            }
            Engine.prototype.getSceneManager = function () {
                return this._pSceneManager;
            };
            Engine.prototype.getParticleManager = function () {
                return null;
            };
            Engine.prototype.getResourceManager = function () {
                return null;
            };
            Engine.prototype.getRenderer = function () {
                return this._pRenderer;
            }/**@inline*/ ;
            Engine.prototype.isActive = function () {
                return this._isActive;
            };
            Engine.prototype.exec = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                var pRenderer = this._pRenderer;
                var pEngine = this;
                // var pCanvas: HTMLCanvasElement = null;
                // pCanvas = (<IWebGLRenderer>pRenderer).getHTMLCanvas();
                akra.logger.setSourceLocation("core/Engine.ts", 92);
                akra.logger.assert(!akra.isNull(pRenderer));
                ; ;
                pRenderer._initRenderTargets();
                // Infinite loop, until broken out of by frame listeners
                // or break out by calling queueEndRendering()
                this._isActive = bValue;
                function render(iTime) {
                    if(pRenderer.isValid()) {
                        akra.logger.setSourceLocation("core/Engine.ts", 103);
                        akra.logger.error(pRenderer.getError());
                        ; ;
                    }
                    if(!pEngine.isActive()) {
                        return;
                    }
                    if(!pEngine.renderFrame()) {
                        akra.logger.setSourceLocation("core/Engine.ts", 111);
                        akra.logger.error("Engine::exec() error.");
                        ; ;
                        return;
                    }
                    /*, pCanvas*/
                    requestAnimationFrame(render);
                }
                render(0);
            }/**@inline*/ ;
            Engine.prototype.getTimer = function () {
                return this._pTimer;
            };
            Engine.prototype.renderFrame = function () {
                var fElapsedAppTime = this._pTimer.elapsedTime;
                if(0.0 == fElapsedAppTime && this._isFrameMoving) {
                    return true;
                }
                // FrameMove (animate) the scene
                if(this._isFrameMoving) {
                    this._pSceneManager.update();
                }
                // Render the scene as normal
                this.frameStarted();
                this._pRenderer._updateAllRenderTargets();
                this.frameEnded();
                return true;
            };
            Engine.prototype.play = function () {
                if(!this._isActive) {
                    this._iAppPausedCount = 0;
                    this._isActive = true;
                    if(this._isFrameMoving) {
                        this._pTimer.start();
                    }
                }
                return this._isActive;
            };
            Engine.prototype.pause = function (isPause) {
                if (typeof isPause === "undefined") { isPause = false; }
                this._iAppPausedCount += (isPause ? 1 : -1);
                this._isActive = (this._iAppPausedCount ? false : true);
                // Handle the first pause request (of many, nestable pause requests)
                if(isPause && (1 == this._iAppPausedCount)) {
                    // Stop the scene from animating
                    if(this._isFrameMoving) {
                        this._pTimer.stop();
                    }
                }
                if(0 == this._iAppPausedCount) {
                    // Restart the timers
                    if(this._isFrameMoving) {
                        this._pTimer.start();
                    }
                }
                return !this._isActive;
            };
            Engine._pEvenetTable = new akra.events.EventTable();
            Engine.prototype.getEventTable = /**@inline*/ function () {
                return Engine._pEvenetTable;
            }/**@inline*/ ;
            Engine.prototype.getGuid = function () {
                return this._iGuid;
            }/**@inline*/ ;
            Engine.prototype.connect = function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().addDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            };
            Engine.prototype.disconnect = /**@inline*/ function (pSender, sSignal, sSlot, eType) {
                return this.getEventTable().removeDestination(pSender.getGuid(), sSignal, this, sSlot, eType);
            }/**@inline*/ ;
            Engine.prototype.bind = function (sSignal, fnListener, eType) {
                return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
            }/**@inline*/ ;
            Engine.prototype.unbind = function (sSignal, fnListener, eType) {
                return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
            };
            Engine.prototype.frameStarted = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).frameStarted;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                }
            };
            Engine.prototype.frameEnded = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || this.getEventTable().findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).frameEnded;
                var _recivier = this;
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                }
            };
            return Engine;
        })();
        core.Engine = Engine;        
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.createEngine = function () {
        return new akra.core.Engine();
    };
})(akra || (akra = {}));
/*
private initDefaultStates(): bool {
this.pRenderState = {
mesh            : {
isSkinning : false
},
isAdvancedIndex : false,
lights          : {
omni : 0,
project : 0,
omniShadows : 0,
projectShadows : 0
}
};

return true;
}
*/
