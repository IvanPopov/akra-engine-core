provide akra.system;

struct VS_IN_2{
    float3 tex_coord0: TEXCOORD0;
    float3 tex_coord1: TEXCOORD1;
    float3 tex_coord2: TEXCOORD2;
    float3 tex_coord3: TEXCOORD3;
    float3 tex_coord4: TEXCOORD4;
    float3 tex_coord5: TEXCOORD5;
    float3 tex_coord6: TEXCOORD6;
    float3 tex_coord7: TEXCOORD7;
    float3 tex_coord8: TEXCOORD8;
    float3 tex_coord9: TEXCOORD9;
    float3 tex_coord10: TEXCOORD10;
    float3 tex_coord11: TEXCOORD11;
    float3 tex_coord12: TEXCOORD12;
    float3 tex_coord13: TEXCOORD13;
    float3 tex_coord14: TEXCOORD14;
    float3 tex_coord15: TEXCOORD15;
};

struct VS_OUT_2{
    float3 vert:VERTEX;
    float3 norm:NORMAL;
//    float4x4 normal_mat:NORMAL_MAT;
    float3 tc_diffuse: TEXCOORD0;
    float3 tc_ambient: TEXCOORD1;
    float3 tc_specular: TEXCOORD2;
    float3 tc_emissive: TEXCOORD3;
    float3 tc_normal: TEXCOORD4;
};

texture tex0:TEXTURE0;
texture tex1:TEXTURE1;
texture tex2:TEXTURE2;
texture tex3:TEXTURE3;
texture tex4:TEXTURE4;

sampler sampler_diffuse:S_DIFFUSE  = sampler_state
{
    Texture = <tex0>;
};
sampler sampler_ambient:S_AMBIENT  = sampler_state
{
    Texture = <tex1>;
};
sampler sampler_specular:S_SPECULAR  = sampler_state
{
    Texture = <tex2>;
};
sampler sampler_emissive:S_EMISSIVE  = sampler_state
{
    Texture = <tex3>;
};
sampler sampler_normal:S_NORMAL  = sampler_state
{
    Texture = <tex4>;
};

struct base_material{
    float4 diffuse:DIFFUSE;
    float4 ambient:AMBIENT;
    float4 emissive:EMISSIVE;
    float4 specular:SPECULAR;
    float shininess:SHININESS;
};;

shared base_material Fragment_material;
shared float3 Normal;


struct Material {
    float4 ambient:AMBIENT;
    float4 diffuse:DIFFUSE;
    float4 specular:SPECULAR;
    float4 emissive:EMISSIVE;
    float shininess:SHININESS;
};

VS_OUT_2 vs_mesh_texture(VS_IN_2 IN) {
    VS_OUT_2 Out;

    Out.tc_diffuse = IN.tex_coord0;
    Out.tc_ambient = IN.tex_coord1;
    Out.tc_specular = IN.tex_coord2;
    Out.tc_emissive = IN.tex_coord3;
    Out.tc_normal = IN.tex_coord4;

	return Out;
}

Material defaultMaterial:MATERIAL;

float4x4 model_mat:MODEL_MATRIX;
float4x4 view_mat:VIEW_MATRIX;

void fs_mesh_texture_pass_1(VS_OUT_2 IN){
    float3 texNormal = tex2D(sampler_normal, float2(IN.tc_normal.xy)).xyz;
    float4 norm;

    if(texNormal == float3(0.)){
        norm = float4(IN.norm.xyz, 0.);
    }
    else {
        /*
        float3 normal = IN.norm.xyz;
        float3 binormal = normalize(cross(float3(1., 0., 0.), normal));
            
        if (binormal == float3(0.)) {
            binormal = normalize(cross(float3(0., 1., 0.), normal));
        }

        float3 tang = cross(normal, binormal);

          //формируем матрицу трансформации вектора источника света
        float3x3 t;
        t[0] = tang;
        t[1] = binormal;
        t[2] = normal;


        //texNormal.z *= 2.;
        //texNormal.xy = (texNormal.xy - 0.5) * 2.;

        norm = (float4(texNormal.xyz * t, 0.));
        */
       
        norm = float4(IN.norm.xyz, 0.);
    }

    Normal = norm.xyz;
//    Normal = normalize(float3(normalize(IN.norm) + tex2D(sampler_normal, float2(IN.tc_normal.xy)).xyz));
    Fragment_material.emissive = defaultMaterial.emissive + tex2D(sampler_emissive, float2(IN.tc_emissive.xy));
    Fragment_material.diffuse = defaultMaterial.diffuse + tex2D(sampler_diffuse, float2(IN.tc_diffuse.xy));
    Fragment_material.shininess = defaultMaterial.shininess;

}

void fs_mesh_texture_pass_2(VS_OUT_2 IN){
    Fragment_material.specular = defaultMaterial.specular + tex2D(sampler_specular, float2(IN.tc_specular.xy));
    Fragment_material.ambient = defaultMaterial.ambient + tex2D(sampler_ambient, float2(IN.tc_ambient.xy));
}

technique mesh_texture{
    import akra.system.mesh_geometry shift 0;
    import akra.system.mesh_geometry shift 1;
    pass p0 {
        VertexShader = compile vs_mesh_texture();
        PixelShader = compile fs_mesh_texture_pass_1();
    }
    pass p1 {
         VertexShader = compile vs_mesh_texture();
         PixelShader = compile fs_mesh_texture_pass_2();
    }
}