struct VS_OUT {
    float4 pos: POSITION;
    float2 texPos: TEXCOORD;
};

VS_OUT vs_main(float2 pos: POSITION){
    VS_OUT Out;

    Out.texPos = (pos + float2(1.))/2.;
    Out.pos = float4(pos, 0., 1.);

    return Out;
}

float2 fSteps: STEPS; //iverse texture size
float fScale: SCALE; //height boost
sampler heightTexture: HEIGHT_SAMPLER;
int iChannel: CHANNEL; //канал, из которого необходимо брать высоту

float4 fs_main(VS_OUT IN): COLOR {
    //generate normals

    float fHeight0,fHeight1,fHeight2,fHeight3,
          fHeight4,fHeight5,fHeight6,fHeight7,fHeight8;

    if(iChannel == 0){
        fHeight0 = (tex2D(heightTexture,IN.texPos)).r;
        fHeight1 = (tex2D(heightTexture,IN.texPos + float2(fSteps.x,0.))).r;
        fHeight2 = (tex2D(heightTexture,IN.texPos + float2(fSteps.x,fSteps.y))).r;
        fHeight3 = (tex2D(heightTexture,IN.texPos + float2(0.,fSteps.x))).r;
        fHeight4 = (tex2D(heightTexture,IN.texPos + float2(-fSteps.x,fSteps.y))).r;
        fHeight5 = (tex2D(heightTexture,IN.texPos + float2(-fSteps.x,0.))).r;
        fHeight6 = (tex2D(heightTexture,IN.texPos + float2(-fSteps.x,-fSteps.y))).r;
        fHeight7 = (tex2D(heightTexture,IN.texPos + float2(0.,-fSteps.y))).r;
        fHeight8 = (tex2D(heightTexture,IN.texPos + float2(fSteps.x,-fSteps.y))).r;
    }
    else if(iChannel == 1){
        fHeight0 = (tex2D(heightTexture,IN.texPos)).g;
        fHeight1 = (tex2D(heightTexture,IN.texPos + float2(fSteps.x,0.))).g;
        fHeight2 = (tex2D(heightTexture,IN.texPos + float2(fSteps.x,fSteps.y))).g;
        fHeight3 = (tex2D(heightTexture,IN.texPos + float2(0.,fSteps.x))).g;
        fHeight4 = (tex2D(heightTexture,IN.texPos + float2(-fSteps.x,fSteps.y))).g;
        fHeight5 = (tex2D(heightTexture,IN.texPos + float2(-fSteps.x,0.))).g;
        fHeight6 = (tex2D(heightTexture,IN.texPos + float2(-fSteps.x,-fSteps.y))).g;
        fHeight7 = (tex2D(heightTexture,IN.texPos + float2(0.,-fSteps.y))).g;
        fHeight8 = (tex2D(heightTexture,IN.texPos + float2(fSteps.x,-fSteps.y))).g;
    }
    else if(iChannel == 2){
        fHeight0 = (tex2D(heightTexture,IN.texPos)).b;
        fHeight1 = (tex2D(heightTexture,IN.texPos + float2(fSteps.x,0.))).b;
        fHeight2 = (tex2D(heightTexture,IN.texPos + float2(fSteps.x,fSteps.y))).b;
        fHeight3 = (tex2D(heightTexture,IN.texPos + float2(0.,fSteps.x))).b;
        fHeight4 = (tex2D(heightTexture,IN.texPos + float2(-fSteps.x,fSteps.y))).b;
        fHeight5 = (tex2D(heightTexture,IN.texPos + float2(-fSteps.x,0.))).b;
        fHeight6 = (tex2D(heightTexture,IN.texPos + float2(-fSteps.x,-fSteps.y))).b;
        fHeight7 = (tex2D(heightTexture,IN.texPos + float2(0.,-fSteps.y))).b;
        fHeight8 = (tex2D(heightTexture,IN.texPos + float2(fSteps.x,-fSteps.y))).b;
    }
    else{
        fHeight0 = (tex2D(heightTexture,IN.texPos)).a;
        fHeight1 = (tex2D(heightTexture,IN.texPos + float2(fSteps.x,0.))).a;
        fHeight2 = (tex2D(heightTexture,IN.texPos + float2(fSteps.x,fSteps.y))).a;
        fHeight3 = (tex2D(heightTexture,IN.texPos + float2(0.,fSteps.x))).a;
        fHeight4 = (tex2D(heightTexture,IN.texPos + float2(-fSteps.x,fSteps.y))).a;
        fHeight5 = (tex2D(heightTexture,IN.texPos + float2(-fSteps.x,0.))).a;
        fHeight6 = (tex2D(heightTexture,IN.texPos + float2(-fSteps.x,-fSteps.y))).a;
        fHeight7 = (tex2D(heightTexture,IN.texPos + float2(0.,-fSteps.y))).a;
        fHeight8 = (tex2D(heightTexture,IN.texPos + float2(fSteps.x,-fSteps.y))).a;
    }


    //формально так более правильно
    fHeight0 = fHeight0*2. - 1.;
    fHeight1 = fHeight1*2. - 1.;
    fHeight2 = fHeight2*2. - 1.;
    fHeight3 = fHeight3*2. - 1.;
    fHeight4 = fHeight4*2. - 1.;
    fHeight5 = fHeight5*2. - 1.;
    fHeight6 = fHeight6*2. - 1.;
    fHeight7 = fHeight7*2. - 1.;
    fHeight8 = fHeight8*2. - 1.;

    float3 dir1 = float3(fSteps.x, 0., (fHeight1 - fHeight0)*fScale);
    float3 dir2 = float3(fSteps.x, fSteps.y, (fHeight2 - fHeight0)*fScale);
    float3 dir3 = float3(0., fSteps.y, (fHeight3 - fHeight0)*fScale);
    float3 dir4 = float3(-fSteps.x, fSteps.y, (fHeight4 - fHeight0)*fScale);
    float3 dir5 = float3(-fSteps.x, 0., (fHeight5 - fHeight0)*fScale);
    float3 dir6 = float3(-fSteps.x, -fSteps.y, (fHeight6 - fHeight0)*fScale);
    float3 dir7 = float3(0., -fSteps.y, (fHeight7 - fHeight0)*fScale);
    float3 dir8 = float3(fSteps.x, -fSteps.y, (fHeight8 - fHeight0)*fScale);

    float3 normal1 = normalize(cross(dir1,dir2));
    float3 normal2 = normalize(cross(dir2,dir3));
    float3 normal3 = normalize(cross(dir3,dir4));
    float3 normal4 = normalize(cross(dir4,dir5));
    float3 normal5 = normalize(cross(dir5,dir6));
    float3 normal6 = normalize(cross(dir6,dir7));
    float3 normal7 = normalize(cross(dir7,dir8));
    float3 normal8 = normalize(cross(dir8,dir1));

    float3 normal = normalize(normal1 + normal2 + normal3 + normal4 + 
                              normal5 + normal6 + normal7 + normal8);

    return float4(normal/2. + float3(0.5), 1.);
}

provide akra.system;

technique generateNormalMapByHeightMap{
    pass p1{
        VertexShader = compile vs_main();
        PixelShader = compile fs_main();
    };
};
