provide akra.system;

float2 screenTextureRatio : INPUT_TEXTURE_RATIO;
float2 screenTextureSize : INPUT_TEXTURE_SIZE;
float2 aspectRatio : SCREEN_ASPECT_RATIO = float2(1.,1.);
texture tex0 : INPUT_TEXTURE;

sampler screenSampler : INPUT_SAMPLER = sampler_state
{
	Texture = <tex0>;
};

struct VS_OUT{
	float4 position : POSITION;
	float2 screenPosition : SCREEN_POSITION;
	float2 textureCoords : TEXCOORD0;
};

VS_OUT vs_blur_shading(float2 pos: POSITION){
	VS_OUT Out;

	Out.position = float4(pos,0.,1.);
	Out.screenPosition = pos;
	//Out.textureCoords = float2(texCoodrX,texCoordY);
	Out.textureCoords = (pos + 1.)/2. * screenTextureRatio;
	
	return Out;
};

int samples : BLUR_SAMPLES = 5;
float blurRadius : BLUR_RADIUS = 0.1;

float4 fs_blur_shading1(VS_OUT IN) : COLOR {
	int samp = int(max(min(float(samples), 50.),1.));

	if(blurRadius < 0.002) {
		return tex2D(screenSampler, IN.textureCoords);
	}

	float2 top_right = float2(1.) * screenTextureRatio;

	float blurStep = 1./float(samp);

	float4 blur_result = float4(0.);

	for(int i=0;i<50;i++) {
		if(i>samp) {
			break;
		}
		else {
			float dr = blurRadius*(-0.5+(float(i)+0.5)*blurStep);
			blur_result += tex2D(screenSampler, clamp(IN.textureCoords + float2(dr,0.)/aspectRatio, float2(0.), screenTextureRatio-float2(1.)/screenTextureSize))*blurStep*exp(-dr*dr/blurRadius/blurRadius);
		}
	}
	return blur_result*1.05;
};	
float4 fs_blur_shading2(VS_OUT IN) : COLOR {
	int samp = int(max(min(float(samples), 50.),1.));

	if(blurRadius < 0.002) {
		return tex2D(screenSampler, IN.textureCoords);
	}

	float2 top_right = float2(1.) * screenTextureRatio;

	float blurStep = 1./float(samp);

	float4 blur_result = float4(0.);

	for(int i=0;i<50;i++) {
		if(i>samp) {
			break;
		}
		else {
			float dr = blurRadius*(-0.5+(float(i)+0.5)*blurStep);
			blur_result += tex2D(screenSampler, clamp(IN.textureCoords + float2(0.5*dr,0.87*dr)/aspectRatio, float2(0.), screenTextureRatio-float2(1.)/screenTextureSize))*blurStep*exp(-dr*dr/blurRadius/blurRadius);
		}
	}
	return blur_result*1.05;
};	
float4 fs_blur_shading3(VS_OUT IN) : COLOR {
	int samp = int(max(min(float(samples), 50.),1.));

	if(blurRadius < 0.002) {
		return tex2D(screenSampler, IN.textureCoords);
	}

	float2 top_right = float2(1.) * screenTextureRatio;

	float blurStep = 1./float(samp);

	float4 blur_result = float4(0.);

	for(int i=0;i<50;i++) {
		if(i>samp) {
			break;
		}
		else {
			float dr = blurRadius*(-0.5+(float(i)+0.5)*blurStep);
			blur_result += tex2D(screenSampler, clamp(IN.textureCoords + float2(-0.5*dr,0.87*dr)/aspectRatio, float2(0.), screenTextureRatio-float2(1.)/screenTextureSize))*blurStep*exp(-dr*dr/blurRadius/blurRadius);
		}
	}
	return blur_result*1.05;
};	

technique blur : POST_EFFECT {
	pass pass1{
		VertexShader = compile vs_blur_shading();
		PixelShader = compile fs_blur_shading1();
	};
	pass pass2{
		VertexShader = compile vs_blur_shading();
		PixelShader = compile fs_blur_shading2();
	};
	pass pass3{
		VertexShader = compile vs_blur_shading();
		PixelShader = compile fs_blur_shading3();
	};
};


