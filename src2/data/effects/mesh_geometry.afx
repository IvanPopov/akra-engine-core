provide akra.system;

struct VS_IN_1{
    float4 pos:POSITION;
    float4 norm:NORMAL;
};

struct VS_IN_2{
    float4 pos:SKINNED_POSITION;
    float4 norm:SKINNED_NORMAL;
};

struct VS_OUT_1{
    float4 pos:POSITION;
    float3 vert:VERTEX;
    float3 norm:NORMAL;
//    float4x4 normal_mat:NORMAL_MAT;
    float psize:PSIZE;
};

struct baseGeometry{
    float4 pos:POSITION;
    float3 vert:VERTEX;
    float3 norm:NORMAL;
};

///////////////////////////
float4x4 model_mat:MODEL_MATRIX;
float4x4 view_mat:VIEW_MATRIX;
float4x4 proj_mat:PROJ_MATRIX;
//float3x3 normal_mat:NORMAL_MATRIX;

float4x4 bind_matrix:BIND_SHAPE_MATRIX;

shared baseGeometry vertex_geometry;

VS_OUT_1 vs_mesh_geometry(VS_IN_1 IN) {
    VS_OUT_1 Out;

	float4 pos = float4(IN.pos.xyz, 1.);
    float4 vertex;
    float3 norm = float3(IN.norm);

	vertex = (view_mat * model_mat * (pos));

    if(norm != float3(0.)){
        Out.norm = vertex_geometry.norm = normalize((view_mat * model_mat * float4(norm,0.)).xyz);
    }

    Out.vert = vertex_geometry.vert = vertex.xyz;
	Out.pos = vertex_geometry.pos = proj_mat * vertex;
    Out.psize = 1.0;

    return Out;
}

VS_OUT_1 vs_mesh_skinning(VS_IN_1 IN) {
    VS_OUT_1 Out;

    float4 pos = float4(IN.pos.xyz, 1.);
    float4 vertex;

    float2 meta_data[](memof IN.pos);

    float2 bone_inf[](memof IN.pos);
    float4x4 bone_matrix[](memof IN.pos);
    float weight;

    float4x4 result_mat = float4x4(0.0);
    float point_size = 1.;

    @(meta_data) = IN.pos.w;

    float number_matrix = meta_data.x;
    float bone_inf_ptr = meta_data.y;


    float i = 0.;
    while(number_matrix >= i + 1.) {
        //get data about matrix and weight
        @bone_inf = bone_inf_ptr + i * 2.;

        @bone_matrix = bone_inf.x;
        weight = bone_inf.y;

        result_mat += bone_matrix * weight;

        i ++;
    }

    result_mat = result_mat * bind_matrix;

    vertex = (view_mat * result_mat * pos);

    Out.pos = vertex_geometry.pos = proj_mat * vertex;

    Out.vert = vertex_geometry.vert = vertex.xyz;
    Out.norm = vertex_geometry.norm = normalize((view_mat * result_mat * float4(IN.norm.xyz,0.)).xyz);
//    Out.norm = vertex_geometry.norm = IN.norm.xyz;
//    Out.normal_mat = view_mat*result_mat;
    Out.psize = point_size;

    return Out;
}

VS_OUT_1 vs_mesh_optimized_skinning(VS_IN_2 IN) {
    VS_OUT_1 Out;

    float4 vertex = (view_mat * IN.pos);

    Out.pos = vertex_geometry.pos = proj_mat * vertex;

    Out.vert = vertex_geometry.vert = vertex.xyz;
    Out.norm = vertex_geometry.norm = normalize((view_mat * float4(IN.norm.xyz,0.)).xyz);
    Out.psize = 1.;

    return Out;
}

technique mesh_geometry{
    pass p0 {
        
        if(engine.mesh.isSkinned){
            if(engine.mesh.isOptimizedSkinned){
                VertexShader = compile vs_mesh_optimized_skinning();
            }
            else{
                VertexShader = compile vs_mesh_skinning();
            }
        }
        else {
            VertexShader = compile vs_mesh_geometry();
        }
    }
}

