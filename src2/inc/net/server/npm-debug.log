0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', 'webworker-threads' ]
2 info using npm@1.2.18
3 info using node@v0.11.1
4 verbose read json /home/vantuzz/Desktop/server/package.json
5 warn package.json akra-rpc-server@0.1.2 No README.md file found!
6 verbose read json /home/vantuzz/Desktop/server/node_modules/autoloader/package.json
7 verbose read json /home/vantuzz/Desktop/server/node_modules/canvas/package.json
8 verbose read json /home/vantuzz/Desktop/server/node_modules/cluster/package.json
9 verbose read json /home/vantuzz/Desktop/server/node_modules/imagemagick-native/package.json
10 verbose read json /home/vantuzz/Desktop/server/node_modules/websocket/package.json
11 verbose read json /home/vantuzz/Desktop/server/node_modules/webworker/package.json
12 verbose from cache /home/vantuzz/Desktop/server/package.json
13 verbose readDependencies using package.json deps
14 verbose cache add [ 'webworker-threads', null ]
15 verbose cache add name=undefined spec="webworker-threads" args=["webworker-threads",null]
16 verbose parsed url { protocol: null,
16 verbose parsed url   slashes: null,
16 verbose parsed url   auth: null,
16 verbose parsed url   host: null,
16 verbose parsed url   port: null,
16 verbose parsed url   hostname: null,
16 verbose parsed url   hash: null,
16 verbose parsed url   search: null,
16 verbose parsed url   query: null,
16 verbose parsed url   pathname: 'webworker-threads',
16 verbose parsed url   path: 'webworker-threads',
16 verbose parsed url   href: 'webworker-threads' }
17 silly lockFile 8313e9b2-webworker-threads webworker-threads
18 verbose lock webworker-threads /root/.npm/8313e9b2-webworker-threads.lock
19 silly lockFile 8313e9b2-webworker-threads webworker-threads
20 silly lockFile 8313e9b2-webworker-threads webworker-threads
21 verbose addNamed [ 'webworker-threads', '' ]
22 verbose addNamed [ null, '' ]
23 silly lockFile 0e1aa9d7-webworker-threads webworker-threads@
24 verbose lock webworker-threads@ /root/.npm/0e1aa9d7-webworker-threads.lock
25 silly addNameRange { name: 'webworker-threads', range: '', hasData: false }
26 verbose url raw webworker-threads
27 verbose url resolving [ 'https://registry.npmjs.org/', './webworker-threads' ]
28 verbose url resolved https://registry.npmjs.org/webworker-threads
29 info trying registry request attempt 1 at 15:52:28
30 http GET https://registry.npmjs.org/webworker-threads
31 http 200 https://registry.npmjs.org/webworker-threads
32 silly registry.get cb [ 200,
32 silly registry.get   { vary: 'Accept',
32 silly registry.get     server: 'CouchDB/1.3.0 (Erlang OTP/R15B03)',
32 silly registry.get     etag: '"YOGA2I2PK0PE6KRRRFC8NQXR"',
32 silly registry.get     date: 'Mon, 29 Apr 2013 11:52:29 GMT',
32 silly registry.get     'content-type': 'application/json',
32 silly registry.get     'content-length': '272640' } ]
33 silly addNameRange number 2 { name: 'webworker-threads', range: '', hasData: true }
34 silly addNameRange versions [ 'webworker-threads',
34 silly addNameRange   [ '0.3.0',
34 silly addNameRange     '0.3.1',
34 silly addNameRange     '0.3.2',
34 silly addNameRange     '0.4.0',
34 silly addNameRange     '0.4.1',
34 silly addNameRange     '0.4.2',
34 silly addNameRange     '0.4.3',
34 silly addNameRange     '0.4.4',
34 silly addNameRange     '0.4.5',
34 silly addNameRange     '0.4.6',
34 silly addNameRange     '0.4.7' ] ]
35 verbose addNamed [ 'webworker-threads', '0.4.7' ]
36 verbose addNamed [ '0.4.7', '0.4.7' ]
37 silly lockFile 452cf5be-webworker-threads-0-4-7 webworker-threads@0.4.7
38 verbose lock webworker-threads@0.4.7 /root/.npm/452cf5be-webworker-threads-0-4-7.lock
39 silly lockFile 6adeb0b8-eads-webworker-threads-0-4-7-tgz https://registry.npmjs.org/webworker-threads/-/webworker-threads-0.4.7.tgz
40 verbose lock https://registry.npmjs.org/webworker-threads/-/webworker-threads-0.4.7.tgz /root/.npm/6adeb0b8-eads-webworker-threads-0-4-7-tgz.lock
41 verbose addRemoteTarball [ 'https://registry.npmjs.org/webworker-threads/-/webworker-threads-0.4.7.tgz',
41 verbose addRemoteTarball   'd8e175e714a2e910a41b544a6fe4aae9703cbcfd' ]
42 info retry fetch attempt 1 at 15:52:31
43 verbose fetch to= /root/tmp/npm-3449/1367236351124-0.9861602683085948/tmp.tgz
44 http GET https://registry.npmjs.org/webworker-threads/-/webworker-threads-0.4.7.tgz
45 http 200 https://registry.npmjs.org/webworker-threads/-/webworker-threads-0.4.7.tgz
46 silly shasum updated bytes 58392
47 info shasum d8e175e714a2e910a41b544a6fe4aae9703cbcfd
47 info shasum /root/tmp/npm-3449/1367236351124-0.9861602683085948/tmp.tgz
48 verbose tar unpack /root/tmp/npm-3449/1367236351124-0.9861602683085948/tmp.tgz
49 silly lockFile 6f42abed-51124-0-9861602683085948-package /root/tmp/npm-3449/1367236351124-0.9861602683085948/package
50 verbose lock /root/tmp/npm-3449/1367236351124-0.9861602683085948/package /root/.npm/6f42abed-51124-0-9861602683085948-package.lock
51 silly lockFile fc900c5b-51124-0-9861602683085948-tmp-tgz /root/tmp/npm-3449/1367236351124-0.9861602683085948/tmp.tgz
52 verbose lock /root/tmp/npm-3449/1367236351124-0.9861602683085948/tmp.tgz /root/.npm/fc900c5b-51124-0-9861602683085948-tmp-tgz.lock
53 silly gunzTarPerm modes [ '755', '644' ]
54 silly gunzTarPerm extractEntry package.json
55 silly gunzTarPerm extractEntry .npmignore
56 silly gunzTarPerm extractEntry README.md
57 silly gunzTarPerm extractEntry LICENSE
58 silly gunzTarPerm extractEntry CHANGES.md
59 silly gunzTarPerm extractEntry TODO.md
60 silly gunzTarPerm extractEntry benchmark/b00_fibonacci_server_no_threads.js
61 silly gunzTarPerm extractEntry benchmark/b01_fibonacci_server_threads.js
62 silly gunzTarPerm extractEntry benchmark/b02_fibonacci_server_threads_pool.js
63 silly gunzTarPerm extractEntry benchmark/b03_fibonacci_server_clustered.js
64 silly gunzTarPerm extractEntry benchmark/b04_only_quick.js
65 silly gunzTarPerm extractEntry benchmark/pi.js
66 silly gunzTarPerm extractEntry benchmark/pi_precompiled.js
67 silly gunzTarPerm extractEntry benchmark/doubles.c
68 silly gunzTarPerm extractEntry benchmark/pi.c
69 silly gunzTarPerm extractEntry benchmark/pi.rb
70 silly gunzTarPerm extractEntry AUTHORS
71 silly gunzTarPerm extractEntry deps/minifier/bin/minify
72 silly gunzTarPerm extractEntry deps/minifier/src/minify.c
73 silly gunzTarPerm extractEntry deps/minifier/src/test
74 silly gunzTarPerm extractEntry deps/minifier/src/test.include.c
75 silly gunzTarPerm extractEntry deps/minifier/src/test_minifier.c
76 silly gunzTarPerm extractEntry examples/demo.js
77 silly gunzTarPerm extractEntry examples/ex03_ping_pong.js
78 silly gunzTarPerm extractEntry examples/quickIntro_multiThread.js
79 silly gunzTarPerm extractEntry examples/ex04_main.js
80 silly gunzTarPerm extractEntry examples/quickIntro_multiThreadEvented.js
81 silly gunzTarPerm extractEntry examples/ex04_worker.js
82 silly gunzTarPerm extractEntry examples/quickIntro_fiveThreads.js
83 silly gunzTarPerm extractEntry examples/ex05_pool.js
84 silly gunzTarPerm extractEntry examples/quickIntro_evented_childThreadCode.js
85 silly gunzTarPerm extractEntry examples/ex01_basic.js
86 silly gunzTarPerm extractEntry examples/ex02_events.js
87 silly gunzTarPerm extractEntry examples/ex06_jason.js
88 silly gunzTarPerm extractEntry examples/quickIntro_oneThread.js
89 silly gunzTarPerm extractEntry examples/quickIntro_blocking.js
90 silly gunzTarPerm extractEntry examples/quickIntro_loop.js
91 silly gunzTarPerm extractEntry examples/quickIntro_oneThreadEvented.js
92 silly gunzTarPerm extractEntry examples/ex06_complex.js
93 silly gunzTarPerm extractEntry examples/fiveThreads.ls
94 silly gunzTarPerm extractEntry examples/multiThreadEvented.ls
95 silly gunzTarPerm extractEntry examples/ex06_jason.md
96 silly gunzTarPerm extractEntry examples/ex05_pool.md
97 silly gunzTarPerm extractEntry examples/ex04_worker.md
98 silly gunzTarPerm extractEntry examples/ex04_main.md
99 silly gunzTarPerm extractEntry examples/ex03_ping_pong.md
100 silly gunzTarPerm extractEntry examples/ex02_events.md
101 silly gunzTarPerm extractEntry examples/ex01_basic.md
102 silly gunzTarPerm extractEntry test.ls
103 silly gunzTarPerm extractEntry package.ls
104 silly gunzTarPerm extractEntry src/load.js
105 silly gunzTarPerm extractEntry src/createPool.js
106 silly gunzTarPerm extractEntry src/events.js
107 silly gunzTarPerm extractEntry src/thread_nextTick.js
108 silly gunzTarPerm extractEntry src/worker.js
109 silly gunzTarPerm extractEntry src/createPool.ls
110 silly gunzTarPerm extractEntry src/bson.h
111 silly gunzTarPerm extractEntry src/events.js.c
112 silly gunzTarPerm extractEntry src/events.ls
113 silly gunzTarPerm extractEntry src/jslib.cc
114 silly gunzTarPerm extractEntry src/bson.cc
115 silly gunzTarPerm extractEntry src/load.js.c
116 silly gunzTarPerm extractEntry src/load.ls
117 silly gunzTarPerm extractEntry src/queues_a_gogo.cc
118 silly gunzTarPerm extractEntry src/WebWorkerThreads.cc
119 silly gunzTarPerm extractEntry src/thread_nextTick.js.c
120 silly gunzTarPerm extractEntry src/thread_nextTick.ls
121 silly gunzTarPerm extractEntry src/createPool.js.c
122 silly gunzTarPerm extractEntry src/worker.js.c
123 silly gunzTarPerm extractEntry src/worker.ls
124 silly gunzTarPerm extractEntry test/ab.js
125 silly gunzTarPerm extractEntry test/test11_multi_callbacks.js
126 silly gunzTarPerm extractEntry test/test12_precompiled_vs_normal.js
127 silly gunzTarPerm extractEntry test/test13_thread_nextTick_speed.js
128 silly gunzTarPerm extractEntry test/test10_node_nextTick_speed.js
129 silly gunzTarPerm extractEntry test/test15_emit_ping_pong.js
130 silly gunzTarPerm extractEntry test/test16_syntax_error_in_the_thread.js
131 silly gunzTarPerm extractEntry test/test17_pool_pi.js
132 silly gunzTarPerm extractEntry test/test18_pool_any_as_fast_as_possible.js
133 silly gunzTarPerm extractEntry test/test19_pool_emit_any_all.js
134 silly gunzTarPerm extractEntry test/test09_throw_from_the_callback.js
135 silly gunzTarPerm extractEntry test/test20_removeAllListeners.js
136 silly gunzTarPerm extractEntry test/test08_sigkill_leaks.js
137 silly gunzTarPerm extractEntry test/test21_emit_ping_pong_big_string.js
138 silly gunzTarPerm extractEntry test/test07_sigkill.js
139 silly gunzTarPerm extractEntry test/test22_create_destroy_loop.js
140 silly gunzTarPerm extractEntry test/test06_throw_from_the_thread.js
141 silly gunzTarPerm extractEntry test/test23_create_destroy_loop.js
142 silly gunzTarPerm extractEntry test/test05_debugLeaksNoCallbacks.js
143 silly gunzTarPerm extractEntry test/test24_puts.js
144 silly gunzTarPerm extractEntry test/test04_gc_versus_not_gc.js
145 silly gunzTarPerm extractEntry test/test25_delete_puts.js
146 silly gunzTarPerm extractEntry test/test03_infiniteLoopFunction.js
147 silly gunzTarPerm extractEntry test/test26_puts_with_many_args.js
148 silly gunzTarPerm extractEntry test/test02_loop_as_fast_as_possible.js
149 silly gunzTarPerm extractEntry test/test27_puts_event_loop.js
150 silly gunzTarPerm extractEntry test/test01_loop_as_fast_as_possible.js
151 silly gunzTarPerm extractEntry test/test28_puts_nextTick_loop.js
152 silly gunzTarPerm extractEntry test/test00_run_once_and_destroy.js
153 silly gunzTarPerm extractEntry test/test29_puts_callback_loop.js
154 silly gunzTarPerm extractEntry test/test14_emit_once.js
155 silly gunzTarPerm extractEntry binding.gyp
156 verbose read json /root/tmp/npm-3449/1367236351124-0.9861602683085948/package/package.json
157 silly lockFile 6f42abed-51124-0-9861602683085948-package /root/tmp/npm-3449/1367236351124-0.9861602683085948/package
158 silly lockFile 6f42abed-51124-0-9861602683085948-package /root/tmp/npm-3449/1367236351124-0.9861602683085948/package
159 silly lockFile fc900c5b-51124-0-9861602683085948-tmp-tgz /root/tmp/npm-3449/1367236351124-0.9861602683085948/tmp.tgz
160 silly lockFile fc900c5b-51124-0-9861602683085948-tmp-tgz /root/tmp/npm-3449/1367236351124-0.9861602683085948/tmp.tgz
161 verbose from cache /root/tmp/npm-3449/1367236351124-0.9861602683085948/package/package.json
162 verbose tar pack [ '/root/.npm/webworker-threads/0.4.7/package.tgz',
162 verbose tar pack   '/root/tmp/npm-3449/1367236351124-0.9861602683085948/package' ]
163 verbose tarball /root/.npm/webworker-threads/0.4.7/package.tgz
164 verbose folder /root/tmp/npm-3449/1367236351124-0.9861602683085948/package
165 silly lockFile 6f42abed-51124-0-9861602683085948-package /root/tmp/npm-3449/1367236351124-0.9861602683085948/package
166 verbose lock /root/tmp/npm-3449/1367236351124-0.9861602683085948/package /root/.npm/6f42abed-51124-0-9861602683085948-package.lock
167 silly lockFile 49e52549-worker-threads-0-4-7-package-tgz /root/.npm/webworker-threads/0.4.7/package.tgz
168 verbose lock /root/.npm/webworker-threads/0.4.7/package.tgz /root/.npm/49e52549-worker-threads-0-4-7-package-tgz.lock
169 silly lockFile 6f42abed-51124-0-9861602683085948-package /root/tmp/npm-3449/1367236351124-0.9861602683085948/package
170 silly lockFile 6f42abed-51124-0-9861602683085948-package /root/tmp/npm-3449/1367236351124-0.9861602683085948/package
171 silly lockFile 49e52549-worker-threads-0-4-7-package-tgz /root/.npm/webworker-threads/0.4.7/package.tgz
172 silly lockFile 49e52549-worker-threads-0-4-7-package-tgz /root/.npm/webworker-threads/0.4.7/package.tgz
173 silly lockFile 12d81389--webworker-threads-0-4-7-package /root/.npm/webworker-threads/0.4.7/package
174 verbose lock /root/.npm/webworker-threads/0.4.7/package /root/.npm/12d81389--webworker-threads-0-4-7-package.lock
175 silly lockFile 12d81389--webworker-threads-0-4-7-package /root/.npm/webworker-threads/0.4.7/package
176 silly lockFile 12d81389--webworker-threads-0-4-7-package /root/.npm/webworker-threads/0.4.7/package
177 verbose tar unpack /root/.npm/webworker-threads/0.4.7/package.tgz
178 silly lockFile 12d81389--webworker-threads-0-4-7-package /root/.npm/webworker-threads/0.4.7/package
179 verbose lock /root/.npm/webworker-threads/0.4.7/package /root/.npm/12d81389--webworker-threads-0-4-7-package.lock
180 silly lockFile 49e52549-worker-threads-0-4-7-package-tgz /root/.npm/webworker-threads/0.4.7/package.tgz
181 verbose lock /root/.npm/webworker-threads/0.4.7/package.tgz /root/.npm/49e52549-worker-threads-0-4-7-package-tgz.lock
182 silly gunzTarPerm modes [ '755', '644' ]
183 silly gunzTarPerm extractEntry package.json
184 silly gunzTarPerm extractEntry .npmignore
185 silly gunzTarPerm extractEntry README.md
186 silly gunzTarPerm extractEntry LICENSE
187 silly gunzTarPerm extractEntry CHANGES.md
188 silly gunzTarPerm extractEntry TODO.md
189 silly gunzTarPerm extractEntry benchmark/b00_fibonacci_server_no_threads.js
190 silly gunzTarPerm extractEntry benchmark/b01_fibonacci_server_threads.js
191 silly gunzTarPerm extractEntry benchmark/b02_fibonacci_server_threads_pool.js
192 silly gunzTarPerm extractEntry benchmark/b03_fibonacci_server_clustered.js
193 silly gunzTarPerm extractEntry benchmark/b04_only_quick.js
194 silly gunzTarPerm extractEntry benchmark/pi.js
195 silly gunzTarPerm extractEntry benchmark/pi_precompiled.js
196 silly gunzTarPerm extractEntry benchmark/doubles.c
197 silly gunzTarPerm extractEntry benchmark/pi.c
198 silly gunzTarPerm extractEntry benchmark/pi.rb
199 silly gunzTarPerm extractEntry AUTHORS
200 silly gunzTarPerm extractEntry deps/minifier/bin/minify
201 silly gunzTarPerm extractEntry deps/minifier/src/minify.c
202 silly gunzTarPerm extractEntry deps/minifier/src/test
203 silly gunzTarPerm extractEntry deps/minifier/src/test.include.c
204 silly gunzTarPerm extractEntry deps/minifier/src/test_minifier.c
205 silly gunzTarPerm extractEntry examples/demo.js
206 silly gunzTarPerm extractEntry examples/ex03_ping_pong.js
207 silly gunzTarPerm extractEntry examples/quickIntro_multiThread.js
208 silly gunzTarPerm extractEntry examples/ex04_main.js
209 silly gunzTarPerm extractEntry examples/quickIntro_multiThreadEvented.js
210 silly gunzTarPerm extractEntry examples/ex04_worker.js
211 silly gunzTarPerm extractEntry examples/quickIntro_fiveThreads.js
212 silly gunzTarPerm extractEntry examples/ex05_pool.js
213 silly gunzTarPerm extractEntry examples/quickIntro_evented_childThreadCode.js
214 silly gunzTarPerm extractEntry examples/ex01_basic.js
215 silly gunzTarPerm extractEntry examples/ex02_events.js
216 silly gunzTarPerm extractEntry examples/ex06_jason.js
217 silly gunzTarPerm extractEntry examples/quickIntro_oneThread.js
218 silly gunzTarPerm extractEntry examples/quickIntro_blocking.js
219 silly gunzTarPerm extractEntry examples/quickIntro_loop.js
220 silly gunzTarPerm extractEntry examples/quickIntro_oneThreadEvented.js
221 silly gunzTarPerm extractEntry examples/ex06_complex.js
222 silly gunzTarPerm extractEntry examples/fiveThreads.ls
223 silly gunzTarPerm extractEntry examples/multiThreadEvented.ls
224 silly gunzTarPerm extractEntry examples/ex06_jason.md
225 silly gunzTarPerm extractEntry examples/ex05_pool.md
226 silly gunzTarPerm extractEntry examples/ex04_worker.md
227 silly gunzTarPerm extractEntry examples/ex04_main.md
228 silly gunzTarPerm extractEntry examples/ex03_ping_pong.md
229 silly gunzTarPerm extractEntry examples/ex02_events.md
230 silly gunzTarPerm extractEntry examples/ex01_basic.md
231 silly gunzTarPerm extractEntry test.ls
232 silly gunzTarPerm extractEntry package.ls
233 silly gunzTarPerm extractEntry src/load.js
234 silly gunzTarPerm extractEntry src/createPool.js
235 silly gunzTarPerm extractEntry src/events.js
236 silly gunzTarPerm extractEntry src/thread_nextTick.js
237 silly gunzTarPerm extractEntry src/worker.js
238 silly gunzTarPerm extractEntry src/createPool.ls
239 silly gunzTarPerm extractEntry src/bson.h
240 silly gunzTarPerm extractEntry src/events.js.c
241 silly gunzTarPerm extractEntry src/events.ls
242 silly gunzTarPerm extractEntry src/jslib.cc
243 silly gunzTarPerm extractEntry src/bson.cc
244 silly gunzTarPerm extractEntry src/load.js.c
245 silly gunzTarPerm extractEntry src/load.ls
246 silly gunzTarPerm extractEntry src/queues_a_gogo.cc
247 silly gunzTarPerm extractEntry src/WebWorkerThreads.cc
248 silly gunzTarPerm extractEntry src/thread_nextTick.js.c
249 silly gunzTarPerm extractEntry src/thread_nextTick.ls
250 silly gunzTarPerm extractEntry src/createPool.js.c
251 silly gunzTarPerm extractEntry src/worker.js.c
252 silly gunzTarPerm extractEntry src/worker.ls
253 silly gunzTarPerm extractEntry test/ab.js
254 silly gunzTarPerm extractEntry test/test11_multi_callbacks.js
255 silly gunzTarPerm extractEntry test/test12_precompiled_vs_normal.js
256 silly gunzTarPerm extractEntry test/test13_thread_nextTick_speed.js
257 silly gunzTarPerm extractEntry test/test10_node_nextTick_speed.js
258 silly gunzTarPerm extractEntry test/test15_emit_ping_pong.js
259 silly gunzTarPerm extractEntry test/test16_syntax_error_in_the_thread.js
260 silly gunzTarPerm extractEntry test/test17_pool_pi.js
261 silly gunzTarPerm extractEntry test/test18_pool_any_as_fast_as_possible.js
262 silly gunzTarPerm extractEntry test/test19_pool_emit_any_all.js
263 silly gunzTarPerm extractEntry test/test09_throw_from_the_callback.js
264 silly gunzTarPerm extractEntry test/test20_removeAllListeners.js
265 silly gunzTarPerm extractEntry test/test08_sigkill_leaks.js
266 silly gunzTarPerm extractEntry test/test21_emit_ping_pong_big_string.js
267 silly gunzTarPerm extractEntry test/test07_sigkill.js
268 silly gunzTarPerm extractEntry test/test22_create_destroy_loop.js
269 silly gunzTarPerm extractEntry test/test06_throw_from_the_thread.js
270 silly gunzTarPerm extractEntry test/test23_create_destroy_loop.js
271 silly gunzTarPerm extractEntry test/test05_debugLeaksNoCallbacks.js
272 silly gunzTarPerm extractEntry test/test24_puts.js
273 silly gunzTarPerm extractEntry test/test04_gc_versus_not_gc.js
274 silly gunzTarPerm extractEntry test/test25_delete_puts.js
275 silly gunzTarPerm extractEntry test/test03_infiniteLoopFunction.js
276 silly gunzTarPerm extractEntry test/test26_puts_with_many_args.js
277 silly gunzTarPerm extractEntry test/test02_loop_as_fast_as_possible.js
278 silly gunzTarPerm extractEntry test/test27_puts_event_loop.js
279 silly gunzTarPerm extractEntry test/test01_loop_as_fast_as_possible.js
280 silly gunzTarPerm extractEntry test/test28_puts_nextTick_loop.js
281 silly gunzTarPerm extractEntry test/test00_run_once_and_destroy.js
282 silly gunzTarPerm extractEntry test/test29_puts_callback_loop.js
283 silly gunzTarPerm extractEntry test/test14_emit_once.js
284 silly gunzTarPerm extractEntry binding.gyp
285 verbose read json /root/.npm/webworker-threads/0.4.7/package/package.json
286 silly lockFile 12d81389--webworker-threads-0-4-7-package /root/.npm/webworker-threads/0.4.7/package
287 silly lockFile 12d81389--webworker-threads-0-4-7-package /root/.npm/webworker-threads/0.4.7/package
288 silly lockFile 49e52549-worker-threads-0-4-7-package-tgz /root/.npm/webworker-threads/0.4.7/package.tgz
289 silly lockFile 49e52549-worker-threads-0-4-7-package-tgz /root/.npm/webworker-threads/0.4.7/package.tgz
290 silly shasum updated bytes 58375
291 info shasum 45afb071e7b62fb04e304f7bbd820004a169c8a7
291 info shasum /root/.npm/webworker-threads/0.4.7/package.tgz
292 verbose from cache /root/.npm/webworker-threads/0.4.7/package/package.json
293 verbose chmod /root/.npm/webworker-threads/0.4.7/package.tgz 644
294 verbose chown /root/.npm/webworker-threads/0.4.7/package.tgz [ 0, 0 ]
295 silly lockFile 6adeb0b8-eads-webworker-threads-0-4-7-tgz https://registry.npmjs.org/webworker-threads/-/webworker-threads-0.4.7.tgz
296 silly lockFile 6adeb0b8-eads-webworker-threads-0-4-7-tgz https://registry.npmjs.org/webworker-threads/-/webworker-threads-0.4.7.tgz
297 silly lockFile 452cf5be-webworker-threads-0-4-7 webworker-threads@0.4.7
298 silly lockFile 452cf5be-webworker-threads-0-4-7 webworker-threads@0.4.7
299 silly lockFile 0e1aa9d7-webworker-threads webworker-threads@
300 silly lockFile 0e1aa9d7-webworker-threads webworker-threads@
301 silly resolved [ { name: 'webworker-threads',
301 silly resolved     version: '0.4.7',
301 silly resolved     main: 'build/Release/WebWorkerThreads.node',
301 silly resolved     description: 'Lightweight Web Worker API implementation with native threads',
301 silly resolved     keywords: [ 'threads', 'web worker', 'a gogo' ],
301 silly resolved     author: { name: 'Audrey Tang', email: 'audreyt@audreyt.org' },
301 silly resolved     homepage: 'https://github.com/audreyt/node-webworker-threads',
301 silly resolved     bugs:
301 silly resolved      { url: 'http://github.com/audreyt/node-webworker-threads/issues',
301 silly resolved        email: 'audreyt@audreyt.org' },
301 silly resolved     licenses: [ [Object], [Object] ],
301 silly resolved     repository:
301 silly resolved      { type: 'git',
301 silly resolved        url: 'http://github.com/audreyt/node-webworker-threads.git' },
301 silly resolved     scripts:
301 silly resolved      { js: 'env PATH=./node_modules/.bin:"$PATH" lsc -cj package.ls;\ngcc deps/minifier/src/minify.c -o deps/minifier/bin/minify;\nenv PATH=./node_modules/.bin:"$PATH" lsc -cbp src/worker.ls                    > src/worker.js;\n./deps/minifier/bin/minify kWorker_js            < src/worker.js          > src/worker.js.c;\nenv PATH=./node_modules/.bin:"$PATH" lsc -cbp src/events.ls                    > src/events.js;\n./deps/minifier/bin/minify kEvents_js            < src/events.js          > src/events.js.c;\nenv PATH=./node_modules/.bin:"$PATH" lsc -cbp src/createPool.ls                > src/createPool.js;\n./deps/minifier/bin/minify kCreatePool_js        < src/createPool.js      > src/createPool.js.c;\nenv PATH=./node_modules/.bin:"$PATH" lsc -cbp src/thread_nextTick.ls           > src/thread_nextTick.js;\n./deps/minifier/bin/minify kThread_nextTick_js 1 < src/thread_nextTick.js > src/thread_nextTick.js.c;\nenv PATH=./node_modules/.bin:"$PATH" lsc -cbp src/load.ls                      > src/load.js;\n./deps/minifier/bin/minify kLoad_js 1 1          < src/load.js            > src/load.js.c;',
301 silly resolved        install: 'node-gyp rebuild' },
301 silly resolved     devDependencies: { LiveScript: '1.1.x' },
301 silly resolved     gypfile: true,
301 silly resolved     engines: { node: '>= 0.8.0' },
301 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
301 silly resolved     readme: '# WebWorker Threads\n\nThis is based on @xk (jorgechamorro)\'s [Threads A GoGo for Node.js](https://github.com/audreyt/node-threads-a-gogo), but with an API conforming to the [Web Worker standard](http://www.w3.org/TR/workers/).\n\nThis module provides an asynchronous, evented and/or continuation passing style API for moving blocking/longish CPU-bound tasks out of Node\'s event loop to JavaScript threads that run in parallel in the background and that use all the available CPU cores automatically; all from within a single Node process.\n\nThis module requires Node.js 0.8.0+.\n\nOn Unix (including Linux and OS X), this module requires a working node-gyp toolchain, which in turn requires make and C/C++.\nFor example, on OS X, you could install XCode from Apple, and then use it to install the command line tools (under Preferences -> Downloads).\n\nOn Windows, this module requires Node.js 0.9.3+ and a working [node-gyp toolchain](http://dailyjs.com/2012/05/17/windows-and-node-3/).\n\n## Installing the module\n\nWith [npm](http://npmjs.org/):\n\n    npm install webworker-threads\n\nSample usage (adapted from [MDN](https://developer.mozilla.org/en-US/docs/DOM/Using_web_workers#Passing_data)):\n\n```js\nvar Worker = require(\'webworker-threads\').Worker;\n// var w = new Worker(\'worker.js\'); // Standard API\n\n// You may also pass in a function:\nvar worker = new Worker(function(){\n  postMessage("I\'m working before postMessage(\'ali\').");\n  onmessage = function(event) {\n    postMessage(\'Hi \' + event.data);\n    self.close();\n  };\n});\nworker.onmessage = function(event) {\n  console.log("Worker said : " + event.data);\n};\nworker.postMessage(\'ali\');\n```\n\nA more involved example in [LiveScript](http://livescript.net/) syntax, with five threads:\n\n```coffee\n{ Worker } = require \\webworker-threads\n\nfor til 5 => (new Worker ->\n  fibo = (n) -> if n > 1 then fibo(n - 1) + fibo(n - 2) else 1\n  @onmessage = ({ data }) -> postMessage fibo data\n)\n  ..onmessage = ({ data }) ->\n    console.log "[#{ @thread.id }] #data"\n    @postMessage Math.ceil Math.random! * 30\n  ..postMessage Math.ceil Math.random! * 30\n\ndo spin = -> process.nextTick spin\n```\n\n## Introduction\n\nAfter the initialization phase of a Node program, whose purpose is to setup listeners and callbacks to be executed in response to events, the next phase, the proper execution of the program, is orchestrated by the event loop whose duty is to [juggle events, listeners and callbacks quickly and without any hiccups nor interruptions that would ruin its performance](http://youtube.com/v/D0uA_NOb0PE?autoplay=1)\n\nBoth the event loop and said listeners and callbacks run sequentially in a single thread of execution, Node\'s main thread. If any of them ever blocks, nothing else will happen for the duration of the block: no more events will be handled, no more callbacks nor listeners nor timeouts nor nextTick()ed functions will have the chance to run and do their job, because they won\'t be called by the blocked event loop, and the program will turn sluggish at best, or appear to be frozen and dead at worst.\n\n### What is WebWorker-Threads\n\n`webworker-threads` provides an asynchronous API for CPU-bound tasks that\'s missing in Node.js:\n\n``` javascript\nvar Worker = require(\'webworker-threads\').Worker;\nrequire(\'http\').createServer(function (req,res) {\n  var fibo = new Worker(function() {\n    function fibo (n) {\n      return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n    }\n    onmessage = function (event) {\n      postMessage(fibo(event.data));\n    }\n  });\n  fibo.onmessage = function (event) {\n    res.end(\'fib(40) = \' + event.data);\n  };\n  fibo.postMessage(40);\n}).listen(port);\n```\n\nAnd it won\'t block the event loop because for each request, the `fibo` worker will run in parallel in a separate background thread.\n\n## API\n\n### Module API\n``` javascript\nvar Threads= require(\'webworker-threads\');\n```\n##### .Worker\n`new Threads.Worker( [ file | function ] )` returns a Worker object.\n##### .create()\n`Threads.create( /* no arguments */ )` returns a thread object.\n##### .createPool( numThreads )\n`Threads.createPool( numberOfThreads )` returns a threadPool object.\n\n---\n### Web Worker API\n``` javascript\nvar worker= new Threads.Worker(\'worker.js\');\nvar worker= new Threads.Worker(function(){ ... });\nvar worker= new Threads.Worker();\n```\n##### .postMessage( data )\n`worker.postMessage({ x: 1, y: 2 })` sends a data structure into the worker. The worker can receive it using the `onmessage` handler.\n##### .onmessage\n`worker.onmessage = function (event) { console.log(event.data) };` receives data from the worker\'s `postMessage` calls.\n##### .terminate()\n`worker.terminate()` terminates the worker thread.\n##### .addEventListener( type, cb )\n`worker.addEventListener(\'message\', callback)` is equivalent to setting `worker.onmesssage = callback`.\n##### .dispatchEvent( event )\nCurrently unimplemented.\n##### .removeEventListener( type )\nCurrently unimplemented.\n##### .thread\nReturns the underlying `thread` object; see the next section for details.\nNote that this attribute is implementation-specific, and not part of W3C Web Worker API.\n\n---\n### Thread API\n``` javascript\nvar thread= Threads.create();\n```\n##### .id\n`thread.id` is a sequential thread serial number.\n##### .load( absolutePath [, cb] )\n`thread.load( absolutePath [, cb] )` reads the file at `absolutePath` and `thread.eval(fileContents, cb)`.\n##### .eval( program [, cb])\n`thread.eval( program [, cb])` converts `program.toString()` and eval()s it in the thread\'s global context, and (if provided) returns the completion value to `cb(err, completionValue)`.\n##### .on( eventType, listener )\n`thread.on( eventType, listener )` registers the listener `listener(data)` for any events of `eventType` that the thread `thread` may emit.\n##### .once( eventType, listener )\n`thread.once( eventType, listener )` is like `thread.on()`, but the listener will only be called once.\n##### .removeAllListeners( [eventType] )\n`thread.removeAllListeners( [eventType] )` deletes all listeners for all eventTypes. If `eventType` is provided, deletes all listeners only for the event type `eventType`.\n##### .emit( eventType, eventData [, eventData ... ] )\n`thread.emit( eventType, eventData [, eventData ... ] )` emits an event of `eventType` with `eventData` inside the thread `thread`. All its arguments are .toString()ed.\n##### .destroy( /* no arguments */ )\n`thread.destroy( /* no arguments */ )` destroys the thread.\n\n---\n### Thread pool API\n``` javascript\nthreadPool= Threads.createPool( numberOfThreads );\n```\n##### .load( absolutePath [, cb] )\n`threadPool.load( absolutePath [, cb] )` runs `thread.load( absolutePath [, cb] )` in all the pool\'s threads.\n##### .any.eval( program, cb )\n`threadPool.any.eval( program, cb )` is like `thread.eval()`, but in any of the pool\'s threads.\n##### .any.emit( eventType, eventData [, eventData ... ] )\n`threadPool.any.emit( eventType, eventData [, eventData ... ] )` is like `thread.emit()`, but in any of the pool\'s threads.\n##### .all.eval( program, cb )\n`threadPool.all.eval( program, cb )` is like `thread.eval()`, but in all the pool\'s threads.\n##### .all.emit( eventType, eventData [, eventData ... ] )\n`threadPool.all.emit( eventType, eventData [, eventData ... ] )` is like `thread.emit()`, but in all the pool\'s threads.\n##### .on( eventType, listener )\n`threadPool.on( eventType, listener )` is like `thread.on()`, registers listeners for events from any of the threads in the pool.\n##### .totalThreads()\n`threadPool.totalThreads()` returns the number of threads in this pool: as supplied in `.createPool( number )`\n##### .idleThreads()\n`threadPool.idleThreads()` returns the number of threads in this pool that are currently idle (sleeping)\n##### .pendingJobs()\n`threadPool.pendingJobs()` returns the number of jobs pending.\n##### .destroy( [ rudely ] )\n`threadPool.destroy( [ rudely ] )` waits until `pendingJobs()` is zero and then destroys the pool. If `rudely` is truthy, then it doesn\'t wait for `pendingJobs === 0`.\n\n---\n### Global Web Worker API\n\nInside every Worker instance from webworker-threads, there\'s a global `self` object with these properties:\n\n##### .postMessage( data )\n`postMessage({ x: 1, y: 2 })` sends a data structure back to the main thread.\n##### .onmessage\n`onmessage = function (event) { ... }` receives data from the main thread\'s `.postMessage` calls.\n##### .close()\n`close()` stops the current thread.\n##### .addEventListener( type, cb )\n`addEventListener(\'message\', callback)` is equivalent to setting `self.onmesssage = callback`.\n##### .dispatchEvent( event )\n`dispatchEvent({ type: \'message\', data: data })` is the same as `self.postMessage(data)`.\n##### .removeEventListener( type )\nCurrently unimplemented.\n##### .importScripts( file [, file...] )\n`importScripts(\'a.js\', \'b.js\')` loads one or more files from the disk and `eval()` them in the worker\'s instance scope.\n##### .thread\nThe underlying `thread` object; see the next section for details.\nNote that this attribute is implementation-specific, and not part of W3C Web Worker API.\n\n---\n### Global Thread API\n\nInside every thread .create()d by webworker-threads, there\'s a global `thread` object with these properties:\n##### .id\n`thread.id` is the serial number of this thread\n##### .on( eventType, listener )\n`thread.on( eventType, listener )` is just like `thread.on()` above.\n##### .once( eventType, listener )\n`thread.once( eventType, listener )` is just like `thread.once()` above.\n##### .emit( eventType, eventData [, eventData ... ] )\n`thread.emit( eventType, eventData [, eventData ... ] )` is just like `thread.emit()` above.\n##### .removeAllListeners( [eventType] )\n`thread.removeAllListeners( [eventType] )` is just like `thread.removeAllListeners()` above.\n##### .nextTick( function )\n`thread.nextTick( function )` is like `process.nextTick()`, but much faster.\n\n---\n### Global Helper API\n\nInside every thread .create()d by webworker-threads, there are some helpers:\n\n##### console.log(arg1 [, arg2 ...])\nSame as `console.log` on the main process.\n\n##### console.error(arg1 [, arg2 ...])\nSame as `console.log`, except it prints to stderr.\n\n##### puts(arg1 [, arg2 ...])\n`puts(arg1 [, arg2 ...])` converts .toString()s and prints its arguments to stdout.\n\n-----------\nWIP WIP WIP\n-----------\nNote that everything below this line is under construction and subject to change.\n-----------\n\n## Examples\n\n**A.-** Here\'s a program that makes Node\'s event loop spin freely and as fast as possible: it simply prints a dot to the console in each turn:\n\n    cat examples/quickIntro_loop.js\n    \n``` javascript\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n**B.-** Here\'s another program that adds to the one above a fibonacci(35) call in each turn, a CPU-bound task that takes quite a while to complete and that blocks the event loop making it spin slowly and clumsily. The point is simply to show that you can\'t put a job like that in the event loop because Node will stop performing properly when its event loop can\'t spin fast and freely due to a callback/listener/nextTick()ed function that\'s blocking.\n\n    cat examples/quickIntro_blocking.js\n\n``` javascript\nfunction fibo (n) {\n  return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n}\n\n(function fiboLoop () {\n  process.stdout.write(fibo(35).toString());\n  process.nextTick(fiboLoop);\n})();\n\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n**C.-** The program below uses `webworker-threads` to run the fibonacci(35) calls in a background thread, so Node\'s event loop isn\'t blocked at all and can spin freely again at full speed:\n\n    cat examples/quickIntro_oneThread.js\n  \n``` javascript\nfunction fibo (n) {\n  return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n}\n\nfunction cb (err, data) {\n  process.stdout.write(data);\n  this.eval(\'fibo(35)\', cb);\n}\n\nvar thread= require(\'webworker-threads\').create();\n\nthread.eval(fibo).eval(\'fibo(35)\', cb);\n\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n**D.-** This example is almost identical to the one above, only that it creates 5 threads instead of one, each running a fibonacci(35) in parallel and in parallel too with Node\'s event loop that keeps spinning happily at full speed in its own thread:\n\n    cat examples/quickIntro_fiveThreads.js\n  \n``` javascript\nfunction fibo (n) {\n  return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n}\n\nfunction cb (err, data) {\n  process.stdout.write(" ["+ this.id+ "]"+ data);\n  this.eval(\'fibo(35)\', cb);\n}\n\nvar Threads= require(\'webworker-threads\');\n\nThreads.create().eval(fibo).eval(\'fibo(35)\', cb);\nThreads.create().eval(fibo).eval(\'fibo(35)\', cb);\nThreads.create().eval(fibo).eval(\'fibo(35)\', cb);\nThreads.create().eval(fibo).eval(\'fibo(35)\', cb);\nThreads.create().eval(fibo).eval(\'fibo(35)\', cb);\n\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n**E.-** The next one asks `webworker-threads` to create a pool of 10 background threads, instead of creating them manually one by one:\n\n    cat examples/multiThread.js\n\n``` javascript\nfunction fibo (n) {\n  return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n}\n\nvar numThreads= 10;\nvar threadPool= require(\'webworker-threads\').createPool(numThreads).all.eval(fibo);\n\nthreadPool.all.eval(\'fibo(35)\', function cb (err, data) {\n  process.stdout.write(" ["+ this.id+ "]"+ data);\n  this.eval(\'fibo(35)\', cb);\n});\n\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n**F.-** This is a demo of the `webworker-threads` eventEmitter API, using one thread:\n\n    cat examples/quickIntro_oneThreadEvented.js\n\n``` javascript\nvar thread= require(\'webworker-threads\').create();\nthread.load(__dirname + \'/quickIntro_evented_childThreadCode.js\');\n\n/*\n  This is the code that\'s .load()ed into the child/background thread:\n  \n  function fibo (n) {\n    return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n  }\n\n  thread.on(\'giveMeTheFibo\', function onGiveMeTheFibo (data) {\n    this.emit(\'theFiboIs\', fibo(+data)); //Emits \'theFiboIs\' in the parent/main thread.\n  });\n  \n*/\n\n//Emit \'giveMeTheFibo\' in the child/background thread.\nthread.emit(\'giveMeTheFibo\', 35);\n\n//Listener for the \'theFiboIs\' events emitted by the child/background thread.\nthread.on(\'theFiboIs\', function cb (data) {\n  process.stdout.write(data);\n  this.emit(\'giveMeTheFibo\', 35);\n});\n\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n**G.-** This is a demo of the `webworker-threads` eventEmitter API, using a pool of threads:\n\n    cat examples/quickIntro_multiThreadEvented.js\n\n``` javascript\nvar numThreads= 10;\nvar threadPool= require(\'webworker-threads\').createPool(numThreads);\nthreadPool.load(__dirname + \'/quickIntro_evented_childThreadCode.js\');\n\n/*\n  This is the code that\'s .load()ed into the child/background threads:\n  \n  function fibo (n) {\n    return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n  }\n\n  thread.on(\'giveMeTheFibo\', function onGiveMeTheFibo (data) {\n    this.emit(\'theFiboIs\', fibo(+data)); //Emits \'theFiboIs\' in the parent/main thread.\n  });\n  \n*/\n\n//Emit \'giveMeTheFibo\' in all the child/background threads.\nthreadPool.all.emit(\'giveMeTheFibo\', 35);\n\n//Listener for the \'theFiboIs\' events emitted by the child/background threads.\nthreadPool.on(\'theFiboIs\', function cb (data) {\n  process.stdout.write(" ["+ this.id+ "]"+ data);\n  this.emit(\'giveMeTheFibo\', 35);\n});\n\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n## More examples\n\nThe `examples` directory contains a few more examples:\n\n* [ex01_basic](https://github.com/xk/node-threads-a-gogo/blob/master/examples/ex01_basic.md): Running a simple function in a thread.\n* [ex02_events](https://github.com/xk/node-threads-a-gogo/blob/master/examples/ex02_events.md): Sending events from a worker thread.\n* [ex03_ping_pong](https://github.com/xk/node-threads-a-gogo/blob/master/examples/ex03_ping_pong.md): Sending events both ways between the main thread and a worker thread.\n* [ex04_main](https://github.com/xk/node-threads-a-gogo/blob/master/examples/ex04_main.md): Loading the worker code from a file.\n* [ex05_pool](https://github.com/xk/node-threads-a-gogo/blob/master/examples/ex05_pool.md): Using the thread pool.\n* [ex06_jason](https://github.com/xk/node-threads-a-gogo/blob/master/examples/ex06_jason.md): Passing complex objects to threads.\n\n## Rationale\n\n[Node.js](http://nodejs.org) is the most awesome, cute and super-sexy piece of free, open source software.\n\nIts event loop can spin as fast and smooth as a turbo, and roughly speaking, **the faster it spins, the more power it delivers**. That\'s why [@ryah](http://twitter.com/ryah) took great care to ensure that no -possibly slow- I/O operations could ever block it: a pool of background threads (thanks to [Marc Lehmann\'s libeio library](http://software.schmorp.de/pkg/libeio.html)) handle any blocking I/O calls in the background, in parallel.\n\nIn Node it\'s verboten to write a server like this:\n\n``` javascript\nhttp.createServer(function (req,res) {\n  res.end( fs.readFileSync(path) );\n}).listen(port);\n```\nBecause synchronous I/O calls **block the turbo**, and without proper boost, Node.js begins to stutter and behaves clumsily. To avoid it there\'s the asynchronous version of `.readFile()`, in continuation passing style, that takes a callback:\n\n``` javascript\nfs.readfile(path, function cb (err, data) { /* ... */ });\n```\n\nIt\'s cool, we love it (*), and there\'s hundreds of ad hoc built-in functions like this in Node to help us deal with almost any variety of possibly slow, blocking I/O.\n\n### But what\'s with longish, CPU-bound tasks?\n\nHow do you avoid blocking the event loop, when the task at hand isn\'t I/O bound, and lasts more than a few fractions of a millisecond?\n\n``` javascript\nhttp.createServer(function cb (req,res) {\n  res.end( fibonacci(40) );\n}).listen(port);\n```\n\nYou simply can\'t, because there\'s no way... well, there wasn\'t before `webworker-threads`.\n\n### Why Threads\n\nThreads (kernel threads) are very interesting creatures. They provide:\n\n1.- Parallelism: All the threads run in parallel. On a single core processor, the CPU is switched rapidly back and forth among the threads providing the illusion that the threads are running in parallel, albeit on a slower CPU than the real one. With 10 compute-bound threads in a process, the threads would appear to be running in parallel, each one on a CPU with 1/10th the speed of the real CPU. On a multi-core processor, threads are truly running in parallel, and get time-sliced when the number of threads exceed the number of cores. So with 12 compute bound threads on a quad-core processor each thread will appear to run at 1/3rd of the nominal core speed.\n\n2.- Fairness: No thread is more important than another, cores and CPU slices are fairly distributed among threads by the OS scheduler.\n\n3.- Threads fully exploit all the available CPU resources in your system. On a loaded system running many tasks in many threads, the more cores there are, the faster the threads will complete. Automatically.\n\n4.- The threads of a process share exactly the same address space, that of the process they belong to. Every thread can access every memory address within the process\' address space. This is a very appropriate setup when the threads are actually part of the same job and are actively and closely cooperating with each other. Passing a reference to a chunk of data via a pointer is many orders of magnitude faster than transferring a copy of the data via IPC.\n\n### Why not multiple processes.\n\nThe "can\'t block the event loop" problem is inherent to Node\'s evented model. No matter how many Node processes you have running as a [Node-cluster](http://blog.nodejs.org/2011/10/04/an-easy-way-to-build-scalable-network-programs/), it won\'t solve its issues with CPU-bound tasks.\n\nLaunch a cluster of N Nodes running the example B (`quickIntro_blocking.js`) above, and all you\'ll get is N -instead of one- Nodes with their event loops blocked and showing a sluggish performance.\n',
301 silly resolved     readmeFilename: 'README.md',
301 silly resolved     _id: 'webworker-threads@0.4.7',
301 silly resolved     dist: { shasum: '45afb071e7b62fb04e304f7bbd820004a169c8a7' },
301 silly resolved     _from: 'webworker-threads@',
301 silly resolved     _resolved: 'https://registry.npmjs.org/webworker-threads/-/webworker-threads-0.4.7.tgz' } ]
302 info install webworker-threads@0.4.7 into /home/vantuzz/Desktop/server
303 info installOne webworker-threads@0.4.7
304 verbose from cache /root/.npm/webworker-threads/0.4.7/package/package.json
305 info /home/vantuzz/Desktop/server/node_modules/webworker-threads unbuild
306 verbose read json /home/vantuzz/Desktop/server/node_modules/webworker-threads/package.json
307 verbose tar unpack /root/.npm/webworker-threads/0.4.7/package.tgz
308 silly lockFile ef93f6c6-r-node-modules-webworker-threads /home/vantuzz/Desktop/server/node_modules/webworker-threads
309 verbose lock /home/vantuzz/Desktop/server/node_modules/webworker-threads /root/.npm/ef93f6c6-r-node-modules-webworker-threads.lock
310 silly lockFile 49e52549-worker-threads-0-4-7-package-tgz /root/.npm/webworker-threads/0.4.7/package.tgz
311 verbose lock /root/.npm/webworker-threads/0.4.7/package.tgz /root/.npm/49e52549-worker-threads-0-4-7-package-tgz.lock
312 silly gunzTarPerm modes [ '755', '644' ]
313 silly gunzTarPerm extractEntry package.json
314 silly gunzTarPerm extractEntry .npmignore
315 silly gunzTarPerm extractEntry README.md
316 silly gunzTarPerm extractEntry LICENSE
317 silly gunzTarPerm extractEntry CHANGES.md
318 silly gunzTarPerm extractEntry TODO.md
319 silly gunzTarPerm extractEntry benchmark/b00_fibonacci_server_no_threads.js
320 silly gunzTarPerm extractEntry benchmark/b01_fibonacci_server_threads.js
321 silly gunzTarPerm extractEntry benchmark/b02_fibonacci_server_threads_pool.js
322 silly gunzTarPerm extractEntry benchmark/b03_fibonacci_server_clustered.js
323 silly gunzTarPerm extractEntry benchmark/b04_only_quick.js
324 silly gunzTarPerm extractEntry benchmark/pi.js
325 silly gunzTarPerm extractEntry benchmark/pi_precompiled.js
326 silly gunzTarPerm extractEntry benchmark/doubles.c
327 silly gunzTarPerm extractEntry benchmark/pi.c
328 silly gunzTarPerm extractEntry benchmark/pi.rb
329 silly gunzTarPerm extractEntry AUTHORS
330 silly gunzTarPerm extractEntry deps/minifier/bin/minify
331 silly gunzTarPerm extractEntry deps/minifier/src/minify.c
332 silly gunzTarPerm extractEntry deps/minifier/src/test
333 silly gunzTarPerm extractEntry deps/minifier/src/test.include.c
334 silly gunzTarPerm extractEntry deps/minifier/src/test_minifier.c
335 silly gunzTarPerm extractEntry examples/demo.js
336 silly gunzTarPerm extractEntry examples/ex03_ping_pong.js
337 silly gunzTarPerm extractEntry examples/quickIntro_multiThread.js
338 silly gunzTarPerm extractEntry examples/ex04_main.js
339 silly gunzTarPerm extractEntry examples/quickIntro_multiThreadEvented.js
340 silly gunzTarPerm extractEntry examples/ex04_worker.js
341 silly gunzTarPerm extractEntry examples/quickIntro_fiveThreads.js
342 silly gunzTarPerm extractEntry examples/ex05_pool.js
343 silly gunzTarPerm extractEntry examples/quickIntro_evented_childThreadCode.js
344 silly gunzTarPerm extractEntry examples/ex01_basic.js
345 silly gunzTarPerm extractEntry examples/ex02_events.js
346 silly gunzTarPerm extractEntry examples/ex06_jason.js
347 silly gunzTarPerm extractEntry examples/quickIntro_oneThread.js
348 silly gunzTarPerm extractEntry examples/quickIntro_blocking.js
349 silly gunzTarPerm extractEntry examples/quickIntro_loop.js
350 silly gunzTarPerm extractEntry examples/quickIntro_oneThreadEvented.js
351 silly gunzTarPerm extractEntry examples/ex06_complex.js
352 silly gunzTarPerm extractEntry examples/fiveThreads.ls
353 silly gunzTarPerm extractEntry examples/multiThreadEvented.ls
354 silly gunzTarPerm extractEntry examples/ex06_jason.md
355 silly gunzTarPerm extractEntry examples/ex05_pool.md
356 silly gunzTarPerm extractEntry examples/ex04_worker.md
357 silly gunzTarPerm extractEntry examples/ex04_main.md
358 silly gunzTarPerm extractEntry examples/ex03_ping_pong.md
359 silly gunzTarPerm extractEntry examples/ex02_events.md
360 silly gunzTarPerm extractEntry examples/ex01_basic.md
361 silly gunzTarPerm extractEntry test.ls
362 silly gunzTarPerm extractEntry package.ls
363 silly gunzTarPerm extractEntry src/load.js
364 silly gunzTarPerm extractEntry src/createPool.js
365 silly gunzTarPerm extractEntry src/events.js
366 silly gunzTarPerm extractEntry src/thread_nextTick.js
367 silly gunzTarPerm extractEntry src/worker.js
368 silly gunzTarPerm extractEntry src/createPool.ls
369 silly gunzTarPerm extractEntry src/bson.h
370 silly gunzTarPerm extractEntry src/events.js.c
371 silly gunzTarPerm extractEntry src/events.ls
372 silly gunzTarPerm extractEntry src/jslib.cc
373 silly gunzTarPerm extractEntry src/bson.cc
374 silly gunzTarPerm extractEntry src/load.js.c
375 silly gunzTarPerm extractEntry src/load.ls
376 silly gunzTarPerm extractEntry src/queues_a_gogo.cc
377 silly gunzTarPerm extractEntry src/WebWorkerThreads.cc
378 silly gunzTarPerm extractEntry src/thread_nextTick.js.c
379 silly gunzTarPerm extractEntry src/thread_nextTick.ls
380 silly gunzTarPerm extractEntry src/createPool.js.c
381 silly gunzTarPerm extractEntry src/worker.js.c
382 silly gunzTarPerm extractEntry src/worker.ls
383 silly gunzTarPerm extractEntry test/ab.js
384 silly gunzTarPerm extractEntry test/test11_multi_callbacks.js
385 silly gunzTarPerm extractEntry test/test12_precompiled_vs_normal.js
386 silly gunzTarPerm extractEntry test/test13_thread_nextTick_speed.js
387 silly gunzTarPerm extractEntry test/test10_node_nextTick_speed.js
388 silly gunzTarPerm extractEntry test/test15_emit_ping_pong.js
389 silly gunzTarPerm extractEntry test/test16_syntax_error_in_the_thread.js
390 silly gunzTarPerm extractEntry test/test17_pool_pi.js
391 silly gunzTarPerm extractEntry test/test18_pool_any_as_fast_as_possible.js
392 silly gunzTarPerm extractEntry test/test19_pool_emit_any_all.js
393 silly gunzTarPerm extractEntry test/test09_throw_from_the_callback.js
394 silly gunzTarPerm extractEntry test/test20_removeAllListeners.js
395 silly gunzTarPerm extractEntry test/test08_sigkill_leaks.js
396 silly gunzTarPerm extractEntry test/test21_emit_ping_pong_big_string.js
397 silly gunzTarPerm extractEntry test/test07_sigkill.js
398 silly gunzTarPerm extractEntry test/test22_create_destroy_loop.js
399 silly gunzTarPerm extractEntry test/test06_throw_from_the_thread.js
400 silly gunzTarPerm extractEntry test/test23_create_destroy_loop.js
401 silly gunzTarPerm extractEntry test/test05_debugLeaksNoCallbacks.js
402 silly gunzTarPerm extractEntry test/test24_puts.js
403 silly gunzTarPerm extractEntry test/test04_gc_versus_not_gc.js
404 silly gunzTarPerm extractEntry test/test25_delete_puts.js
405 silly gunzTarPerm extractEntry test/test03_infiniteLoopFunction.js
406 silly gunzTarPerm extractEntry test/test26_puts_with_many_args.js
407 silly gunzTarPerm extractEntry test/test02_loop_as_fast_as_possible.js
408 silly gunzTarPerm extractEntry test/test27_puts_event_loop.js
409 silly gunzTarPerm extractEntry test/test01_loop_as_fast_as_possible.js
410 silly gunzTarPerm extractEntry test/test28_puts_nextTick_loop.js
411 silly gunzTarPerm extractEntry test/test00_run_once_and_destroy.js
412 silly gunzTarPerm extractEntry test/test29_puts_callback_loop.js
413 silly gunzTarPerm extractEntry test/test14_emit_once.js
414 silly gunzTarPerm extractEntry binding.gyp
415 verbose read json /home/vantuzz/Desktop/server/node_modules/webworker-threads/package.json
416 silly lockFile ef93f6c6-r-node-modules-webworker-threads /home/vantuzz/Desktop/server/node_modules/webworker-threads
417 silly lockFile ef93f6c6-r-node-modules-webworker-threads /home/vantuzz/Desktop/server/node_modules/webworker-threads
418 silly lockFile 49e52549-worker-threads-0-4-7-package-tgz /root/.npm/webworker-threads/0.4.7/package.tgz
419 silly lockFile 49e52549-worker-threads-0-4-7-package-tgz /root/.npm/webworker-threads/0.4.7/package.tgz
420 info preinstall webworker-threads@0.4.7
421 verbose from cache /home/vantuzz/Desktop/server/node_modules/webworker-threads/package.json
422 verbose readDependencies using package.json deps
423 verbose from cache /home/vantuzz/Desktop/server/node_modules/webworker-threads/package.json
424 verbose readDependencies using package.json deps
425 silly resolved []
426 verbose about to build /home/vantuzz/Desktop/server/node_modules/webworker-threads
427 info build /home/vantuzz/Desktop/server/node_modules/webworker-threads
428 verbose from cache /home/vantuzz/Desktop/server/node_modules/webworker-threads/package.json
429 verbose linkStuff [ false,
429 verbose linkStuff   false,
429 verbose linkStuff   false,
429 verbose linkStuff   '/home/vantuzz/Desktop/server/node_modules' ]
430 info linkStuff webworker-threads@0.4.7
431 verbose linkBins webworker-threads@0.4.7
432 verbose linkMans webworker-threads@0.4.7
433 verbose rebuildBundles webworker-threads@0.4.7
434 info install webworker-threads@0.4.7
435 verbose unsafe-perm in lifecycle false
436 verbose set uid from=0 to=1000
437 silly exec sh "-c" "node-gyp rebuild"
438 silly sh,-c,node-gyp rebuild,/home/vantuzz/Desktop/server/node_modules/webworker-threads spawning
439 info webworker-threads@0.4.7 Failed to exec install script
440 info /home/vantuzz/Desktop/server/node_modules/webworker-threads unbuild
441 verbose from cache /home/vantuzz/Desktop/server/node_modules/webworker-threads/package.json
442 info preuninstall webworker-threads@0.4.7
443 info uninstall webworker-threads@0.4.7
444 verbose true,/home/vantuzz/Desktop/server/node_modules,/home/vantuzz/Desktop/server/node_modules unbuild webworker-threads@0.4.7
445 info postuninstall webworker-threads@0.4.7
446 error webworker-threads@0.4.7 install: `node-gyp rebuild`
446 error `sh "-c" "node-gyp rebuild"` failed with 1
447 error Failed at the webworker-threads@0.4.7 install script.
447 error This is most likely a problem with the webworker-threads package,
447 error not with npm itself.
447 error Tell the author that this fails on your system:
447 error     node-gyp rebuild
447 error You can get their info via:
447 error     npm owner ls webworker-threads
447 error There is likely additional logging output above.
448 error System Linux 2.6.32-5-amd64
449 error command "node" "/usr/local/bin/npm" "install" "webworker-threads"
450 error cwd /home/vantuzz/Desktop/server
451 error node -v v0.11.1
452 error npm -v 1.2.18
453 error code ELIFECYCLE
454 verbose exit [ 1, true ]
