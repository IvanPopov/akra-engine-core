{
  "author": {
    "name": "Aikar",
    "email": "aikar@aikar.co",
    "url": "http://aikar.co"
  },
  "name": "autoloader",
  "description": "Autoloads JS Files (designed for Joose)",
  "version": "1.1.0",
  "homepage": "http://aikar.co",
  "main": "autoloader.js",
  "engines": {
    "node": ">=0.4"
  },
  "dependencies": {},
  "devDependencies": {},
  "readme": "## About\nAutoloads JS files based on name when the class is needed.\nThis is designed to be used with Joose classes in the \"Foo.Bar.Baz\" format\n\nThis module removes the needs of using require() all over your files. Simply\ndefine the autoloader to your codebase, and use the names relative to the files.\n\nie lib/Foo/Bar/Baz.js when you load 'lib/' makes Foo.Bar.Baz\nrequire('./lib/Foo/Bar/Baz.js') automatically and return the value.\n\n## Install\n\nInstall with npm install autoloader\n\n## Usage\n\nFolder structure:\n\n    /lib/\n        Foo/\n            Foo.js\n            Bar.js\n    test.js\n    package.json (main: 'test.js')\n    \nFile contents:\n\nFoo.js:\n\n    module.export = function() {\n        console.log(\"Foo\")\n        Foo.Bar();\n    };\n\nBar.js:\n\n    module.export = function() {\n        console.log(\"Foo.Bar\")\n    };\n\n\ntest.js:\n    \n    require('autoloader').autoload(__dirname + '/lib')\n    Foo();\n\n\nloading the module would print to screen:\n\n    Foo\n    Foo.Bar\n    \nALL MODULES MUST RETURN AN OBJECT/FUNCTION. It can not return Scalar Values!\n\n## Custom Loaders\nIf you pass a function as the 2nd argument, autoloader will execute that before\nrequiring the file with the following arguments:\n\n    function (fullPath, className, object, key) { }\n    \nfullPath will be the full path to the module file to load, classname would\nbe 'Foo.Bar.Baz' for example, object would be the object to add a new value\nto, and key is the key of object to assign the response.\n\nso if you load 'Foo', object is global, and key is Foo, likewise if you load\nFoo.Bar, object is Foo and key is 'Bar'.\nYou can then do what ever magic it is you need to do, and optionally assign it yourself.\n\nIf you don't assign it yourself, simply return the value and autoloader will\nassign it for you.\n\n## License\nThe MIT License\n\n  Copyright (c) 2011 Daniel Ennis <aikar@aikar.co>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n",
  "_id": "autoloader@1.1.0",
  "_from": "autoloader"
}
