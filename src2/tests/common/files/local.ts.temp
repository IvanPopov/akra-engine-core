var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var akra;
(function (akra) {
    (function (ELogLevel) {
        ELogLevel._map = [];
        ELogLevel.NONE = 0;
        ELogLevel.LOG = 1;
        ELogLevel.INFORMATION = 2;
        ELogLevel.WARNING = 4;
        ELogLevel.ERROR = 8;
        ELogLevel.CRITICAL = 16;
        ELogLevel.ALL = 31;
    })(akra.ELogLevel || (akra.ELogLevel = {}));
    var ELogLevel = akra.ELogLevel;
})(akra || (akra = {}));
/*I ## */
/*I ## */
/*I ## */
/*I ## */
var akra;
(function (akra) {
    akra.DEBUG = true;
    akra.logger;
    akra.typeOf;
    akra.typeOf = function typeOf(x) {
        var s = typeof x;
        if(s === "object") {
            if(x) {
                if(x instanceof Array) {
                    return 'array';
                } else {
                    if(x instanceof Object) {
                        return s;
                    }
                }
                var sClassName = Object.prototype.toString.call(x);
                if(sClassName == '[object Window]') {
                    return 'object';
                }
                if((sClassName == '[object Array]' || typeof x.length == 'number' && typeof x.splice != 'undefined' && typeof x.propertyIsEnumerable != 'undefined' && !x.propertyIsEnumerable('splice'))) {
                    return 'array';
                }
                if((sClassName == '[object Function]' || typeof x.call != 'undefined' && typeof x.propertyIsEnumerable != 'undefined' && !x.propertyIsEnumerable('call'))) {
                    return 'function';
                }
            } else {
                return 'null';
            }
        } else {
            if(s == 'function' && typeof x.call == 'undefined') {
                return 'object';
            }
        }
        return s;
    };
    /** @inline */
    akra.isDef = function (x) {
        return x !== undefined;
    };
    /** @inline */
    akra.isEmpty = function (x) {
        return x.length == 0;
    };
    // Note that undefined == null.
    /** @inline */
    akra.isDefAndNotNull = function (x) {
        return x != null;
    };
    /** @inline */
    akra.isNull = function (x) {
        return x === null;
    };
    /** @inline */
    akra.isBoolean = function (x) {
        return typeof x === "boolean";
    };
    /** @inline */
    akra.isString = function (x) {
        return typeof x === "string";
    };
    /** @inline */
    akra.isNumber = function (x) {
        return typeof x === "number";
    };
    /** @inline */
    akra.isFloat = akra.isNumber;
    /** @inline */
    akra.isInt = akra.isNumber;
    /** @inline */
    akra.isFunction = function (x) {
        return akra.typeOf(x) === "function";
    };
    /** @inline */
    akra.isObject = function (x) {
        var type = akra.typeOf(x);
        return type == "object" || type == "array" || type == "function";
    };
    akra.isArrayBuffer = function (x) {
        return x instanceof ArrayBuffer;
    };
    akra.isTypedArray = function (x) {
        return typeof x === "object" && typeof x.byteOffset === "number";
    };
    /** @inline */
    akra.isArray = function (x) {
        return akra.typeOf(x) == "array";
    };
    ; ;
    // if (!isDef(console.assert)) {
    //     console.assert = function (isOK?: bool, ...pParams: any[]): void {
    //         if (!isOK) {
    //             trace('---------------------------');
    //             trace.apply(null, pParams);
    //             throw new Error("[assertion failed]");
    //         }
    //     }
    // }
    // export var trace = console.log.bind(console);
    // export var assert = console.assert.bind(console);
    // export var warning = console.warn.bind(console);
    // export var error = console.error.bind(console);
    // export var debug_print = (pArg:any, ...pParams: any[]): void => {
    //         trace.apply(null, arguments);
    // }
    // export var debug_assert = (isOK: bool, ...pParams: any[]): void => {
    //         assert.apply(null, arguments);
    // }
    // export var debug_warning = (pArg:any, ...pParams: any[]): void => {
    //         warning.apply(null, arguments);
    // }
    // export var debug_error = (pArg:any, ...pParams: any[]): void => {
    //         error.apply(null, arguments);
    // }
    function genArray(pType, nSize) {
        var tmp = new Array(nSize);
        for(var i = 0; i < nSize; ++i) {
            tmp[i] = (pType ? new pType() : null);
        }
        return tmp;
    }
    akra.genArray = genArray;
    akra.INVALID_INDEX = 65535;
    // (-2147483646);
    akra.MIN_INT32 = 4294967295;
    // ( 2147483647);
    akra.MAX_INT32 = 2147483647;
    // (-32768);
    akra.MIN_INT16 = 65535;
    // ( 32767);
    akra.MAX_INT16 = 32767;
    // (-128);
    akra.MIN_INT8 = 255;
    // ( 127);
    akra.MAX_INT8 = 127;
    akra.MIN_UINT32 = 0;
    akra.MAX_UINT32 = 4294967295;
    akra.MIN_UINT16 = 0;
    akra.MAX_UINT16 = 65535;
    akra.MIN_UINT8 = 0;
    akra.MAX_UINT8 = 255;
    akra.SIZE_FLOAT64 = 8;
    akra.SIZE_REAL64 = 8;
    akra.SIZE_FLOAT32 = 4;
    akra.SIZE_REAL32 = 4;
    akra.SIZE_INT32 = 4;
    akra.SIZE_UINT32 = 4;
    akra.SIZE_INT16 = 2;
    akra.SIZE_UINT16 = 2;
    akra.SIZE_INT8 = 1;
    akra.SIZE_UINT8 = 1;
    akra.SIZE_BYTE = 1;
    akra.SIZE_UBYTE = 1;
    //1.7976931348623157e+308
    akra.MAX_FLOAT64 = Number.MAX_VALUE;
    //-1.7976931348623157e+308
    akra.MIN_FLOAT64 = -Number.MAX_VALUE;
    //5e-324
    akra.TINY_FLOAT64 = Number.MIN_VALUE;
    //    export const MAX_REAL64: number = Number.MAX_VALUE;   //1.7976931348623157e+308
    //    export const MIN_REAL64: number = -Number.MAX_VALUE;  //-1.7976931348623157e+308
    //    export const TINY_REAL64: number = Number.MIN_VALUE;  //5e-324
    //3.4e38
    akra.MAX_FLOAT32 = 3.4e+38;
    //-3.4e38
    akra.MIN_FLOAT32 = -3.4e+38;
    //1.5e-45
    akra.TINY_FLOAT32 = 1.5e-45;
    //    export const MAX_REAL32: number = 3.4e38;     //3.4e38
    //    export const MIN_REAL32: number = -3.4e38;    //-3.4e38
    //    export const TINY_REAL32: number = 1.5e-45;   //1.5e-45
    akra.DEFAULT_MATERIAL_NAME = "default";
    (function (EDataTypes) {
        EDataTypes._map = [];
        EDataTypes.BYTE = 5120;
        EDataTypes.UNSIGNED_BYTE = 5121;
        EDataTypes.SHORT = 5122;
        EDataTypes.UNSIGNED_SHORT = 5123;
        EDataTypes.INT = 5124;
        EDataTypes.UNSIGNED_INT = 5125;
        EDataTypes.FLOAT = 5126;
    })(akra.EDataTypes || (akra.EDataTypes = {}));
    var EDataTypes = akra.EDataTypes;
    ; ;
    (function (EDataTypeSizes) {
        EDataTypeSizes._map = [];
        EDataTypeSizes.BYTES_PER_BYTE = 1;
        EDataTypeSizes.BYTES_PER_UNSIGNED_BYTE = 1;
        EDataTypeSizes.BYTES_PER_UBYTE = 1;
        EDataTypeSizes.BYTES_PER_SHORT = 2;
        EDataTypeSizes.BYTES_PER_UNSIGNED_SHORT = 2;
        EDataTypeSizes.BYTES_PER_USHORT = 2;
        EDataTypeSizes.BYTES_PER_INT = 4;
        EDataTypeSizes.BYTES_PER_UNSIGNED_INT = 4;
        EDataTypeSizes.BYTES_PER_UINT = 4;
        EDataTypeSizes.BYTES_PER_FLOAT = 4;
    })(akra.EDataTypeSizes || (akra.EDataTypeSizes = {}));
    var EDataTypeSizes = akra.EDataTypeSizes;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
    ; ;
        function getTypeSize(eType) {
        switch(eType) {
            case EDataTypes.BYTE:
            case EDataTypes.UNSIGNED_BYTE: {
                return 1;

            }
            case EDataTypes.SHORT:
            case EDataTypes.UNSIGNED_SHORT: {
                //case EImageTypes.UNSIGNED_SHORT_4_4_4_4:
                //case EImageTypes.UNSIGNED_SHORT_5_5_5_1:
                //case EImageTypes.UNSIGNED_SHORT_5_6_5:
                return 2;

            }
            case EDataTypes.INT:
            case EDataTypes.UNSIGNED_INT:
            case EDataTypes.FLOAT: {
                return 4;

            }
            default: {
                akra.logger.setSourceLocation("common.ts", 396);
                akra.logger.error('unknown data/image type used');
                ; ;

            }
        }
        return 0;
    }
    akra.getTypeSize = getTypeSize;
    akra.sid = function () {
        return (++akra.sid._iTotal);
    };
    akra.sid._iTotal = 0;
    function now() {
        return (new Date()).getTime();
    }
    akra.now = now;
    function memcpy(/**@inline*/ pDst, iDstOffset, pSrc, iSrcOffset, nLength) {
        var dstU8 = new Uint8Array(pDst, iDstOffset, nLength);
        var srcU8 = new Uint8Array(pSrc, iSrcOffset, nLength);
        dstU8.set(srcU8);
    }
    akra.memcpy = memcpy;
    ; ;
    //export function
    (window).URL = (window).URL ? (window).URL : (window).webkitURL ? (window).webkitURL : null;
    (window).BlobBuilder = (window).WebKitBlobBuilder || (window).MozBlobBuilder || (window).BlobBuilder;
    (window).requestFileSystem = (window).requestFileSystem || (window).webkitRequestFileSystem;
    (window).requestAnimationFrame = (window).requestAnimationFrame || (window).webkitRequestAnimationFrame || (window).mozRequestAnimationFrame;
    (window).WebSocket = (window).WebSocket || (window).MozWebSocket;
    (window).storageInfo = (window).storageInfo || (window).webkitStorageInfo;
    Worker.prototype.postMessage = (Worker).prototype.webkitPostMessage || Worker.prototype.postMessage;
})(akra || (akra = {}));
; ;
/**
* FLAG(x)
* Сдвиг единицы на @a x позиций влево.
*/
/**
* TEST_BIT(value, bit)
* Проверка того что у @a value бит под номером @a bit равен единице.
*/
/**
* TEST_ALL(value, set)
* Проверка того что у @a value равны единице все биты,
* которые равны единице у @a set.
*/
/**
* TEST_ANY(value, set)
* Проверка того что у @a value равны единице хотя бы какие то из битов,
* которые равны единице у @a set.
*/
/**
* SET_BIT(value, bit)
* Выставляет бит под номером @a bit у числа @a value равным единице
*/
/**
* CLEAR_BIT(value, bit)
* Выставляет бит под номером @a bit у числа @a value равным нулю
*/
/**
* SET_ALL(value, set)
* Выставляет все биты у числа @a value равными единице,
* которые равны единице у числа @a set
*/
/**
* CLEAR_ALL(value, set)
* Выставляет все биты у числа @a value равными нулю,
* которые равны единице у числа @a set
*/
//#define SET_ALL(value, set, setting) (setting ? SET_ALL(value, set) : CLEAR_ALL(value, set))
var akra;
(function (akra) {
    (function (bf) {
        /**
        * Сдвиг единицы на @a x позиций влево.
        * @inline
        */
        bf.flag = function (x) {
            return (1 << (x));
        };
        /**
        * Проверка того что у @a value бит под номером @a bit равен единице.
        * @inline
        */
        bf.testBit = function (value, bit) {
            return ((value & bf.flag(bit)) != 0);
        };
        /**
        * Проверка того что у @a value равны единице все биты,
        * которые равны единице у @a set.
        * @inline
        */
        bf.testAll = function (value, set) {
            return (((value) & (set)) == (set));
        };
        /**
        * Проверка того что у @a value равны единице хотя бы какие то из битов,
        * которые равны единице у @a set.
        * @inline
        */
        bf.testAny = function (value, set) {
            return (((value) & (set)) != 0);
        };
        /**
        * Выставляет бит под номером @a bit у числа @a value равным единице
        * @inline
        */
        bf.setBit = function (value, bit, setting) {
            if (typeof setting === "undefined") { setting = true; }
            return (setting ? ((value) |= bf.flag((bit))) : bf.clearBit(value, bit));
        };
        /**
        *
        * @inline
        */
        bf.clearBit = function (value, bit) {
            return ((value) &= ~bf.flag((bit)));
        };
        /**
        * Выставляет бит под номером @a bit у числа @a value равным нулю
        * @inline
        */
        bf.setAll = function (value, set, setting) {
            if (typeof setting === "undefined") { setting = true; }
            return (setting ? bf.setAll(value, set) : bf.clearAll(value, set));
        };
        /**
        * Выставляет все биты у числа @a value равными единице,
        * которые равны единице у числа @a set
        * @inline
        */
        bf.clearAll = function (value, set) {
            return ((value) &= ~(set));
        };
        /**
        * Выставляет все биты у числа @a value равными нулю,
        * которые равны единице у числа @a set
        * @inline
        */
        bf.equal = function (value, src) {
            value = src;
        };
        /**
        * Прирасваивает числу @a value число @a src
        * @inline
        */
        bf.isEqual = function (value, src) {
            return value == src;
        };
        /**
        * Если число @a value равно числу @a src возвращается true
        * @inline
        */
        bf.isNotEqaul = function (value, src) {
            return value != src;
        };
        /**
        * Прирасваивает числу @a value число @a src
        * @inline
        */
        bf.set = function (value, src) {
            value = src;
        };
        /**
        * Обнуляет число @a value
        * @inline
        */
        bf.clear = function (value) {
            value = 0;
        };
        /**
        * Выставляет все биты у числа @a value равными единице,
        * которые равны единице у числа @a src
        * @inline
        */
        bf.setFlags = function (value, src) {
            return (value |= src);
        };
        /**
        * Выставляет все биты у числа @a value равными нулю,
        * которые равны единице у числа @a src
        * @inline
        */
        bf.clearFlags = function (value, src) {
            return value &= ~src;
        };
        /**
        * Проверяет равно ли число @a value нулю. Если равно возвращает true.
        * Если не равно возвращает false.
        * @inline
        */
        bf.isEmpty = function (value) {
            return (value == 0);
        };
        /**
        * Возвращает общее количество бит числа @a value.
        * На самом деле возвращает всегда 32.
        * @inline
        */
        bf.totalBits = function (value) {
            return 32;
        };
        /**
        * Возвращает общее количество ненулевых бит числа @a value.
        * @inline
        */
        bf.totalSet = function (value) {
            var count = 0;
            var total = bf.totalBits(value);
            for(var i = total; i; --i) {
                count += (value & 1);
                value >>= 1;
            }
            return (count);
        };
        /**
        * Convert N bit colour channel value to P bits. It fills P bits with the
        * bit pattern repeated. (this is /((1<<n)-1) in fixed point)
        */
        function fixedToFixed(/**@inline*/ value, n, p) {
            if(n > p) {
                // Less bits required than available; this is easy
                value >>= n - p;
            } else {
                if(n < p) {
                    // More bits required than are there, do the fill
                    // Use old fashioned division, probably better than a loop
                    if(value == 0) {
                        value = 0;
                    } else {
                        if(value == ((1) << n) - 1) {
                            value = (1 << p) - 1;
                        } else {
                            value = value * (1 << p) / ((1 << n) - 1);
                        }
                    }
                }
            }
            return value;
        }
        bf.fixedToFixed = fixedToFixed;
        /**
        * Convert floating point colour channel value between 0.0 and 1.0 (otherwise clamped)
        * to integer of a certain number of bits. Works for any value of bits between 0 and 31.
        */
        function floatToFixed(/**@inline*/ value, bits) {
            if(value <= 0.0) {
                return 0;
            } else {
                if(value >= 1.0) {
                    return (1 << bits) - 1;
                } else {
                    return (value * (1 << bits));
                }
            }
        }
        bf.floatToFixed = floatToFixed;
        /**
        * Fixed point to float
        */
        function fixedToFloat(/**@inline*/ value, bits) {
            return value / ((1 << bits) - 1);
        }
        bf.fixedToFloat = fixedToFloat;
        /**
        * Write a n*8 bits integer value to memory in native endian.
        */
        function intWrite(/**@inline*/ pDest, n, value) {
            switch(n) {
                case 1: {
                    pDest[0] = value;
                    break;

                }
                case 2: {
                    pDest[1] = ((value >> 8) & 255);
                    pDest[0] = (value & 255);
                    break;

                }
                case 3: {
                    pDest[2] = ((value >> 16) & 255);
                    pDest[1] = ((value >> 8) & 255);
                    pDest[0] = (value & 255);
                    break;

                }
                case 4: {
                    pDest[3] = ((value >> 24) & 255);
                    pDest[2] = ((value >> 16) & 255);
                    pDest[1] = ((value >> 8) & 255);
                    pDest[0] = (value & 255);
                    break;

                }
            }
        }
        bf.intWrite = intWrite;
        /**
        * Read a n*8 bits integer value to memory in native endian.
        */
        function intRead(/**@inline*/ pSrc, n) {
            switch(n) {
                case 1: {
                    return pSrc[0];

                }
                case 2: {
                    return pSrc[0] | pSrc[1] << 8;

                }
                case 3: {
                    return pSrc[0] | pSrc[1] << 8 | pSrc[2] << 16;

                }
                case 4: {
                    return pSrc[0] | pSrc[1] << 8 | pSrc[2] << 16 | pSrc[3] << 32;

                }
            }
            return 0;
        }
        bf.intRead = intRead;
                //float32/uint32 union
        var _u32 = new Uint32Array(1);
        var _f32 = new Float32Array(_u32.buffer);
        function floatToHalf(/**@inline*/ f) {
            _f32[0] = f;
            return floatToHalfI(_u32[0]);
        }
        bf.floatToHalf = floatToHalf;
        function floatToHalfI(/**@inline*/ i) {
            var s = (i >> 16) & 32768;
            var e = ((i >> 23) & 255) - (127 - 15);
            var m = i & 8388607;
            if(e <= 0) {
                if(e < -10) {
                    return 0;
                }
                m = (m | 8388608) >> (1 - e);
                return (s | (m >> 13));
            } else {
                if(e == 255 - (127 - 15)) {
                    // Inf            if (m == 0)
                     {
                        return (s | 31744);
                    }
                    // NAN            else
                     {
                        m >>= 13;
                        return (s | 31744 | m | (m == 0));
                    }
                } else {
                    // Overflow            if (e > 30)
                     {
                        return (s | 31744);
                    }
                    return (s | (e << 10) | (m >> 13));
                }
            }
        }
        bf.floatToHalfI = floatToHalfI;
        /**
        * Convert a float16 (NV_half_float) to a float32
        * Courtesy of OpenEXR
        */
        function halfToFloat(/**@inline*/ y) {
            _u32[0] = halfToFloatI(y);
            return _f32[0];
        }
        bf.halfToFloat = halfToFloat;
        /** Converts a half in uint16 format to a float
        in uint32 format
        */
        function halfToFloatI(/**@inline*/ y) {
            var s = (y >> 15) & 1;
            var e = (y >> 10) & 31;
            var m = y & 1023;
            if(e == 0) {
                // Plus or minus zero
                if(m == 0) {
                    return s << 31;
                } else// Denormalized number -- renormalize it
                 {
                    while(!(m & 1024)) {
                        m <<= 1;
                        e -= 1;
                    }
                    e += 1;
                    m &= ~1024;
                }
            } else {
                if(e == 31) {
                    //Inf
                    if(m == 0) {
                        return (s << 31) | 2139095040;
                    } else//NaN
                     {
                        return (s << 31) | 2139095040 | (m << 13);
                    }
                }
            }
            e = e + (127 - 15);
            m = m << 13;
            return (s << 31) | (e << 23) | m;
        }
        bf.halfToFloatI = halfToFloatI;
    })(akra.bf || (akra.bf = {}));
    var bf = akra.bf;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var Singleton = (function () {
            function Singleton() {
                var _constructor = (this).constructor;
                akra.logger.setSourceLocation("Singleton.ts", 10);
                akra.logger.assert(!akra.isDef(_constructor._pInstance), 'Singleton class may be created only one time.');
                ; ;
                _constructor._pInstance = this;
            }
            return Singleton;
        })();
        util.Singleton = Singleton;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var Logger = (function (_super) {
            __extends(Logger, _super);
            function Logger() {
                        _super.call(this);
                this._eUnknownCode = 0;
                this._sUnknownMessage = "Unknown code";
                this._eLogLevel = akra.ELogLevel.ALL;
                this._pGeneralRoutineMap = {
                };
                this._pCurrentSourceLocation = {
                    file: "",
                    line: 0
                };
                this._pLastLogEntity = {
                    code: this._eUnknownCode,
                    location: this._pCurrentSourceLocation,
                    message: this._sUnknownMessage,
                    info: null
                };
                this._pCodeFamilyMap = {
                };
                this._pCodeFamilyList = [];
                this._pCodeInfoMap = {
                };
                this._pCodeFamilyRoutineDMap = {
                };
                this._nFamilyGenerator = 0;
            }
            Logger._sDefaultFamilyName = "CodeFamily";
            Logger.prototype.init = function () {
                //TODO: Load file
                return true;
            };
            Logger.prototype.setLogLevel = function (eLevel) {
                this._eLogLevel = eLevel;
            };
            Logger.prototype.getLogLevel = function () {
                return this._eLogLevel;
            };
            Logger.prototype.registerCode = function (eCode, sMessage) {
                if (typeof sMessage === "undefined") { sMessage = this._sUnknownMessage; }
                if(this.isUsedCode(eCode)) {
                    return false;
                }
                var sFamilyName = this.getFamilyName(eCode);
                if(akra.isNull(sFamilyName)) {
                    return false;
                }
                var pCodeInfo = {
                    code: eCode,
                    message: sMessage,
                    familyName: sFamilyName
                };
                this._pCodeInfoMap[eCode] = pCodeInfo;
                return true;
            };
            Logger.prototype.setUnknownCode = function (eCode, sMessage) {
                this._eUnknownCode = eCode;
                this._sUnknownMessage = sMessage;
            };
            Logger.prototype.registerCodeFamily = function (eCodeMin, eCodeMax, sFamilyName) {
                if(!akra.isDef(sFamilyName)) {
                    sFamilyName = this.generateFamilyName();
                }
                if(this.isUsedFamilyName(sFamilyName)) {
                    return false;
                }
                if(!this.isValidCodeInterval(eCodeMin, eCodeMax)) {
                    return false;
                }
                var pCodeFamily = {
                    familyName: sFamilyName,
                    codeMin: eCodeMin,
                    codeMax: eCodeMax
                };
                this._pCodeFamilyMap[sFamilyName] = pCodeFamily;
                this._pCodeFamilyList.push(pCodeFamily);
                return true;
            };
            Logger.prototype.getFamilyName = function (eCode) {
                var i = 0;
                var pCodeFamilyList = this._pCodeFamilyList;
                var pCodeFamily;
                for(i = 0; i < pCodeFamilyList.length; i++) {
                    pCodeFamily = pCodeFamilyList[i];
                    if(pCodeFamily.codeMin <= eCode && pCodeFamily.codeMax >= eCode) {
                        return pCodeFamily.familyName;
                    }
                }
                return null;
            };
            Logger.prototype.setCodeFamilyRoutine = function () {
                var sFamilyName;
                var fnLogRoutine;
                var eLevel;
                if(akra.isInt(arguments[0])) {
                    sFamilyName = this.getFamilyName(arguments[0]);
                    fnLogRoutine = arguments[1];
                    eLevel = arguments[2];
                    if(akra.isNull(sFamilyName)) {
                        return false;
                    }
                } else {
                    if(akra.isString(arguments[0])) {
                        sFamilyName = arguments[0];
                        fnLogRoutine = arguments[1];
                        eLevel = arguments[2];
                    }
                }
                if(!this.isUsedFamilyName(sFamilyName)) {
                    return false;
                }
                var pCodeFamilyRoutineMap = this._pCodeFamilyRoutineDMap[sFamilyName];
                if(!akra.isDef(pCodeFamilyRoutineMap)) {
                    pCodeFamilyRoutineMap = this._pCodeFamilyRoutineDMap[sFamilyName] = {
                    };
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.LOG)) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.LOG] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.INFORMATION)) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.INFORMATION] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.WARNING)) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.WARNING] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.ERROR)) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.ERROR] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.CRITICAL)) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.CRITICAL] = fnLogRoutine;
                }
                return true;
            };
            Logger.prototype.setLogRoutine = function (fnLogRoutine, eLevel) {
                if(akra.bf.testAll(eLevel, akra.ELogLevel.LOG)) {
                    this._pGeneralRoutineMap[akra.ELogLevel.LOG] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.INFORMATION)) {
                    this._pGeneralRoutineMap[akra.ELogLevel.INFORMATION] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.WARNING)) {
                    this._pGeneralRoutineMap[akra.ELogLevel.WARNING] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.ERROR)) {
                    this._pGeneralRoutineMap[akra.ELogLevel.ERROR] = fnLogRoutine;
                }
                if(akra.bf.testAll(eLevel, akra.ELogLevel.CRITICAL)) {
                    this._pGeneralRoutineMap[akra.ELogLevel.CRITICAL] = fnLogRoutine;
                }
            };
            Logger.prototype.setSourceLocation = function () {
                var sFile;
                var iLine;
                if(arguments.length === 2) {
                    sFile = arguments[0];
                    iLine = arguments[1];
                } else {
                    if(akra.isDef(arguments[0]) && !(akra.isNull(arguments[0]))) {
                        sFile = arguments[0].file;
                        iLine = arguments[0].line;
                    } else {
                        sFile = "";
                        iLine = 0;
                    }
                }
                this._pCurrentSourceLocation.file = sFile;
                this._pCurrentSourceLocation.line = iLine;
            };
            Logger.prototype.log = function () {
                var pArgs = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    pArgs[_i] = arguments[_i + 0];
                }
                if(!akra.bf.testAll(this._eLogLevel, akra.ELogLevel.LOG)) {
                    return;
                }
                var fnLogRoutine = this._pGeneralRoutineMap[akra.ELogLevel.LOG];
                if(!akra.isDef(fnLogRoutine)) {
                    return;
                }
                var pLogEntity = this._pLastLogEntity;
                pLogEntity.code = this._eUnknownCode;
                pLogEntity.location = this._pCurrentSourceLocation;
                pLogEntity.info = pArgs;
                pLogEntity.message = this._sUnknownMessage;
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.info = function () {
                if(!akra.bf.testAll(this._eLogLevel, akra.ELogLevel.INFORMATION)) {
                    return;
                }
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.INFORMATION);
                if(akra.isNull(fnLogRoutine)) {
                    return;
                }
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.warning = function () {
                if(!akra.bf.testAll(this._eLogLevel, akra.ELogLevel.WARNING)) {
                    return;
                }
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.WARNING);
                if(akra.isNull(fnLogRoutine)) {
                    return;
                }
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.error = function () {
                if(!akra.bf.testAll(this._eLogLevel, akra.ELogLevel.ERROR)) {
                    return;
                }
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.ERROR);
                if(akra.isNull(fnLogRoutine)) {
                    return;
                }
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.criticalError = function () {
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.CRITICAL);
                var sSystemMessage = "A Critical error has occured! Code: " + pLogEntity.code.toString();
                if(akra.bf.testAll(this._eLogLevel, akra.ELogLevel.CRITICAL) && !akra.isNull(fnLogRoutine)) {
                    fnLogRoutine.call(null, pLogEntity);
                }
                alert(sSystemMessage);
                throw new Error(sSystemMessage);
            };
            Logger.prototype.assert = function () {
                var bCondition = arguments[0];
                if(!bCondition) {
                    var pLogEntity;
                    var fnLogRoutine;
                    var pArgs = [];
                    for(var i = 1; i < arguments.length; i++) {
                        pArgs[i - 1] = arguments[i];
                    }
                    pLogEntity = this.prepareLogEntity.apply(this, pArgs);
                    fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.CRITICAL);
                    var sSystemMessage = "A error has occured! Code: " + pLogEntity.code.toString() + "\n Accept to exit, refuse to continue.";
                    if(akra.bf.testAll(this._eLogLevel, akra.ELogLevel.CRITICAL) && !akra.isNull(fnLogRoutine)) {
                        fnLogRoutine.call(null, pLogEntity);
                    }
                    if(confirm(sSystemMessage)) {
                        throw new Error(sSystemMessage);
                    }
                }
            };
            Logger.prototype.generateFamilyName = function () {
                var sSuffix = (this._nFamilyGenerator++);
                var sName = Logger._sDefaultFamilyName + sSuffix;
                if(this.isUsedFamilyName(sName)) {
                    return this.generateFamilyName();
                } else {
                    return sName;
                }
            };
            Logger.prototype.isValidCodeInterval = function (eCodeMin, eCodeMax) {
                if(eCodeMin > eCodeMax) {
                    return false;
                }
                var i = 0;
                var pCodeFamilyList = this._pCodeFamilyList;
                var pCodeFamily;
                for(i = 0; i < pCodeFamilyList.length; i++) {
                    pCodeFamily = pCodeFamilyList[i];
                    if((pCodeFamily.codeMin <= eCodeMin && pCodeFamily.codeMax >= eCodeMin) || (pCodeFamily.codeMin <= eCodeMax && pCodeFamily.codeMax >= eCodeMax)) {
                        return false;
                    }
                }
                return true;
            };
            Logger.prototype.isUsedFamilyName = /**@inline*/ function (sFamilyName) {
                return akra.isDef(this._pCodeFamilyMap[sFamilyName]);
            };
            Logger.prototype.isUsedCode = /**@inline*/ function (eCode) {
                return akra.isDef(this._pCodeInfoMap[eCode]);
            };
            Logger.prototype.isLogEntity = function (pObj) {
                if(akra.isObject(pObj) && akra.isDef(pObj.code) && akra.isDef(pObj.location)) {
                    return true;
                }
                return false;
            };
            Logger.prototype.isLogCode = /**@inline*/ function (eCode) {
                return akra.isInt(eCode);
            };
            Logger.prototype.prepareLogEntity = function () {
                var eCode = this._eUnknownCode;
                var sMessage = this._sUnknownMessage;
                var pInfo = null;
                if(arguments.length === 1 && this.isLogEntity(arguments[0])) {
                    var pEntity = arguments[0];
                    eCode = pEntity.code;
                    pInfo = pEntity.info;
                    this.setSourceLocation(pEntity.location);
                    if(!akra.isDef(pEntity.message)) {
                        var pCodeInfo = this._pCodeInfoMap[eCode];
                        if(akra.isDef(pCodeInfo)) {
                            sMessage = pCodeInfo.message;
                        }
                    }
                } else {
                    if(this.isLogCode(arguments[0])) {
                        eCode = arguments[0];
                        if(arguments.length > 1) {
                            pInfo = new Array(arguments.length - 1);
                            var i = 0;
                            for(i = 0; i < pInfo.length; i++) {
                                pInfo[i] = arguments[i + 1];
                            }
                        }
                    } else {
                        eCode = this._eUnknownCode;
                        if(arguments.length > 0) {
                            pInfo = new Array(arguments.length);
                            var i = 0;
                            for(i = 0; i < pInfo.length; i++) {
                                pInfo[i] = arguments[i];
                            }
                        } else {
                            pInfo = null;
                        }
                    }
                    var pCodeInfo = this._pCodeInfoMap[eCode];
                    if(akra.isDef(pCodeInfo)) {
                        sMessage = pCodeInfo.message;
                    }
                }
                var pLogEntity = this._pLastLogEntity;
                pLogEntity.code = eCode;
                pLogEntity.location = this._pCurrentSourceLocation;
                pLogEntity.message = sMessage;
                pLogEntity.info = pInfo;
                return pLogEntity;
            };
            Logger.prototype.getCodeRoutineFunc = function (eCode, eLevel) {
                var pCodeInfo = this._pCodeInfoMap[eCode];
                var fnLogRoutine;
                if(!akra.isDef(pCodeInfo)) {
                    fnLogRoutine = this._pGeneralRoutineMap[eLevel];
                    return akra.isDef(fnLogRoutine) ? fnLogRoutine : null;
                }
                var pCodeFamilyRoutineMap = this._pCodeFamilyRoutineDMap[pCodeInfo.familyName];
                if(!akra.isDef(pCodeFamilyRoutineMap) || !akra.isDef(pCodeFamilyRoutineMap[eLevel])) {
                    fnLogRoutine = this._pGeneralRoutineMap[eLevel];
                    return akra.isDef(fnLogRoutine) ? fnLogRoutine : null;
                }
                fnLogRoutine = pCodeFamilyRoutineMap[eLevel];
                return fnLogRoutine;
            };
            return Logger;
        })(util.Singleton);
        util.Logger = Logger;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        akra.logger = new util.Logger();
        akra.logger.init();
        akra.logger.setUnknownCode(0, "Unknown code.");
        akra.logger.setLogLevel(akra.ELogLevel.ALL);
        //Default code families
        akra.logger.registerCodeFamily(0, 100, "SystemCodes");
        akra.logger.registerCodeFamily(2000, 2199, "ParserSyntaxErrors");
        akra.logger.registerCodeFamily(2200, 2500, "EffectSyntaxErrors");
        //Default log routines
        function sourceLocationToString(pLocation) {
            var sLocation = "[" + pLocation.file + ":" + pLocation.line.toString() + "]: ";
            return sLocation;
        }
        function logRoutine(pLogEntity) {
            var pArgs = pLogEntity.info;
            pArgs.unshift(sourceLocationToString(pLogEntity.location));
            console["log"].apply(console, pArgs);
        }
        function warningRoutine(pLogEntity) {
            var pArgs = pLogEntity.info;
            pArgs.unshift("Code: " + pLogEntity.code.toString());
            pArgs.unshift(sourceLocationToString(pLogEntity.location));
            console["warning"].apply(console, pArgs);
        }
        function errorRoutine(pLogEntity) {
            var pArgs = pLogEntity.info;
            pArgs.unshift(pLogEntity.message);
            pArgs.unshift("Error code: " + pLogEntity.code.toString() + ".");
            pArgs.unshift(sourceLocationToString(pLogEntity.location));
            console["error"].apply(console, pArgs);
        }
        akra.logger.setLogRoutine(logRoutine, akra.ELogLevel.LOG | akra.ELogLevel.INFORMATION);
        akra.logger.setLogRoutine(warningRoutine, akra.ELogLevel.WARNING);
        akra.logger.setLogRoutine(errorRoutine, akra.ELogLevel.ERROR | akra.ELogLevel.CRITICAL);
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (utils) {
        (function (test) {
            var pTestCondList = [];
            function addCond(pCond) {
                pTestCondList.unshift(pCond);
            }
            var TestCond = (function () {
                function TestCond(sDescription) {
                    this.sDescription = sDescription;
                }
                TestCond.prototype.toString = function () {
                    return this.sDescription;
                };
                TestCond.prototype.verify = function (pArgv) {
                    return false;
                };
                Object.defineProperty(TestCond.prototype, "description", {
                    get: function () {
                        return this.sDescription;
                    },
                    enumerable: true,
                    configurable: true
                });
                return TestCond;
            })();            
            var TrueCond = (function (_super) {
                __extends(TrueCond, _super);
                function TrueCond(sDescription) {
                                _super.call(this, sDescription);
                }
                TrueCond.prototype.verify = function (pArgv) {
                    if(pArgv[0] === true) {
                        return true;
                    }
                };
                return TrueCond;
            })(TestCond);            
            function output(sText) {
                document.body.innerHTML += sText;
            }
            function check() {
                var pArgv = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    pArgv[_i] = arguments[_i + 0];
                }
                var pTest = pTestCondList.pop();
                if(!pTest) {
                    console.log(((new Error())).stack);
                    console.warn("chech() without condition...");
                    return;
                }
                var bResult = pTest.verify(pArgv);
                if(bResult) {
                    output("<pre><span style=\"color: green;\">[ PASS ] </span>" + pTest.toString() + "</pre>");
                } else {
                    output("<pre><span style=\"color: red;\">[ FAIL ] </span>" + pTest.toString() + "</pre>");
                }
            }
            test.check = check;
            function failed() {
                var iTotal = pTestCondList.length;
                for(var i = 0; i < iTotal; ++i) {
                    check(false);
                }
            }
            test.failed = failed;
            function shouldBeTrue(sDescription) {
                addCond(new TrueCond(sDescription));
            }
            test.shouldBeTrue = shouldBeTrue;
            var Test = (function () {
                function Test(pManifest) {
                    Test.pTestList.push(pManifest);
                }
                Test.pTestList = [];
                Test.run = function run() {
                    var pTestList = Test.pTestList;
                    for(var i = 0; i < pTestList.length; ++i) {
                        var pTest = pTestList[i];
                        document.getElementById('test_name').innerHTML = ("<h2>" + pTest.name || "" + "</h2><hr />");
                        pTest.main();
                    }
                    ; ;
                }
                return Test;
            })();
            test.Test = Test;            
            function run() {
                Test.run();
            }
            test.run = run;
        })(utils.test || (utils.test = {}));
        var test = utils.test;
    })(akra.utils || (akra.utils = {}));
    var utils = akra.utils;
})(akra || (akra = {}));
var akra;
(function (akra) {
    var Pathinfo = (function () {
        function Pathinfo(pPath) {
            this._sDirname = null;
            this._sExtension = null;
            this._sFilename = null;
            if(akra.isDef(pPath)) {
                this.set(pPath);
            }
        }
        Object.defineProperty(Pathinfo.prototype, "path", {
            get: /**@inline*/ function () {
                return this.toString();
            }/**@inline*/ ,
            set: function (sPath) {
                this.set(sPath);
            }/**@inline*/ ,
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pathinfo.prototype, "dirname", {
            get: function () {
                return this._sDirname;
            }/**@inline*/ ,
            set: function (sDirname) {
                this._sDirname = sDirname;
            }/**@inline*/ ,
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pathinfo.prototype, "filename", {
            get: function () {
                return this._sFilename;
            }/**@inline*/ ,
            set: function (sFilename) {
                this._sFilename = sFilename;
            }/**@inline*/ ,
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pathinfo.prototype, "ext", {
            get: function () {
                return this._sExtension;
            }/**@inline*/ ,
            set: function (sExtension) {
                this._sExtension = sExtension;
            }/**@inline*/ ,
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pathinfo.prototype, "basename", {
            get: function () {
                return (this._sFilename ? this._sFilename + (this._sExtension ? "." + this._sExtension : "") : "");
            }/**@inline*/ ,
            set: function (sBasename) {
                var nPos = sBasename.lastIndexOf(".");
                if(nPos < 0) {
                    this._sFilename = sBasename.substr(0);
                    this._sExtension = null;
                } else {
                    this._sFilename = sBasename.substr(0, nPos);
                    this._sExtension = sBasename.substr(nPos + 1);
                }
            },
            enumerable: true,
            configurable: true
        });
        Pathinfo.prototype.set = function (sPath) {
            if(akra.isString(sPath)) {
                var pParts = sPath.replace('\\', '/').split('/');
                this.basename = pParts.pop();
                this._sDirname = pParts.join('/');
            } else {
                if(sPath instanceof Pathinfo) {
                    this._sDirname = sPath.dirname;
                    this._sFilename = sPath.filename;
                    this._sExtension = sPath.ext;
                } else {
                    //critical_error
                    akra.logger.setSourceLocation("Pathinfo.ts", 68);
                    akra.logger.error("Unexpected data type was used.");
                    ; ;
                }
            }
        };
        Pathinfo.prototype.isAbsolute = function () {
            return this._sDirname[0] === "/";
        };
        Pathinfo.prototype.toString = function () {
            return (this._sDirname ? this._sDirname + "/" : "") + (this.basename);
        };
        return Pathinfo;
    })();
    akra.Pathinfo = Pathinfo;    
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var URI = (function () {
            function URI(pUri) {
                this.sScheme = null;
                this.sUserinfo = null;
                this.sHost = null;
                this.nPort = 0;
                this.sPath = null;
                this.sQuery = null;
                this.sFragment = null;
                if(pUri) {
                    this.set(pUri);
                }
            }
            Object.defineProperty(URI.prototype, "urn", {
                get: function () {
                    return (this.sPath ? this.sPath : "") + (this.sQuery ? '?' + this.sQuery : "") + (this.sFragment ? '#' + this.sFragment : "");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "url", {
                get: function () {
                    return (this.sScheme ? this.sScheme : "") + this.authority;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "authority", {
                get: function () {
                    return (this.sHost ? '//' + (this.sUserinfo ? this.sUserinfo + '@' : "") + this.sHost + (this.nPort ? ':' + this.nPort : "") : "");
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "scheme", {
                get: function () {
                    return this.sScheme;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "protocol", {
                get: function () {
                    if(!this.sScheme) {
                        return this.sScheme;
                    }
                    return (this.sScheme.substr(0, this.sScheme.lastIndexOf(':')));
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "userinfo", {
                get: function () {
                    return this.sUserinfo;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "host", {
                get: function () {
                    return this.sHost;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "port", {
                get: function () {
                    return this.nPort;
                }/**@inline*/ ,
                set: function (iPort) {
                    this.nPort = iPort;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "path", {
                get: function () {
                    return this.sPath;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "query", {
                get: function () {
                    return this.sQuery;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "fragment", {
                get: function () {
                    return this.sFragment;
                },
                enumerable: true,
                configurable: true
            });
            URI.prototype.set = function (pData) {
                if(akra.isString(pData)) {
                    var pUri = URI.uriExp.exec(pData);
                    akra.logger.setSourceLocation("URI.ts", 86);
                    akra.logger.assert(pUri !== null, 'Invalid URI format used.\nused uri: ' + pData);
                    ; ;
                    if(!pUri) {
                        return null;
                    }
                    this.sScheme = pUri[1] || null;
                    this.sUserinfo = pUri[2] || null;
                    this.sHost = pUri[3] || null;
                    this.nPort = parseInt(pUri[4]) || null;
                    this.sPath = pUri[5] || pUri[6] || null;
                    this.sQuery = pUri[7] || null;
                    this.sFragment = pUri[8] || null;
                    return this;
                } else {
                    if(pData instanceof URI) {
                        return this.set(pData.toString());
                    }
                }
                akra.logger.setSourceLocation("URI.ts", 107);
                akra.logger.error('Unexpected data type was used.');
                ; ;
                return null;
            };
            URI.prototype.toString = function () {
                return this.url + this.urn;
            }//------------------------------------------------------------------//
            //----- Validate a URI -----//
            //------------------------------------------------------------------//
            //- The different parts are kept in their own groups and can be recombined
            //  depending on the scheme:
            //  - http as $1://$3:$4$5?$7#$8
            //  - ftp as $1://$2@$3:$4$5
            //  - mailto as $1:$6?$7
            //- groups are as follows:
            //  1   == scheme
            //  2   == userinfo
            //  3   == host
            //  4   == port
            //  5,6 == path (5 if it has an authority, 6 if it doesn't)
            //  7   == query
            //  8   == fragment
            ;
            URI.uriExp = new RegExp("^([a-z0-9+.-]+:)?(?:\\/\\/(?:((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*)@)?((?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*)(?::(\\d*))?(\\/(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?|(\\/?(?:[a-z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})*(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?)(?:\\?((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?$", "i");
            return URI;
        })();
        util.URI = URI;        
        /*
        composed as follows:
        ^
        ([a-z0-9+.-]+):							#scheme
        (?:
        //							#it has an authority:
        (?:((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*)@)?	#userinfo
        ((?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*)		#host
        (?::(\d*))?						#port
        (/(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?	#path
        |
        #it doesn't have an authority:
        (/?(?:[a-z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})+(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?	#path
        )
        (?:
        \?((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*)	#query string
        )?
        (?:
        #((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*)	#fragment
        )?
        $
        */
            })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
// #include "ReferenceCounter.ts"
// #include "Singleton.ts"
// #include "BrowserInfo.ts"
// #include "ApiInfo.ts"
// #include "ScreenInfo.ts"
// #include "DeviceInfo.ts"
// #include "UtilTimer.ts"
// #include "Entity.ts"
// #include "ThreadManager.ts"
var akra;
(function (akra) {
    (function (util) {
        util.uri = function (sUri) {
            return new akra.util.URI(sUri);
        };
        // export var pathinfo: (sPath: string) => IPathinfo;
        // export var pathinfo: (pPath: IPathinfo) => IPathinfo;
        util.pathinfo;
        util.pathinfo = function (pPath) {
            return new akra.Pathinfo(pPath);
        };
        //string to array buffer
        util.stoab = function (s) {
            var pCodeList = new Array(len);
            for(var i = 0, len = s.length; i < len; ++i) {
                /*& 0xFF;*/
                pCodeList[i] = s.charCodeAt(i);
            }
            return (new Uint8Array(pCodeList)).buffer;
        };
        util.abtos = function (pBuf) {
            var pData = new Uint8Array(pBuf);
            var s = "";
            for(var n = 0; n < pData.length; ++n) {
                s += String.fromCharCode(pData[n]);
            }
            return s;
        };
        function abtota(pBuffer, eType) {
            switch(eType) {
                case akra.EDataTypes.FLOAT: {
                    return new Float32Array(pBuffer);

                }
                case akra.EDataTypes.SHORT: {
                    return new Int16Array(pBuffer);

                }
                case akra.EDataTypes.UNSIGNED_SHORT: {
                    return new Uint16Array(pBuffer);

                }
                case akra.EDataTypes.INT: {
                    return new Int32Array(pBuffer);

                }
                case akra.EDataTypes.UNSIGNED_INT: {
                    return new Uint32Array(pBuffer);

                }
                case akra.EDataTypes.BYTE: {
                    return new Int8Array(pBuffer);

                }
                default:
                case akra.EDataTypes.UNSIGNED_BYTE: {
                    return new Uint8Array(pBuffer);

                }
            }
        }
        util.abtota = abtota;
        function parseJSON(sJSON) {
            return eval('(' + sJSON + ')');
        }
        util.parseJSON = parseJSON;
        ; ;
        /**
        * Преобразование html-сформированного текста
        * в dom.
        */
        function parseHTML(sHTML, useDocFragment) {
            if (typeof useDocFragment === "undefined") { useDocFragment = true; }
            var pDivEl = document.createElement('div');
            var pDocFrag;
            pDivEl.innerHTML = sHTML;
            if(!useDocFragment) {
                return pDivEl.childNodes;
            }
            pDocFrag = document.createDocumentFragment();
            for(var i = 0, len = pDivEl.childNodes.length; i < len; ++i) {
                if(!akra.isDef(pDivEl.childNodes[i])) {
                    continue;
                }
                pDocFrag.appendChild(pDivEl.childNodes[i]);
            }
            return pDocFrag;
        }
        util.parseHTML = parseHTML;
        ; ;
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var BrowserInfo = (function (_super) {
            __extends(BrowserInfo, _super);
            function BrowserInfo() {
                _super.apply(this, arguments);

                this.sBrowser = null;
                this.sVersion = null;
                this.sOS = null;
                this.sVersionSearch = null;
            }
            Object.defineProperty(BrowserInfo.prototype, "name", {
                get: function () {
                    return this.sBrowser;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BrowserInfo.prototype, "version", {
                get: function () {
                    return this.sVersion;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BrowserInfo.prototype, "os", {
                get: function () {
                    return this.sOS;
                },
                enumerable: true,
                configurable: true
            });
            BrowserInfo.prototype.init = function () {
                this.sBrowser = this.searchString(BrowserInfo.dataBrowser) || "An unknown browser";
                this.sVersion = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
                this.sOS = this.searchString(BrowserInfo.dataOS) || "an unknown OS";
            };
            BrowserInfo.prototype.searchString = function (pDataBrowser) {
                for(var i = 0; i < pDataBrowser.length; i++) {
                    var sData = pDataBrowser[i].string;
                    var dataProp = pDataBrowser[i].prop;
                    this.sVersionSearch = pDataBrowser[i].versionSearch || pDataBrowser[i].identity;
                    if(sData) {
                        if(sData.indexOf(pDataBrowser[i].subString) != -1) {
                            return pDataBrowser[i].identity;
                        }
                    } else {
                        if(dataProp) {
                            return pDataBrowser[i].identity;
                        }
                    }
                }
                return null;
            };
            BrowserInfo.prototype.searchVersion = function (sData) {
                var iStartIndex = sData.indexOf(this.sVersionSearch);
                if(iStartIndex == -1) {
                    return null;
                }
                iStartIndex = sData.indexOf('/', iStartIndex + 1);
                if(iStartIndex == -1) {
                    return null;
                }
                var iEndIndex = sData.indexOf(' ', iStartIndex + 1);
                if(iEndIndex == -1) {
                    iEndIndex = sData.indexOf(';', iStartIndex + 1);
                    if(iEndIndex == -1) {
                        return null;
                    }
                    return sData.slice(iStartIndex + 1);
                }
                return sData.slice((iStartIndex + 1), iEndIndex);
            };
            BrowserInfo.dataBrowser = [
                {
                    string: navigator.userAgent,
                    subString: "Chrome",
                    identity: "Chrome"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "OmniWeb",
                    versionSearch: "OmniWeb/",
                    identity: "OmniWeb"
                }, 
                {
                    string: navigator.vendor,
                    subString: "Apple",
                    identity: "Safari",
                    versionSearch: "Version"
                }, 
                {
                    prop: window.opera,
                    identity: "Opera",
                    versionSearch: "Version"
                }, 
                {
                    string: navigator.vendor,
                    subString: "iCab",
                    identity: "iCab"
                }, 
                {
                    string: navigator.vendor,
                    subString: "KDE",
                    identity: "Konqueror"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "Firefox",
                    identity: "Firefox"
                }, 
                {
                    string: navigator.vendor,
                    subString: "Camino",
                    identity: "Camino"
                }, 
                {
                    string: // for newer Netscapes (6+)
                    navigator.userAgent,
                    subString: "Netscape",
                    identity: "Netscape"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "MSIE",
                    identity: "Explorer",
                    versionSearch: "MSIE"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "Gecko",
                    identity: "Mozilla",
                    versionSearch: "rv"
                }, 
                {
                    string: // for older Netscapes (4-)
                    navigator.userAgent,
                    subString: "Mozilla",
                    identity: "Netscape",
                    versionSearch: "Mozilla"
                }
            ];
            BrowserInfo.dataOS = [
                {
                    string: navigator.platform,
                    subString: "Win",
                    identity: "Windows"
                }, 
                {
                    string: navigator.platform,
                    subString: "Mac",
                    identity: "Mac"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "iPhone",
                    identity: "iPhone/iPod"
                }, 
                {
                    string: navigator.platform,
                    subString: "Linux",
                    identity: "Linux"
                }
            ];
            return BrowserInfo;
        })(util.Singleton);
        util.BrowserInfo = BrowserInfo;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var ScreenInfo = (function () {
            function ScreenInfo() { }
            Object.defineProperty(ScreenInfo.prototype, "width", {
                get: function () {
                    return screen.width;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "height", {
                get: function () {
                    return screen.height;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "aspect", {
                get: function () {
                    return screen.width / screen.height;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "pixelDepth", {
                get: function () {
                    return screen.pixelDepth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "colorDepth", {
                get: function () {
                    return screen.colorDepth;
                },
                enumerable: true,
                configurable: true
            });
            return ScreenInfo;
        })();
        util.ScreenInfo = ScreenInfo;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
/* Compressed Texture Formats */
; ;
/* Compressed Texture Formats */
; ;
/* Compressed Texture Formats */
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
; ;
/* ClearBufferMask */
/* BeginMode */
/* AlphaFunction (not supported in ES20) */
/*      NEVER */
/*      LESS */
/*      EQUAL */
/*      LEQUAL */
/*      GREATER */
/*      NOTEQUAL */
/*      GEQUAL */
/*      ALWAYS */
/* BlendingFactorDest */
/* BlendingFactorSrc */
/*      ZERO */
/*      ONE */
/*      SRC_ALPHA */
/*      ONE_MINUS_SRC_ALPHA */
/*      DST_ALPHA */
/*      ONE_MINUS_DST_ALPHA */
/* BlendEquationSeparate */
/* same as BLEND_EQUATION */
/* BlendSubtract */
/* Separate Blend Functions */
/* Buffer Objects */
/* CullFaceMode */
/* DepthFunction */
/*      NEVER */
/*      LESS */
/*      EQUAL */
/*      LEQUAL */
/*      GREATER */
/*      NOTEQUAL */
/*      GEQUAL */
/*      ALWAYS */
/* EnableCap */
/* TEXTURE_2D */
/* ErrorCode */
/* FrontFaceDirection */
/* GetPName */
/*      SCISSOR_TEST */
/*      POLYGON_OFFSET_FILL */
/* GetTextureParameter */
/*      TEXTURE_MAG_FILTER */
/*      TEXTURE_MIN_FILTER */
/*      TEXTURE_WRAP_S */
/*      TEXTURE_WRAP_T */
/* HintMode */
/* HintTarget */
/* DataType */
/* PixelFormat */
/* PixelType */
/*      UNSIGNED_BYTE */
/* Shaders */
/* StencilFunction */
/* StencilOp */
/*      ZERO */
/* StringName */
/* TextureMagFilter */
/* TextureMinFilter */
/*      NEAREST */
/*      LINEAR */
/* TextureParameterName */
/* TextureTarget */
/* TextureUnit */
/* TextureWrapMode */
/* Uniform Types */
/* Vertex Arrays */
/* Shader Source */
/* Shader Precision-Specified Types */
/* Framebuffer Object. */
/* WebGL-specific enums */
//WebGL Extensions
//draft
//Future
var akra;
(function (akra) {
    (function (EPixelFormats) {
        EPixelFormats._map = [];
        /*Unknown pixel format.*/
        EPixelFormats.UNKNOWN = 0;
        /*8-bit pixel format, all bits luminance.*/
        EPixelFormats.L8 = 1;
        EPixelFormats.BYTE_L = EPixelFormats.L8;
        /*16-bit pixel format, all bits luminance.*/
        EPixelFormats.L16 = 2;
        EPixelFormats.SHORT_L = EPixelFormats.L16;
        /*8-bit pixel format, all bits alpha.*/
        EPixelFormats.A8 = 3;
        EPixelFormats.BYTE_A = EPixelFormats.A8;
        /*8-bit pixel format, 4 bits alpha, 4 bits luminance.*/
        EPixelFormats.A4L4 = 4;
        /*2 byte pixel format, 1 byte luminance, 1 byte alpha*/
        EPixelFormats.BYTE_LA = 5;
        /*16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.*/
        EPixelFormats.R5G6B5 = 6;
        /*16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.*/
        EPixelFormats.B5G6R5 = 7;
        /*8-bit pixel format, 2 bits blue, 3 bits green, 3 bits red.*/
        EPixelFormats.R3G3B2 = 31;
        /*16-bit pixel format, 4 bits for alpha, red, green and blue.*/
        EPixelFormats.A4R4G4B4 = 8;
        /*16-bit pixel format, 5 bits for blue, green, red and 1 for alpha.*/
        EPixelFormats.A1R5G5B5 = 9;
        /*24-bit pixel format, 8 bits for red, green and blue.*/
        EPixelFormats.R8G8B8 = 10;
        /*24-bit pixel format, 8 bits for blue, green and red.*/
        EPixelFormats.B8G8R8 = 11;
        /*32-bit pixel format, 8 bits for alpha, red, green and blue.*/
        EPixelFormats.A8R8G8B8 = 12;
        /*32-bit pixel format, 8 bits for blue, green, red and alpha.*/
        EPixelFormats.A8B8G8R8 = 13;
        /*32-bit pixel format, 8 bits for blue, green, red and alpha.*/
        EPixelFormats.B8G8R8A8 = 14;
        /*32-bit pixel format, 8 bits for red, green, blue and alpha.*/
        EPixelFormats.R8G8B8A8 = 28;
        /*32-bit pixel format, 8 bits for red, 8 bits for green, 8 bits for blue like A8R8G8B8, but alpha will get discarded*/
        EPixelFormats.X8R8G8B8 = 26;
        /*32-bit pixel format, 8 bits for blue, 8 bits for green, 8 bits for red like A8B8G8R8, but alpha will get discarded*/
        EPixelFormats.X8B8G8R8 = 27;
        /*3 byte pixel format, 1 byte for red, 1 byte for green, 1 byte for blue*/
        EPixelFormats.BYTE_RGB = EPixelFormats.R8G8B8;
        /*3 byte pixel format, 1 byte for blue, 1 byte for green, 1 byte for red*/
        EPixelFormats.BYTE_BGR = EPixelFormats.B8G8R8;
        /*4 byte pixel format, 1 byte for blue, 1 byte for green, 1 byte for red and one byte for alpha*/
        EPixelFormats.BYTE_BGRA = EPixelFormats.B8G8R8A8;
        /*4 byte pixel format, 1 byte for red, 1 byte for green, 1 byte for blue, and one byte for alpha*/
        EPixelFormats.BYTE_RGBA = EPixelFormats.R8G8B8A8;
        /*32-bit pixel format, 2 bits for alpha, 10 bits for red, green and blue.*/
        EPixelFormats.A2R10G10B10 = 15;
        /*32-bit pixel format, 10 bits for blue, green and red, 2 bits for alpha.*/
        EPixelFormats.A2B10G10R10 = 16;
        /*DDS (DirectDraw Surface) DXT1 format.*/
        EPixelFormats.DXT1 = 17;
        /*DDS (DirectDraw Surface) DXT2 format.*/
        EPixelFormats.DXT2 = 18;
        /*DDS (DirectDraw Surface) DXT3 format.*/
        EPixelFormats.DXT3 = 19;
        /*DDS (DirectDraw Surface) DXT4 format.*/
        EPixelFormats.DXT4 = 20;
        /*DDS (DirectDraw Surface) DXT5 format.*/
        EPixelFormats.DXT5 = 21;
        /*16-bit pixel format, 16 bits (float) for red*/
        EPixelFormats.FLOAT16_R = 32;
        /*48-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue*/
        EPixelFormats.FLOAT16_RGB = 22;
        /*64-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue, 16 bits (float) for alpha*/
        EPixelFormats.FLOAT16_RGBA = 23;
        /*32-bit pixel format, 32 bits (float) for red*/
        EPixelFormats.FLOAT32_R = 33;
        /*96-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue*/
        EPixelFormats.FLOAT32_RGB = 24;
        /*128-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue, 32 bits (float) for alpha*/
        EPixelFormats.FLOAT32_RGBA = 25;
        /*32-bit, 2-channel s10e5 floating point pixel format, 16-bit green, 16-bit red*/
        EPixelFormats.FLOAT16_GR = 35;
        /*64-bit, 2-channel floating point pixel format, 32-bit green, 32-bit red*/
        EPixelFormats.FLOAT32_GR = 36;
        /*Float Depth texture format*/
        EPixelFormats.DEPTH = 29;
        /*Byte Depth texture format */
        EPixelFormats.DEPTH_BYTE = 44;
        /*64-bit pixel format, 16 bits for red, green, blue and alpha*/
        EPixelFormats.SHORT_RGBA = 30;
        /*32-bit pixel format, 16-bit green, 16-bit red*/
        EPixelFormats.SHORT_GR = 34;
        /*48-bit pixel format, 16 bits for red, green and blue*/
        EPixelFormats.SHORT_RGB = 37;
        /*PVRTC (PowerVR) RGB 2 bpp.*/
        EPixelFormats.PVRTC_RGB2 = 38;
        /*PVRTC (PowerVR) RGBA 2 bpp.*/
        EPixelFormats.PVRTC_RGBA2 = 39;
        /*PVRTC (PowerVR) RGB 4 bpp.*/
        EPixelFormats.PVRTC_RGB4 = 40;
        /*PVRTC (PowerVR) RGBA 4 bpp.*/
        EPixelFormats.PVRTC_RGBA4 = 41;
        /*8-bit pixel format, all bits red.*/
        EPixelFormats.R8 = 42;
        /*16-bit pixel format, 8 bits red, 8 bits green.*/
        EPixelFormats.RG8 = 43;
        EPixelFormats.TOTAL = 45;
    })(akra.EPixelFormats || (akra.EPixelFormats = {}));
    var EPixelFormats = akra.EPixelFormats;
    ; ;
    /**
    * Flags defining some on/off properties of pixel formats
    */
    (function (EPixelFormatFlags) {
        EPixelFormatFlags._map = [];
        // This format has an alpha channel
        EPixelFormatFlags.HASALPHA = 1;
        // This format is compressed. This invalidates the values in elemBytes,
        // elemBits and the bit counts as these might not be fixed in a compressed format.
        EPixelFormatFlags.COMPRESSED = 2;
        // This is a floating point format
        EPixelFormatFlags.FLOAT = 4;
        // This is a depth format (for depth textures)
        EPixelFormatFlags.DEPTH = 8;
        // Format is in native endian. Generally true for the 16, 24 and 32 bits
        // formats which can be represented as machine integers.
        EPixelFormatFlags.NATIVEENDIAN = 16;
        // This is an intensity format instead of a RGB one. The luminance
        // replaces R,G and B. (but not A)
        EPixelFormatFlags.LUMINANCE = 32;
    })(akra.EPixelFormatFlags || (akra.EPixelFormatFlags = {}));
    var EPixelFormatFlags = akra.EPixelFormatFlags;
    /** Pixel component format */
    (function (EPixelComponentTypes) {
        EPixelComponentTypes._map = [];
        /*Byte per component (8 bit fixed 0.0..1.0)*/
        EPixelComponentTypes.BYTE = 0;
        /*Short per component (16 bit fixed 0.0..1.0))*/
        EPixelComponentTypes.SHORT = 1;
        /*16 bit float per component*/
        EPixelComponentTypes.FLOAT16 = 2;
        /*32 bit float per component*/
        EPixelComponentTypes.FLOAT32 = 3;
        /*Number of pixel types*/
        EPixelComponentTypes.COUNT = 4;
    })(akra.EPixelComponentTypes || (akra.EPixelComponentTypes = {}));
    var EPixelComponentTypes = akra.EPixelComponentTypes;
    ; ;
    (function (EFilters) {
        EFilters._map = [];
        EFilters._map[0] = "NEAREST";
        EFilters.NEAREST = 0;
        EFilters._map[1] = "LINEAR";
        EFilters.LINEAR = 1;
        EFilters._map[2] = "BILINEAR";
        EFilters.BILINEAR = 2;
        EFilters._map[3] = "BOX";
        EFilters.BOX = 3;
        EFilters._map[4] = "TRIANGLE";
        EFilters.TRIANGLE = 4;
        EFilters._map[5] = "BICUBIC";
        EFilters.BICUBIC = 5;
    })(akra.EFilters || (akra.EFilters = {}));
    var EFilters = akra.EFilters;
    ; ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EHardwareBufferFlags) {
        EHardwareBufferFlags._map = [];
        EHardwareBufferFlags.STATIC = 1;
        EHardwareBufferFlags.DYNAMIC = 2;
        EHardwareBufferFlags.STREAM = 128;
        EHardwareBufferFlags.READABLE = 4;
        EHardwareBufferFlags.BACKUP_COPY = 8;
        /** indicate, that buffer does not use GPU memory or other specific memory. */
        EHardwareBufferFlags.SOFTWARE = 16;
        /** Indicate, tha buffer uses specific data aligment */
        EHardwareBufferFlags.ALIGNMENT = 32;
        /** Indicates that the application will be refilling the contents
        of the buffer regularly (not just updating, but generating the
        contents from scratch), and therefore does not mind if the contents
        of the buffer are lost somehow and need to be recreated. This
        allows and additional level of optimisation on the buffer.
        This option only really makes sense when combined with
        DYNAMIC and without READING.
        */
        EHardwareBufferFlags.DISCARDABLE = 64;
        EHardwareBufferFlags.STATIC_READABLE = EHardwareBufferFlags.STATIC | EHardwareBufferFlags.READABLE;
        EHardwareBufferFlags.DYNAMIC_DISCARDABLE = EHardwareBufferFlags.DYNAMIC | EHardwareBufferFlags.DISCARDABLE;
    })(akra.EHardwareBufferFlags || (akra.EHardwareBufferFlags = {}));
    var EHardwareBufferFlags = akra.EHardwareBufferFlags;
    (function (ELockFlags) {
        ELockFlags._map = [];
        ELockFlags.READ = 1;
        ELockFlags.WRITE = 2;
        ELockFlags.DISCARD = 4;
        ELockFlags.NO_OVERWRITE = 8;
        ELockFlags.NORMAL = ELockFlags.READ | ELockFlags.WRITE;
    })(akra.ELockFlags || (akra.ELockFlags = {}));
    var ELockFlags = akra.ELockFlags;
})(akra || (akra = {}));
; ;
var akra;
(function (akra) {
    (function (math) {
        var Vec2 = (function () {
            function Vec2(fValue1, fValue2) {
                this.x = 0.0;
                this.y = 0.0;
                var nArgumentsLength = arguments.length;
                var v2fVec = this;
                // if (<any>this === window || <any>this === akra || <any>this === akra.math) {
                //     v2fVec = Vec2.stack[Vec2.stackPosition ++];
                //     if(Vec2.stackPosition == Vec2.stackSize){
                //         Vec2.stackPosition = 0;
                //     }
                // }
                switch(nArgumentsLength) {
                    case 1: {
                        v2fVec.set(arguments[0]);
                        break;

                    }
                    case 2: {
                        v2fVec.set(arguments[0], arguments[1]);
                        break;

                    }
                    default: {
                        v2fVec.x = v2fVec.y = 0.0;
                        break;

                    }
                }
            }
            Object.defineProperty(Vec2.prototype, "xx", {
                get: function () {
                    return math.vec2(this.x, this.x);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec2.prototype, "xy", {
                get: function () {
                    return math.vec2(this.x, this.y);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec2.prototype, "yx", {
                get: function () {
                    return math.vec2(this.y, this.x);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec2.prototype, "yy", {
                get: function () {
                    return math.vec2(this.y, this.y);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Vec2.prototype.set = function (fValue1, fValue2) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 0: {
                        this.x = this.y = 0.0;
                        break;

                    }
                    case 1: {
                        if(akra.isFloat(arguments[0])) {
                            this.x = this.y = arguments[0];
                        } else {
                            if(arguments[0] instanceof Vec2) {
                                var v2fVec = arguments[0];
                                this.x = v2fVec.x;
                                this.y = v2fVec.y;
                            } else {
                                var pArray = arguments[0];
                                this.x = pArray[0];
                                this.y = pArray[1];
                            }
                        }
                        break;

                    }
                    case 2: {
                        this.x = arguments[0];
                        this.y = arguments[1];
                        break;

                    }
                }
                ; ;
                return this;
            };
            Vec2.prototype.clear = /**@inline*/ function () {
                this.x = this.y = 0.0;
                return this;
            };
            Vec2.prototype.add = function (v2fVec, v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                v2fDestination.x = this.x + v2fVec.x;
                v2fDestination.y = this.y + v2fVec.y;
                return v2fDestination;
            };
            Vec2.prototype.subtract = function (v2fVec, v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                v2fDestination.x = this.x - v2fVec.x;
                v2fDestination.y = this.y - v2fVec.y;
                return v2fDestination;
            };
            Vec2.prototype.dot = /**@inline*/ function (v2fVec) {
                return this.x * v2fVec.x + this.y * v2fVec.y;
            };
            Vec2.prototype.isEqual = function (v2fVec, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if(fEps === 0.0) {
                    if(this.x != v2fVec.x || this.y != v2fVec.y) {
                        return false;
                    }
                } else {
                    if(math.abs(this.x - v2fVec.x) > fEps || math.abs(this.y - v2fVec.y) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec2.prototype.isClear = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if(fEps === 0.0) {
                    if(this.x != 0.0 || this.y != 0.0) {
                        return false;
                    }
                } else {
                    if(math.abs(this.x) > fEps || math.abs(this.y) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec2.prototype.negate = function (v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                v2fDestination.x = -this.x;
                v2fDestination.y = -this.y;
                return v2fDestination;
            };
            Vec2.prototype.scale = function (fScale, v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                v2fDestination.x = this.x * fScale;
                v2fDestination.y = this.y * fScale;
                return v2fDestination;
            };
            Vec2.prototype.normalize = function (v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                var x = this.x, y = this.y;
                var fLength = math.sqrt(x * x + y * y);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                }
                v2fDestination.x = x;
                v2fDestination.y = y;
                return v2fDestination;
            };
            Vec2.prototype.length = /**@inline*/ function () {
                var x = this.x, y = this.y;
                return math.sqrt(x * x + y * y);
            };
            Vec2.prototype.lengthSquare = /**@inline*/ function () {
                var x = this.x, y = this.y;
                return x * x + y * y;
            };
            Vec2.prototype.direction = function (v2fVec, v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                var x = v2fVec.x - this.x;
                var y = v2fVec.y - this.y;
                var fLength = math.sqrt(x * x + y * y);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                }
                v2fDestination.x = x;
                v2fDestination.y = y;
                return v2fDestination;
            };
            Vec2.prototype.mix = function (v2fVec, fA, v2fDestination) {
                if(!akra.isDef(v2fDestination)) {
                    v2fDestination = this;
                }
                fA = math.clamp(fA, 0.0, 1.0);
                var fA1 = 1.0 - fA;
                var fA2 = fA;
                v2fDestination.x = fA1 * this.x + fA2 * v2fVec.x;
                v2fDestination.y = fA1 * this.y + fA2 * v2fVec.y;
                return v2fDestination;
            };
            Vec2.prototype.toString = /**@inline*/ function () {
                return "[x: " + this.x + ", y: " + this.y + "]";
            };
            Object.defineProperty(Vec2, "stackCeil", {
                get: function () {
                    Vec2.stackPosition = Vec2.stackPosition === Vec2.stackSize - 1 ? 0 : Vec2.stackPosition;
                    return Vec2.stack[Vec2.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Vec2.stackSize = 100;
            Vec2.stackPosition = 0;
            Vec2.stack = (function () {
                var pStack = new Array(Vec2.stackSize);
                for(var i = 0; i < Vec2.stackSize; i++) {
                    pStack[i] = new Vec2();
                }
                return pStack;
            })();
            return Vec2;
        })();
        math.Vec2 = Vec2;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
; ;
; ;
var akra;
(function (akra) {
    (function (math) {
        var Vec3 = (function () {
            function Vec3(fValue1, fValue2, fValue3) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        this.set(arguments[0]);
                        break;

                    }
                    case 2: {
                        this.set(arguments[0], arguments[1]);
                        break;

                    }
                    case 3: {
                        this.set(arguments[0], arguments[1], arguments[2]);
                        break;

                    }
                    default: {
                        this.x = this.y = this.z = 0.0;
                        break;

                    }
                }
            }
            Object.defineProperty(Vec3.prototype, "xx", {
                get: function () {
                    return math.vec2(this.x, this.x);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xy", {
                get: function () {
                    return math.vec2(this.x, this.y);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xz", {
                get: function () {
                    return math.vec2(this.x, this.z);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yx", {
                get: function () {
                    return math.vec2(this.y, this.x);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yy", {
                get: function () {
                    return math.vec2(this.y, this.y);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yz", {
                get: function () {
                    return math.vec2(this.y, this.z);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zx", {
                get: function () {
                    return math.vec2(this.z, this.x);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zy", {
                get: function () {
                    return math.vec2(this.z, this.y);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zz", {
                get: function () {
                    return math.vec2(this.z, this.z);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xxx", {
                get: function () {
                    return math.vec3(this.x, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xxy", {
                get: function () {
                    return math.vec3(this.x, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xxz", {
                get: function () {
                    return math.vec3(this.x, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xyx", {
                get: function () {
                    return math.vec3(this.x, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xyy", {
                get: function () {
                    return math.vec3(this.x, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xyz", {
                get: function () {
                    return math.vec3(this.x, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xzx", {
                get: function () {
                    return math.vec3(this.x, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xzy", {
                get: function () {
                    return math.vec3(this.x, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xzz", {
                get: function () {
                    return math.vec3(this.x, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yxx", {
                get: function () {
                    return math.vec3(this.y, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yxy", {
                get: function () {
                    return math.vec3(this.y, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yxz", {
                get: function () {
                    return math.vec3(this.y, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yyx", {
                get: function () {
                    return math.vec3(this.y, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yyy", {
                get: function () {
                    return math.vec3(this.y, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yyz", {
                get: function () {
                    return math.vec3(this.y, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yzx", {
                get: function () {
                    return math.vec3(this.y, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yzy", {
                get: function () {
                    return math.vec3(this.y, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yzz", {
                get: function () {
                    return math.vec3(this.y, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zxx", {
                get: function () {
                    return math.vec3(this.z, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zxy", {
                get: function () {
                    return math.vec3(this.z, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zxz", {
                get: function () {
                    return math.vec3(this.z, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zyx", {
                get: function () {
                    return math.vec3(this.z, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zyy", {
                get: function () {
                    return math.vec3(this.z, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zyz", {
                get: function () {
                    return math.vec3(this.z, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zzx", {
                get: function () {
                    return math.vec3(this.z, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zzy", {
                get: function () {
                    return math.vec3(this.z, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zzz", {
                get: function () {
                    return math.vec3(this.z, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Vec3.prototype.set = function (fValue1, fValue2, fValue3) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 0: {
                        this.x = this.y = this.z = 0.0;
                        break;

                    }
                    case 1: {
                        if(akra.isFloat(arguments[0])) {
                            this.x = this.y = this.z = arguments[0];
                        } else {
                            if(arguments[0] instanceof Vec3) {
                                var v3fVec = arguments[0];
                                this.x = v3fVec.x;
                                this.y = v3fVec.y;
                                this.z = v3fVec.z;
                            } else {
                                var pArray = arguments[0];
                                this.x = pArray[0];
                                this.y = pArray[1];
                                this.z = pArray[2];
                            }
                        }
                        break;

                    }
                    case 2: {
                        if(akra.isFloat(arguments[0])) {
                            var fValue = arguments[0];
                            var v2fVec = arguments[1];
                            this.x = fValue;
                            this.y = v2fVec.x;
                            this.z = v2fVec.y;
                        } else {
                            var v2fVec = arguments[0];
                            var fValue = arguments[1];
                            this.x = v2fVec.x;
                            this.y = v2fVec.y;
                            this.z = fValue;
                        }
                        break;

                    }
                    case 3: {
                        this.x = arguments[0];
                        this.y = arguments[1];
                        this.z = arguments[2];
                        break;

                    }
                }
                return this;
            };
            Vec3.prototype.clear = /**@inline*/ function () {
                this.x = this.y = this.z = 0.0;
                return this;
            };
            Vec3.prototype.add = function (v3fVec, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                v3fDestination.x = this.x + v3fVec.x;
                v3fDestination.y = this.y + v3fVec.y;
                v3fDestination.z = this.z + v3fVec.z;
                return v3fDestination;
            };
            Vec3.prototype.subtract = function (v3fVec, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                v3fDestination.x = this.x - v3fVec.x;
                v3fDestination.y = this.y - v3fVec.y;
                v3fDestination.z = this.z - v3fVec.z;
                return v3fDestination;
            };
            Vec3.prototype.dot = /**@inline*/ function (v3fVec) {
                return this.x * v3fVec.x + this.y * v3fVec.y + this.z * v3fVec.z;
            };
            Vec3.prototype.cross = function (v3fVec, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                var x1 = this.x, y1 = this.y, z1 = this.z;
                var x2 = v3fVec.x, y2 = v3fVec.y, z2 = v3fVec.z;
                v3fDestination.x = y1 * z2 - z1 * y2;
                v3fDestination.y = z1 * x2 - x1 * z2;
                v3fDestination.z = x1 * y2 - y1 * x2;
                return v3fDestination;
            };
            Vec3.prototype.isEqual = function (v3fVec, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if(fEps === 0.0) {
                    if(this.x != v3fVec.x || this.y != v3fVec.y || this.z != v3fVec.z) {
                        return false;
                    }
                } else {
                    if(math.abs(this.x - v3fVec.x) > fEps || math.abs(this.y - v3fVec.y) > fEps || math.abs(this.z - v3fVec.z) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec3.prototype.isClear = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if(fEps === 0.0) {
                    if(this.x != 0.0 || this.y != 0.0 || this.z != 0.0) {
                        return false;
                    }
                } else {
                    if(math.abs(this.x) > fEps || math.abs(this.y) > fEps || math.abs(this.z) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec3.prototype.negate = function (v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                v3fDestination.x = -this.x;
                v3fDestination.y = -this.y;
                v3fDestination.z = -this.z;
                return v3fDestination;
            };
            Vec3.prototype.scale = function (fScale, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                if(akra.isNumber(arguments[0])) {
                    var fScale = arguments[0];
                    v3fDestination.x = this.x * fScale;
                    v3fDestination.y = this.y * fScale;
                    v3fDestination.z = this.z * fScale;
                } else {
                    var v3fScale = arguments[0];
                    v3fDestination.x = this.x * v3fScale.x;
                    v3fDestination.y = this.y * v3fScale.y;
                    v3fDestination.z = this.z * v3fScale.z;
                }
                return v3fDestination;
            };
            Vec3.prototype.normalize = function (v3fDestination) {
                if(!v3fDestination) {
                    v3fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z;
                var fLength = math.sqrt(x * x + y * y + z * z);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                    z *= fInvLength;
                }
                v3fDestination.x = x;
                v3fDestination.y = y;
                v3fDestination.z = z;
                return v3fDestination;
            };
            Vec3.prototype.length = /**@inline*/ function () {
                var x = this.x, y = this.y, z = this.z;
                return math.sqrt(x * x + y * y + z * z);
            };
            Vec3.prototype.lengthSquare = /**@inline*/ function () {
                var x = this.x, y = this.y, z = this.z;
                return x * x + y * y + z * z;
            };
            Vec3.prototype.direction = function (v3fVec, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                var x = v3fVec.x - this.x;
                var y = v3fVec.y - this.y;
                var z = v3fVec.z - this.z;
                var fLength = math.sqrt(x * x + y * y + z * z);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                    z *= fInvLength;
                }
                v3fDestination.x = x;
                v3fDestination.y = y;
                v3fDestination.z = z;
                return v3fDestination;
            };
            Vec3.prototype.mix = function (v3fVec, fA, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = this;
                }
                fA = math.clamp(fA, 0.0, 1.0);
                var fA1 = 1.0 - fA;
                var fA2 = fA;
                v3fDestination.x = fA1 * this.x + fA2 * v3fVec.x;
                v3fDestination.y = fA1 * this.y + fA2 * v3fVec.y;
                v3fDestination.z = fA1 * this.z + fA2 * v3fVec.z;
                return v3fDestination;
            };
            Vec3.prototype.toString = /**@inline*/ function () {
                return "[x: " + this.x + " ,y: " + this.y + ", z: " + this.z + "]";
            };
            Vec3.prototype.toTranslationMatrix = function (m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new math.Mat4(1.0);
                } else {
                    m4fDestination.set(1.0);
                }
                var pData = m4fDestination.data;
                pData[12] = this.x;
                pData[13] = this.y;
                pData[14] = this.z;
                return m4fDestination;
            };
            Vec3.prototype.vec3TransformCoord = function (m4fTransformation, v3fDestination) {
                if(!v3fDestination) {
                    v3fDestination = this;
                }
                var pData = m4fTransformation.data;
                var x = this.x;
                var y = this.y;
                var z = this.z;
                var w;
                x = pData[0] * x + pData[4] * y + pData[8] * z + pData[12];
                y = pData[1] * x + pData[5] * y + pData[9] * z + pData[13];
                z = pData[2] * x + pData[6] * y + pData[10] * z + pData[14];
                w = pData[2] * x + pData[7] * y + pData[11] * z + pData[15];
                var fInvW = 1.0 / w;
                v3fDestination.x = x * fInvW;
                v3fDestination.y = y * fInvW;
                v3fDestination.z = z * fInvW;
                return v3fDestination;
            };
            Object.defineProperty(Vec3, "stackCeil", {
                get: function () {
                    Vec3.stackPosition = Vec3.stackPosition === Vec3.stackSize - 1 ? 0 : Vec3.stackPosition;
                    return Vec3.stack[Vec3.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Vec3.stackSize = 100;
            Vec3.stackPosition = 0;
            Vec3.stack = (function () {
                var pStack = new Array(Vec3.stackSize);
                for(var i = 0; i < Vec3.stackSize; i++) {
                    pStack[i] = new Vec3();
                }
                return pStack;
            })();
            return Vec3;
        })();
        math.Vec3 = Vec3;        
        /*get xy(): Vec2  { return new Vec2(this.x, this.y); }
        get xz(): Vec2  { return new Vec2(this.x, this.z); }
        get yx(): Vec2  { return new Vec2(this.y, this.x); }
        get yz(): Vec2  { return new Vec2(this.y, this.z); }
        get zx(): Vec2  { return new Vec2(this.z, this.x); }
        get zy(): Vec2  { return new Vec2(this.z, this.y); }
        get xyz(): Vec3 { return new Vec3(this.x, this.y, this.z); }*/
            })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
        var Vec4 = (function () {
            function Vec4(fValue1, fValue2, fValue3, fValue4) {
                var nArgumentsLength = arguments.length;
                var v4fVec = this;
                // if (<any>this === window || <any>this === akra || <any>this === akra.math) {
                //     v4fVec = Vec4.stack[Vec4.stackPosition ++];
                //     if(Vec4.stackPosition == Vec4.stackSize){
                //         Vec4.stackPosition = 0;
                //     }
                // }
                switch(nArgumentsLength) {
                    case 1: {
                        v4fVec.set(arguments[0]);
                        break;

                    }
                    case 2: {
                        v4fVec.set(arguments[0], arguments[1]);
                        break;

                    }
                    case 3: {
                        v4fVec.set(arguments[0], arguments[1], arguments[2]);
                        break;

                    }
                    case 4: {
                        v4fVec.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;

                    }
                    default: {
                        v4fVec.x = v4fVec.y = v4fVec.z = v4fVec.w = 0.0;
                        break;

                    }
                }
            }
            Object.defineProperty(Vec4.prototype, "xx", {
                get: function () {
                    return math.vec2(this.x, this.x);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xy", {
                get: function () {
                    return math.vec2(this.x, this.y);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xz", {
                get: function () {
                    return math.vec2(this.x, this.z);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xw", {
                get: function () {
                    return math.vec2(this.x, this.w);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yx", {
                get: function () {
                    return math.vec2(this.y, this.x);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yy", {
                get: function () {
                    return math.vec2(this.y, this.y);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yz", {
                get: function () {
                    return math.vec2(this.y, this.z);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yw", {
                get: function () {
                    return math.vec2(this.y, this.w);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zx", {
                get: function () {
                    return math.vec2(this.z, this.x);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zy", {
                get: function () {
                    return math.vec2(this.z, this.y);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zz", {
                get: function () {
                    return math.vec2(this.z, this.z);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zw", {
                get: function () {
                    return math.vec2(this.z, this.w);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wx", {
                get: function () {
                    return math.vec2(this.w, this.x);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wy", {
                get: function () {
                    return math.vec2(this.w, this.y);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wz", {
                get: function () {
                    return math.vec2(this.w, this.z);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ww", {
                get: function () {
                    return math.vec2(this.w, this.w);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxx", {
                get: function () {
                    return math.vec3(this.x, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxy", {
                get: function () {
                    return math.vec3(this.x, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxz", {
                get: function () {
                    return math.vec3(this.x, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxw", {
                get: function () {
                    return math.vec3(this.x, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyx", {
                get: function () {
                    return math.vec3(this.x, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyy", {
                get: function () {
                    return math.vec3(this.x, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyz", {
                get: function () {
                    return math.vec3(this.x, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyw", {
                get: function () {
                    return math.vec3(this.x, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzx", {
                get: function () {
                    return math.vec3(this.x, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzy", {
                get: function () {
                    return math.vec3(this.x, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzz", {
                get: function () {
                    return math.vec3(this.x, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzw", {
                get: function () {
                    return math.vec3(this.x, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwx", {
                get: function () {
                    return math.vec3(this.x, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwy", {
                get: function () {
                    return math.vec3(this.x, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwz", {
                get: function () {
                    return math.vec3(this.x, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xww", {
                get: function () {
                    return math.vec3(this.x, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxx", {
                get: function () {
                    return math.vec3(this.y, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxy", {
                get: function () {
                    return math.vec3(this.y, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxz", {
                get: function () {
                    return math.vec3(this.y, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxw", {
                get: function () {
                    return math.vec3(this.y, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyx", {
                get: function () {
                    return math.vec3(this.y, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyy", {
                get: function () {
                    return math.vec3(this.y, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyz", {
                get: function () {
                    return math.vec3(this.y, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyw", {
                get: function () {
                    return math.vec3(this.y, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzx", {
                get: function () {
                    return math.vec3(this.y, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzy", {
                get: function () {
                    return math.vec3(this.y, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzz", {
                get: function () {
                    return math.vec3(this.y, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzw", {
                get: function () {
                    return math.vec3(this.y, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywx", {
                get: function () {
                    return math.vec3(this.y, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywy", {
                get: function () {
                    return math.vec3(this.y, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywz", {
                get: function () {
                    return math.vec3(this.y, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yww", {
                get: function () {
                    return math.vec3(this.y, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxx", {
                get: function () {
                    return math.vec3(this.z, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxy", {
                get: function () {
                    return math.vec3(this.z, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxz", {
                get: function () {
                    return math.vec3(this.z, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxw", {
                get: function () {
                    return math.vec3(this.z, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyx", {
                get: function () {
                    return math.vec3(this.z, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyy", {
                get: function () {
                    return math.vec3(this.z, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyz", {
                get: function () {
                    return math.vec3(this.z, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyw", {
                get: function () {
                    return math.vec3(this.z, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzx", {
                get: function () {
                    return math.vec3(this.z, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzy", {
                get: function () {
                    return math.vec3(this.z, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzz", {
                get: function () {
                    return math.vec3(this.z, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzw", {
                get: function () {
                    return math.vec3(this.z, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwx", {
                get: function () {
                    return math.vec3(this.z, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwy", {
                get: function () {
                    return math.vec3(this.z, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwz", {
                get: function () {
                    return math.vec3(this.z, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zww", {
                get: function () {
                    return math.vec3(this.z, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxx", {
                get: function () {
                    return math.vec3(this.w, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxy", {
                get: function () {
                    return math.vec3(this.w, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxz", {
                get: function () {
                    return math.vec3(this.w, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxw", {
                get: function () {
                    return math.vec3(this.w, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyx", {
                get: function () {
                    return math.vec3(this.w, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyy", {
                get: function () {
                    return math.vec3(this.w, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyz", {
                get: function () {
                    return math.vec3(this.w, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyw", {
                get: function () {
                    return math.vec3(this.w, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzx", {
                get: function () {
                    return math.vec3(this.w, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzy", {
                get: function () {
                    return math.vec3(this.w, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzz", {
                get: function () {
                    return math.vec3(this.w, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzw", {
                get: function () {
                    return math.vec3(this.w, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwx", {
                get: function () {
                    return math.vec3(this.w, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwy", {
                get: function () {
                    return math.vec3(this.w, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwz", {
                get: function () {
                    return math.vec3(this.w, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "www", {
                get: function () {
                    return math.vec3(this.w, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxx", {
                get: function () {
                    return math.vec4(this.x, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxy", {
                get: function () {
                    return math.vec4(this.x, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxz", {
                get: function () {
                    return math.vec4(this.x, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxw", {
                get: function () {
                    return math.vec4(this.x, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyx", {
                get: function () {
                    return math.vec4(this.x, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyy", {
                get: function () {
                    return math.vec4(this.x, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyz", {
                get: function () {
                    return math.vec4(this.x, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyw", {
                get: function () {
                    return math.vec4(this.x, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzx", {
                get: function () {
                    return math.vec4(this.x, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzy", {
                get: function () {
                    return math.vec4(this.x, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzz", {
                get: function () {
                    return math.vec4(this.x, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzw", {
                get: function () {
                    return math.vec4(this.x, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxwx", {
                get: function () {
                    return math.vec4(this.x, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxwy", {
                get: function () {
                    return math.vec4(this.x, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxwz", {
                get: function () {
                    return math.vec4(this.x, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxww", {
                get: function () {
                    return math.vec4(this.x, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxx", {
                get: function () {
                    return math.vec4(this.x, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxy", {
                get: function () {
                    return math.vec4(this.x, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxz", {
                get: function () {
                    return math.vec4(this.x, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxw", {
                get: function () {
                    return math.vec4(this.x, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyx", {
                get: function () {
                    return math.vec4(this.x, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyy", {
                get: function () {
                    return math.vec4(this.x, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyz", {
                get: function () {
                    return math.vec4(this.x, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyw", {
                get: function () {
                    return math.vec4(this.x, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzx", {
                get: function () {
                    return math.vec4(this.x, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzy", {
                get: function () {
                    return math.vec4(this.x, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzz", {
                get: function () {
                    return math.vec4(this.x, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzw", {
                get: function () {
                    return math.vec4(this.x, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xywx", {
                get: function () {
                    return math.vec4(this.x, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xywy", {
                get: function () {
                    return math.vec4(this.x, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xywz", {
                get: function () {
                    return math.vec4(this.x, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyww", {
                get: function () {
                    return math.vec4(this.x, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxx", {
                get: function () {
                    return math.vec4(this.x, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxy", {
                get: function () {
                    return math.vec4(this.x, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxz", {
                get: function () {
                    return math.vec4(this.x, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxw", {
                get: function () {
                    return math.vec4(this.x, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyx", {
                get: function () {
                    return math.vec4(this.x, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyy", {
                get: function () {
                    return math.vec4(this.x, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyz", {
                get: function () {
                    return math.vec4(this.x, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyw", {
                get: function () {
                    return math.vec4(this.x, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzx", {
                get: function () {
                    return math.vec4(this.x, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzy", {
                get: function () {
                    return math.vec4(this.x, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzz", {
                get: function () {
                    return math.vec4(this.x, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzw", {
                get: function () {
                    return math.vec4(this.x, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzwx", {
                get: function () {
                    return math.vec4(this.x, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzwy", {
                get: function () {
                    return math.vec4(this.x, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzwz", {
                get: function () {
                    return math.vec4(this.x, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzww", {
                get: function () {
                    return math.vec4(this.x, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxx", {
                get: function () {
                    return math.vec4(this.x, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxy", {
                get: function () {
                    return math.vec4(this.x, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxz", {
                get: function () {
                    return math.vec4(this.x, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxw", {
                get: function () {
                    return math.vec4(this.x, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyx", {
                get: function () {
                    return math.vec4(this.x, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyy", {
                get: function () {
                    return math.vec4(this.x, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyz", {
                get: function () {
                    return math.vec4(this.x, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyw", {
                get: function () {
                    return math.vec4(this.x, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzx", {
                get: function () {
                    return math.vec4(this.x, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzy", {
                get: function () {
                    return math.vec4(this.x, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzz", {
                get: function () {
                    return math.vec4(this.x, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzw", {
                get: function () {
                    return math.vec4(this.x, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwwx", {
                get: function () {
                    return math.vec4(this.x, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwwy", {
                get: function () {
                    return math.vec4(this.x, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwwz", {
                get: function () {
                    return math.vec4(this.x, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwww", {
                get: function () {
                    return math.vec4(this.x, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxx", {
                get: function () {
                    return math.vec4(this.y, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxy", {
                get: function () {
                    return math.vec4(this.y, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxz", {
                get: function () {
                    return math.vec4(this.y, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxw", {
                get: function () {
                    return math.vec4(this.y, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyx", {
                get: function () {
                    return math.vec4(this.y, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyy", {
                get: function () {
                    return math.vec4(this.y, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyz", {
                get: function () {
                    return math.vec4(this.y, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyw", {
                get: function () {
                    return math.vec4(this.y, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzx", {
                get: function () {
                    return math.vec4(this.y, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzy", {
                get: function () {
                    return math.vec4(this.y, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzz", {
                get: function () {
                    return math.vec4(this.y, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzw", {
                get: function () {
                    return math.vec4(this.y, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxwx", {
                get: function () {
                    return math.vec4(this.y, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxwy", {
                get: function () {
                    return math.vec4(this.y, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxwz", {
                get: function () {
                    return math.vec4(this.y, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxww", {
                get: function () {
                    return math.vec4(this.y, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxx", {
                get: function () {
                    return math.vec4(this.y, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxy", {
                get: function () {
                    return math.vec4(this.y, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxz", {
                get: function () {
                    return math.vec4(this.y, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxw", {
                get: function () {
                    return math.vec4(this.y, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyx", {
                get: function () {
                    return math.vec4(this.y, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyy", {
                get: function () {
                    return math.vec4(this.y, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyz", {
                get: function () {
                    return math.vec4(this.y, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyw", {
                get: function () {
                    return math.vec4(this.y, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzx", {
                get: function () {
                    return math.vec4(this.y, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzy", {
                get: function () {
                    return math.vec4(this.y, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzz", {
                get: function () {
                    return math.vec4(this.y, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzw", {
                get: function () {
                    return math.vec4(this.y, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yywx", {
                get: function () {
                    return math.vec4(this.y, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yywy", {
                get: function () {
                    return math.vec4(this.y, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yywz", {
                get: function () {
                    return math.vec4(this.y, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyww", {
                get: function () {
                    return math.vec4(this.y, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxx", {
                get: function () {
                    return math.vec4(this.y, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxy", {
                get: function () {
                    return math.vec4(this.y, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxz", {
                get: function () {
                    return math.vec4(this.y, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxw", {
                get: function () {
                    return math.vec4(this.y, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyx", {
                get: function () {
                    return math.vec4(this.y, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyy", {
                get: function () {
                    return math.vec4(this.y, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyz", {
                get: function () {
                    return math.vec4(this.y, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyw", {
                get: function () {
                    return math.vec4(this.y, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzx", {
                get: function () {
                    return math.vec4(this.y, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzy", {
                get: function () {
                    return math.vec4(this.y, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzz", {
                get: function () {
                    return math.vec4(this.y, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzw", {
                get: function () {
                    return math.vec4(this.y, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzwx", {
                get: function () {
                    return math.vec4(this.y, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzwy", {
                get: function () {
                    return math.vec4(this.y, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzwz", {
                get: function () {
                    return math.vec4(this.y, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzww", {
                get: function () {
                    return math.vec4(this.y, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxx", {
                get: function () {
                    return math.vec4(this.y, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxy", {
                get: function () {
                    return math.vec4(this.y, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxz", {
                get: function () {
                    return math.vec4(this.y, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxw", {
                get: function () {
                    return math.vec4(this.y, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyx", {
                get: function () {
                    return math.vec4(this.y, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyy", {
                get: function () {
                    return math.vec4(this.y, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyz", {
                get: function () {
                    return math.vec4(this.y, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyw", {
                get: function () {
                    return math.vec4(this.y, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzx", {
                get: function () {
                    return math.vec4(this.y, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzy", {
                get: function () {
                    return math.vec4(this.y, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzz", {
                get: function () {
                    return math.vec4(this.y, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzw", {
                get: function () {
                    return math.vec4(this.y, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywwx", {
                get: function () {
                    return math.vec4(this.y, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywwy", {
                get: function () {
                    return math.vec4(this.y, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywwz", {
                get: function () {
                    return math.vec4(this.y, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywww", {
                get: function () {
                    return math.vec4(this.y, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxx", {
                get: function () {
                    return math.vec4(this.z, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxy", {
                get: function () {
                    return math.vec4(this.z, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxz", {
                get: function () {
                    return math.vec4(this.z, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxw", {
                get: function () {
                    return math.vec4(this.z, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyx", {
                get: function () {
                    return math.vec4(this.z, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyy", {
                get: function () {
                    return math.vec4(this.z, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyz", {
                get: function () {
                    return math.vec4(this.z, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyw", {
                get: function () {
                    return math.vec4(this.z, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzx", {
                get: function () {
                    return math.vec4(this.z, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzy", {
                get: function () {
                    return math.vec4(this.z, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzz", {
                get: function () {
                    return math.vec4(this.z, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzw", {
                get: function () {
                    return math.vec4(this.z, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxwx", {
                get: function () {
                    return math.vec4(this.z, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxwy", {
                get: function () {
                    return math.vec4(this.z, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxwz", {
                get: function () {
                    return math.vec4(this.z, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxww", {
                get: function () {
                    return math.vec4(this.z, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxx", {
                get: function () {
                    return math.vec4(this.z, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxy", {
                get: function () {
                    return math.vec4(this.z, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxz", {
                get: function () {
                    return math.vec4(this.z, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxw", {
                get: function () {
                    return math.vec4(this.z, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyx", {
                get: function () {
                    return math.vec4(this.z, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyy", {
                get: function () {
                    return math.vec4(this.z, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyz", {
                get: function () {
                    return math.vec4(this.z, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyw", {
                get: function () {
                    return math.vec4(this.z, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzx", {
                get: function () {
                    return math.vec4(this.z, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzy", {
                get: function () {
                    return math.vec4(this.z, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzz", {
                get: function () {
                    return math.vec4(this.z, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzw", {
                get: function () {
                    return math.vec4(this.z, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zywx", {
                get: function () {
                    return math.vec4(this.z, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zywy", {
                get: function () {
                    return math.vec4(this.z, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zywz", {
                get: function () {
                    return math.vec4(this.z, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyww", {
                get: function () {
                    return math.vec4(this.z, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxx", {
                get: function () {
                    return math.vec4(this.z, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxy", {
                get: function () {
                    return math.vec4(this.z, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxz", {
                get: function () {
                    return math.vec4(this.z, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxw", {
                get: function () {
                    return math.vec4(this.z, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyx", {
                get: function () {
                    return math.vec4(this.z, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyy", {
                get: function () {
                    return math.vec4(this.z, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyz", {
                get: function () {
                    return math.vec4(this.z, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyw", {
                get: function () {
                    return math.vec4(this.z, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzx", {
                get: function () {
                    return math.vec4(this.z, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzy", {
                get: function () {
                    return math.vec4(this.z, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzz", {
                get: function () {
                    return math.vec4(this.z, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzw", {
                get: function () {
                    return math.vec4(this.z, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzwx", {
                get: function () {
                    return math.vec4(this.z, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzwy", {
                get: function () {
                    return math.vec4(this.z, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzwz", {
                get: function () {
                    return math.vec4(this.z, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzww", {
                get: function () {
                    return math.vec4(this.z, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxx", {
                get: function () {
                    return math.vec4(this.z, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxy", {
                get: function () {
                    return math.vec4(this.z, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxz", {
                get: function () {
                    return math.vec4(this.z, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxw", {
                get: function () {
                    return math.vec4(this.z, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyx", {
                get: function () {
                    return math.vec4(this.z, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyy", {
                get: function () {
                    return math.vec4(this.z, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyz", {
                get: function () {
                    return math.vec4(this.z, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyw", {
                get: function () {
                    return math.vec4(this.z, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzx", {
                get: function () {
                    return math.vec4(this.z, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzy", {
                get: function () {
                    return math.vec4(this.z, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzz", {
                get: function () {
                    return math.vec4(this.z, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzw", {
                get: function () {
                    return math.vec4(this.z, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwwx", {
                get: function () {
                    return math.vec4(this.z, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwwy", {
                get: function () {
                    return math.vec4(this.z, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwwz", {
                get: function () {
                    return math.vec4(this.z, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwww", {
                get: function () {
                    return math.vec4(this.z, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxx", {
                get: function () {
                    return math.vec4(this.w, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxy", {
                get: function () {
                    return math.vec4(this.w, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxz", {
                get: function () {
                    return math.vec4(this.w, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxw", {
                get: function () {
                    return math.vec4(this.w, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyx", {
                get: function () {
                    return math.vec4(this.w, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyy", {
                get: function () {
                    return math.vec4(this.w, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyz", {
                get: function () {
                    return math.vec4(this.w, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyw", {
                get: function () {
                    return math.vec4(this.w, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzx", {
                get: function () {
                    return math.vec4(this.w, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzy", {
                get: function () {
                    return math.vec4(this.w, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzz", {
                get: function () {
                    return math.vec4(this.w, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzw", {
                get: function () {
                    return math.vec4(this.w, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxwx", {
                get: function () {
                    return math.vec4(this.w, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxwy", {
                get: function () {
                    return math.vec4(this.w, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxwz", {
                get: function () {
                    return math.vec4(this.w, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxww", {
                get: function () {
                    return math.vec4(this.w, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxx", {
                get: function () {
                    return math.vec4(this.w, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxy", {
                get: function () {
                    return math.vec4(this.w, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxz", {
                get: function () {
                    return math.vec4(this.w, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxw", {
                get: function () {
                    return math.vec4(this.w, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyx", {
                get: function () {
                    return math.vec4(this.w, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyy", {
                get: function () {
                    return math.vec4(this.w, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyz", {
                get: function () {
                    return math.vec4(this.w, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyw", {
                get: function () {
                    return math.vec4(this.w, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzx", {
                get: function () {
                    return math.vec4(this.w, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzy", {
                get: function () {
                    return math.vec4(this.w, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzz", {
                get: function () {
                    return math.vec4(this.w, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzw", {
                get: function () {
                    return math.vec4(this.w, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wywx", {
                get: function () {
                    return math.vec4(this.w, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wywy", {
                get: function () {
                    return math.vec4(this.w, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wywz", {
                get: function () {
                    return math.vec4(this.w, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyww", {
                get: function () {
                    return math.vec4(this.w, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxx", {
                get: function () {
                    return math.vec4(this.w, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxy", {
                get: function () {
                    return math.vec4(this.w, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxz", {
                get: function () {
                    return math.vec4(this.w, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxw", {
                get: function () {
                    return math.vec4(this.w, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyx", {
                get: function () {
                    return math.vec4(this.w, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyy", {
                get: function () {
                    return math.vec4(this.w, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyz", {
                get: function () {
                    return math.vec4(this.w, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyw", {
                get: function () {
                    return math.vec4(this.w, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzx", {
                get: function () {
                    return math.vec4(this.w, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzy", {
                get: function () {
                    return math.vec4(this.w, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzz", {
                get: function () {
                    return math.vec4(this.w, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzw", {
                get: function () {
                    return math.vec4(this.w, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzwx", {
                get: function () {
                    return math.vec4(this.w, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzwy", {
                get: function () {
                    return math.vec4(this.w, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzwz", {
                get: function () {
                    return math.vec4(this.w, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzww", {
                get: function () {
                    return math.vec4(this.w, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxx", {
                get: function () {
                    return math.vec4(this.w, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxy", {
                get: function () {
                    return math.vec4(this.w, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxz", {
                get: function () {
                    return math.vec4(this.w, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxw", {
                get: function () {
                    return math.vec4(this.w, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyx", {
                get: function () {
                    return math.vec4(this.w, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyy", {
                get: function () {
                    return math.vec4(this.w, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyz", {
                get: function () {
                    return math.vec4(this.w, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyw", {
                get: function () {
                    return math.vec4(this.w, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzx", {
                get: function () {
                    return math.vec4(this.w, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzy", {
                get: function () {
                    return math.vec4(this.w, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzz", {
                get: function () {
                    return math.vec4(this.w, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzw", {
                get: function () {
                    return math.vec4(this.w, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwwx", {
                get: function () {
                    return math.vec4(this.w, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwwy", {
                get: function () {
                    return math.vec4(this.w, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwwz", {
                get: function () {
                    return math.vec4(this.w, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwww", {
                get: function () {
                    return math.vec4(this.w, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Vec4.prototype.set = function (fValue1, fValue2, fValue3, fValue4) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 0: {
                        this.x = this.y = this.z = this.w = 0.0;
                        break;

                    }
                    case 1: {
                        if(akra.isFloat(arguments[0])) {
                            this.x = this.y = this.z = this.w = arguments[0];
                        } else {
                            if(arguments[0] instanceof Vec4) {
                                var v4fVec = arguments[0];
                                this.x = v4fVec.x;
                                this.y = v4fVec.y;
                                this.z = v4fVec.z;
                                this.w = v4fVec.w;
                            } else {
                                //color
                                if(akra.isDef(arguments[0].r)) {
                                    this.x = arguments[0].r;
                                    this.y = arguments[0].g;
                                    this.z = arguments[0].b;
                                    this.w = arguments[0].a;
                                } else {
                                    //array
                                    var pArray = arguments[0];
                                    this.x = pArray[0];
                                    this.y = pArray[1];
                                    this.z = pArray[2];
                                    this.w = pArray[3];
                                }
                            }
                        }
                        break;

                    }
                    case 2: {
                        if(akra.isFloat(arguments[0])) {
                            var fValue = arguments[0];
                            var v3fVec = arguments[1];
                            this.x = fValue;
                            this.y = v3fVec.x;
                            this.z = v3fVec.y;
                            this.w = v3fVec.z;
                        } else {
                            if(arguments[0] instanceof math.Vec2) {
                                var v2fVec1 = arguments[0];
                                var v2fVec2 = arguments[1];
                                this.x = v2fVec1.x;
                                this.y = v2fVec1.y;
                                this.z = v2fVec2.x;
                                this.w = v2fVec2.y;
                            } else {
                                var v3fVec = arguments[0];
                                var fValue = arguments[1];
                                this.x = v3fVec.x;
                                this.y = v3fVec.y;
                                this.z = v3fVec.z;
                                this.w = fValue;
                            }
                        }
                        break;

                    }
                    case 3: {
                        if(akra.isFloat(arguments[0])) {
                            var fValue1 = arguments[0];
                            if(akra.isFloat(arguments[1])) {
                                var fValue2 = arguments[1];
                                var v2fVec = arguments[2];
                                this.x = fValue1;
                                this.y = fValue2;
                                this.z = v2fVec.x;
                                this.w = v2fVec.y;
                            } else {
                                var v2fVec = arguments[1];
                                var fValue2 = arguments[2];
                                this.x = fValue1;
                                this.y = v2fVec.x;
                                this.z = v2fVec.y;
                                this.w = fValue2;
                            }
                        } else {
                            var v2fVec = arguments[0];
                            var fValue1 = arguments[1];
                            var fValue2 = arguments[2];
                            this.x = v2fVec.x;
                            this.y = v2fVec.y;
                            this.z = fValue1;
                            this.w = fValue2;
                        }
                        break;

                    }
                    case 4: {
                        this.x = arguments[0];
                        this.y = arguments[1];
                        this.z = arguments[2];
                        this.w = arguments[3];
                        break;

                    }
                }
                return this;
            };
            Vec4.prototype.clear = /**@inline*/ function () {
                this.x = this.y = this.z = this.w = 0.0;
                return this;
            };
            Vec4.prototype.add = function (v4fVec, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                v4fDestination.x = this.x + v4fVec.x;
                v4fDestination.y = this.y + v4fVec.y;
                v4fDestination.z = this.z + v4fVec.z;
                v4fDestination.w = this.w + v4fVec.w;
                return v4fDestination;
            };
            Vec4.prototype.subtract = function (v4fVec, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                v4fDestination.x = this.x - v4fVec.x;
                v4fDestination.y = this.y - v4fVec.y;
                v4fDestination.z = this.z - v4fVec.z;
                v4fDestination.w = this.w - v4fVec.w;
                return v4fDestination;
            };
            Vec4.prototype.dot = /**@inline*/ function (v4fVec) {
                return this.x * v4fVec.x + this.y * v4fVec.y + this.z * v4fVec.z + this.w * v4fVec.w;
            };
            Vec4.prototype.isEqual = function (v4fVec, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if(fEps === 0.0) {
                    if(this.x != v4fVec.x || this.y != v4fVec.y || this.z != v4fVec.z || this.w != v4fVec.w) {
                        return false;
                    }
                } else {
                    if(math.abs(this.x - v4fVec.x) > fEps || math.abs(this.y - v4fVec.y) > fEps || math.abs(this.z - v4fVec.z) > fEps || math.abs(this.w - v4fVec.w) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec4.prototype.isClear = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if(fEps === 0.0) {
                    if(this.x != 0.0 || this.y != 0.0 || this.z != 0.0 || this.w != 0.0) {
                        return false;
                    }
                } else {
                    if(math.abs(this.x) > fEps || math.abs(this.y) > fEps || math.abs(this.z) > fEps || math.abs(this.w) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec4.prototype.negate = function (v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                v4fDestination.x = -this.x;
                v4fDestination.y = -this.y;
                v4fDestination.z = -this.z;
                v4fDestination.w = -this.w;
                return v4fDestination;
            };
            Vec4.prototype.scale = function (fScale, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                v4fDestination.x = this.x * fScale;
                v4fDestination.y = this.y * fScale;
                v4fDestination.z = this.z * fScale;
                v4fDestination.w = this.w * fScale;
                return v4fDestination;
            };
            Vec4.prototype.normalize = function (v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fLength = math.sqrt(x * x + y * y + z * z + w * w);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                    z *= fInvLength;
                    w *= fInvLength;
                }
                v4fDestination.x = x;
                v4fDestination.y = y;
                v4fDestination.z = z;
                v4fDestination.w = w;
                return v4fDestination;
            };
            Vec4.prototype.length = /**@inline*/ function () {
                var x = this.x, y = this.y, z = this.z, w = this.w;
                return math.sqrt(x * x + y * y + z * z + w * w);
            };
            Vec4.prototype.lengthSquare = /**@inline*/ function () {
                var x = this.x, y = this.y, z = this.z, w = this.w;
                return x * x + y * y + z * z + w * w;
            };
            Vec4.prototype.direction = function (v4fVec, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                var x = v4fVec.x - this.x;
                var y = v4fVec.y - this.y;
                var z = v4fVec.z - this.z;
                var w = v4fVec.w - this.w;
                var fLength = math.sqrt(x * x + y * y + z * z + w * w);
                if(fLength !== 0.0) {
                    var fInvLength = 1.0 / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                    z *= fInvLength;
                    w *= fInvLength;
                }
                v4fDestination.x = x;
                v4fDestination.y = y;
                v4fDestination.z = z;
                v4fDestination.w = w;
                return v4fDestination;
            };
            Vec4.prototype.mix = function (v4fVec, fA, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = this;
                }
                fA = math.clamp(fA, 0.0, 1.0);
                var fA1 = 1.0 - fA;
                var fA2 = fA;
                v4fDestination.x = fA1 * this.x + fA2 * v4fVec.x;
                v4fDestination.y = fA1 * this.y + fA2 * v4fVec.y;
                v4fDestination.z = fA1 * this.z + fA2 * v4fVec.z;
                v4fDestination.w = fA1 * this.w + fA2 * v4fVec.w;
                return v4fDestination;
            };
            Vec4.prototype.toString = /**@inline*/ function () {
                return "[x: " + this.x + ", y: " + this.y + ", z: " + this.z + ", w: " + this.w + "]";
            };
            Object.defineProperty(Vec4, "stackCeil", {
                get: function () {
                    Vec4.stackPosition = Vec4.stackPosition === Vec4.stackSize - 1 ? 0 : Vec4.stackPosition;
                    return Vec4.stack[Vec4.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Vec4.stackSize = 100;
            Vec4.stackPosition = 0;
            Vec4.stack = (function () {
                var pStack = new Array(Vec4.stackSize);
                for(var i = 0; i < Vec4.stackSize; i++) {
                    pStack[i] = new Vec4();
                }
                return pStack;
            })();
            return Vec4;
        })();
        math.Vec4 = Vec4;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
// module akra.math {
//     export class Mat2 {
//         private pData: Float32Array = new Float32Array(4);
//         constructor ();
//         constructor (m2f: Mat2);
//         constructor (f11: float, f12: float, f21: float, f22: float);
//         constructor (f11? , f12? , f21? , f22? ) {
//             switch (arguments.length) {
//                 case 1:
//                     this.set(f11);
//                     break;
//                 case 4:
//                     this.set(f11, f12, f21, f22);
//                     break;
//             }
//         }
//         set(): Mat2;
//         set(m2f: Mat2): Mat2;
//         set(f11: float, f12: float, f21: float, f22: float): Mat2;
//         set(f11? , f12? , f21? , f22? ): Mat2 {
//             var pData: Float32Array = this.pData;
//             switch (arguments.length) {
//                 case 1:
//                     if (isFloat(f11)) {
//                         pData[0] = pData[1] = pData[2] = pData[3] = f11;
//                     }
//                     else {
//                         //pData.set(f11.pData);
//                     }
//                     break;
//                 case 4:
//                     pData[0] = f11;
//                     pData[1] = f21;
//                     pData[2] = f12;
//                     pData[3] = f22;
//                     break;
//             }
//             return this;
//         }
//     }
// }
/**
* @important Если внезапно задумаем перейти обратно на
* хранение данных в матрицах по строкам, как собственно и был�� в начале,
* то необходимо раскомментить definы и переписать метод set,
* так как он ложит по столбцам
*/
// #define __a11 0
// #define __a12 1
// #define __a13 2
// #define __a21 3
// #define __a22 4
// #define __a23 5
// #define __a31 6
// #define __a32 7
// #define __a33 8
; ;
; ;
var akra;
(function (akra) {
    (function (math) {
        var Mat3 = (function () {
            function Mat3(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        this.set(arguments[0]);
                        break;

                    }
                    case 3: {
                        this.set(arguments[0], arguments[1], arguments[2]);
                        break;

                    }
                    case 9: {
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
                        break;

                    }
                    default: {
                        break;

                    }
                }
            }
            Mat3.prototype.set = function (fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9) {
                this.data = this.data || new Float32Array(9);
                var pData = this.data;
                //без аргументов инициализируется нулями
                var nArgumentsLength = arguments.length;
                if(nArgumentsLength == 0) {
                    pData[0] = pData[3] = pData[6] = 0;
                    pData[1] = pData[4] = pData[7] = 0;
                    pData[2] = pData[5] = pData[8] = 0;
                }
                if(nArgumentsLength == 1) {
                    if(akra.isFloat(arguments[0])) {
                        var nValue = arguments[0];
                        pData[0] = nValue;
                        pData[3] = 0;
                        pData[6] = 0;
                        pData[1] = 0;
                        pData[4] = nValue;
                        pData[7] = 0;
                        pData[2] = 0;
                        pData[5] = 0;
                        pData[8] = nValue;
                    } else {
                        if(akra.isDef(arguments[0].data)) {
                            var pElements = arguments[0].data;
                            if(pElements.length === 9) {
                                //Mat3
                                pData[0] = pElements[0];
                                pData[3] = pElements[3];
                                pData[6] = pElements[6];
                                pData[1] = pElements[1];
                                pData[4] = pElements[4];
                                pData[7] = pElements[7];
                                pData[2] = pElements[2];
                                pData[5] = pElements[5];
                                pData[8] = pElements[8];
                            } else {
                                //Mat4
                                pData[0] = pElements[0];
                                pData[3] = pElements[4];
                                pData[6] = pElements[8];
                                pData[1] = pElements[1];
                                pData[4] = pElements[5];
                                pData[7] = pElements[9];
                                pData[2] = pElements[2];
                                pData[5] = pElements[6];
                                pData[8] = pElements[10];
                            }
                        } else {
                            if(arguments[0] instanceof math.Vec3) {
                                var v3fVec = arguments[0];
                                //диагональ
                                pData[0] = v3fVec.x;
                                pData[3] = 0;
                                pData[6] = 0;
                                pData[1] = 0;
                                pData[4] = v3fVec.y;
                                pData[7] = 0;
                                pData[2] = 0;
                                pData[5] = 0;
                                pData[8] = v3fVec.z;
                            } else {
                                var pElements = arguments[0];
                                if(pElements.length == 3) {
                                    //ложим диагональ
                                    pData[0] = pElements[0];
                                    pData[3] = 0;
                                    pData[6] = 0;
                                    pData[1] = 0;
                                    pData[4] = pElements[1];
                                    pData[7] = 0;
                                    pData[2] = 0;
                                    pData[5] = 0;
                                    pData[8] = pElements[2];
                                } else {
                                    pData[0] = pElements[0];
                                    pData[3] = pElements[3];
                                    pData[6] = pElements[6];
                                    pData[1] = pElements[1];
                                    pData[4] = pElements[4];
                                    pData[7] = pElements[7];
                                    pData[2] = pElements[2];
                                    pData[5] = pElements[5];
                                    pData[8] = pElements[8];
                                }
                            }
                        }
                    }
                } else {
                    if(nArgumentsLength == 3) {
                        if(akra.isFloat(arguments[0])) {
                            //выставляем диагональ
                            pData[0] = arguments[0];
                            pData[3] = 0;
                            pData[6] = 0;
                            pData[1] = 0;
                            pData[4] = arguments[1];
                            pData[7] = 0;
                            pData[2] = 0;
                            pData[5] = 0;
                            pData[8] = arguments[2];
                        } else {
                            var pData1, pData2, pData3;
                            if(arguments[0] instanceof math.Vec3) {
                                var v3fVec1 = arguments[0];
                                var v3fVec2 = arguments[1];
                                var v3fVec3 = arguments[2];
                                //ложим по столбцам
                                pData[0] = v3fVec1.x;
                                pData[3] = v3fVec2.x;
                                pData[6] = v3fVec3.x;
                                pData[1] = v3fVec1.y;
                                pData[4] = v3fVec2.y;
                                pData[7] = v3fVec3.y;
                                pData[2] = v3fVec1.z;
                                pData[5] = v3fVec2.z;
                                pData[8] = v3fVec3.z;
                            } else {
                                var v3fVec1 = arguments[0];
                                var v3fVec2 = arguments[1];
                                var v3fVec3 = arguments[2];
                                //ложим по столбцам
                                pData[0] = v3fVec1[0];
                                pData[3] = v3fVec2[0];
                                pData[6] = v3fVec3[0];
                                pData[1] = v3fVec1[1];
                                pData[4] = v3fVec2[1];
                                pData[7] = v3fVec3[1];
                                pData[2] = v3fVec1[2];
                                pData[5] = v3fVec2[2];
                                pData[8] = v3fVec3[2];
                            }
                        }
                    } else {
                        if(nArgumentsLength == 9) {
                            //просто числа
                            pData[0] = arguments[0];
                            pData[3] = arguments[3];
                            pData[6] = arguments[6];
                            pData[1] = arguments[1];
                            pData[4] = arguments[4];
                            pData[7] = arguments[7];
                            pData[2] = arguments[2];
                            pData[5] = arguments[5];
                            pData[8] = arguments[8];
                        }
                    }
                }
                return this;
            };
            Mat3.prototype.identity = function () {
                var pData = this.data;
                pData[0] = 1.0;
                pData[3] = 0.0;
                pData[6] = 0.0;
                pData[1] = 0.0;
                pData[4] = 1.0;
                pData[7] = 0.0;
                pData[2] = 0.0;
                pData[5] = 0.0;
                pData[8] = 1.0;
                return this;
            };
            Mat3.prototype.add = function (m3fMat, m3fDestination) {
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData1[0] + pData2[0];
                pDataDestination[3] = pData1[3] + pData2[3];
                pDataDestination[6] = pData1[6] + pData2[6];
                pDataDestination[1] = pData1[1] + pData2[1];
                pDataDestination[4] = pData1[4] + pData2[4];
                pDataDestination[7] = pData1[7] + pData2[7];
                pDataDestination[2] = pData1[2] + pData2[2];
                pDataDestination[5] = pData1[5] + pData2[5];
                pDataDestination[8] = pData1[8] + pData2[8];
                return m3fDestination;
            };
            Mat3.prototype.subtract = function (m3fMat, m3fDestination) {
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData1[0] - pData2[0];
                pDataDestination[3] = pData1[3] - pData2[3];
                pDataDestination[6] = pData1[6] - pData2[6];
                pDataDestination[1] = pData1[1] - pData2[1];
                pDataDestination[4] = pData1[4] - pData2[4];
                pDataDestination[7] = pData1[7] - pData2[7];
                pDataDestination[2] = pData1[2] - pData2[2];
                pDataDestination[5] = pData1[5] - pData2[5];
                pDataDestination[8] = pData1[8] - pData2[8];
                return m3fDestination;
            };
            Mat3.prototype.multiply = function (m3fMat, m3fDestination) {
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = this;
                }
                var pDataDestination = m3fDestination.data;
                // Cache the matrix values (makes for huge speed increases!)
                                var a11 = pData1[0], a12 = pData1[3], a13 = pData1[6];
                var a21 = pData1[1], a22 = pData1[4], a23 = pData1[7];
                var a31 = pData1[2], a32 = pData1[5], a33 = pData1[8];
                var b11 = pData2[0], b12 = pData2[3], b13 = pData2[6];
                var b21 = pData2[1], b22 = pData2[4], b23 = pData2[7];
                var b31 = pData2[2], b32 = pData2[5], b33 = pData2[8];
                pDataDestination[0] = a11 * b11 + a12 * b21 + a13 * b31;
                pDataDestination[3] = a11 * b12 + a12 * b22 + a13 * b32;
                pDataDestination[6] = a11 * b13 + a12 * b23 + a13 * b33;
                pDataDestination[1] = a21 * b11 + a22 * b21 + a23 * b31;
                pDataDestination[4] = a21 * b12 + a22 * b22 + a23 * b32;
                pDataDestination[7] = a21 * b13 + a22 * b23 + a23 * b33;
                pDataDestination[2] = a31 * b11 + a32 * b21 + a33 * b31;
                pDataDestination[5] = a31 * b12 + a32 * b22 + a33 * b32;
                pDataDestination[8] = a31 * b13 + a32 * b23 + a33 * b33;
                return m3fDestination;
            };
            Mat3.prototype.multiplyVec3 = function (v3fVec, v3fDestination) {
                var pData = this.data;
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new math.Vec3();
                }
                var x = v3fVec.x, y = v3fVec.y, z = v3fVec.z;
                v3fDestination.x = pData[0] * x + pData[3] * y + pData[6] * z;
                v3fDestination.y = pData[1] * x + pData[4] * y + pData[7] * z;
                v3fDestination.z = pData[2] * x + pData[5] * y + pData[8] * z;
                return v3fDestination;
            };
            Mat3.prototype.transpose = function (m3fDestination) {
                var pData = this.data;
                if(!akra.isDef(m3fDestination)) {
                    //быстрее будет явно обработать оба случая
                                        var a12 = pData[3], a13 = pData[6], a23 = pData[7];
                    pData[3] = pData[1];
                    pData[6] = pData[2];
                    pData[1] = a12;
                    pData[7] = pData[5];
                    pData[2] = a13;
                    pData[5] = a23;
                    return this;
                }
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[3] = pData[1];
                pDataDestination[6] = pData[2];
                pDataDestination[1] = pData[3];
                pDataDestination[4] = pData[4];
                pDataDestination[7] = pData[5];
                pDataDestination[2] = pData[6];
                pDataDestination[5] = pData[7];
                pDataDestination[8] = pData[8];
                return m3fDestination;
            };
            Mat3.prototype.determinant = function () {
                var pData = this.data;
                var a11 = pData[0], a12 = pData[3], a13 = pData[6];
                var a21 = pData[1], a22 = pData[4], a23 = pData[7];
                var a31 = pData[2], a32 = pData[5], a33 = pData[8];
                return a11 * (a22 * a33 - a23 * a32) - a12 * (a21 * a33 - a23 * a31) + a13 * (a21 * a32 - a22 * a31);
            };
            Mat3.prototype.inverse = function (m3fDestination) {
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = this;
                }
                var pData = this.data;
                var pDataDestination = m3fDestination.data;
                var a11 = pData[0], a12 = pData[3], a13 = pData[6];
                var a21 = pData[1], a22 = pData[4], a23 = pData[7];
                var a31 = pData[2], a32 = pData[5], a33 = pData[8];
                var A11 = a22 * a33 - a23 * a32;
                var A12 = a21 * a33 - a23 * a31;
                var A13 = a21 * a32 - a22 * a31;
                var A21 = a12 * a33 - a13 * a32;
                var A22 = a11 * a33 - a13 * a31;
                var A23 = a11 * a32 - a12 * a31;
                var A31 = a12 * a23 - a13 * a22;
                var A32 = a11 * a23 - a13 * a21;
                var A33 = a11 * a22 - a12 * a21;
                var fDeterminant = a11 * A11 - a12 * A12 + a13 * A13;
                if(fDeterminant == 0.0) {
                    akra.logger.setSourceLocation("Mat3.ts", 445);
                    akra.logger.error("обращение матрицы с нулевым детеминантом:\n", this.toString());
                    ; ;
                    return m3fDestination.set(1.0);
                    //чтоб все не навернулось
                                    }
                var fInverseDeterminant = 1.0 / fDeterminant;
                pDataDestination[0] = A11 * fInverseDeterminant;
                pDataDestination[3] = -A21 * fInverseDeterminant;
                pDataDestination[6] = A31 * fInverseDeterminant;
                pDataDestination[1] = -A12 * fInverseDeterminant;
                pDataDestination[4] = A22 * fInverseDeterminant;
                pDataDestination[7] = -A32 * fInverseDeterminant;
                pDataDestination[2] = A13 * fInverseDeterminant;
                pDataDestination[5] = -A23 * fInverseDeterminant;
                pDataDestination[8] = A33 * fInverseDeterminant;
                return m3fDestination;
            };
            Mat3.prototype.isEqual = function (m3fMat, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                if(fEps == 0) {
                    if(pData1[0] != pData2[0] || pData1[3] != pData2[3] || pData1[6] != pData2[6] || pData1[1] != pData2[1] || pData1[4] != pData2[4] || pData1[7] != pData2[7] || pData1[2] != pData2[2] || pData1[5] != pData2[5] || pData1[8] != pData2[8]) {
                        return false;
                    }
                } else {
                    if(Math.abs(pData1[0] - pData2[0]) > fEps || Math.abs(pData1[3] - pData2[3]) > fEps || Math.abs(pData1[6] - pData2[6]) > fEps || Math.abs(pData1[1] - pData2[1]) > fEps || Math.abs(pData1[4] - pData2[4]) > fEps || Math.abs(pData1[7] - pData2[7]) > fEps || Math.abs(pData1[2] - pData2[2]) > fEps || Math.abs(pData1[5] - pData2[5]) > fEps || Math.abs(pData1[8] - pData2[8]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat3.prototype.isDiagonal = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                var pData = this.data;
                if(fEps == 0) {
                    if(pData[3] != 0 || pData[6] != 0 || pData[1] != 0 || pData[7] != 0 || pData[2] != 0 || pData[5] != 0) {
                        return false;
                    }
                } else {
                    if(Math.abs(pData[3]) > fEps || Math.abs(pData[6]) > fEps || Math.abs(pData[1]) > fEps || Math.abs(pData[7]) > fEps || Math.abs(pData[2]) > fEps || Math.abs(pData[5]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat3.prototype.toMat4 = function (m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new math.Mat4();
                }
                var pData = this.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[3];
                pDataDestination[8] = pData[6];
                pDataDestination[12] = 0;
                pDataDestination[1] = pData[1];
                pDataDestination[5] = pData[4];
                pDataDestination[9] = pData[7];
                pDataDestination[13] = 0;
                pDataDestination[2] = pData[2];
                pDataDestination[6] = pData[5];
                pDataDestination[10] = pData[8];
                pDataDestination[14] = 0;
                pDataDestination[3] = 0;
                pDataDestination[7] = 0;
                pDataDestination[11] = 0;
                pDataDestination[15] = 1;
                return m4fDestination;
            };
            Mat3.prototype.toQuat4 = function (q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = new math.Quat4();
                }
                var pData = this.data;
                var a11 = pData[0], a12 = pData[3], a13 = pData[6];
                var a21 = pData[1], a22 = pData[4], a23 = pData[7];
                var a31 = pData[2], a32 = pData[5], a33 = pData[8];
                /*x^2*/
                var x2 = ((a11 - a22 - a33) + 1) / 4;
                /*y^2*/
                var y2 = ((a22 - a11 - a33) + 1) / 4;
                /*z^2*/
                var z2 = ((a33 - a11 - a22) + 1) / 4;
                /*w^2*/
                var w2 = ((a11 + a22 + a33) + 1) / 4;
                var fMax = Math.max(x2, Math.max(y2, Math.max(z2, w2)));
                if(fMax == x2) {
                    //максимальная компонента берется положительной
                    var x = Math.sqrt(x2);
                    q4fDestination.x = x;
                    q4fDestination.y = (a21 + a12) / 4 / x;
                    q4fDestination.z = (a31 + a13) / 4 / x;
                    q4fDestination.w = (a32 - a23) / 4 / x;
                } else {
                    if(fMax == y2) {
                        //максимальная компонента берется положительной
                        var y = Math.sqrt(y2);
                        x;
                        q4fDestination.x = (a21 + a12) / 4 / y;
                        q4fDestination.y = y;
                        q4fDestination.z = (a32 + a23) / 4 / y;
                        q4fDestination.w = (a13 - a31) / 4 / y;
                    } else {
                        if(fMax == z2) {
                            //максимальная компонента берется положительной
                            var z = Math.sqrt(z2);
                            q4fDestination.x = (a31 + a13) / 4 / z;
                            q4fDestination.y = (a32 + a23) / 4 / z;
                            q4fDestination.z = z;
                            q4fDestination.w = (a21 - a12) / 4 / z;
                        } else {
                            //максимальная компонента берется положительной
                            var w = Math.sqrt(w2);
                            q4fDestination.x = (a32 - a23) / 4 / w;
                            q4fDestination.y = (a13 - a31) / 4 / w;
                            q4fDestination.z = (a21 - a12) / 4 / w;
                            q4fDestination.w = w;
                        }
                    }
                }
                return q4fDestination;
            };
            Mat3.prototype.toString = function () {
                var pData = this.data;
                return '[' + pData[0] + ', ' + pData[3] + ', ' + pData[6] + ',\n' + +pData[1] + ', ' + pData[4] + ', ' + pData[7] + ',\n' + +pData[2] + ', ' + pData[5] + ', ' + pData[8] + ']';
            };
            Mat3.prototype.decompose = function (q4fRotation, v3fScale) {
                //изначально предполагаем, что порядок умножения был rot * scale
                var m3fRotScale = this;
                var m3fRotScaleTransposed = this.transpose(math.mat3());
                var isRotScale = true;
                //понадобятся если порядок умножения был другим
                                var m3fScaleRot, m3fScaleRotTransposed;
                //было отражение или нет
                var scaleSign = (m3fRotScale.determinant() >= 0.0) ? 1 : -1;
                var m3fResult = math.mat3();
                //first variant rot * scale
                // (rot * scale)T * (rot * scale) =
                // scaleT * rotT * rot * scale = scaleT *rot^-1 * rot * scale =
                // scaleT * scale
                m3fRotScaleTransposed.multiply(m3fRotScale, m3fResult);
                if(!m3fResult.isDiagonal(0.0001)) {
                    //предположение было неверным
                    isRotScale = false;
                    //просто переобозначения чтобы не было путаницы
                    m3fScaleRot = m3fRotScale;
                    m3fScaleRotTransposed = m3fRotScaleTransposed;
                    //second variant scale * rot
                    // (scale * rot) * (scale * rot)T =
                    // scale * rot * rotT * scaleT = scale *rot * rot^-1 * scaleT =
                    // scale * scaleT
                    m3fScaleRot.multiply(m3fScaleRotTransposed, m3fResult);
                }
                var pResultData = m3fResult.data;
                var x = math.sqrt(pResultData[0]);
                /*если было отражение, считается что оно было по y*/
                var y = math.sqrt(pResultData[4]) * scaleSign;
                var z = math.sqrt(pResultData[8]);
                v3fScale.x = x;
                v3fScale.y = y;
                v3fScale.z = z;
                var m3fInverseScale = math.mat3(1.0 / x, 1.0 / y, 1.0 / z);
                if(isRotScale) {
                    m3fRotScale.multiply(m3fInverseScale, math.mat3()).toQuat4(q4fRotation);
                    return true;
                } else {
                    m3fInverseScale.multiply(m3fScaleRot, math.mat3()).toQuat4(q4fRotation);
                    akra.logger.setSourceLocation("Mat3.ts", 674);
                    akra.logger.assert(false, "порядок умножения scale rot в данный момент не поддерживается");
                    ; ;
                    return false;
                }
            };
            Mat3.prototype.row = function (iRow, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new math.Vec3();
                }
                var pData = this.data;
                switch(iRow) {
                    case 1: {
                        v3fDestination.x = pData[0];
                        v3fDestination.y = pData[3];
                        v3fDestination.z = pData[6];
                        break;

                    }
                    case 2: {
                        v3fDestination.x = pData[1];
                        v3fDestination.y = pData[4];
                        v3fDestination.z = pData[7];
                        break;

                    }
                    case 3: {
                        v3fDestination.x = pData[2];
                        v3fDestination.y = pData[5];
                        v3fDestination.z = pData[8];
                        break;

                    }
                }
                return v3fDestination;
            };
            Mat3.prototype.column = function (iColumn, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new math.Vec3();
                }
                var pData = this.data;
                switch(iColumn) {
                    case 1: {
                        v3fDestination.x = pData[0];
                        v3fDestination.y = pData[1];
                        v3fDestination.z = pData[2];
                        break;

                    }
                    case 2: {
                        v3fDestination.x = pData[3];
                        v3fDestination.y = pData[4];
                        v3fDestination.z = pData[5];
                        break;

                    }
                    case 3: {
                        v3fDestination.x = pData[6];
                        v3fDestination.y = pData[7];
                        v3fDestination.z = pData[8];
                        break;

                    }
                }
                return v3fDestination;
            };
            Mat3.fromYawPitchRoll = function fromYawPitchRoll(fYaw, fPitch, fRoll, m3fDestination) {
                if(arguments.length <= 2) {
                    //Vec3 + m3fDestination
                    var v3fVec = arguments[0];
                    fYaw = v3fVec.x;
                    fPitch = v3fVec.y;
                    fRoll = v3fVec.z;
                    m3fDestination = arguments[1];
                }
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = new Mat3();
                }
                var pDataDestination = m3fDestination.data;
                var fSin1 = Math.sin(fYaw);
                var fSin2 = Math.sin(fPitch);
                var fSin3 = Math.sin(fRoll);
                var fCos1 = Math.cos(fYaw);
                var fCos2 = Math.cos(fPitch);
                var fCos3 = Math.cos(fRoll);
                pDataDestination[0] = fCos1 * fCos3 + fSin1 * fSin2 * fSin3;
                pDataDestination[3] = fCos3 * fSin1 * fSin2 - fCos1 * fSin3;
                pDataDestination[6] = fCos2 * fSin1;
                pDataDestination[1] = fCos2 * fSin3;
                pDataDestination[4] = fCos2 * fCos3;
                pDataDestination[7] = -fSin2;
                pDataDestination[2] = fCos1 * fSin2 * fSin3 - fCos3 * fSin1;
                pDataDestination[5] = fSin1 * fSin3 + fCos1 * fCos3 * fSin2;
                pDataDestination[8] = fCos1 * fCos2;
                return m3fDestination;
            }
            Mat3.fromXYZ = function fromXYZ(fX, fY, fZ, m3fDestination) {
                if(arguments.length <= 2) {
                    //Vec3 + m3fDestination
                    var v3fVec = arguments[0];
                    return Mat3.fromYawPitchRoll(v3fVec.y, v3fVec.x, v3fVec.z, arguments[1]);
                } else {
                    //fX fY fZ m3fDestination
                    var fX = arguments[0];
                    var fY = arguments[1];
                    var fZ = arguments[2];
                    return Mat3.fromYawPitchRoll(fY, fX, fZ, arguments[3]);
                }
            }
            Object.defineProperty(Mat3, "stackCeil", {
                get: function () {
                    Mat3.stackPosition = Mat3.stackPosition === Mat3.stackSize - 1 ? 0 : Mat3.stackPosition;
                    return Mat3.stack[Mat3.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Mat3.stackSize = 100;
            Mat3.stackPosition = 0;
            Mat3.stack = (function () {
                var pStack = new Array(Mat3.stackSize);
                for(var i = 0; i < Mat3.stackSize; i++) {
                    pStack[i] = new Mat3();
                }
                return pStack;
            })();
            return Mat3;
        })();
        math.Mat3 = Mat3;        
        ; ;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
; ;
; ;
var akra;
(function (akra) {
    (function (math) {
        var Mat4 = (function () {
            function Mat4(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9, fValue10, fValue11, fValue12, fValue13, fValue14, fValue15, fValue16) {
                var nArgumentsLength = arguments.length;
                if(nArgumentsLength === 2) {
                    if(akra.isBoolean(arguments[1])) {
                        if(arguments[1]) {
                            this.data = arguments[0];
                        } else {
                            this.data = new Float32Array(16);
                            this.set(arguments[0]);
                        }
                    } else {
                        this.data = new Float32Array(16);
                        this.set(arguments[0], arguments[1]);
                    }
                } else {
                    this.data = new Float32Array(16);
                    switch(nArgumentsLength) {
                        case 1: {
                            if(arguments[0] instanceof math.Mat3) {
                                this.set(arguments[0], math.vec3(0.0));
                            } else {
                                this.set(arguments[0]);
                            }
                            break;

                        }
                        case 4: {
                            this.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                            break;

                        }
                        case 16: {
                            this.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
                            break;

                        }
                        default: {
                            break;

                        }
                    }
                }
            }
            Mat4.prototype.set = function (fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9, fValue10, fValue11, fValue12, fValue13, fValue14, fValue15, fValue16) {
                var nArgumentsLength = arguments.length;
                var pData = this.data;
                if(nArgumentsLength === 0) {
                    pData[0] = pData[4] = pData[8] = pData[12] = pData[1] = pData[5] = pData[9] = pData[13] = pData[2] = pData[6] = pData[10] = pData[14] = pData[3] = pData[7] = pData[11] = pData[15] = 0.0;
                    return this;
                }
                if(nArgumentsLength === 1) {
                    if(akra.isFloat(arguments[0])) {
                        var fValue = arguments[0];
                        pData[0] = fValue;
                        pData[4] = 0.0;
                        pData[8] = 0.0;
                        pData[12] = 0.0;
                        pData[1] = 0.0;
                        pData[5] = fValue;
                        pData[9] = 0.0;
                        pData[13] = 0.0;
                        pData[2] = 0.0;
                        pData[6] = 0.0;
                        pData[10] = fValue;
                        pData[14] = 0.0;
                        pData[3] = 0.0;
                        pData[7] = 0.0;
                        pData[11] = 0.0;
                        pData[15] = fValue;
                    } else {
                        if(arguments[0] instanceof math.Vec4) {
                            var v4fVec = arguments[0];
                            pData[0] = v4fVec.x;
                            pData[4] = 0.0;
                            pData[8] = 0.0;
                            pData[12] = 0.0;
                            pData[1] = 0.0;
                            pData[5] = v4fVec.y;
                            pData[9] = 0.0;
                            pData[13] = 0.0;
                            pData[2] = 0.0;
                            pData[6] = 0.0;
                            pData[10] = v4fVec.z;
                            pData[14] = 0.0;
                            pData[3] = 0.0;
                            pData[7] = 0.0;
                            pData[11] = 0.0;
                            pData[15] = v4fVec.w;
                        } else {
                            if(akra.isDef(arguments[0].data)) {
                                var pMatrixData = arguments[0].data;
                                if(pMatrixData.length == 16) {
                                    //Mat4
                                    pData.set(pMatrixData);
                                } else {
                                    //Mat3
                                    pData[0] = pMatrixData[0];
                                    pData[4] = pMatrixData[3];
                                    pData[8] = pMatrixData[6];
                                    pData[1] = pMatrixData[1];
                                    pData[5] = pMatrixData[4];
                                    pData[9] = pMatrixData[7];
                                    pData[2] = pMatrixData[2];
                                    pData[6] = pMatrixData[5];
                                    pData[10] = pMatrixData[8];
                                    pData[3] = 0.0;
                                    pData[7] = 0.0;
                                    pData[11] = 0.0;
                                    pData[15] = 1.0;
                                }
                            } else {
                                //array
                                var pArray = arguments[0];
                                if(pArray.length === 4) {
                                    pData[0] = pArray[0];
                                    pData[4] = 0.0;
                                    pData[8] = 0.0;
                                    pData[12] = 0.0;
                                    pData[1] = 0.0;
                                    pData[5] = pArray[1];
                                    pData[9] = 0.0;
                                    pData[13] = 0.0;
                                    pData[2] = 0.0;
                                    pData[6] = 0.0;
                                    pData[10] = pArray[2];
                                    pData[14] = 0.0;
                                    pData[3] = 0.0;
                                    pData[7] = 0.0;
                                    pData[11] = 0.0;
                                    pData[15] = pArray[3];
                                } else {
                                    //length == 16
                                    pData[0] = pArray[0];
                                    pData[4] = pArray[4];
                                    pData[8] = pArray[8];
                                    pData[12] = pArray[12];
                                    pData[1] = pArray[1];
                                    pData[5] = pArray[5];
                                    pData[9] = pArray[9];
                                    pData[13] = pArray[13];
                                    pData[2] = pArray[2];
                                    pData[6] = pArray[6];
                                    pData[10] = pArray[10];
                                    pData[14] = pArray[14];
                                    pData[3] = pArray[3];
                                    pData[7] = pArray[7];
                                    pData[11] = pArray[11];
                                    pData[15] = pArray[15];
                                }
                            }
                        }
                    }
                } else {
                    if(nArgumentsLength == 2) {
                        var pMatrixData = arguments[0];
                        var v3fTranslation = arguments[1];
                        pData[0] = pMatrixData[0];
                        pData[4] = pMatrixData[3];
                        pData[8] = pMatrixData[6];
                        pData[12] = v3fTranslation.x;
                        pData[1] = pMatrixData[1];
                        pData[5] = pMatrixData[4];
                        pData[9] = pMatrixData[7];
                        pData[13] = v3fTranslation.y;
                        pData[2] = pMatrixData[2];
                        pData[6] = pMatrixData[5];
                        pData[10] = pMatrixData[8];
                        pData[14] = v3fTranslation.z;
                        pData[3] = 0.0;
                        pData[7] = 0.0;
                        pData[11] = 0.0;
                        pData[15] = 1.0;
                    } else {
                        if(nArgumentsLength == 4) {
                            if(akra.isFloat(arguments[0])) {
                                pData[0] = arguments[0];
                                pData[4] = 0;
                                pData[8] = 0;
                                pData[12] = 0;
                                pData[1] = 0;
                                pData[5] = arguments[1];
                                pData[9] = 0;
                                pData[13] = 0;
                                pData[2] = 0;
                                pData[6] = 0;
                                pData[10] = arguments[2];
                                pData[14] = 0;
                                pData[3] = 0;
                                pData[7] = 0;
                                pData[11] = 0;
                                pData[15] = arguments[3];
                            } else {
                                if(arguments[0] instanceof math.Vec4) {
                                    var v4fColumn1 = arguments[0];
                                    var v4fColumn2 = arguments[1];
                                    var v4fColumn3 = arguments[2];
                                    var v4fColumn4 = arguments[3];
                                    pData[0] = v4fColumn1.x;
                                    pData[4] = v4fColumn2.x;
                                    pData[8] = v4fColumn3.x;
                                    pData[12] = v4fColumn4.x;
                                    pData[1] = v4fColumn1.y;
                                    pData[5] = v4fColumn2.y;
                                    pData[9] = v4fColumn3.y;
                                    pData[13] = v4fColumn4.y;
                                    pData[2] = v4fColumn1.z;
                                    pData[6] = v4fColumn2.z;
                                    pData[10] = v4fColumn3.z;
                                    pData[14] = v4fColumn4.z;
                                    pData[3] = v4fColumn1.w;
                                    pData[7] = v4fColumn2.w;
                                    pData[11] = v4fColumn3.w;
                                    pData[15] = v4fColumn4.w;
                                } else {
                                    //arrays
                                    var v4fColumn1 = arguments[0];
                                    var v4fColumn2 = arguments[1];
                                    var v4fColumn3 = arguments[2];
                                    var v4fColumn4 = arguments[3];
                                    pData[0] = v4fColumn1[0];
                                    pData[4] = v4fColumn2[0];
                                    pData[8] = v4fColumn3[0];
                                    pData[12] = v4fColumn4[0];
                                    pData[1] = v4fColumn1[1];
                                    pData[5] = v4fColumn2[1];
                                    pData[9] = v4fColumn3[1];
                                    pData[13] = v4fColumn4[1];
                                    pData[2] = v4fColumn1[2];
                                    pData[6] = v4fColumn2[2];
                                    pData[10] = v4fColumn3[2];
                                    pData[14] = v4fColumn4[2];
                                    pData[3] = v4fColumn1[3];
                                    pData[7] = v4fColumn2[3];
                                    pData[11] = v4fColumn3[3];
                                    pData[15] = v4fColumn4[3];
                                }
                            }
                        } else {
                            //nArgumentsLength === 16
                            pData[0] = arguments[0];
                            pData[4] = arguments[4];
                            pData[8] = arguments[8];
                            pData[12] = arguments[12];
                            pData[1] = arguments[1];
                            pData[5] = arguments[5];
                            pData[9] = arguments[9];
                            pData[13] = arguments[13];
                            pData[2] = arguments[2];
                            pData[6] = arguments[6];
                            pData[10] = arguments[10];
                            pData[14] = arguments[14];
                            pData[3] = arguments[3];
                            pData[7] = arguments[7];
                            pData[11] = arguments[11];
                            pData[15] = arguments[15];
                        }
                    }
                }
                return this;
            };
            Mat4.prototype.identity = function () {
                var pData = this.data;
                pData[0] = 1.0;
                pData[4] = 0.0;
                pData[8] = 0.0;
                pData[12] = 0.0;
                pData[1] = 0.0;
                pData[5] = 1.0;
                pData[9] = 0.0;
                pData[13] = 0.0;
                pData[2] = 0.0;
                pData[6] = 0.0;
                pData[10] = 1.0;
                pData[14] = 0.0;
                pData[3] = 0.0;
                pData[7] = 0.0;
                pData[11] = 0.0;
                pData[15] = 1.0;
                return this;
            };
            Mat4.prototype.add = function (m4fMat, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData1[0] + pData2[0];
                pDataDestination[4] = pData1[4] + pData2[4];
                pDataDestination[8] = pData1[8] + pData2[8];
                pDataDestination[12] = pData1[12] + pData2[12];
                pDataDestination[1] = pData1[1] + pData2[1];
                pDataDestination[5] = pData1[5] + pData2[5];
                pDataDestination[9] = pData1[9] + pData2[9];
                pDataDestination[13] = pData1[13] + pData2[13];
                pDataDestination[2] = pData1[2] + pData2[2];
                pDataDestination[6] = pData1[6] + pData2[6];
                pDataDestination[10] = pData1[10] + pData2[10];
                pDataDestination[14] = pData1[14] + pData2[14];
                pDataDestination[3] = pData1[3] + pData2[3];
                pDataDestination[7] = pData1[7] + pData2[7];
                pDataDestination[11] = pData1[11] + pData2[11];
                pDataDestination[15] = pData1[15] + pData2[15];
                return m4fDestination;
            };
            Mat4.prototype.subtract = function (m4fMat, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData1[0] - pData2[0];
                pDataDestination[4] = pData1[4] - pData2[4];
                pDataDestination[8] = pData1[8] - pData2[8];
                pDataDestination[12] = pData1[12] - pData2[12];
                pDataDestination[1] = pData1[1] - pData2[1];
                pDataDestination[5] = pData1[5] - pData2[5];
                pDataDestination[9] = pData1[9] - pData2[9];
                pDataDestination[13] = pData1[13] - pData2[13];
                pDataDestination[2] = pData1[2] - pData2[2];
                pDataDestination[6] = pData1[6] - pData2[6];
                pDataDestination[10] = pData1[10] - pData2[10];
                pDataDestination[14] = pData1[14] - pData2[14];
                pDataDestination[3] = pData1[3] - pData2[3];
                pDataDestination[7] = pData1[7] - pData2[7];
                pDataDestination[11] = pData1[11] - pData2[11];
                pDataDestination[15] = pData1[15] - pData2[15];
                return m4fDestination;
            };
            Mat4.prototype.multiply = function (m4fMat, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                var pDataDestination = m4fDestination.data;
                //кешируем значения матриц для ускорения
                                var a11 = pData1[0], a12 = pData1[4], a13 = pData1[8], a14 = pData1[12];
                var a21 = pData1[1], a22 = pData1[5], a23 = pData1[9], a24 = pData1[13];
                var a31 = pData1[2], a32 = pData1[6], a33 = pData1[10], a34 = pData1[14];
                var a41 = pData1[3], a42 = pData1[7], a43 = pData1[11], a44 = pData1[15];
                var b11 = pData2[0], b12 = pData2[4], b13 = pData2[8], b14 = pData2[12];
                var b21 = pData2[1], b22 = pData2[5], b23 = pData2[9], b24 = pData2[13];
                var b31 = pData2[2], b32 = pData2[6], b33 = pData2[10], b34 = pData2[14];
                var b41 = pData2[3], b42 = pData2[7], b43 = pData2[11], b44 = pData2[15];
                pDataDestination[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
                pDataDestination[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
                pDataDestination[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
                pDataDestination[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
                pDataDestination[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
                pDataDestination[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
                pDataDestination[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
                pDataDestination[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
                pDataDestination[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
                pDataDestination[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
                pDataDestination[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
                pDataDestination[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
                pDataDestination[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
                pDataDestination[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
                pDataDestination[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
                pDataDestination[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
                return m4fDestination;
            };
            Mat4.prototype.multiplyLeft = /**@inline*/ function (m4fMat, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                return m4fMat.multiply(this, m4fDestination);
            };
            Mat4.prototype.multiplyVec4 = function (v4fVec, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = new math.Vec4();
                }
                var pData = this.data;
                var x = v4fVec.x, y = v4fVec.y, z = v4fVec.z, w = v4fVec.w;
                v4fDestination.x = pData[0] * x + pData[4] * y + pData[8] * z + pData[12] * w;
                v4fDestination.y = pData[1] * x + pData[5] * y + pData[9] * z + pData[13] * w;
                v4fDestination.z = pData[2] * x + pData[6] * y + pData[10] * z + pData[14] * w;
                v4fDestination.w = pData[3] * x + pData[7] * y + pData[11] * z + pData[15] * w;
                return v4fDestination;
            };
            Mat4.prototype.transpose = function (m4fDestination) {
                var pData = this.data;
                if(!akra.isDef(m4fDestination)) {
                    var a12 = pData[4], a13 = pData[8], a14 = pData[12];
                    var a23 = pData[9], a24 = pData[13];
                    var a34 = pData[14];
                    pData[4] = pData[1];
                    pData[8] = pData[2];
                    pData[12] = pData[3];
                    pData[1] = a12;
                    pData[9] = pData[6];
                    pData[13] = pData[7];
                    pData[2] = a13;
                    pData[6] = a23;
                    pData[14] = pData[11];
                    pData[3] = a14;
                    pData[7] = a24;
                    pData[11] = a34;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[1];
                pDataDestination[8] = pData[2];
                pDataDestination[12] = pData[3];
                pDataDestination[1] = pData[4];
                pDataDestination[5] = pData[5];
                pDataDestination[9] = pData[6];
                pDataDestination[13] = pData[7];
                pDataDestination[2] = pData[8];
                pDataDestination[6] = pData[9];
                pDataDestination[10] = pData[10];
                pDataDestination[14] = pData[11];
                pDataDestination[3] = pData[12];
                pDataDestination[7] = pData[13];
                pDataDestination[11] = pData[14];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.determinant = function () {
                var pData = this.data;
                var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
                var a41 = pData[3], a42 = pData[7], a43 = pData[11], a44 = pData[15];
                return a41 * a32 * a23 * a14 - a31 * a42 * a23 * a14 - a41 * a22 * a33 * a14 + a21 * a42 * a33 * a14 + a31 * a22 * a43 * a14 - a21 * a32 * a43 * a14 - a41 * a32 * a13 * a24 + a31 * a42 * a13 * a24 + a41 * a12 * a33 * a24 - a11 * a42 * a33 * a24 - a31 * a12 * a43 * a24 + a11 * a32 * a43 * a24 + a41 * a22 * a13 * a34 - a21 * a42 * a13 * a34 - a41 * a12 * a23 * a34 + a11 * a42 * a23 * a34 + a21 * a12 * a43 * a34 - a11 * a22 * a43 * a34 - a31 * a22 * a13 * a44 + a21 * a32 * a13 * a44 + a31 * a12 * a23 * a44 - a11 * a32 * a23 * a44 - a21 * a12 * a33 * a44 + a11 * a22 * a33 * a44;
            };
            Mat4.prototype.inverse = function (m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                var pData = this.data;
                var pDataDestination = m4fDestination.data;
                // Cache the matrix values (makes for huge speed increases!)
                                var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
                var a41 = pData[3], a42 = pData[7], a43 = pData[11], a44 = pData[15];
                var b00 = a11 * a22 - a12 * a21;
                var b01 = a11 * a23 - a13 * a21;
                var b02 = a11 * a24 - a14 * a21;
                var b03 = a12 * a23 - a13 * a22;
                var b04 = a12 * a24 - a14 * a22;
                var b05 = a13 * a24 - a14 * a23;
                var b06 = a31 * a42 - a32 * a41;
                var b07 = a31 * a43 - a33 * a41;
                var b08 = a31 * a44 - a34 * a41;
                var b09 = a32 * a43 - a33 * a42;
                var b10 = a32 * a44 - a34 * a42;
                var b11 = a33 * a44 - a34 * a43;
                var fDeterminant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                if(fDeterminant === 0.0) {
                    akra.logger.setSourceLocation("Mat4.ts", 624);
                    akra.logger.assert(false, "обращение матрицы с нулевым детеминантом:\n" + this.toString());
                    ; ;
                    //чтоб все не навернулось		        return m4fDestination.set(1.);
                                    }
                var fInverseDeterminant = 1 / fDeterminant;
                pDataDestination[0] = (a22 * b11 - a23 * b10 + a24 * b09) * fInverseDeterminant;
                pDataDestination[4] = (-a12 * b11 + a13 * b10 - a14 * b09) * fInverseDeterminant;
                pDataDestination[8] = (a42 * b05 - a43 * b04 + a44 * b03) * fInverseDeterminant;
                pDataDestination[12] = (-a32 * b05 + a33 * b04 - a34 * b03) * fInverseDeterminant;
                pDataDestination[1] = (-a21 * b11 + a23 * b08 - a24 * b07) * fInverseDeterminant;
                pDataDestination[5] = (a11 * b11 - a13 * b08 + a14 * b07) * fInverseDeterminant;
                pDataDestination[9] = (-a41 * b05 + a43 * b02 - a44 * b01) * fInverseDeterminant;
                pDataDestination[13] = (a31 * b05 - a33 * b02 + a34 * b01) * fInverseDeterminant;
                pDataDestination[2] = (a21 * b10 - a22 * b08 + a24 * b06) * fInverseDeterminant;
                pDataDestination[6] = (-a11 * b10 + a12 * b08 - a14 * b06) * fInverseDeterminant;
                pDataDestination[10] = (a41 * b04 - a42 * b02 + a44 * b00) * fInverseDeterminant;
                pDataDestination[14] = (-a31 * b04 + a32 * b02 - a34 * b00) * fInverseDeterminant;
                pDataDestination[3] = (-a21 * b09 + a22 * b07 - a23 * b06) * fInverseDeterminant;
                pDataDestination[7] = (a11 * b09 - a12 * b07 + a13 * b06) * fInverseDeterminant;
                pDataDestination[11] = (-a41 * b03 + a42 * b01 - a43 * b00) * fInverseDeterminant;
                pDataDestination[15] = (a31 * b03 - a32 * b01 + a33 * b00) * fInverseDeterminant;
                return m4fDestination;
            };
            Mat4.prototype.trace = /**@inline*/ function () {
                var pData = this.data;
                return pData[0] + pData[5] + pData[10] + pData[15];
            };
            Mat4.prototype.isEqual = function (m4fMat, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                if(fEps === 0.0) {
                    if(pData1[0] != pData2[0] || pData1[4] != pData2[4] || pData1[8] != pData2[8] || pData1[12] != pData2[12] || pData1[1] != pData2[1] || pData1[5] != pData2[5] || pData1[9] != pData2[9] || pData1[13] != pData2[13] || pData1[2] != pData2[2] || pData1[6] != pData2[6] || pData1[10] != pData2[10] || pData1[14] != pData2[14] || pData1[3] != pData2[3] || pData1[7] != pData2[7] || pData1[11] != pData2[11] || pData1[15] != pData2[15]) {
                        return false;
                    }
                } else {
                    if(math.abs(pData1[0] - pData2[0]) > fEps || math.abs(pData1[4] - pData2[4]) > fEps || math.abs(pData1[8] - pData2[8]) > fEps || math.abs(pData1[12] - pData2[12]) > fEps || math.abs(pData1[1] - pData2[1]) > fEps || math.abs(pData1[5] - pData2[5]) > fEps || math.abs(pData1[9] - pData2[9]) > fEps || math.abs(pData1[13] - pData2[13]) > fEps || math.abs(pData1[2] - pData2[2]) > fEps || math.abs(pData1[6] - pData2[6]) > fEps || math.abs(pData1[10] - pData2[10]) > fEps || math.abs(pData1[14] - pData2[14]) > fEps || math.abs(pData1[3] - pData2[3]) > fEps || math.abs(pData1[7] - pData2[7]) > fEps || math.abs(pData1[11] - pData2[11]) > fEps || math.abs(pData1[15] - pData2[15]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat4.prototype.isDiagonal = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                var pData = this.data;
                if(fEps === 0.0) {
                    if(pData[4] !== 0.0 || pData[8] !== 0.0 || pData[12] != 0.0 || pData[1] !== 0.0 || pData[9] !== 0.0 || pData[13] != 0.0 || pData[2] !== 0.0 || pData[6] !== 0.0 || pData[14] != 0.0 || pData[3] !== 0.0 || pData[7] !== 0.0 || pData[11] != 0.0) {
                        return false;
                    }
                } else {
                    if(math.abs(pData[4]) > fEps || math.abs(pData[8]) > fEps || math.abs(pData[12]) > fEps || math.abs(pData[1]) > fEps || math.abs(pData[9]) > fEps || math.abs(pData[13]) > fEps || math.abs(pData[2]) > fEps || math.abs(pData[6]) > fEps || math.abs(pData[14]) > fEps || math.abs(pData[3]) > fEps || math.abs(pData[7]) > fEps || math.abs(pData[11]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat4.prototype.toMat3 = function (m3fDestination) {
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = new math.Mat3();
                }
                var pData = this.data;
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[3] = pData[4];
                pDataDestination[6] = pData[8];
                pDataDestination[1] = pData[1];
                pDataDestination[4] = pData[5];
                pDataDestination[7] = pData[9];
                pDataDestination[2] = pData[2];
                pDataDestination[5] = pData[6];
                pDataDestination[8] = pData[10];
                return m3fDestination;
            };
            Mat4.prototype.toQuat4 = function (q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = new math.Quat4();
                }
                var pData = this.data;
                var a11 = pData[0], a12 = pData[4], a13 = pData[8];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10];
                /*x^2*/
                var x2 = ((a11 - a22 - a33) + 1.0) / 4.0;
                /*y^2*/
                var y2 = ((a22 - a11 - a33) + 1.0) / 4.0;
                /*z^2*/
                var z2 = ((a33 - a11 - a22) + 1.0) / 4.0;
                /*w^2*/
                var w2 = ((a11 + a22 + a33) + 1.0) / 4.0;
                var fMax = math.max(x2, math.max(y2, math.max(z2, w2)));
                if(fMax == x2) {
                    //максимальная компонента берется положительной
                    var x = math.sqrt(x2);
                    q4fDestination.x = x;
                    q4fDestination.y = (a21 + a12) / 4.0 / x;
                    q4fDestination.z = (a31 + a13) / 4.0 / x;
                    q4fDestination.w = (a32 - a23) / 4.0 / x;
                } else {
                    if(fMax == y2) {
                        //максимальная компонента берется положительной
                        var y = math.sqrt(y2);
                        q4fDestination.x = (a21 + a12) / 4.0 / y;
                        q4fDestination.y = y;
                        q4fDestination.z = (a32 + a23) / 4.0 / y;
                        q4fDestination.w = (a13 - a31) / 4.0 / y;
                    } else {
                        if(fMax == z2) {
                            //максимальная компонента берется положительной
                            var z = math.sqrt(z2);
                            q4fDestination.x = (a31 + a13) / 4.0 / z;
                            q4fDestination.y = (a32 + a23) / 4.0 / z;
                            q4fDestination.z = z;
                            q4fDestination.w = (a21 - a12) / 4.0 / z;
                        } else {
                            //максимальная компонента берется положительной
                            var w = math.sqrt(w2);
                            q4fDestination.x = (a32 - a23) / 4.0 / w;
                            q4fDestination.y = (a13 - a31) / 4.0 / w;
                            q4fDestination.z = (a21 - a12) / 4.0 / w;
                            q4fDestination.w = w;
                        }
                    }
                }
                return q4fDestination;
            };
            Mat4.prototype.toRotationMatrix = function (m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new Mat4();
                }
                var pData = this.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[4];
                pDataDestination[8] = pData[8];
                pDataDestination[12] = 0.0;
                pDataDestination[1] = pData[1];
                pDataDestination[5] = pData[5];
                pDataDestination[9] = pData[9];
                pDataDestination[13] = 0.0;
                pDataDestination[2] = pData[2];
                pDataDestination[6] = pData[6];
                pDataDestination[10] = pData[10];
                pDataDestination[14] = 0.0;
                pDataDestination[3] = 0.0;
                pDataDestination[7] = 0.0;
                pDataDestination[11] = 0.0;
                pDataDestination[15] = 1.0;
                return m4fDestination;
            };
            Mat4.prototype.toString = function () {
                var pData = this.data;
                return '[' + pData[0] + ", " + pData[4] + ', ' + pData[8] + ', ' + pData[12] + ',\n' + pData[1] + ", " + pData[5] + ', ' + pData[9] + ', ' + pData[13] + ',\n' + pData[2] + ", " + pData[6] + ', ' + pData[10] + ', ' + pData[14] + ',\n' + pData[3] + ", " + pData[7] + ', ' + pData[11] + ', ' + pData[15] + ']';
            };
            Mat4.prototype.rotateRight = function (fAngle, v3fAxis, m4fDestination) {
                var pData = this.data;
                var x = v3fAxis.x, y = v3fAxis.y, z = v3fAxis.z;
                var fLength = Math.sqrt(x * x + y * y + z * z);
                if(fLength === 0.0) {
                    akra.logger.setSourceLocation("Mat4.ts", 860);
                    akra.logger.assert(false, "попытка вращения вокруг оси нулевой длины. Угол " + fAngle + ". Ось " + v3fAxis.toString());
                    ; ;
                    if(akra.isDef(m4fDestination)) {
                        m4fDestination.set(this);
                    } else {
                        m4fDestination = this;
                    }
                    return m4fDestination;
                }
                var fInvLength = 1.0 / fLength;
                x *= fInvLength;
                y *= fInvLength;
                z *= fInvLength;
                var a11 = pData[0], a12 = pData[4], a13 = pData[8];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10];
                var fSin = math.sin(fAngle);
                var fCos = math.cos(fAngle);
                var fTmp = 1.0 - fCos;
                //build Rotation matrix
                                var b11 = fCos + fTmp * x * x, b12 = fTmp * x * y - fSin * z, b13 = fTmp * x * z + fSin * y;
                var b21 = fTmp * y * z + fSin * z, b22 = fCos + fTmp * y * y, b23 = fTmp * y * z - fSin * x;
                var b31 = fTmp * z * x - fSin * y, b32 = fTmp * z * y + fSin * x, b33 = fCos + fTmp * z * z;
                if(!akra.isDef(m4fDestination)) {
                    pData[0] = a11 * b11 + a12 * b21 + a13 * b31;
                    pData[4] = a11 * b12 + a12 * b22 + a13 * b32;
                    pData[8] = a11 * b13 + a12 * b23 + a13 * b33;
                    pData[1] = a21 * b11 + a22 * b21 + a23 * b31;
                    pData[5] = a21 * b12 + a22 * b22 + a23 * b32;
                    pData[9] = a21 * b13 + a22 * b23 + a23 * b33;
                    pData[2] = a31 * b11 + a32 * b21 + a33 * b31;
                    pData[6] = a31 * b12 + a32 * b22 + a33 * b32;
                    pData[10] = a31 * b13 + a32 * b23 + a33 * b33;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = a11 * b11 + a12 * b21 + a13 * b31;
                pDataDestination[4] = a11 * b12 + a12 * b22 + a13 * b32;
                pDataDestination[8] = a11 * b13 + a12 * b23 + a13 * b33;
                pDataDestination[12] = pData[12];
                pDataDestination[1] = a21 * b11 + a22 * b21 + a23 * b31;
                pDataDestination[5] = a21 * b12 + a22 * b22 + a23 * b32;
                pDataDestination[9] = a21 * b13 + a22 * b23 + a23 * b33;
                pDataDestination[13] = pData[13];
                pDataDestination[2] = a31 * b11 + a32 * b21 + a33 * b31;
                pDataDestination[6] = a31 * b12 + a32 * b22 + a33 * b32;
                pDataDestination[10] = a31 * b13 + a32 * b23 + a33 * b33;
                pDataDestination[14] = pData[14];
                pDataDestination[3] = pData[3];
                pDataDestination[7] = pData[7];
                pDataDestination[11] = pData[11];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.rotateLeft = function (fAngle, v3fAxis, m4fDestination) {
                var pData = this.data;
                var x = v3fAxis.x, y = v3fAxis.y, z = v3fAxis.z;
                var fLength = Math.sqrt(x * x + y * y + z * z);
                if(fLength === 0.0) {
                    akra.logger.setSourceLocation("Mat4.ts", 938);
                    akra.logger.assert(false, "попытка вращения вокруг оси нулевой длины. Угол " + fAngle + ". Ось " + v3fAxis.toString());
                    ; ;
                    if(akra.isDef(m4fDestination)) {
                        m4fDestination.set(this);
                    } else {
                        m4fDestination = this;
                    }
                    return m4fDestination;
                }
                var fInvLength = 1.0 / fLength;
                x *= fInvLength;
                y *= fInvLength;
                z *= fInvLength;
                var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
                var fSin = math.sin(fAngle);
                var fCos = math.cos(fAngle);
                var fTmp = 1.0 - fCos;
                //build Rotation matrix
                                var b11 = fCos + fTmp * x * x, b12 = fTmp * x * y - fSin * z, b13 = fTmp * x * z + fSin * y;
                var b21 = fTmp * y * z + fSin * z, b22 = fCos + fTmp * y * y, b23 = fTmp * y * z - fSin * x;
                var b31 = fTmp * z * x - fSin * y, b32 = fTmp * z * y + fSin * x, b33 = fCos + fTmp * z * z;
                if(!akra.isDef(m4fDestination)) {
                    pData[0] = b11 * a11 + b12 * a21 + b13 * a31;
                    pData[4] = b11 * a12 + b12 * a22 + b13 * a32;
                    pData[8] = b11 * a13 + b12 * a23 + b13 * a33;
                    pData[12] = b11 * a14 + b12 * a24 + b13 * a34;
                    pData[1] = b21 * a11 + b22 * a21 + b23 * a31;
                    pData[5] = b21 * a12 + b22 * a22 + b23 * a32;
                    pData[9] = b21 * a13 + b22 * a23 + b23 * a33;
                    pData[13] = b21 * a14 + b22 * a24 + b23 * a34;
                    pData[2] = b31 * a11 + b32 * a21 + b33 * a31;
                    pData[6] = b31 * a12 + b32 * a22 + b33 * a32;
                    pData[10] = b31 * a13 + b32 * a23 + b33 * a33;
                    pData[14] = b31 * a14 + b32 * a24 + b33 * a34;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = b11 * a11 + b12 * a21 + b13 * a31;
                pDataDestination[4] = b11 * a12 + b12 * a22 + b13 * a32;
                pDataDestination[8] = b11 * a13 + b12 * a23 + b13 * a33;
                pDataDestination[12] = b11 * a14 + b12 * a24 + b13 * a34;
                pDataDestination[1] = b21 * a11 + b22 * a21 + b23 * a31;
                pDataDestination[5] = b21 * a12 + b22 * a22 + b23 * a32;
                pDataDestination[9] = b21 * a13 + b22 * a23 + b23 * a33;
                pDataDestination[13] = b21 * a14 + b22 * a24 + b23 * a34;
                pDataDestination[2] = b31 * a11 + b32 * a21 + b33 * a31;
                pDataDestination[6] = b31 * a12 + b32 * a22 + b33 * a32;
                pDataDestination[10] = b31 * a13 + b32 * a23 + b33 * a33;
                pDataDestination[14] = b31 * a14 + b32 * a24 + b33 * a34;
                pDataDestination[3] = pData[3];
                pDataDestination[7] = pData[7];
                pDataDestination[11] = pData[11];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.setTranslation = /**@inline*/ function (v3fTranslation) {
                var pData = this.data;
                pData[12] = v3fTranslation.x;
                pData[13] = v3fTranslation.y;
                pData[14] = v3fTranslation.z;
                return this;
            };
            Mat4.prototype.getTranslation = /**@inline*/ function (v3fTranslation) {
                if(!akra.isDef(v3fTranslation)) {
                    v3fTranslation = new math.Vec3();
                }
                var pData = this.data;
                v3fTranslation.x = pData[12];
                v3fTranslation.y = pData[13];
                v3fTranslation.z = pData[14];
                return v3fTranslation;
            };
            Mat4.prototype.translateRight = function (v3fTranslation, m4fDestination) {
                var pData = this.data;
                var x = v3fTranslation.x, y = v3fTranslation.y, z = v3fTranslation.z;
                if(!akra.isDef(m4fDestination)) {
                    pData[12] = pData[0] * x + pData[4] * y + pData[8] * z + pData[12];
                    pData[13] = pData[1] * x + pData[5] * y + pData[9] * z + pData[13];
                    pData[14] = pData[2] * x + pData[6] * y + pData[10] * z + pData[14];
                    pData[15] = pData[3] * x + pData[7] * y + pData[11] * z + pData[15];
                    //строго говоря последнюю строчку умножать не обязательно, так как она должна быть -> 0 0 0 1
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                //кешируем матрицу вращений
                                var a11 = pData[0], a12 = pData[4], a13 = pData[8];
                var a21 = pData[0], a22 = pData[5], a23 = pData[9];
                var a31 = pData[0], a32 = pData[6], a33 = pData[10];
                var a41 = pData[0], a42 = pData[7], a43 = pData[11];
                pDataDestination[0] = a11;
                pDataDestination[4] = a12;
                pDataDestination[8] = a13;
                pDataDestination[12] = a11 * x + a12 * y + a13 * z + pData[12];
                pDataDestination[1] = a21;
                pDataDestination[5] = a22;
                pDataDestination[9] = a23;
                pDataDestination[13] = a21 * x + a22 * y + a23 * z + pData[13];
                pDataDestination[2] = a31;
                pDataDestination[6] = a32;
                pDataDestination[10] = a33;
                pDataDestination[14] = a31 * x + a32 * y + a33 * z + pData[14];
                pDataDestination[3] = a41;
                pDataDestination[7] = a42;
                pDataDestination[11] = a43;
                pDataDestination[15] = a41 * x + a42 * y + a43 * z + pData[15];
                return m4fDestination;
            };
            Mat4.prototype.translateLeft = function (v3fTranslation, m4fDestination) {
                var pData = this.data;
                var x = v3fTranslation.x, y = v3fTranslation.y, z = v3fTranslation.z;
                if(!akra.isDef(m4fDestination)) {
                    pData[12] = x + pData[12];
                    pData[13] = y + pData[13];
                    pData[14] = z + pData[14];
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[4];
                pDataDestination[8] = pData[8];
                pDataDestination[12] = x + pData[12];
                pDataDestination[1] = pData[1];
                pDataDestination[5] = pData[5];
                pDataDestination[9] = pData[9];
                pDataDestination[13] = y + pData[13];
                pDataDestination[2] = pData[2];
                pDataDestination[6] = pData[6];
                pDataDestination[10] = pData[10];
                pDataDestination[14] = z + pData[14];
                pDataDestination[3] = pData[3];
                pDataDestination[7] = pData[7];
                pDataDestination[11] = pData[11];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.scaleRight = function (v3fScale, m4fDestination) {
                var pData = this.data;
                var x = v3fScale.x, y = v3fScale.y, z = v3fScale.z;
                if(!akra.isDef(m4fDestination)) {
                    pData[0] *= x;
                    pData[4] *= y;
                    pData[8] *= z;
                    pData[1] *= x;
                    pData[5] *= y;
                    pData[9] *= z;
                    pData[2] *= x;
                    pData[6] *= y;
                    pData[10] *= z;
                    //скейлить эти компоненты необязательно, так как там должны лежать нули
                    pData[3] *= x;
                    pData[7] *= y;
                    pData[11] *= z;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0] * x;
                pDataDestination[4] = pData[4] * y;
                pDataDestination[8] = pData[8] * z;
                pDataDestination[12] = pData[12];
                pDataDestination[1] = pData[1] * x;
                pDataDestination[5] = pData[5] * y;
                pDataDestination[9] = pData[9] * z;
                pDataDestination[13] = pData[13];
                pDataDestination[2] = pData[2] * x;
                pDataDestination[6] = pData[6] * y;
                pDataDestination[10] = pData[10] * z;
                pDataDestination[14] = pData[14];
                //скейлить эти компоненты необязательно, так как там должны лежать нули
                pDataDestination[3] = pData[3] * x;
                pDataDestination[7] = pData[7] * y;
                pDataDestination[11] = pData[11] * z;
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.scaleLeft = function (v3fScale, m4fDestination) {
                var pData = this.data;
                var x = v3fScale.x, y = v3fScale.y, z = v3fScale.z;
                if(!akra.isDef(m4fDestination)) {
                    pData[0] *= x;
                    pData[4] *= x;
                    pData[8] *= x;
                    pData[12] *= x;
                    pData[1] *= y;
                    pData[5] *= y;
                    pData[9] *= y;
                    pData[13] *= y;
                    pData[2] *= z;
                    pData[6] *= z;
                    pData[10] *= z;
                    pData[14] *= z;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0] * x;
                pDataDestination[4] = pData[4] * x;
                pDataDestination[8] = pData[8] * x;
                pDataDestination[12] = pData[12] * x;
                pDataDestination[1] = pData[1] * y;
                pDataDestination[5] = pData[5] * y;
                pDataDestination[9] = pData[9] * y;
                pDataDestination[13] = pData[13] * y;
                pDataDestination[2] = pData[2] * z;
                pDataDestination[6] = pData[6] * z;
                pDataDestination[10] = pData[10] * z;
                pDataDestination[14] = pData[14] * z;
                pDataDestination[3] = pData[3];
                pDataDestination[7] = pData[7];
                pDataDestination[11] = pData[11];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.decompose = /**@inline*/ function (q4fRotation, v3fScale, v3fTranslation) {
                this.getTranslation(v3fTranslation);
                var m3fRotScale = this.toMat3(math.mat3());
                return m3fRotScale.decompose(q4fRotation, v3fScale);
            };
            Mat4.prototype.row = function (iRow, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = new math.Vec4();
                }
                var pData = this.data;
                switch(iRow) {
                    case 1: {
                        v4fDestination.x = pData[0];
                        v4fDestination.y = pData[4];
                        v4fDestination.z = pData[8];
                        v4fDestination.w = pData[12];
                        break;

                    }
                    case 2: {
                        v4fDestination.x = pData[1];
                        v4fDestination.y = pData[5];
                        v4fDestination.z = pData[9];
                        v4fDestination.w = pData[13];
                        break;

                    }
                    case 3: {
                        v4fDestination.x = pData[2];
                        v4fDestination.y = pData[6];
                        v4fDestination.z = pData[10];
                        v4fDestination.w = pData[14];
                        break;

                    }
                    case 4: {
                        v4fDestination.x = pData[3];
                        v4fDestination.y = pData[7];
                        v4fDestination.z = pData[11];
                        v4fDestination.w = pData[15];
                        break;

                    }
                }
                return v4fDestination;
            };
            Mat4.prototype.column = function (iColumn, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = new math.Vec4();
                }
                var pData = this.data;
                switch(iColumn) {
                    case 1: {
                        v4fDestination.x = pData[0];
                        v4fDestination.y = pData[1];
                        v4fDestination.z = pData[2];
                        v4fDestination.w = pData[3];
                        break;

                    }
                    case 2: {
                        v4fDestination.x = pData[4];
                        v4fDestination.y = pData[5];
                        v4fDestination.z = pData[6];
                        v4fDestination.w = pData[7];
                        break;

                    }
                    case 3: {
                        v4fDestination.x = pData[8];
                        v4fDestination.y = pData[9];
                        v4fDestination.z = pData[10];
                        v4fDestination.w = pData[11];
                        break;

                    }
                    case 4: {
                        v4fDestination.x = pData[12];
                        v4fDestination.y = pData[13];
                        v4fDestination.z = pData[14];
                        v4fDestination.w = pData[15];
                        break;

                    }
                }
                return v4fDestination;
            };
            Mat4.prototype.unproj = function (v, v4fDestination) {
                if(!akra.isDef(v4fDestination)) {
                    v4fDestination = new math.Vec4();
                }
                var pData = this.data;
                var v3fScreen = v;
                var x, y, z;
                if(pData[15] === 1.0) {
                    //orthogonal projection case
                    z = (v3fScreen.z - pData[14]) / pData[10];
                    y = (v3fScreen.y - pData[13]) / pData[5];
                    x = (v3fScreen.x - pData[12]) / pData[0];
                } else {
                    //pData[__43] === -1
                    //frustum case
                    z = -pData[14] / (pData[10] + v3fScreen.z);
                    y = -(v3fScreen.y + pData[9]) * z / pData[5];
                    x = -(v3fScreen.x + pData[8]) * z / pData[0];
                }
                v4fDestination.x = x;
                v4fDestination.y = y;
                v4fDestination.z = z;
                v4fDestination.w = 1.0;
                return v4fDestination;
            };
            Mat4.fromYawPitchRoll = function fromYawPitchRoll(fYaw, fPitch, fRoll, m4fDestination) {
                if(arguments.length <= 2) {
                    //Vec3 + m4fDestination
                    var v3fVec = arguments[0];
                    fYaw = v3fVec.x;
                    fPitch = v3fVec.y;
                    fRoll = v3fVec.z;
                    m4fDestination = arguments[1];
                }
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new Mat4();
                }
                var pDataDestination = m4fDestination.data;
                var fSin1 = Math.sin(fYaw);
                var fSin2 = Math.sin(fPitch);
                var fSin3 = Math.sin(fRoll);
                var fCos1 = Math.cos(fYaw);
                var fCos2 = Math.cos(fPitch);
                var fCos3 = Math.cos(fRoll);
                pDataDestination[0] = fCos1 * fCos3 + fSin1 * fSin2 * fSin3;
                pDataDestination[4] = fCos3 * fSin1 * fSin2 - fCos1 * fSin3;
                pDataDestination[8] = fCos2 * fSin1;
                pDataDestination[12] = 0.0;
                pDataDestination[1] = fCos2 * fSin3;
                pDataDestination[5] = fCos2 * fCos3;
                pDataDestination[9] = -fSin2;
                pDataDestination[13] = 0.0;
                pDataDestination[2] = fCos1 * fSin2 * fSin3 - fCos3 * fSin1;
                pDataDestination[6] = fSin1 * fSin3 + fCos1 * fCos3 * fSin2;
                pDataDestination[10] = fCos1 * fCos2;
                pDataDestination[14] = 0.0;
                pDataDestination[3] = 0.0;
                pDataDestination[7] = 0.0;
                pDataDestination[11] = 0.0;
                pDataDestination[15] = 1.0;
                return m4fDestination;
            }
            Mat4.fromXYZ = function fromXYZ(fX, fY, fZ, m4fDestination) {
                if(arguments.length <= 2) {
                    //Vec3 + m4fDestination
                    var v3fVec = arguments[0];
                    return Mat4.fromYawPitchRoll(v3fVec.y, v3fVec.x, v3fVec.z, arguments[1]);
                } else {
                    //fX fY fZ m4fDestination
                    var fX = arguments[0];
                    var fY = arguments[1];
                    var fZ = arguments[2];
                    return Mat4.fromYawPitchRoll(fY, fX, fZ, arguments[3]);
                }
            }
            Mat4.frustum = function frustum(fLeft, fRight, fBottom, fTop, fNear, fFar, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new Mat4();
                }
                var pDataDestination = m4fDestination.data;
                var fRL = fRight - fLeft;
                var fTB = fTop - fBottom;
                var fFN = fFar - fNear;
                pDataDestination[0] = 2.0 * fNear / fRL;
                pDataDestination[4] = 0.0;
                pDataDestination[8] = (fRight + fLeft) / fRL;
                pDataDestination[12] = 0.0;
                pDataDestination[1] = 0.0;
                pDataDestination[5] = 2.0 * fNear / fTB;
                pDataDestination[9] = (fTop + fBottom) / fTB;
                pDataDestination[13] = 0.0;
                pDataDestination[2] = 0.0;
                pDataDestination[6] = 0.0;
                pDataDestination[10] = -(fFar + fNear) / fFN;
                pDataDestination[14] = -2.0 * fFar * fNear / fFN;
                pDataDestination[3] = 0.0;
                pDataDestination[7] = 0.0;
                pDataDestination[11] = -1.0;
                pDataDestination[15] = 0.0;
                return m4fDestination;
            }
            Mat4.perspective = /**@inline*/ function perspective(fFovy, fAspect, fNear, fFar, m4fDestination) {
                var fTop = fNear * math.tan(fFovy / 2.0);
                var fRight = fTop * fAspect;
                return Mat4.frustum(-fRight, fRight, -fTop, fTop, fNear, fFar, m4fDestination);
            }
            Mat4.orthogonalProjectionAsymmetric = function orthogonalProjectionAsymmetric(fLeft, fRight, fBottom, fTop, fNear, fFar, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new Mat4();
                }
                var pDataDestination = m4fDestination.data;
                var fRL = fRight - fLeft;
                var fTB = fTop - fBottom;
                var fFN = fFar - fNear;
                pDataDestination[0] = 2.0 / fRL;
                pDataDestination[4] = 0.0;
                pDataDestination[8] = 0.0;
                pDataDestination[12] = -(fRight + fLeft) / fRL;
                pDataDestination[1] = 0.0;
                pDataDestination[5] = 2.0 / fTB;
                pDataDestination[9] = 0.0;
                pDataDestination[13] = -(fTop + fBottom) / fTB;
                pDataDestination[2] = 0.0;
                pDataDestination[6] = 0.0;
                pDataDestination[10] = -2.0 / fFN;
                pDataDestination[14] = -(fFar + fNear) / fFN;
                pDataDestination[3] = 0.0;
                pDataDestination[7] = 0.0;
                pDataDestination[11] = 0.0;
                pDataDestination[15] = 1.0;
                return m4fDestination;
            }
            Mat4.orthogonalProjection = /**@inline*/ function orthogonalProjection(fWidth, fHeight, fNear, fFar, m4fDestination) {
                var fRight = fWidth / 2.0;
                var fTop = fHeight / 2.0;
                return Mat4.orthogonalProjectionAsymmetric(-fRight, fRight, -fTop, fTop, fNear, fFar, m4fDestination);
            }
            Mat4.lookAt = function lookAt(v3fEye, v3fCenter, v3fUp, m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new Mat4(1.0);
                }
                var fEyeX = v3fEye.x, fEyeY = v3fEye.y, fEyeZ = v3fEye.z;
                var fCenterX = v3fCenter.x, fCenterY = v3fCenter.y, fCenterZ = v3fCenter.z;
                var fUpX = v3fUp.x, fUpY = v3fUp.y, fUpZ = v3fUp.z;
                var fLength;
                var fInvLength;
                if(fEyeX === fCenterX && fEyeY === fCenterY && fEyeZ === fCenterZ) {
                    return m4fDestination;
                }
                var fXNewX, fXNewY, fXNewZ;
                var fYNewX, fYNewY, fYNewZ;
                var fZNewX, fZNewY, fZNewZ;
                //ось Z направлена на наблюдателя
                fZNewX = fEyeX - fCenterX;
                fZNewY = fEyeY - fCenterY;
                fZNewZ = fEyeZ - fCenterZ;
                fLength = math.sqrt(fZNewX * fZNewX + fZNewY * fZNewY + fZNewZ * fZNewZ);
                fInvLength = 1.0 / fLength;
                //новая ось Z
                fZNewX = fZNewX * fInvLength;
                fZNewY = fZNewY * fInvLength;
                fZNewZ = fZNewZ * fInvLength;
                //новая ось X
                fXNewX = fUpY * fZNewZ - fUpZ * fZNewY;
                fXNewY = fUpZ * fZNewX - fUpX * fZNewZ;
                fXNewZ = fUpX * fZNewY - fUpY * fZNewX;
                fLength = math.sqrt(fXNewX * fXNewX + fXNewY * fXNewY + fXNewZ * fXNewZ);
                if(fLength) {
                    fInvLength = 1.0 / fLength;
                    fXNewX = fXNewX * fInvLength;
                    fXNewY = fXNewY * fInvLength;
                    fXNewZ = fXNewZ * fInvLength;
                }
                //новая ось Y
                fYNewX = fZNewY * fXNewZ - fZNewZ * fXNewY;
                fYNewY = fZNewZ * fXNewX - fZNewX * fXNewZ;
                fYNewZ = fZNewX * fXNewY - fZNewY * fXNewX;
                //нормировать ненужно, так как было векторное умножение двух ортонормированных векторов
                //положение камеры в новых осях
                var fEyeNewX = fEyeX * fXNewX + fEyeY * fXNewY + fEyeZ * fXNewZ;
                var fEyeNewY = fEyeX * fYNewX + fEyeY * fYNewY + fEyeZ * fYNewZ;
                var fEyeNewZ = fEyeX * fZNewX + fEyeY * fZNewY + fEyeZ * fZNewZ;
                var pDataDestination = m4fDestination.data;
                //lookAt matrix === camera view matrix
                //почему новый базис записывается по строкам?
                //это сзязано с тем, что это получающаяся матрица -
                //это viewMatrix камеры, а на эту матрицу умножается при рендеринге, то есть
                //модель должна испытать преобразования противоположные тем, которые испытывает камера
                //то есть вращение в другую сторону(базис по строкам) и сдвиг в противоположную сторону
                pDataDestination[0] = fXNewX;
                pDataDestination[4] = fXNewY;
                pDataDestination[8] = fXNewZ;
                /*отъезжаем в позицию камеры*/
                pDataDestination[12] = -fEyeNewX;
                pDataDestination[1] = fYNewX;
                pDataDestination[5] = fYNewY;
                pDataDestination[9] = fYNewZ;
                /*отъезжаем в позицию камеры*/
                pDataDestination[13] = -fEyeNewY;
                pDataDestination[2] = fZNewX;
                pDataDestination[6] = fZNewY;
                pDataDestination[10] = fZNewZ;
                /*отъезжаем в позицию камеры*/
                pDataDestination[14] = -fEyeNewZ;
                pDataDestination[3] = 0.0;
                pDataDestination[7] = 0.0;
                pDataDestination[11] = 0.0;
                pDataDestination[15] = 1.0;
                return m4fDestination;
            }
            Object.defineProperty(Mat4, "stackCeil", {
                get: function () {
                    Mat4.stackPosition = Mat4.stackPosition === Mat4.stackSize - 1 ? 0 : Mat4.stackPosition;
                    return Mat4.stack[Mat4.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Mat4.stackSize = 100;
            Mat4.stackPosition = 0;
            Mat4.stack = (function () {
                var pStack = new Array(Mat4.stackSize);
                for(var i = 0; i < Mat4.stackSize; i++) {
                    pStack[i] = new Mat4();
                }
                return pStack;
            })();
            return Mat4;
        })();
        math.Mat4 = Mat4;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
        var Quat4 = (function () {
            function Quat4(fX, fY, fZ, fW) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1: {
                        this.set(arguments[0]);
                        break;

                    }
                    case 2: {
                        this.set(arguments[0], arguments[1]);
                        break;

                    }
                    case 4: {
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;

                    }
                    default: {
                        this.x = this.y = this.z = 0.0;
                        this.w = 1.0;
                        break;

                    }
                }
            }
            Quat4.prototype.set = function (fX, fY, fZ, fW) {
                var nArgumentsLength = arguments.length;
                if(nArgumentsLength === 0) {
                    this.x = this.y = this.z = 0.0;
                    this.w = 1.0;
                }
                if(nArgumentsLength === 1) {
                    if(arguments[0] instanceof Quat4) {
                        var q4fQuat = arguments[0];
                        this.x = q4fQuat.x;
                        this.y = q4fQuat.y;
                        this.z = q4fQuat.z;
                        this.w = q4fQuat.w;
                    } else {
                        //Array
                        var pElements = arguments[0];
                        this.x = pElements[0];
                        this.y = pElements[1];
                        this.z = pElements[2];
                        this.w = pElements[3];
                    }
                } else {
                    if(nArgumentsLength === 2) {
                        //float float
                        //vec3 float
                        if(akra.isFloat(arguments[0])) {
                            //float float
                            var fValue = arguments[0];
                            this.x = fValue;
                            this.y = fValue;
                            this.z = fValue;
                            this.w = arguments[1];
                        } else {
                            //vec3 float
                            var v3fValue = arguments[0];
                            this.x = v3fValue.x;
                            this.y = v3fValue.y;
                            this.z = v3fValue.z;
                            this.w = arguments[1];
                        }
                    } else {
                        if(nArgumentsLength === 4) {
                            this.x = arguments[0];
                            this.y = arguments[1];
                            this.z = arguments[2];
                            this.w = arguments[3];
                        }
                    }
                }
                return this;
            };
            Quat4.prototype.multiply = function (q4fQuat, q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = this;
                }
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                q4fDestination.x = x1 * w2 + x2 * w1 + y1 * z2 - z1 * y2;
                q4fDestination.y = y1 * w2 + y2 * w1 + z1 * x2 - x1 * z2;
                q4fDestination.z = z1 * w2 + z2 * w1 + x1 * y2 - y1 * x2;
                q4fDestination.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;
                return q4fDestination;
            };
            Quat4.prototype.multiplyVec3 = function (v3fVec, v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = v3fVec;
                }
                var q4fVec = math.quat4(v3fVec, 0);
                var qInverse = this.inverse(math.quat4());
                var qResult = this.multiply(q4fVec.multiply(qInverse), math.quat4());
                v3fDestination.x = qResult.x;
                v3fDestination.y = qResult.y;
                v3fDestination.z = qResult.z;
                return v3fDestination;
            };
            Quat4.prototype.conjugate = function (q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    this.x = -this.x;
                    this.y = -this.y;
                    this.z = -this.z;
                    return this;
                }
                q4fDestination.x = -this.x;
                q4fDestination.y = -this.y;
                q4fDestination.z = -this.z;
                q4fDestination.w = this.w;
                return q4fDestination;
            };
            Quat4.prototype.inverse = function (q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fSqLength = x * x + y * y + z * z + w * w;
                if(fSqLength === 0.0) {
                    q4fDestination.x = 0.0;
                    q4fDestination.y = 0.0;
                    q4fDestination.z = 0.0;
                    q4fDestination.w = 0.0;
                } else {
                    var fInvSqLength = 1.0 / fSqLength;
                    q4fDestination.x = -x * fInvSqLength;
                    q4fDestination.y = -y * fInvSqLength;
                    q4fDestination.z = -z * fInvSqLength;
                    q4fDestination.w = w * fInvSqLength;
                }
                return q4fDestination;
            };
            Quat4.prototype.length = /**@inline*/ function () {
                var x = this.x, y = this.y, z = this.z, w = this.w;
                return math.sqrt(x * x + y * y + z * z + w * w);
            };
            Quat4.prototype.normalize = function (q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fLength = math.sqrt(x * x + y * y + z * z + w * w);
                if(fLength === 0.0) {
                    q4fDestination.x = 0.0;
                    q4fDestination.y = 0.0;
                    q4fDestination.z = 0.0;
                    q4fDestination.w = 0.0;
                } else {
                    var fInvLength = 1 / fLength;
                    q4fDestination.x = x * fInvLength;
                    q4fDestination.y = y * fInvLength;
                    q4fDestination.z = z * fInvLength;
                    q4fDestination.w = w * fInvLength;
                }
                return q4fDestination;
            };
            Quat4.prototype.calculateW = function (q4fDestination) {
                var x = this.x, y = this.y, z = this.z;
                if(!akra.isDef(q4fDestination)) {
                    this.w = math.sqrt(1.0 - x * x - y * y - z * z);
                    return this;
                }
                q4fDestination.x = x;
                q4fDestination.y = y;
                q4fDestination.z = z;
                q4fDestination.w = math.sqrt(1.0 - x * x - y * y - z * z);
                return q4fDestination;
            };
            Quat4.prototype.isEqual = function (q4fQuat, fEps, asMatrix) {
                if (typeof fEps === "undefined") { fEps = 0.0; }
                if (typeof asMatrix === "undefined") { asMatrix = false; }
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                var fLength1 = math.sqrt(x1 * x1 + y1 * y1 + z1 * z1 + w1 * w1);
                var fLength2 = math.sqrt(x2 * x2 + y2 * y2 + z2 * z2 + w2 * w2);
                if(math.abs(fLength2 - fLength2) > fEps) {
                    return false;
                }
                var cosHalfTheta = (x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2) / fLength1 / fLength2;
                if(asMatrix) {
                    cosHalfTheta = math.abs(cosHalfTheta);
                }
                if(1.0 - cosHalfTheta > fEps) {
                    return false;
                }
                return true;
            };
            Quat4.prototype.getYaw = function () {
                var fYaw;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fx2 = x * 2.0;
                var fy2 = y * 2.0;
                if(math.abs(x) == math.abs(w)) {
                    //вырожденный случай обрабатывается отдельно
                    //
                    var wTemp = w * math.sqrt(2.0);
                    //cos(Yaw/2)*cos(Roll/2) + sin(Yaw/2)*sin(Roll/2) = cos((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //cos(Yaw/2)*cos(Roll/2) - sin(Yaw/2)*sin(Roll/2) = cos((Yaw+Roll)/2); Roll = 0;
                    var yTemp = y * math.sqrt(2.0);
                    //sin(Yaw/2)*cos(Roll/2) - cos(Yaw/2)*sin(Roll/2) = sin((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //sin(Yaw/2)*cos(Roll/2) + cos(Yaw/2)*sin(Roll/2) = sin((Yaw+Roll)/2); Roll = 0;
                    fYaw = math.atan2(yTemp, wTemp) * 2.0;
                    //fRoll = 0;
                    //убираем дополнительный оборот
                    var pi = math.PI;
                    if(fYaw > pi) {
                        fYaw -= pi;
                        //fRoll = (x == w) ? -pi : pi;
                                            } else {
                        if(fYaw < -pi) {
                            fYaw += pi;
                            //fRoll = (x == w) ? pi : -pi;
                                                    }
                    }
                } else {
                    //Math.atan2(sin(Yaw)*cos(Pitch),cos(Yaw)*cos(Pitch));
                    fYaw = math.atan2(fx2 * z + fy2 * w, 1.0 - (fx2 * x + fy2 * y));
                }
                return fYaw;
            };
            Quat4.prototype.getPitch = function () {
                var fPitch;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fx2 = x * 2.0;
                var fy2 = y * 2.0;
                /*в очень редких случаях из-за ошибок округления получается результат > 1*/
                var fSinPitch = math.clamp(fx2 * w - fy2 * z, -1.0, 1.0);
                fPitch = math.asin(fSinPitch);
                return fPitch;
            };
            Quat4.prototype.getRoll = function () {
                var fRoll;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fx2 = x * 2.0;
                var fz2 = z * 2.0;
                if(math.abs(x) == math.abs(w)) {
                    //вырожденный случай обрабатывается отдельно
                    //
                    var wTemp = w * math.sqrt(2.0);
                    //cos(Yaw/2)*cos(Roll/2) + sin(Yaw/2)*sin(Roll/2) = cos((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //cos(Yaw/2)*cos(Roll/2) - sin(Yaw/2)*sin(Roll/2) = cos((Yaw+Roll)/2); Roll = 0;
                    var yTemp = y * math.sqrt(2.0);
                    //sin(Yaw/2)*cos(Roll/2) - cos(Yaw/2)*sin(Roll/2) = sin((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //sin(Yaw/2)*cos(Roll/2) + cos(Yaw/2)*sin(Roll/2) = sin((Yaw+Roll)/2); Roll = 0;
                    var fYaw = math.atan2(yTemp, wTemp) * 2.0;
                    fRoll = 0.0;
                    //убираем дополнительный оборот
                    var pi = math.PI;
                    if(fYaw > pi) {
                        //fYaw -= pi;
                        fRoll = (x == w) ? -pi : pi;
                    } else {
                        if(fYaw < -pi) {
                            //fYaw += pi;
                            fRoll = (x == w) ? pi : -pi;
                        }
                    }
                } else {
                    //Math.atan2(cos(Pitch) * sin(Roll),cos(Pitch)*cos(Roll));
                    fRoll = math.atan2(fx2 * y + fz2 * w, 1.0 - (fx2 * x + fz2 * z));
                }
                return fRoll;
            };
            Quat4.prototype.toYawPitchRoll = function (v3fDestination) {
                if(!akra.isDef(v3fDestination)) {
                    v3fDestination = new math.Vec3();
                }
                var fYaw, fPitch, fRoll;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fx2 = x * 2.0;
                var fy2 = y * 2.0;
                var fz2 = z * 2.0;
                var fw2 = w * 2.0;
                /*в очень редких случаях из-за ошибок округления получается результат > 1*/
                var fSinPitch = math.clamp(fx2 * w - fy2 * z, -1.0, 1.0);
                fPitch = math.asin(fSinPitch);
                //не известен знак косинуса, как следствие это потребует дополнительной проверки.
                //как показала практика - это не на что не влияет, просто один и тот же кватернион можно получить двумя разными вращениями
                if(math.abs(x) == math.abs(w)) {
                    //вырожденный случай обрабатывается отдельно
                    //
                    var wTemp = w * math.sqrt(2.0);
                    //cos(Yaw/2)*cos(Roll/2) + sin(Yaw/2)*sin(Roll/2) = cos((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //cos(Yaw/2)*cos(Roll/2) - sin(Yaw/2)*sin(Roll/2) = cos((Yaw+Roll)/2); Roll = 0;
                    var yTemp = y * math.sqrt(2.0);
                    //sin(Yaw/2)*cos(Roll/2) - cos(Yaw/2)*sin(Roll/2) = sin((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //sin(Yaw/2)*cos(Roll/2) + cos(Yaw/2)*sin(Roll/2) = sin((Yaw+Roll)/2); Roll = 0;
                    fYaw = math.atan2(yTemp, wTemp) * 2.0;
                    fRoll = 0.0;
                    //убираем дополнительный оборот
                    var pi = math.PI;
                    if(fYaw > pi) {
                        fYaw -= pi;
                        fRoll = (x == w) ? -pi : pi;
                    } else {
                        if(fYaw < -pi) {
                            fYaw += pi;
                            fRoll = (x == w) ? pi : -pi;
                        }
                    }
                } else {
                    //Math.atan2(sin(Yaw)*cos(Pitch),cos(Yaw)*cos(Pitch));
                    fYaw = math.atan2(fx2 * z + fy2 * w, 1.0 - (fx2 * x + fy2 * y));
                    //Math.atan2(cos(Pitch) * sin(Roll),cos(Pitch)*cos(Roll));
                    fRoll = math.atan2(fx2 * y + fz2 * w, 1.0 - (fx2 * x + fz2 * z));
                }
                v3fDestination.x = fYaw;
                v3fDestination.y = fPitch;
                v3fDestination.z = fRoll;
                return v3fDestination;
            };
            Quat4.prototype.toMat3 = function (m3fDestination) {
                if(!akra.isDef(m3fDestination)) {
                    m3fDestination = new math.Mat3();
                }
                var pDataDestination = m3fDestination.data;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                //потом необходимо ускорить
                pDataDestination[0] = 1.0 - 2.0 * (y * y + z * z);
                pDataDestination[3] = 2.0 * (x * y - z * w);
                pDataDestination[6] = 2.0 * (x * z + y * w);
                pDataDestination[1] = 2.0 * (x * y + z * w);
                pDataDestination[4] = 1.0 - 2.0 * (x * x + z * z);
                pDataDestination[7] = 2.0 * (y * z - x * w);
                pDataDestination[2] = 2.0 * (x * z - y * w);
                pDataDestination[5] = 2.0 * (y * z + x * w);
                pDataDestination[8] = 1.0 - 2.0 * (x * x + y * y);
                return m3fDestination;
            };
            Quat4.prototype.toMat4 = function (m4fDestination) {
                if(!akra.isDef(m4fDestination)) {
                    m4fDestination = new math.Mat4();
                }
                var pDataDestination = m4fDestination.data;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                //потом необходимо ускорить
                pDataDestination[0] = 1.0 - 2.0 * (y * y + z * z);
                pDataDestination[4] = 2.0 * (x * y - z * w);
                pDataDestination[8] = 2.0 * (x * z + y * w);
                pDataDestination[12] = 0.0;
                pDataDestination[1] = 2.0 * (x * y + z * w);
                pDataDestination[5] = 1.0 - 2.0 * (x * x + z * z);
                pDataDestination[9] = 2.0 * (y * z - x * w);
                pDataDestination[13] = 0.0;
                pDataDestination[2] = 2.0 * (x * z - y * w);
                pDataDestination[6] = 2.0 * (y * z + x * w);
                pDataDestination[10] = 1.0 - 2.0 * (x * x + y * y);
                pDataDestination[14] = 0.0;
                pDataDestination[3] = 0.0;
                pDataDestination[7] = 0.0;
                pDataDestination[11] = 0.0;
                pDataDestination[15] = 1.0;
                return m4fDestination;
            };
            Quat4.prototype.toString = /**@inline*/ function () {
                return "[x: " + this.x + ", y: " + this.y + ", z: " + this.z + ", w: " + this.w + "]";
            };
            Quat4.prototype.mix = function (q4fQuat, fA, q4fDestination, bShortestPath) {
                if (typeof bShortestPath === "undefined") { bShortestPath = true; }
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = this;
                }
                fA = math.clamp(fA, 0, 1);
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                //скалярное произведение
                var fCos = x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2;
                if(fCos < 0.0 && bShortestPath) {
                    x2 = -x2;
                    y2 = -y2;
                    z2 = -z2;
                    w2 = -w2;
                }
                var k1 = 1.0 - fA;
                var k2 = fA;
                q4fDestination.x = x1 * k1 + x2 * k2;
                q4fDestination.y = y1 * k1 + y2 * k2;
                q4fDestination.z = z1 * k1 + z2 * k2;
                q4fDestination.w = w1 * k1 + w2 * k2;
                return q4fDestination;
            };
            Quat4.prototype.smix = function (q4fQuat, fA, q4fDestination, bShortestPath) {
                if (typeof bShortestPath === "undefined") { bShortestPath = true; }
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = this;
                }
                fA = math.clamp(fA, 0, 1);
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                //скалярное произведение
                var fCos = x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2;
                if(fCos < 0 && bShortestPath) {
                    fCos = -fCos;
                    x2 = -x2;
                    y2 = -y2;
                    z2 = -z2;
                    w2 = -w2;
                }
                var fEps = 0.001;
                if(math.abs(fCos) < 1.0 - fEps) {
                    var fSin = math.sqrt(1.0 - fCos * fCos);
                    var fInvSin = 1.0 / fSin;
                    var fAngle = math.atan2(fSin, fCos);
                    var k1 = math.sin((1.0 - fA) * fAngle) * fInvSin;
                    var k2 = math.sin(fA * fAngle) * fInvSin;
                    q4fDestination.x = x1 * k1 + x2 * k2;
                    q4fDestination.y = y1 * k1 + y2 * k2;
                    q4fDestination.z = z1 * k1 + z2 * k2;
                    q4fDestination.w = w1 * k1 + w2 * k2;
                } else {
                    //два кватерниона или очень близки (тогда можно делать линейную интерполяцию)
                    //или два кватениона диаметрально противоположны, тогда можно интерполировать любым способом
                    //позже надо будет реализовать какой-нибудь, а пока тоже линейная интерполяция
                    var k1 = 1 - fA;
                    var k2 = fA;
                    var x = x1 * k1 + x2 * k2;
                    var y = y1 * k1 + y2 * k2;
                    var z = z1 * k1 + z2 * k2;
                    var w = w1 * k1 + w2 * k2;
                    // и нормализуем так-как мы сошли со сферы
                    var fLength = math.sqrt(x * x + y * y + z * z + w * w);
                    var fInvLen = fLength ? 1 / fLength : 0;
                    q4fDestination.x = x * fInvLen;
                    q4fDestination.y = y * fInvLen;
                    q4fDestination.z = z * fInvLen;
                    q4fDestination.w = w * fInvLen;
                }
                return q4fDestination;
            };
            Quat4.fromForwardUp = function fromForwardUp(v3fForward, v3fUp, q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = new Quat4();
                }
                var fForwardX = v3fForward.x, fForwardY = v3fForward.y, fForwardZ = v3fForward.z;
                var fUpX = v3fUp.x, fUpY = v3fUp.y, fUpZ = v3fUp.z;
                var m3fTemp = math.mat3();
                var pTempData = m3fTemp.data;
                pTempData[0] = fUpY * fForwardZ - fUpZ * fForwardY;
                pTempData[3] = fUpX;
                pTempData[6] = fForwardX;
                pTempData[1] = fUpZ * fForwardX - fUpX * fForwardZ;
                pTempData[4] = fUpY;
                pTempData[7] = fForwardY;
                pTempData[2] = fUpX * fForwardY - fUpY * fForwardX;
                pTempData[5] = fUpZ;
                pTempData[8] = fForwardZ;
                return m3fTemp.toQuat4(q4fDestination);
            }
            Quat4.fromAxisAngle = function fromAxisAngle(v3fAxis, fAngle, q4fDestination) {
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = new Quat4();
                }
                var x = v3fAxis.x, y = v3fAxis.y, z = v3fAxis.z;
                var fLength = math.sqrt(x * x + y * y + z * z);
                if(fLength === 0.0) {
                    q4fDestination.x = q4fDestination.y = q4fDestination.z = 0;
                    q4fDestination.w = 1;
                    return q4fDestination;
                }
                var fInvLength = 1 / fLength;
                x *= fInvLength;
                y *= fInvLength;
                z *= fInvLength;
                var fSin = math.sin(fAngle / 2);
                var fCos = math.cos(fAngle / 2);
                q4fDestination.x = x * fSin;
                q4fDestination.y = y * fSin;
                q4fDestination.z = z * fSin;
                q4fDestination.w = fCos;
                return q4fDestination;
            }
            Quat4.fromYawPitchRoll = function fromYawPitchRoll(fYaw, fPitch, fRoll, q4fDestination) {
                if(arguments.length <= 2) {
                    var v3fVec = arguments[0];
                    fYaw = v3fVec.x;
                    fPitch = v3fVec.y;
                    fRoll = v3fVec.z;
                    q4fDestination = arguments[1];
                }
                if(!akra.isDef(q4fDestination)) {
                    q4fDestination = new Quat4();
                }
                var fHalfYaw = fYaw * 0.5;
                var fHalfPitch = fPitch * 0.5;
                var fHalfRoll = fRoll * 0.5;
                var fCos1 = math.cos(fHalfYaw), fSin1 = math.sin(fHalfYaw);
                var fCos2 = math.cos(fHalfPitch), fSin2 = math.sin(fHalfPitch);
                var fCos3 = math.cos(fHalfRoll), fSin3 = math.sin(fHalfRoll);
                q4fDestination.x = fCos1 * fSin2 * fCos3 + fSin1 * fCos2 * fSin3;
                q4fDestination.y = fSin1 * fCos2 * fCos3 - fCos1 * fSin2 * fSin3;
                q4fDestination.z = fCos1 * fCos2 * fSin3 - fSin1 * fSin2 * fCos3;
                q4fDestination.w = fCos1 * fCos2 * fCos3 + fSin1 * fSin2 * fSin3;
                return q4fDestination;
            }
            Quat4.fromXYZ = function fromXYZ(fX, fY, fZ, q4fDestination) {
                if(arguments.length <= 2) {
                    //Vec3 + m4fDestination
                    var v3fVec = arguments[0];
                    return Quat4.fromYawPitchRoll(v3fVec.y, v3fVec.x, v3fVec.z, arguments[1]);
                } else {
                    //fX fY fZ m4fDestination
                    var fX = arguments[0];
                    var fY = arguments[1];
                    var fZ = arguments[2];
                    return Quat4.fromYawPitchRoll(fY, fX, fZ, arguments[3]);
                }
            }
            Object.defineProperty(Quat4, "stackCeil", {
                get: function () {
                    Quat4.stackPosition = Quat4.stackPosition === Quat4.stackSize - 1 ? 0 : Quat4.stackPosition;
                    return Quat4.stack[Quat4.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Quat4.stackSize = 100;
            Quat4.stackPosition = 0;
            Quat4.stack = (function () {
                var pStack = new Array(Quat4.stackSize);
                for(var i = 0; i < Quat4.stackSize; i++) {
                    pStack[i] = new Quat4();
                }
                return pStack;
            })();
            return Quat4;
        })();
        math.Quat4 = Quat4;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
        //
        // BASIC MATH AND UNIT CONVERSION CONSTANTS
        //
        math.E = Math.E;
        math.LN2 = Math.LN2;
        math.LOG2E = Math.LOG2E;
        math.LOG10E = Math.LOG10E;
        math.PI = Math.PI;
        math.SQRT1_2 = Math.SQRT1_2;
        math.SQRT2 = Math.SQRT2;
        math.LN10 = Math.LN10;
        math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
        math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
        math.FLOAT_PRECISION = (3.4e-8);
        math.TWO_PI = (2.0 * math.PI);
        math.HALF_PI = (math.PI / 2.0);
        math.QUARTER_PI = (math.PI / 4.0);
        math.EIGHTH_PI = (math.PI / 8.0);
        math.PI_SQUARED = (9.869604401089358);
        math.PI_INVERSE = (0.3183098861837907);
        math.PI_OVER_180 = (math.PI / 180);
        math.PI_DIV_180 = (180 / math.PI);
        math.NATURAL_LOGARITHM_BASE = (2.718281828459045);
        math.EULERS_CONSTANT = (0.5772156649015329);
        math.SQUARE_ROOT_2 = (1.4142135623730951);
        math.INVERSE_ROOT_2 = (0.7071067811865476);
        math.SQUARE_ROOT_3 = (1.7320508075688772);
        math.SQUARE_ROOT_5 = (2.23606797749979);
        math.SQUARE_ROOT_10 = (3.1622776601683795);
        math.CUBE_ROOT_2 = (1.2599210498948732);
        math.CUBE_ROOT_3 = (1.4422495703074083);
        math.FOURTH_ROOT_2 = (1.189207115002721);
        math.NATURAL_LOG_2 = (0.6931471805599453);
        math.NATURAL_LOG_3 = (1.0986122886681098);
        math.NATURAL_LOG_10 = (2.302585092994046);
        math.NATURAL_LOG_PI = (1.1447298858494002);
        math.BASE_TEN_LOG_PI = (0.49714987269413385);
        math.NATURAL_LOGARITHM_BASE_INVERSE = (0.36787944117144233);
        math.NATURAL_LOGARITHM_BASE_SQUARED = (7.38905609893065);
        math.GOLDEN_RATIO = ((math.SQUARE_ROOT_5 + 1.0) / 2.0);
        math.DEGREE_RATIO = (math.PI_DIV_180);
        math.RADIAN_RATIO = (math.PI_OVER_180);
        math.GRAVITY_CONSTANT = 9.81;
        //
        // MATH AND UNIT CONVERSION FUNCTION PROTOTYPES
        //
        math.abs = Math.abs;
        math.acos = Math.acos;
        math.asin = Math.asin;
        math.atan = Math.atan;
        math.atan2 = Math.atan2;
        math.exp = Math.exp;
        math.min = Math.min;
        math.random = Math.random;
        math.sqrt = Math.sqrt;
        math.log = Math.log;
        math.round = Math.round;
        math.floor = Math.floor;
        math.ceil = Math.ceil;
        math.sin = Math.sin;
        math.cos = Math.cos;
        math.tan = Math.tan;
        math.pow = Math.pow;
        math.max = Math.max;
        /*
        -----------------------------------------------------------------
        
        Floating Point Macros
        
        -----------------------------------------------------------------
        */
        // reinterpret a float as an int32
        /** @inline */
        math.fpBits = function (f) {
            return math.floor(f);
        };
        // reinterpret an int32 as a float
        /** @inline */
        math.intBits = function (i) {
            return i;
        };
        // return 0 or -1 based on the sign of the float
        /** @inline */
        math.fpSign = function (f) {
            return (f >> 31);
        };
        // extract the 8 bits of exponent as a signed integer
        // by masking out this bits, shifting down by 23,
        // and subtracting the bias value of 127
        /** @inline */
        math.fpExponent = function (f) {
            return (((math.fpBits(f) & 2147483647) >> 23) - 127);
        };
        // return 0 or -1 based on the sign of the exponent
        /** @inline */
        math.fpExponentSign = function (f) {
            return (math.fpExponent(f) >> 31);
        };
        // get the 23 bits of mantissa without the implied bit
        /** @inline */
        math.fpPureMantissa = function (f) {
            return (math.fpBits(f) & 8388607);
        };
        // get the 23 bits of mantissa with the implied bit replaced
        /** @inline */
        math.fpMantissa = function (f) {
            return (math.fpPureMantissa(f) | (1 << 23));
        };
        math.fpOneBits = 1065353216;
        // flipSign is a helper Macro to
        // invert the sign of i if flip equals -1,
        // if flip equals 0, it does nothing
        //export var flipSign = (i, flip) ((i^ flip) - flip)
        /** @inline */
        math.flipSign = function (i, flip) {
            return ((flip == -1) ? -i : i);
        };
        /**
        * Абсолютное значение числа
        * @inline
        */
        math.absoluteValue = math.abs;
        /**
        * Pow
        * @inline
        */
        math.raiseToPower = math.pow;
        /**
        * Число положительно?
        * @inline
        */
        math.isPositive = function (a) {
            return (a >= 0);
        };
        /**
        * Число отрицательно?
        * @inline
        */
        math.isNegative = function (a) {
            return (a < 0);
        };
        /**
        * Число одного знака?
        * @inline
        */
        math.sameSigns = function (a, b) {
            return (math.isNegative(a) == math.isNegative(b));
        };
        /**
        * Копировать знак
        * @inline
        */
        math.copySign = function (a, b) {
            return (math.isNegative(b) ? -math.absoluteValue(a) : math.absoluteValue(a));
        };
        /**
        * Растояние между а и b меньше epsilon?
        * @inline
        */
        math.deltaRangeTest = function (a, b, epsilon) {
            if (typeof epsilon === "undefined") { epsilon = 1e-7; }
            return ((math.absoluteValue(a - b) < epsilon) ? true : false);
        };
        /**
        * Ограничивает value интервалом [low,high]
        * @inline
        */
        math.clamp = function (value, low, high) {
            return math.max(low, math.min(value, high));
        };
        /**
        * Ограничивает value интервалом [0,+Infinity]
        * @inline
        */
        math.clampPositive = function (value) {
            return (value < 0 ? 0 : value);
        };
        /**
        * Ограничивает value интервалом [-Infinity,0]
        * @inline
        */
        math.clampNegative = function (value) {
            return (value > 0 ? 0 : value);
        };
        /**
        * Ограничивает value интервалом [-1,1]
        * @inline
        */
        math.clampUnitSize = function (value) {
            return math.clamp(value, -1, 1);
        };
        /**
        * Номер с права начиная от нуля, самого левого установленного бита
        * @inline
        */
        math.highestBitSet = function (value) {
            return value == 0 ? (null) : (value < 0 ? 31 : ((math.log(value) / math.LN2) << 0));
        };
        /**
        * Номер с права начиная от нуля, самого правого установленного бита
        * @inline
        */
        math.lowestBitSet = function (value) {
            var temp;
            if(value == 0) {
                return null;
            }
            for(temp = 0; temp <= 31; temp++) {
                if(value & (1 << temp)) {
                    return temp;
                }
            }
            return null;
        };
        /**
        * Является ли число степенью двойки
        * @inline
        */
        math.isPowerOfTwo = function (value) {
            return (value > 0 && math.highestBitSet(value) == math.lowestBitSet(value));
        };
        /**
        * Округление до числа наиболее близкого к степени двойки
        * @inline
        */
        math.nearestPowerOfTwo = function (value) {
            if(value <= 1) {
                return 1;
            }
            var highestBit = math.highestBitSet(value);
            var roundingTest = value & (1 << (highestBit - 1));
            if(roundingTest != 0) {
                ++highestBit;
            }
            return 1 << highestBit;
        };
        /**
        * Округление до следующего числа являющегося к степени двойки
        * @inline
        */
        math.ceilingPowerOfTwo = function (value) {
            if(value <= 1) {
                return 1;
            }
            var highestBit = math.highestBitSet(value);
            var mask = value & ((1 << highestBit) - 1);
            highestBit += mask && 1;
            return 1 << highestBit;
        };
        /**
        * Округление до предыдущего числа являющегося к степени двойки
        * @inline
        */
        math.floorPowerOfTwo = function (value) {
            if(value <= 1) {
                return 1;
            }
            var highestBit = math.highestBitSet(value);
            return 1 << highestBit;
        };
        /**
        * Деление по модулю
        * @inline
        */
        math.modulus = function (e, divisor) {
            return (e - math.floor(e / divisor) * divisor);
        };
        /**
        *
        * @inline
        */
        math.mod = math.modulus;
        /**
        * Вырвнивание числа на alignment вверх
        * @inline
        */
        math.alignUp = function (value, alignment) {
            var iRemainder = math.modulus(value, alignment);
            if(iRemainder == 0) {
                return (value);
            }
            return (value + (alignment - iRemainder));
        };
        /**
        * Вырвнивание числа на alignment вниз
        * @inline
        */
        math.alignDown = function (value, alignment) {
            var remainder = math.modulus(value, alignment);
            if(remainder == 0) {
                return (value);
            }
            return (value - remainder);
        };
        /**
        * пнвертировать число
        * @inline
        */
        math.inverse = function (a) {
            return 1.0 / a;
        };
        /**
        * log base 2
        * @inline
        */
        math.log2 = function (f) {
            return math.log(f) / math.LN2;
        };
        /**
        * Округлени числа с определенной точностью, где округляется до значащих чисел как 1/(2^precision)
        * @inline
        */
        math.trimFloat = function (f, precision) {
            return f;
        };
        /**
        * Перевод дробного в целое с усеением
        * @inline
        */
        math.realToInt32_chop = function (a) {
            return math.round(a);
        };
        /**
        * Перевод дробного в целое до меньшего
        * @inline
        */
        math.realToInt32_floor = function (a) {
            return math.floor(a);
        };
        /**
        * Перевод дробного в целое до большего
        * @inline
        */
        math.realToInt32_ceil = function (a) {
            return math.ceil(a);
        };
        /**
        * Наибольший общий делитель
        * @inline
        */
        math.nod = function (n, m) {
            var p = n % m;
            while(p != 0) {
                n = m;
                m = p;
                p = n % m;
            }
            return m;
        };
        /**
        * Наименьшее общее кратное
        * @inline
        */
        math.nok = function (n, m) {
            return math.abs(n * m) / math.nod(n, m);
        };
        /**
        * Greatest common devider
        * @inline
        */
        math.gcd = math.nod;
        /**
        * Least common multiple
        * @inline
        */
        math.lcm = math.nok;
        // var pMat3Stack = new Array(100);
        // var iMat3StackIndex = 0;
        math.isRealEqual = function (a, b, tolerance) {
            if (typeof tolerance === "undefined") { tolerance = 1.19209e-7; }
            if(akra.math.abs(b - a) <= tolerance) {
                return true;
            } else {
                return false;
            }
        };
                                                function vec2(fValue1, fValue2) {
            var nArgumentsLength = arguments.length;
            var v2fVec = math.Vec2.stack[math.Vec2.stackPosition++];
            if(math.Vec2.stackPosition == math.Vec2.stackSize) {
                math.Vec2.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1: {
                    v2fVec.set(arguments[0]);
                    break;

                }
                case 2: {
                    v2fVec.set(arguments[0], arguments[1]);
                    break;

                }
                default: {
                    v2fVec.x = v2fVec.y = 0.0;
                    break;

                }
            }
            return v2fVec;
        }
        math.vec2 = vec2;
        ; ;
                                                                function vec3(fValue1, fValue2, fValue3) {
            var nArgumentsLength = arguments.length;
            var v3fVec = math.Vec3.stack[math.Vec3.stackPosition++];
            if(math.Vec3.stackPosition == math.Vec3.stackSize) {
                math.Vec3.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1: {
                    v3fVec.set(arguments[0]);
                    break;

                }
                case 2: {
                    v3fVec.set(arguments[0], arguments[1]);
                    break;

                }
                case 3: {
                    v3fVec.set(arguments[0], arguments[1], arguments[2]);
                    break;

                }
                default: {
                    v3fVec.x = v3fVec.y = v3fVec.z = 0.0;
                    break;

                }
            }
            return v3fVec;
        }
        math.vec3 = vec3;
        ; ;
                                                                                                function vec4(fValue1, fValue2, fValue3, fValue4) {
            var nArgumentsLength = arguments.length;
            var v4fVec = math.Vec4.stack[math.Vec4.stackPosition++];
            if(math.Vec4.stackPosition == math.Vec4.stackSize) {
                math.Vec4.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1: {
                    v4fVec.set(arguments[0]);
                    break;

                }
                case 2: {
                    v4fVec.set(arguments[0], arguments[1]);
                    break;

                }
                case 3: {
                    v4fVec.set(arguments[0], arguments[1], arguments[2]);
                    break;

                }
                case 4: {
                    v4fVec.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                    break;

                }
                default: {
                    v4fVec.x = v4fVec.y = v4fVec.z = v4fVec.w = 0.0;
                    break;

                }
            }
            return v4fVec;
        }
        math.vec4 = vec4;
        ; ;
                                                        function quat4(fX, fY, fZ, fW) {
            var nArgumentsLength = arguments.length;
            var q4fQuat = math.Quat4.stack[math.Quat4.stackPosition++];
            if(math.Quat4.stackPosition == math.Quat4.stackSize) {
                math.Quat4.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1: {
                    q4fQuat.set(arguments[0]);
                    break;

                }
                case 2: {
                    q4fQuat.set(arguments[0], arguments[1]);
                    break;

                }
                case 4: {
                    q4fQuat.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                    break;

                }
                default: {
                    q4fQuat.x = q4fQuat.y = q4fQuat.z = 0.0;
                    q4fQuat.w = 1.0;
                    break;

                }
            }
            return q4fQuat;
        }
        math.quat4 = quat4;
        ; ;
                                                                                        function mat3(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9) {
            var nArgumentsLength = arguments.length;
            var m3fMat = math.Mat3.stack[math.Mat3.stackPosition++];
            if(math.Mat3.stackPosition == math.Mat3.stackSize) {
                math.Mat3.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1: {
                    m3fMat.set(arguments[0]);
                    break;

                }
                case 3: {
                    m3fMat.set(arguments[0], arguments[1], arguments[2]);
                    break;

                }
                case 9: {
                    m3fMat.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
                    break;

                }
                default: {
                    m3fMat.set(0.0);
                    break;

                }
            }
            return m3fMat;
        }
        math.mat3 = mat3;
        ; ;
                                                                                                function mat4(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9, fValue10, fValue11, fValue12, fValue13, fValue14, fValue15, fValue16) {
            var nArgumentsLength = arguments.length;
            var m4fMat = math.Mat4.stack[math.Mat4.stackPosition++];
            if(math.Mat4.stackPosition == math.Mat4.stackSize) {
                math.Mat4.stackPosition = 0;
            }
            if(nArgumentsLength === 2) {
                if(akra.isBoolean(arguments[1])) {
                    if(arguments[1]) {
                        m4fMat.data = arguments[0];
                    } else {
                        m4fMat.set(arguments[0]);
                    }
                } else {
                    m4fMat.set(arguments[0], arguments[1]);
                }
            } else {
                switch(nArgumentsLength) {
                    case 1: {
                        if(arguments[0] instanceof math.Mat3) {
                            m4fMat.set(arguments[0], vec3(0.0));
                        } else {
                            m4fMat.set(arguments[0]);
                        }
                        break;

                    }
                    case 4: {
                        m4fMat.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;

                    }
                    case 16: {
                        m4fMat.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
                        break;

                    }
                    default: {
                        break;

                    }
                }
            }
            return m4fMat;
        }
        math.mat4 = mat4;
        ; ;
        function calcPOTtextureSize(nPixels) {
            var w, h;
            var n = nPixels;
            w = Math.ceil(Math.log(n) / Math.LN2 / 2.0);
            h = Math.ceil(Math.log(n / Math.pow(2, w)) / Math.LN2);
            w = Math.pow(2, w);
            h = Math.pow(2, h);
            n = w * h;
            return [
                w, 
                h, 
                n
            ];
        }
        math.calcPOTtextureSize = calcPOTtextureSize;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.Vec2 = akra.math.Vec2;
    akra.Vec3 = akra.math.Vec3;
    akra.Vec4 = akra.math.Vec4;
    akra.Mat3 = akra.math.Mat3;
    akra.Mat4 = akra.math.Mat4;
    akra.Quat4 = akra.math.Quat4;
    akra.vec2 = akra.math.vec2;
    akra.vec3 = akra.math.vec3;
    akra.vec4 = akra.math.vec4;
    akra.quat4 = akra.math.quat4;
    akra.mat3 = akra.math.mat3;
    akra.mat4 = akra.math.mat4;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        webgl.maxTextureSize = 0;
        webgl.maxCubeMapTextureSize = 0;
        webgl.maxViewPortSize = 0;
        webgl.maxTextureImageUnits = 0;
        webgl.maxVertexAttributes = 0;
        webgl.maxVertexTextureImageUnits = 0;
        webgl.maxCombinedTextureImageUnits = 0;
        webgl.maxColorAttachments = 1;
        webgl.stencilBits = 0;
        webgl.colorBits = [
            0, 
            0, 
            0
        ];
        webgl.alphaBits = 0;
        webgl.multisampleType = 0.0;
        webgl.shaderVersion = 0;
        webgl.hasNonPowerOf2Textures = false;
        var pSupportedExtensionList = null;
        var pLoadedExtensionList = null;
        function createContext(pCanvas, pOptions) {
            if (typeof pCanvas === "undefined") { pCanvas = document.createElement("canvas"); }
            var pWebGLContext = null;
            try  {
                pWebGLContext = pCanvas.getContext("webgl", pOptions) || pCanvas.getContext("experimental-webgl", pOptions);
            } catch (e) {
            }
            if(!pWebGLContext) {
                akra.logger.setSourceLocation("webgl/WebGL.ts", 58);
                akra.logger.warning("cannot get 3d device");
                ; ;
            }
            return pWebGLContext;
        }
        webgl.createContext = createContext;
        (function (pWebGLContext) {
            if(!pWebGLContext) {
                return;
            }
            webgl.maxTextureSize = pWebGLContext.getParameter(3379);
            webgl.maxCubeMapTextureSize = pWebGLContext.getParameter(34076);
            webgl.maxViewPortSize = pWebGLContext.getParameter(3386);
            webgl.maxTextureImageUnits = pWebGLContext.getParameter(34930);
            webgl.maxVertexAttributes = pWebGLContext.getParameter(34921);
            webgl.maxVertexTextureImageUnits = pWebGLContext.getParameter(35660);
            webgl.maxCombinedTextureImageUnits = pWebGLContext.getParameter(35661);
            webgl.stencilBits = pWebGLContext.getParameter(3415);
            webgl.colorBits = [
                pWebGLContext.getParameter(3410), 
                pWebGLContext.getParameter(3411), 
                pWebGLContext.getParameter(3412)
            ];
            webgl.alphaBits = pWebGLContext.getParameter(3413);
            webgl.multisampleType = pWebGLContext.getParameter(32938);
            pSupportedExtensionList = pWebGLContext.getSupportedExtensions();
            pSupportedExtensionList.push("WEBGL_debug_shaders", "WEBGL_debug_renderer_info");
            var pWebGLExtentionList = {
            };
            var pWebGLExtension;
            for(var i = 0; i < pSupportedExtensionList.length; ++i) {
                if(pWebGLExtension = pWebGLContext.getExtension(pSupportedExtensionList[i])) {
                    pWebGLExtentionList[pSupportedExtensionList[i]] = pWebGLExtension;
                    akra.logger.setSourceLocation("webgl/WebGL.ts", 100);
                    akra.logger.log("loaded WebGL extension: %1", pSupportedExtensionList[i]);
                    ; ;
                    for(var j in pWebGLExtension) {
                        if(akra.isFunction(pWebGLExtension[j])) {
                            pWebGLContext[j] = function () {
                                pWebGLContext[j] = new Function("var t = this.pWebGLExtentionList[" + pSupportedExtensionList[i] + "];" + "t." + j + ".apply(t, arguments);");
                            };
                        } else {
                            pWebGLContext[j] = pWebGLExtentionList[pSupportedExtensionList[i]][j];
                        }
                    }
                } else {
                    akra.logger.setSourceLocation("webgl/WebGL.ts", 118);
                    akra.logger.warning("cannot load extension: %1", pSupportedExtensionList[i]);
                    ; ;
                    pSupportedExtensionList.splice(i, 1);
                }
            }
            (pWebGLContext).pWebGLExtentionList = pWebGLExtentionList;
            pLoadedExtensionList = pWebGLExtentionList;
        })(createContext());
        function hasExtension(sExtName) {
            for(var i = 0; i < pSupportedExtensionList.length; ++i) {
                if(pSupportedExtensionList[i].search(sExtName) != -1) {
                    return true;
                }
            }
            return false;
        }
        webgl.hasExtension = hasExtension;
        function getWebGLUsage(iFlags) {
            if((((iFlags) & (akra.EHardwareBufferFlags.DYNAMIC)) != 0)) {
                return 35048;
            } else {
                if((((iFlags) & (akra.EHardwareBufferFlags.STREAM)) != 0)) {
                    return 35040;
                }
            }
            return 35044;
        }
        webgl.getWebGLUsage = getWebGLUsage;
        function getWebGLOriginFormat(eFormat) {
            switch(eFormat) {
                case akra.EPixelFormats.A8: {
                    return 6406;

                }
                case akra.EPixelFormats.L8:
                case akra.EPixelFormats.L16: {
                    return 6409;

                }
                case akra.EPixelFormats.FLOAT16_RGB: {
                    return webgl.hasExtension("OES_texture_half_float") ? 6407 : 0;

                }
                case akra.EPixelFormats.FLOAT16_RGBA: {
                    return webgl.hasExtension("OES_texture_half_float") ? 6408 : 0;

                }
                case akra.EPixelFormats.FLOAT16_R:
                case akra.EPixelFormats.R8: {
                    return webgl.hasExtension("EXT_texture_rg") ? 6403 : 0;

                }
                case akra.EPixelFormats.FLOAT16_GR:
                case akra.EPixelFormats.RG8: {
                    return webgl.hasExtension("EXT_texture_rg") ? 33319 : 0;

                }
                case akra.EPixelFormats.BYTE_LA:
                case akra.EPixelFormats.SHORT_GR: {
                    return 6410;
                    // PVRTC compressed formats
                    
                }
                case akra.EPixelFormats.PVRTC_RGB2: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35841 : 0;

                }
                case akra.EPixelFormats.PVRTC_RGB4: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35840 : 0;

                }
                case akra.EPixelFormats.PVRTC_RGBA2: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35843 : 0;

                }
                case akra.EPixelFormats.PVRTC_RGBA4: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35842 : 0;

                }
                case akra.EPixelFormats.R5G6B5:
                case akra.EPixelFormats.B5G6R5:
                case akra.EPixelFormats.R8G8B8:
                case akra.EPixelFormats.B8G8R8: {
                    return 6407;

                }
                case akra.EPixelFormats.A1R5G5B5: {
                    return 32993;

                }
                case akra.EPixelFormats.A4R4G4B4:
                case akra.EPixelFormats.X8R8G8B8:
                case akra.EPixelFormats.A8R8G8B8:
                case akra.EPixelFormats.B8G8R8A8:
                case akra.EPixelFormats.X8B8G8R8:
                case akra.EPixelFormats.A8B8G8R8: {
                    return 6408;

                }
                case akra.EPixelFormats.DXT1: {
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? 33777 : 0;

                }
                case akra.EPixelFormats.DXT3: {
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? 33778 : 0;

                }
                case akra.EPixelFormats.DXT5: {
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? 33779 : 0;

                }
                case akra.EPixelFormats.FLOAT32_GR:
                case akra.EPixelFormats.FLOAT32_R:
                default: {
                    return 0;

                }
            }
        }
        webgl.getWebGLOriginFormat = getWebGLOriginFormat;
        function getWebGLOriginDataType(eFormat) {
            switch(eFormat) {
                case akra.EPixelFormats.A8:
                case akra.EPixelFormats.L8:
                case akra.EPixelFormats.L16:
                case akra.EPixelFormats.R8G8B8:
                case akra.EPixelFormats.B8G8R8:
                case akra.EPixelFormats.BYTE_LA: {
                    return 5121;

                }
                case akra.EPixelFormats.R5G6B5:
                case akra.EPixelFormats.B5G6R5: {
                    return 33635;

                }
                case akra.EPixelFormats.A4R4G4B4: {
                    return 32819;

                }
                case akra.EPixelFormats.A1R5G5B5: {
                    return 32820;

                }
                case akra.EPixelFormats.X8B8G8R8:
                case akra.EPixelFormats.A8B8G8R8: {
                    return 33639;

                }
                case akra.EPixelFormats.X8R8G8B8:
                case akra.EPixelFormats.A8B8G8R8:
                case akra.EPixelFormats.A8R8G8B8: {
                    return 33639;

                }
                case akra.EPixelFormats.B8G8R8A8: {
                    return 5121;

                }
                case akra.EPixelFormats.R8G8B8A8: {
                    return 5121;

                }
                case akra.EPixelFormats.FLOAT16_R:
                case akra.EPixelFormats.FLOAT16_GR:
                case akra.EPixelFormats.FLOAT16_RGB:
                case akra.EPixelFormats.FLOAT16_RGBA: {
                    return webgl.hasExtension("OES_texture_half_float") ? 36193 : 0;

                }
                case akra.EPixelFormats.R8:
                case akra.EPixelFormats.RG8: {
                    return webgl.hasExtension("EXT_texture_rg") ? 5121 : 0;

                }
                case akra.EPixelFormats.FLOAT32_R:
                case akra.EPixelFormats.FLOAT32_GR:
                case akra.EPixelFormats.FLOAT32_RGB:
                case akra.EPixelFormats.FLOAT32_RGBA: {
                    return 5126;

                }
                case akra.EPixelFormats.DXT1:
                case akra.EPixelFormats.DXT3:
                case akra.EPixelFormats.DXT5:
                case akra.EPixelFormats.R3G3B2:
                case akra.EPixelFormats.A2R10G10B10:
                case akra.EPixelFormats.A2B10G10R10:
                case akra.EPixelFormats.SHORT_RGBA:
                case akra.EPixelFormats.SHORT_RGB:
                case akra.EPixelFormats.SHORT_GR:
                default: {
                    return 0;

                }
            }
        }
        webgl.getWebGLOriginDataType = getWebGLOriginDataType;
        function getWebGLInternalFormat(eFormat, isHWGamma) {
            if (typeof isHWGamma === "undefined") { isHWGamma = false; }
            switch(eFormat) {
                case akra.EPixelFormats.L8:
                case akra.EPixelFormats.L16: {
                    return 6409;

                }
                case akra.EPixelFormats.A8: {
                    return 6406;

                }
                case akra.EPixelFormats.BYTE_LA: {
                    return 6410;

                }
                case akra.EPixelFormats.PVRTC_RGB2: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35841 : 0;

                }
                case akra.EPixelFormats.PVRTC_RGB4: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35840 : 0;

                }
                case akra.EPixelFormats.PVRTC_RGBA2: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35843 : 0;

                }
                case akra.EPixelFormats.PVRTC_RGBA4: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? 35842 : 0;

                }
                case akra.EPixelFormats.X8B8G8R8:
                case akra.EPixelFormats.X8R8G8B8:
                case akra.EPixelFormats.A8B8G8R8:
                case akra.EPixelFormats.A8R8G8B8:
                case akra.EPixelFormats.B8G8R8A8:
                case akra.EPixelFormats.A1R5G5B5:
                case akra.EPixelFormats.A4R4G4B4: {
                    return 6408;

                }
                case akra.EPixelFormats.R5G6B5:
                case akra.EPixelFormats.B5G6R5:
                case akra.EPixelFormats.R8G8B8:
                case akra.EPixelFormats.B8G8R8: {
                    return 6407;

                }
                case akra.EPixelFormats.FLOAT16_R:
                case akra.EPixelFormats.FLOAT32_R:
                case akra.EPixelFormats.R8: {
                    return webgl.hasExtension("EXT_texture_rg") ? 6403 : 0;

                }
                case akra.EPixelFormats.FLOAT16_GR:
                case akra.EPixelFormats.FLOAT32_GR:
                case akra.EPixelFormats.RG8: {
                    return webgl.hasExtension("EXT_texture_rg") ? 6403 : 0;

                }
                case akra.EPixelFormats.A4L4:
                case akra.EPixelFormats.R3G3B2:
                case akra.EPixelFormats.A2R10G10B10:
                case akra.EPixelFormats.A2B10G10R10:
                case akra.EPixelFormats.FLOAT16_RGBA:
                case akra.EPixelFormats.FLOAT32_RGB:
                case akra.EPixelFormats.FLOAT32_RGBA:
                case akra.EPixelFormats.SHORT_RGBA:
                case akra.EPixelFormats.SHORT_RGB:
                case akra.EPixelFormats.SHORT_GR:
                case akra.EPixelFormats.DXT1: {
                    if(!isHWGamma) {
                        return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? 33777 : 0;
                    }

                }
                case akra.EPixelFormats.DXT3: {
                    if(!isHWGamma) {
                        return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? 33778 : 0;
                    }

                }
                case akra.EPixelFormats.DXT5: {
                    if(!isHWGamma) {
                        return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? 33778 : 0;
                    }

                }
                default: {
                    return 0;

                }
            }
        }
        webgl.getWebGLInternalFormat = getWebGLInternalFormat;
        function getClosestWebGLInternalFormat(eFormat, isHWGamma) {
            if (typeof isHWGamma === "undefined") { isHWGamma = false; }
            var iGLFormat = webgl.getWebGLInternalFormat(eFormat, isHWGamma);
            if(iGLFormat === 0) {
                if(isHWGamma) {
                    // TODO not supported
                    return 0;
                } else {
                    return 6408;
                }
            } else {
                return iGLFormat;
            }
        }
        webgl.getClosestWebGLInternalFormat = getClosestWebGLInternalFormat;
        function getClosestAkraFormat(iGLFormat, iGLDataType) {
            switch(iGLFormat) {
                case 35841: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? akra.EPixelFormats.PVRTC_RGB2 : akra.EPixelFormats.A8R8G8B8;

                }
                case 35843: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? akra.EPixelFormats.PVRTC_RGBA2 : akra.EPixelFormats.A8R8G8B8;

                }
                case 35840: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? akra.EPixelFormats.PVRTC_RGB4 : akra.EPixelFormats.A8R8G8B8;

                }
                case 35842: {
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? akra.EPixelFormats.PVRTC_RGBA4 : akra.EPixelFormats.A8R8G8B8;

                }
                case 6409: {
                    return akra.EPixelFormats.L8;

                }
                case 6406: {
                    return akra.EPixelFormats.A8;

                }
                case 6410: {
                    return akra.EPixelFormats.BYTE_LA;

                }
                case 6407: {
                    switch(iGLDataType) {
                        case 33635: {
                            return akra.EPixelFormats.B5G6R5;

                        }
                        default: {
                            return akra.EPixelFormats.R8G8B8;

                        }
                    }
                    ; ;

                }
                case 6408: {
                    switch(iGLDataType) {
                        case 32820: {
                            return akra.EPixelFormats.A1R5G5B5;

                        }
                        case 32819: {
                            return akra.EPixelFormats.A4R4G4B4;

                        }
                        default: {
                            return akra.EPixelFormats.A8B8G8R8;

                        }
                    }

                }
                case 32993: {
                    return akra.EPixelFormats.A8B8G8R8;

                }
                case 33776:
                case 33777: {
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? akra.EPixelFormats.DXT1 : akra.EPixelFormats.A8R8G8B8;

                }
                case 33778: {
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? akra.EPixelFormats.DXT3 : akra.EPixelFormats.A8R8G8B8;

                }
                case 33779: {
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? akra.EPixelFormats.DXT5 : akra.EPixelFormats.A8R8G8B8;

                }
                case 33321: {
                    return webgl.hasExtension("EXT_texture_rg") ? akra.EPixelFormats.R8 : akra.EPixelFormats.A8R8G8B8;

                }
                case 33323: {
                    return webgl.hasExtension("EXT_texture_rg") ? akra.EPixelFormats.RG8 : akra.EPixelFormats.A8R8G8B8;

                }
                default: {
                    //TODO: not supported
                    return akra.EPixelFormats.A8R8G8B8;

                }
            }
            ; ;
        }
        webgl.getClosestAkraFormat = getClosestAkraFormat;
        function getMaxMipmaps(iWidth, iHeight, iDepth, eFormat) {
            var iCount = 0;
            if((iWidth > 0) && (iHeight > 0)) {
                do {
                    if(iWidth > 1) {
                        iWidth = iWidth / 2;
                    }
                    if(iHeight > 1) {
                        iHeight = iHeight / 2;
                    }
                    if(iDepth > 1) {
                        iDepth = iDepth / 2;
                    }
                    /*
                    NOT needed, compressed formats will have mipmaps up to 1x1
                    if(PixelUtil::isValidExtent(width, height, depth, format))
                    count ++;
                    else
                    break;
                    */
                    iCount++;
                }while(!(iWidth === 1 && iHeight === 1 && iDepth === 1))
            }
            return iCount;
        }
        webgl.getMaxMipmaps = getMaxMipmaps;
        function optionalPO2(iValue) {
            if(webgl.hasNonPowerOf2Textures) {
                return iValue;
            } else {
                return akra.math.ceilingPowerOfTwo(iValue);
            }
        }
        webgl.optionalPO2 = optionalPO2;
        function convertToWebGLformat(pSource, pDest) {
            // Always need to convert PF_A4R4G4B4, GL expects the colors to be in the
            // reverse order
            if(pDest.format == akra.EPixelFormats.A4R4G4B4) {
                // Convert PF_A4R4G4B4 -> PF_B4G4R4A4
                // Reverse pixel order
                var iSrcPtr = (pSource.left + pSource.top * pSource.rowPitch + pSource.front * pSource.slicePitch);
                var iDstPtr = (pDest.left + pDest.top * pDest.rowPitch + pDest.front * pDest.slicePitch);
                var iSrcSliceSkip = pSource.getSliceSkip();
                var iDstSliceSkip = pDest.getSliceSkip();
                var k = pSource.right - pSource.left;
                var x = 0, y = 0, z = 0;
                for(z = pSource.front; z < pSource.back; z++) {
                    for(y = pSource.top; y < pSource.bottom; y++) {
                        for(x = 0; x < k; x++) {
                        }
                        iSrcPtr += pSource.rowPitch;
                        iDstPtr += pDest.rowPitch;
                    }
                    iSrcPtr += iSrcSliceSkip;
                    iDstPtr += iDstSliceSkip;
                }
            }
        }
        webgl.convertToWebGLformat = convertToWebGLformat;
        function checkFBOAttachmentFormat(eFormat) {
            return false;
        }
        webgl.checkFBOAttachmentFormat = checkFBOAttachmentFormat;
        function getSupportedAlternative(eFormat) {
            if(checkFBOAttachmentFormat(eFormat)) {
                return eFormat;
            }
            /// Find first alternative
            var pct = pixelUtil.getComponentType(eFormat);
            switch(pct) {
                case akra.EPixelComponentTypes.BYTE: {
                    eFormat = akra.EPixelFormats.A8R8G8B8;
                    break;

                }
                case akra.EPixelComponentTypes.SHORT: {
                    eFormat = akra.EPixelFormats.SHORT_RGBA;
                    break;

                }
                case akra.EPixelComponentTypes.FLOAT16: {
                    eFormat = akra.EPixelFormats.FLOAT16_RGBA;
                    break;

                }
                case akra.EPixelComponentTypes.FLOAT32: {
                    eFormat = akra.EPixelFormats.FLOAT32_RGBA;
                    break;

                }
                case akra.EPixelComponentTypes.COUNT:
                default: {
                    break;

                }
            }
            if(checkFBOAttachmentFormat(eFormat)) {
                return eFormat;
            }
            /// If none at all, return to default
            return akra.EPixelFormats.A8R8G8B8;
        }
        webgl.getSupportedAlternative = getSupportedAlternative;
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var ApiInfo = (function (_super) {
            __extends(ApiInfo, _super);
            function ApiInfo() {
                        _super.call(this);
                this.bWebGL = false;
                this.bWebAudio = false;
                this.bFile = false;
                this.bFileSystem = false;
                this.bWebWorker = false;
                this.bTransferableObjects = false;
                this.bLocalStorage = false;
                this.bWebSocket = false;
                var pApi = {
                };
                this.bWebAudio = ((window).AudioContext && (window).webkitAudioContext ? true : false);
                this.bFile = ((window).File && (window).FileReader && (window).FileList && (window).Blob ? true : false);
                this.bFileSystem = (this.bFile && (window).URL && (window).requestFileSystem ? true : false);
                this.bWebWorker = akra.isDef((window).Worker);
                this.bLocalStorage = akra.isDef((window).localStorage);
                this.bWebSocket = akra.isDef((window).WebSocket);
            }
            Object.defineProperty(ApiInfo.prototype, "webGL", {
                get: function () {
                    if(!this.bWebGL) {
                        this.bWebGL = ((window).WebGLRenderingContext || this.checkWebGL() ? true : false);
                    }
                    return this.bWebGL;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "transferableObjects", {
                get: function () {
                    if(!this.bTransferableObjects) {
                        this.bTransferableObjects = (this.bWebWorker && this.chechTransferableObjects() ? true : false);
                    }
                    return this.bTransferableObjects;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "file", {
                get: function () {
                    return this.bFile;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "fileSystem", {
                get: function () {
                    return this.bFileSystem;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "webAudio", {
                get: function () {
                    return this.bWebAudio;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "webWorker", {
                get: function () {
                    return this.bWebWorker;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "localStorage", {
                get: function () {
                    return this.bLocalStorage;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "webSocket", {
                get: function () {
                    return this.bWebSocket;
                },
                enumerable: true,
                configurable: true
            });
            ApiInfo.prototype.checkWebGL = function () {
                var pCanvas;
                var pDevice;
                try  {
                    pCanvas = document.createElement('canvas');
                    pDevice = pCanvas.getContext('webgl', {
                    }) || pCanvas.getContext('experimental-webgl', {
                    });
                    if(pDevice) {
                        return true;
                    }
                } catch (e) {
                }
                return false;
            };
            ApiInfo.prototype.chechTransferableObjects = function () {
                var pBlob = new Blob([
                    "onmessage = function(e) { postMessage(true); }"
                ]);
                var sBlobURL = (window).URL.createObjectURL(pBlob);
                var pWorker = new Worker(sBlobURL);
                var pBuffer = new ArrayBuffer(1);
                try  {
                    pWorker.postMessage(pBuffer, [
                        pBuffer
                    ]);
                } catch (e) {
                    akra.logger.setSourceLocation("util/ApiInfo.ts", 101);
                    akra.logger.log('transferable objects not supported in your browser...');
                    ; ;
                }
                pWorker.terminate();
                if(pBuffer.byteLength) {
                    return false;
                }
                return true;
            };
            return ApiInfo;
        })(util.Singleton);
        util.ApiInfo = ApiInfo;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (info) {
                        function canvas(id) {
            var pCanvas = akra.isString(id) ? document.getElementById(id) : id;
            return {
                width: akra.isInt(pCanvas.width) ? pCanvas.width : parseInt(pCanvas.style.width),
                height: akra.isInt(pCanvas.height) ? pCanvas.height : parseInt(pCanvas.style.height),
                id: pCanvas.id
            };
        }
        info.canvas = canvas;
        info.browser = new akra.util.BrowserInfo();
        info.api = new akra.util.ApiInfo();
        info.screen = new akra.util.ScreenInfo();
        info.uri = akra.util.uri(document.location.href);
        var is;
        (function (is) {
            /**
            * show status - online or offline
            */
            is.online;
            /**
            * perform test on mobile device
            */
            is.mobile = (/mobile|iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i).test(navigator.userAgent.toLowerCase());
            is.linux = info.browser.os === 'Linux';
            is.windows = info.browser.os === 'Windows';
            is.mac = info.browser.os === 'Mac';
            is.iPhone = info.browser.os === 'iPhone';
        })(is || (is = {}));
        //TODO: move it to [akra.info.is] module, when typescript access this.
                Object.defineProperty(is, 'online', {
            get: function () {
                return navigator.onLine;
            }
        });
    })(akra.info || (akra.info = {}));
    var info = akra.info;
})(akra || (akra = {}));
/*local and remote via thread*/
var akra;
(function (akra) {
    (function (util) {
        (function (EThreadStatuses) {
            EThreadStatuses._map = [];
            EThreadStatuses._map[0] = "k_WorkerBusy";
            EThreadStatuses.k_WorkerBusy = 0;
            EThreadStatuses._map[1] = "k_WorkerFree";
            EThreadStatuses.k_WorkerFree = 1;
        })(util.EThreadStatuses || (util.EThreadStatuses = {}));
        var EThreadStatuses = util.EThreadStatuses;
        var ThreadManager = (function () {
            function ThreadManager(sScript) {
                if (typeof sScript === "undefined") { sScript = null; }
                var _this = this;
                this._pWorkerList = [];
                this._pStatsList = [];
                this._sDefaultScript = sScript;
                setInterval(function () {
                    var pStats;
                    var iNow = akra.now();
                    for(var i = 0; i < _this._pStatsList.length; ++i) {
                        pStats = _this._pStatsList[i];
                        if(pStats.releaseTime > 0 && iNow - pStats.releaseTime > 30 * 1000) {
                            akra.logger.setSourceLocation("util/ThreadManager.ts", 43);
                            akra.logger.warning("thread must be removed: " + i);
                            ; ;
                        }
                    }
                    ; ;
                }, 30000);
            }
            ThreadManager.prototype.createThread = function () {
                //console.log((new Error).stack)
                if(this._pWorkerList.length === 32) {
                    akra.logger.setSourceLocation("util/ThreadManager.ts", 52);
                    akra.logger.error("Reached limit the number of threads");
                    ; ;
                    return false;
                }
                if(!akra.info.api.webWorker) {
                    akra.logger.setSourceLocation("util/ThreadManager.ts", 57);
                    akra.logger.error("WebWorkers unsupprted..");
                    ; ;
                    return false;
                }
                var pWorker = (new Worker(this._sDefaultScript));
                pWorker.id = this._pWorkerList.length;
                pWorker.send = (pWorker).postMessage;
                this._pWorkerList.push(pWorker);
                this._pStatsList.push({
                    status: EThreadStatuses.k_WorkerFree,
                    creationTime: akra.now(),
                    releaseTime: akra.now()
                });
                return true;
            };
            ThreadManager.prototype.occupyThread = function () {
                var pStats;
                for(var i = 0, n = this._pWorkerList.length; i < n; ++i) {
                    pStats = this._pStatsList[i];
                    if(pStats.status == EThreadStatuses.k_WorkerFree) {
                        pStats.status = EThreadStatuses.k_WorkerBusy;
                        pStats.releaseTime = 0;
                        return this._pWorkerList[i];
                    }
                }
                if(this.createThread()) {
                    return this.occupyThread();
                } else {
                    akra.logger.setSourceLocation("util/ThreadManager.ts", 93);
                    akra.logger.error("cannot occupy thread");
                    ; ;
                    return null;
                }
            };
            ThreadManager.prototype.releaseThread = function (pThread) {
                var iThread;
                var pStats;
                if(!akra.isInt(pThread)) {
                    iThread = pThread.id;
                } else {
                    iThread = pThread;
                }
                if(akra.isDef(this._pStatsList[iThread])) {
                    pStats = this._pStatsList[iThread];
                    pStats.status = EThreadStatuses.k_WorkerFree;
                    pStats.releaseTime = akra.now();
                }
                return false;
            };
            ThreadManager.prototype.initialize = function () {
                return true;
            };
            ThreadManager.prototype.destroy = function () {
            };
            return ThreadManager;
        })();
        util.ThreadManager = ThreadManager;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (io) {
        (function (EFileActions) {
            EFileActions._map = [];
            EFileActions.k_Open = 1;
            EFileActions.k_Read = 2;
            EFileActions._map[3] = "k_Write";
            EFileActions.k_Write = 3;
            EFileActions._map[4] = "k_Clear";
            EFileActions.k_Clear = 4;
            EFileActions._map[5] = "k_Exists";
            EFileActions.k_Exists = 5;
            EFileActions._map[6] = "k_Remove";
            EFileActions.k_Remove = 6;
        })(io.EFileActions || (io.EFileActions = {}));
        var EFileActions = io.EFileActions;
        ; ;
        (function (EFileTransferModes) {
            EFileTransferModes._map = [];
            EFileTransferModes._map[0] = "k_Normal";
            EFileTransferModes.k_Normal = 0;
            EFileTransferModes._map[1] = "k_Slow";
            EFileTransferModes.k_Slow = 1;
            EFileTransferModes._map[2] = "k_Fast";
            EFileTransferModes.k_Fast = 2;
        })(io.EFileTransferModes || (io.EFileTransferModes = {}));
        var EFileTransferModes = io.EFileTransferModes;
        var pLocalFileThreadManager = new akra.util.ThreadManager("LocalFile.t.js");
        var pRemoteFileThreadManager = new akra.util.ThreadManager("RemoteFile.t.js");
        io.getLocalFileThreadManager = function () {
            return pLocalFileThreadManager;
        };
        io.getRemoteFileThreadManager = function () {
            return pRemoteFileThreadManager;
        };
        var TFile = (function () {
            function TFile(sFilename, sMode, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                this._pUri = null;
                this._nCursorPosition = 0;
                this._bOpened = false;
                this._eTransferMode = EFileTransferModes.k_Normal;
                this._pFileMeta = null;
                this._isLocal = false;
                if(akra.isDef(sMode)) {
                    this._iMode = akra.isString(sMode) ? io.filemode(sMode) : sMode;
                }
                this.setAndValidateUri(akra.util.uri(sFilename));
                if(akra.info.api.transferableObjects) {
                    this._eTransferMode = EFileTransferModes.k_Fast;
                } else {
                    if(akra.info.browser.name == "Opera") {
                        this._eTransferMode = EFileTransferModes.k_Slow;
                    }
                }
                if(arguments.length > 2) {
                    this.open(sFilename, sMode, fnCallback);
                }
            }
            Object.defineProperty(TFile.prototype, "path", {
                get: /**@inline*/ function () {
                    akra.logger.setSourceLocation("TFile.ts", 78);
                    akra.logger.assert(akra.isDefAndNotNull(this._pFileMeta), "There is no file handle open.");
                    ; ;
                    return this._pUri.toString();
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TFile.prototype, "name", {
                get: function () {
                    return akra.util.pathinfo(this._pUri.path).basename;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TFile.prototype, "mode", {
                get: function () {
                    return this._iMode;
                }//set mode(sMode: string);
                //set mode(iMode: int);
                ,
                set: function (sMode) {
                    this._iMode = akra.isString(sMode) ? io.filemode(sMode) : sMode;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TFile.prototype, "onread", {
                set: function (fnCallback) {
                    this.read(fnCallback);
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TFile.prototype, "onopen", {
                set: function (fnCallback) {
                    this.open(fnCallback);
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TFile.prototype, "position", {
                get: function () {
                    akra.logger.setSourceLocation("TFile.ts", 105);
                    akra.logger.assert(akra.isDefAndNotNull(this._pFileMeta), 'There is no file handle open.');
                    ; ;
                    return this._nCursorPosition;
                },
                set: function (iOffset) {
                    akra.logger.setSourceLocation("TFile.ts", 110);
                    akra.logger.assert(akra.isDefAndNotNull(this._pFileMeta), 'There is no file handle open.');
                    ; ;
                    this._nCursorPosition = iOffset;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TFile.prototype, "byteLength", {
                get: function () {
                    return this._pFileMeta ? this._pFileMeta.size : 0;
                },
                enumerable: true,
                configurable: true
            });
            TFile.prototype.open = function (sFilename, iMode, fnCallback) {
                var pFile = this;
                var hasMode = !akra.isFunction(iMode);
                if(arguments.length < 3) {
                    if(akra.isString(arguments[0])) {
                        this.setAndValidateUri(akra.util.uri(sFilename));
                        fnCallback = arguments[1];
                    } else {
                        if(akra.isInt(arguments[0])) {
                            this._iMode = arguments[0];
                            fnCallback = arguments[1];
                        } else {
                            fnCallback = arguments[0];
                        }
                    }
                    akra.logger.setSourceLocation("TFile.ts", 161);
                    akra.logger.assert(akra.isDefAndNotNull(this._pUri), "No filename provided.");
                    ; ;
                    this.open(this._pUri.toString(), this._iMode, fnCallback);
                    return;
                }
                fnCallback = arguments[hasMode ? 2 : 1];
                fnCallback = fnCallback || TFile.defaultCallback;
                if(this.isOpened()) {
                    akra.logger.setSourceLocation("TFile.ts", 173);
                    akra.logger.warning("file already opened: " + this.name);
                    ; ;
                    (fnCallback)(null, this._pFileMeta);
                }
                this.setAndValidateUri(akra.util.uri(arguments[0]));
                if(hasMode) {
                    this._iMode = (akra.isString(arguments[1]) ? io.filemode(arguments[1]) : arguments[1]);
                }
                this.update(function (err) {
                    if(err) {
                        akra.logger.setSourceLocation("TFile.ts", 185);
                        akra.logger.warning("file update err", err);
                        ; ;
                        fnCallback.call(pFile, err);
                        return;
                    }
                    if(((this._iMode & (1 << (3))) != 0)) {
                        this.position = this.size;
                    }
                    fnCallback.call(pFile, null, pFile);
                });
            };
            TFile.prototype.close = function () {
                this._pUri = null;
                this._iMode = io.EIO.IN | io.EIO.OUT;
                this._nCursorPosition = 0;
                this._pFileMeta = null;
            };
            TFile.prototype.clear = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                if(!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if(err) {
                            fnCallback(err);
                        }
                        this.clear.apply(this, _pArgv);
                    });
                    return;
                }
                ; ;
                var pCommand = {
                    act: EFileActions.k_Clear,
                    name: this.path,
                    mode: this._iMode
                };
                this.execCommand(pCommand, fnCallback);
            };
            TFile.prototype.read = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                if(!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if(err) {
                            fnCallback(err);
                        }
                        this.read.apply(this, _pArgv);
                    });
                    return;
                }
                ; ;
                var pFile = this;
                var eTransferMode = this._eTransferMode;
                akra.logger.setSourceLocation("TFile.ts", 224);
                akra.logger.assert(((this._iMode & (1 << (0))) != 0), "The file is not readable.");
                ; ;
                var pCommand = {
                    act: EFileActions.k_Read,
                    name: this.path,
                    mode: this._iMode,
                    pos: this._nCursorPosition,
                    transfer: this._eTransferMode
                };
                var fnCallbackSystem = function (err, pData) {
                    if(err) {
                        fnCallback.call(pFile, err);
                        return;
                    }
                    if(eTransferMode == EFileTransferModes.k_Slow && ((this._iMode & (1 << (5))) != 0)) {
                        pData = new Uint8Array(pData).buffer;
                    }
                    pFile.atEnd();
                    fnCallback.call(pFile, null, pData);
                };
                this.execCommand(pCommand, fnCallbackSystem);
            };
            TFile.prototype.write = function (pData, fnCallback, sContentType) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                if(!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if(err) {
                            fnCallback(err);
                        }
                        this.write.apply(this, _pArgv);
                    });
                    return;
                }
                ; ;
                var pFile = this;
                var iMode = this._iMode;
                var pCommand;
                var fnCallbackSystem = function (err, pMeta) {
                    if(err) {
                        fnCallback.call(pFile, err);
                        return;
                    }
                    pFile.position += akra.isString(pData) ? pData.length : pData.byteLength;
                    (pFile)._pFileMeta = pMeta;
                    fnCallback.call(pFile, null, pMeta);
                };
                akra.logger.setSourceLocation("TFile.ts", 273);
                akra.logger.assert(((iMode & (1 << (1))) != 0), "The file is not writable.");
                ; ;
                sContentType = sContentType || (((iMode & (1 << (5))) != 0) ? "application/octet-stream" : "text/plain");
                pCommand = {
                    act: EFileActions.k_Write,
                    name: this.path,
                    mode: this._iMode,
                    data: pData,
                    contentType: sContentType,
                    pos: this._nCursorPosition
                };
                if(!akra.isString(pData)) {
                    this.execCommand(pCommand, fnCallbackSystem, [
                        pData
                    ]);
                } else {
                    this.execCommand(pCommand, fnCallbackSystem);
                }
            };
            TFile.prototype.move = function (sFilename, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                var pFile = this;
                this.copy(sFilename, function (err) {
                    if(err) {
                        fnCallback(err);
                        return;
                    }
                    pFile.remove(fnCallback);
                });
            };
            TFile.prototype.copy = function (sFilename, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                var iMode = io.EIO.IN | io.EIO.OUT | io.EIO.TRUNC;
                var pFile = this;
                var pFileCopy;
                if(((this._iMode & (1 << (5))) != 0)) {
                    iMode |= io.EIO.BIN;
                }
                pFileCopy = new TFile(sFilename, iMode, function (err) {
                    if(err) {
                        fnCallback(err);
                    }
                    pFile.read(function (pData) {
                        pFile.write(pData, fnCallback);
                    });
                });
            };
            TFile.prototype.rename = function (sFilename, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                var pName = akra.util.pathinfo(sFilename);
                akra.logger.setSourceLocation("TFile.ts", 331);
                akra.logger.assert(!pName.dirname, 'only filename can be specified.');
                ; ;
                this.move(akra.util.pathinfo(this._pUri.path).dirname + "/" + pName.basename, fnCallback);
            };
            TFile.prototype.remove = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                if(!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if(err) {
                            fnCallback(err);
                        }
                        this.remove.apply(this, _pArgv);
                    });
                    return;
                }
                ; ;
                var pFile = this;
                var pCommand = {
                    act: EFileActions.k_Remove,
                    name: this.path,
                    mode: this._iMode
                };
                var fnCallbackSystem = function (err, pData) {
                    pFile.close();
                    if(akra.isDef(fnCallback)) {
                        fnCallback.call(pFile, err, pData);
                    }
                };
                this.execCommand(pCommand, fnCallbackSystem);
            }//return current position
            ;
            TFile.prototype.atEnd = function () {
                this.position = this.byteLength;
                return this._nCursorPosition;
            }//return current position;
            ;
            TFile.prototype.seek = function (iOffset) {
                akra.logger.setSourceLocation("TFile.ts", 363);
                akra.logger.assert(akra.isDefAndNotNull(this._pFileMeta), "There is no file handle open.");
                ; ;
                var nSeek = this._nCursorPosition + iOffset;
                if(nSeek < 0) {
                    nSeek = this.byteLength - (akra.math.abs(nSeek) % this.byteLength);
                }
                akra.logger.setSourceLocation("TFile.ts", 370);
                akra.logger.assert(nSeek >= 0 && nSeek <= this.byteLength, "Invalid offset parameter");
                ; ;
                this._nCursorPosition = nSeek;
                return this._nCursorPosition;
            };
            TFile.prototype.isOpened = function () {
                return this._pFileMeta !== null;
            };
            TFile.prototype.isExists = function (fnCallback) {
                var pCommand = {
                    act: EFileActions.k_Exists,
                    name: this.path,
                    mode: this._iMode
                };
                this.execCommand(pCommand, fnCallback);
            }/**@inline*/ ;
            TFile.prototype.isLocal = function () {
                return this._isLocal;
            };
            TFile.prototype.getMetaData = function (fnCallback) {
                akra.logger.setSourceLocation("TFile.ts", 395);
                akra.logger.assert(akra.isDefAndNotNull(this._pFileMeta), 'There is no file handle open.');
                ; ;
                fnCallback(null, {
                    lastModifiedDate: this._pFileMeta.lastModifiedDate
                });
            };
            TFile.prototype.setAndValidateUri = function (sFilename) {
                var pUri = akra.util.uri(sFilename);
                var pUriLocal;
                if(pUri.protocol === "filesystem") {
                    pUriLocal = akra.util.uri(pUri.path);
                    akra.logger.setSourceLocation("TFile.ts", 410);
                    akra.logger.assert(!(pUriLocal.protocol && pUriLocal.host != akra.info.uri.host), "Поддерживаются только локальные файлы в пределах текущего домена.");
                    ; ;
                    var pFolders = pUriLocal.path.split('/');
                    if(pFolders[0] == "" || pFolders[0] == ".") {
                        pFolders = pFolders.slice(1);
                    }
                    akra.logger.setSourceLocation("TFile.ts", 419);
                    akra.logger.assert(pUri.host === "temporary", "Поддерживаются только файловые системы типа \"temporary\".");
                    ; ;
                    this._pUri = akra.util.uri(pFolders.join("/"));
                    this._isLocal = true;
                } else {
                    this._pUri = pUri;
                }
            };
            TFile.prototype.update = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                var pFile = this;
                var pCommand = {
                    act: EFileActions.k_Open,
                    name: this._pUri.toString(),
                    mode: this._iMode
                };
                var fnCallbackSystem = function (err, pMeta) {
                    (pFile)._pFileMeta = pMeta;
                    fnCallback.call(pFile, err, pFile);
                };
                this.execCommand(pCommand, fnCallbackSystem);
            };
            TFile.prototype.execCommand = function (pCommand, fnCallback, pTransferables) {
                TFile.execCommand(this.isLocal(), pCommand, fnCallback);
            };
            TFile.defaultCallback = function (err) {
                if(err) {
                    throw err;
                }
            };
            TFile.execCommand = function execCommand(isLocal, pCommand, fnCallback, pTransferables) {
                var pFile = this;
                var pManager = isLocal ? io.getLocalFileThreadManager() : io.getRemoteFileThreadManager();
                var pThread = pManager.occupyThread();
                pThread.onmessage = function (e) {
                    pManager.releaseThread(pThread);
                    pThread.onmessage = null;
                    fnCallback.call(pFile, null, e.data);
                };
                pThread.onerror = function (e) {
                    pManager.releaseThread(pThread);
                    pThread.onmessage = null;
                    fnCallback.call(pFile, e);
                };
                if(akra.isDef(pTransferables)) {
                    pThread.send(pCommand, pTransferables);
                } else {
                    pThread.send(pCommand);
                }
            }
            return TFile;
        })();
        io.TFile = TFile;        
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
/*local file via local files system(async)*/
/**
* FIle implementation via <Local filesystem>.
* ONLY FOR LOCAL FILES!!
*/
var akra;
(function (akra) {
    (function (io) {
        var LocalFileSystem = (function () {
            function LocalFileSystem() {
                this._pFileSystem = null;
                this._pCallbackQueue = [];
            }
            LocalFileSystem.prototype.setFileSystem = function (pFS) {
                this._pFileSystem = pFS;
            }/**
            * Инициализация файловой системы.
            * @tparam Function fnCallback Функция, вызываемая
            * при успешной(получет в 1ом параметре fs)
            * инициализации системы.
            */
            ;
            LocalFileSystem.prototype.get = function (fnCallback) {
                if(this._pFileSystem) {
                    fnCallback(this._pFileSystem);
                    return;
                }
                var pFileSystem = this;
                var pQueue = this._pCallbackQueue;
                pQueue.push(fnCallback);
                if(pQueue.length > 1) {
                    return;
                }
                window.storageInfo.requestQuota(window.TEMPORARY, (32 * 1024 * 1024), function (nGrantedBytes) {
                    window.requestFileSystem(window.TEMPORARY, nGrantedBytes, function (pFs) {
                        pFileSystem.setFileSystem(pFs);
                        if(pQueue.length) {
                            for(var i = 0; i < pQueue.length; ++i) {
                                pQueue[i](pFs);
                            }
                        }
                    }, LocalFileSystem.errorHandler);
                });
            };
            LocalFileSystem.errorHandler = function errorHandler(e) {
                var sMesg = "init filesystem: ";
                switch(e.code) {
                    case FileError.QUOTA_EXCEEDED_ERR: {
                        sMesg += 'QUOTA_EXCEEDED_ERR';
                        break;

                    }
                    case FileError.NOT_FOUND_ERR: {
                        sMesg += 'NOT_FOUND_ERR';
                        break;

                    }
                    case FileError.SECURITY_ERR: {
                        sMesg += 'SECURITY_ERR';
                        break;

                    }
                    case FileError.INVALID_MODIFICATION_ERR: {
                        sMesg += 'INVALID_MODIFICATION_ERR';
                        break;

                    }
                    case FileError.INVALID_STATE_ERR: {
                        sMesg += 'INVALID_STATE_ERR';
                        break;

                    }
                    default: {
                        sMesg += 'Unknown Error';
                        break;

                    }
                }
                akra.logger.setSourceLocation("LocalFile.ts", 102);
                akra.logger.error(sMesg);
                ; ;
            }
            return LocalFileSystem;
        })();        
        var pLocalFileSystem = new LocalFileSystem();
        function getFileSystem(fnCallback) {
            pLocalFileSystem.get(fnCallback);
        }
        io.getFileSystem = getFileSystem;
        var LocalFile = (function () {
            function LocalFile(sFilename, sMode, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                this._nCursorPosition = 0;
                if(akra.isDef(sMode)) {
                    this._iMode = akra.isString(sMode) ? io.filemode(sMode) : sMode;
                }
                this.setAndValidateUri(akra.util.uri(sFilename));
                if(arguments.length > 2) {
                    this.open(sFilename, sMode, fnCallback);
                }
            }
            Object.defineProperty(LocalFile.prototype, "path", {
                get: /**@inline*/ function () {
                    akra.logger.setSourceLocation("LocalFile.ts", 126);
                    akra.logger.assert(akra.isDefAndNotNull(this._pFile), "There is no file handle open.");
                    ; ;
                    return this._pUri.toString();
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LocalFile.prototype, "name", {
                get: function () {
                    return akra.util.pathinfo(this._pUri.path).basename;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LocalFile.prototype, "mode", {
                get: function () {
                    return this._iMode;
                }//set mode(sMode: string);
                //set mode(iMode: int);
                ,
                set: function (sMode) {
                    this._iMode = akra.isString(sMode) ? io.filemode(sMode) : sMode;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LocalFile.prototype, "onread", {
                set: function (fnCallback) {
                    this.read(fnCallback);
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LocalFile.prototype, "onopen", {
                set: function (fnCallback) {
                    this.open(fnCallback);
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LocalFile.prototype, "position", {
                get: function () {
                    akra.logger.setSourceLocation("LocalFile.ts", 153);
                    akra.logger.assert(akra.isDefAndNotNull(this._pFile), "There is no file handle open.");
                    ; ;
                    return this._nCursorPosition;
                },
                set: function (iOffset) {
                    akra.logger.setSourceLocation("LocalFile.ts", 158);
                    akra.logger.assert(akra.isDefAndNotNull(this._pFile), "There is no file handle open.");
                    ; ;
                    this._nCursorPosition = iOffset;
                }/**@inline*/ ,
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LocalFile.prototype, "byteLength", {
                get: function () {
                    return this._pFile ? this._pFile.size : 0;
                },
                enumerable: true,
                configurable: true
            });
            LocalFile.prototype.open = function (sFilename, iMode, fnCallback) {
                var pFile = this;
                var hasMode = !akra.isFunction(iMode);
                if(arguments.length < 3) {
                    if(akra.isString(arguments[0])) {
                        this.setAndValidateUri(akra.util.uri(sFilename));
                        fnCallback = arguments[1];
                    } else {
                        if(akra.isInt(arguments[0])) {
                            this._iMode = arguments[0];
                            fnCallback = arguments[1];
                        } else {
                            fnCallback = arguments[0];
                        }
                    }
                    akra.logger.setSourceLocation("LocalFile.ts", 204);
                    akra.logger.assert(akra.isDefAndNotNull(this._pUri), "No filename provided.");
                    ; ;
                    this.open(this._pUri.toString(), this._iMode, fnCallback);
                    return;
                }
                fnCallback = arguments[hasMode ? 2 : 1];
                fnCallback = fnCallback || LocalFile.defaultCallback;
                if(this.isOpened()) {
                    akra.logger.setSourceLocation("LocalFile.ts", 216);
                    akra.logger.warning("file already opened: " + this.name);
                    ; ;
                    (fnCallback)(null, this._pFile);
                }
                this.setAndValidateUri(akra.util.uri(arguments[0]));
                if(hasMode) {
                    this._iMode = (akra.isString(arguments[1]) ? io.filemode(arguments[1]) : arguments[1]);
                }
                var fnFSInited;
                var pFile = this;
                var pFileSystem = null;
                var fnErrorHandler = function (e) {
                    if(e.code == FileError.NOT_FOUND_ERR && ((pFile.mode & (1 << (1))) != 0)) {
                        LocalFile.createDir(pFileSystem.root, akra.util.pathinfo(pFile.path).dirname.split('/'), function (e) {
                            if(!akra.isNull(e)) {
                                fnCallback.call(pFile, e);
                            } else {
                                fnFSInited.call(pFile, pFileSystem);
                            }
                        });
                    } else {
                        fnCallback.call(pFile, e);
                    }
                };
                fnFSInited = function (pFs) {
                    akra.logger.setSourceLocation("LocalFile.ts", 250);
                    akra.logger.assert(akra.isDefAndNotNull(pFs), "local file system not initialized");
                    ; ;
                    pFileSystem = pFs;
                    pFs.root.getFile(this.path, {
                        create: ((this._iMode & (1 << (1))) != 0),
                        exclusive: false
                    }, function (fileEntry) {
                        (pFile).setFileEntry(fileEntry);
                        (fileEntry).file(function (file) {
                            (pFile).setFile(file);
                            if(((pFile.mode & (1 << (4))) != 0) && pFile.byteLength) {
                                pFile.clear(function (err) {
                                    if(err) {
                                        fnCallback(err);
                                    } else {
                                        fnCallback.call(pFile, null, file);
                                    }
                                });
                                return;
                            }
                            if(((pFile.mode & (1 << (3))) != 0)) {
                                pFile.position = pFile.byteLength;
                            }
                            fnCallback.call(pFile, null, file);
                        }, fnErrorHandler);
                    }, fnErrorHandler);
                };
                getFileSystem(function (pFileSystem) {
                    fnFSInited.call(pFile, pFileSystem);
                });
            };
            LocalFile.prototype.close = function () {
                this._pUri = null;
                this._iMode = io.EIO.IN | io.EIO.OUT;
                this._nCursorPosition = 0;
                this._pFile = null;
            };
            LocalFile.prototype.clear = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                if(!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if(err) {
                            fnCallback(err);
                        }
                        this.clear.apply(this, _pArgv);
                    });
                    return;
                }
                ; ;
                akra.logger.setSourceLocation("LocalFile.ts", 303);
                akra.logger.assert(akra.isDefAndNotNull(this._pFile), 'There is no file handle open');
                ; ;
                var pFile = this;
                var pFileEntry = this._pFileEntry;
                pFileEntry.createWriter(function (pWriter) {
                    pWriter.seek(0);
                    pWriter.onwriteend = function () {
                        fnCallback.call(pFile, null);
                    };
                    pWriter.truncate(0);
                }, function (e) {
                    fnCallback.call(pFile, e);
                });
            };
            LocalFile.prototype.read = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                if(!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if(err) {
                            fnCallback(err);
                        }
                        this.read.apply(this, _pArgv);
                    });
                    return;
                }
                ; ;
                var pFile = this;
                var eTransferMode = this._iMode;
                akra.logger.setSourceLocation("LocalFile.ts", 330);
                akra.logger.assert(((this._iMode & (1 << (0))) != 0), "The file is not readable.");
                ; ;
                var pReader = this._pFileReader;
                var pFileObject = this._pFile;
                pReader.onloadend = function (e) {
                    var pData = ((e.target)).result;
                    var nPos = pFile.position;
                    if(nPos) {
                        if(((pFile.mode & (1 << (5))) != 0)) {
                            pData = (new Uint8Array((new Uint8Array(pData)).subarray(nPos))).buffer;
                        } else {
                            pData = pData.substr(nPos);
                        }
                    }
                    pFile.atEnd();
                    fnCallback.call(pFile, null, pData);
                };
                if(((pFile.mode & (1 << (5))) != 0)) {
                    pReader.readAsArrayBuffer(pFileObject);
                } else {
                    pReader.readAsText(pFileObject);
                }
            };
            LocalFile.prototype.write = function (pData, fnCallback, sContentType) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                if(!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if(err) {
                            fnCallback(err);
                        }
                        this.write.apply(this, _pArgv);
                    });
                    return;
                }
                ; ;
                var pFile = this;
                var iMode = this._iMode;
                akra.logger.setSourceLocation("LocalFile.ts", 369);
                akra.logger.assert(((iMode & (1 << (1))) != 0), "The file is not writable.");
                ; ;
                sContentType = sContentType || (((iMode & (1 << (5))) != 0) ? "application/octet-stream" : "text/plain");
                var pFile = this;
                var pFileEntry = this._pFileEntry;
                pFileEntry.createWriter(function (pWriter) {
                    pWriter.seek(pFile.position);
                    pWriter.onerror = function (e) {
                        fnCallback.call(pFileEntry, e);
                    };
                    pWriter.onwriteend = function () {
                        if(((iMode & (1 << (5))) != 0)) {
                            pFile.seek(pData.byteLength);
                        } else {
                            pFile.seek(pData.length);
                        }
                        fnCallback.call(pFile, null);
                    };
                    pWriter.write((new (Blob)(pData, {
                        type: sContentType
                    })));
                }, function (e) {
                    fnCallback.call(pFile, e);
                });
            };
            LocalFile.prototype.move = function (sFilename, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                var pFile = this;
                this.copy(sFilename, function (err) {
                    if(err) {
                        fnCallback(err);
                        return;
                    }
                    pFile.remove(fnCallback);
                });
            };
            LocalFile.prototype.copy = function (sFilename, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                var iMode = io.EIO.IN | io.EIO.OUT | io.EIO.TRUNC;
                var pFile = this;
                var pFileCopy;
                if(((this._iMode & (1 << (5))) != 0)) {
                    iMode |= io.EIO.BIN;
                }
                pFileCopy = new LocalFile(sFilename, iMode, function (err) {
                    if(err) {
                        fnCallback(err);
                    }
                    pFile.read(function (pData) {
                        pFile.write(pData, fnCallback);
                    });
                });
            };
            LocalFile.prototype.rename = function (sFilename, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                var pName = akra.util.pathinfo(sFilename);
                akra.logger.setSourceLocation("LocalFile.ts", 441);
                akra.logger.assert(!pName.dirname, 'only filename can be specified.');
                ; ;
                this.move(akra.util.pathinfo(this._pUri.path).dirname + "/" + pName.basename, fnCallback);
            };
            LocalFile.prototype.remove = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                if(!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if(err) {
                            fnCallback(err);
                        }
                        this.remove.apply(this, _pArgv);
                    });
                    return;
                }
                ; ;
                var pFile = this;
                this._pFileEntry.remove(function () {
                    pFile.close();
                    fnCallback.call(pFile, null);
                }, fnCallback);
            }//return current position
            ;
            LocalFile.prototype.atEnd = function () {
                this.position = this.byteLength;
                return this._nCursorPosition;
            }//return current position;
            ;
            LocalFile.prototype.seek = function (iOffset) {
                akra.logger.setSourceLocation("LocalFile.ts", 464);
                akra.logger.assert(akra.isDefAndNotNull(this._pFile), "There is no file handle open.");
                ; ;
                var nSeek = this._nCursorPosition + iOffset;
                if(nSeek < 0) {
                    nSeek = this.byteLength - (akra.math.abs(nSeek) % this.byteLength);
                }
                akra.logger.setSourceLocation("LocalFile.ts", 471);
                akra.logger.assert(nSeek >= 0 && nSeek <= this.byteLength, "Invalid offset parameter");
                ; ;
                this._nCursorPosition = nSeek;
                return this._nCursorPosition;
            };
            LocalFile.prototype.isOpened = function () {
                return this._pFile !== null;
            };
            LocalFile.prototype.isExists = function (fnCallback) {
                this.open(function (e) {
                    fnCallback(akra.isNull(e) ? true : false);
                });
            };
            LocalFile.prototype.isLocal = function () {
                return true;
            };
            LocalFile.prototype.getMetaData = function (fnCallback) {
                akra.logger.setSourceLocation("LocalFile.ts", 493);
                akra.logger.assert(akra.isDefAndNotNull(this._pFile), 'There is no file handle open.');
                ; ;
                fnCallback(null, {
                    lastModifiedDate: this._pFile.lastModifiedDate
                });
            };
            LocalFile.prototype.setFileEntry = function (pFileEntry) {
                if(!akra.isNull(this._pFileEntry)) {
                    return false;
                }
                this._pFileEntry = pFileEntry;
                return true;
            };
            LocalFile.prototype.setFile = function (pFile) {
                if(!akra.isNull(this._pFile)) {
                    return false;
                }
                this._pFile = pFile;
                return true;
            };
            LocalFile.prototype.setAndValidateUri = function (sFilename) {
                var pUri = akra.util.uri(sFilename);
                var pUriLocal;
                if(pUri.protocol === "filesystem") {
                    pUriLocal = akra.util.uri(pUri.path);
                    akra.logger.setSourceLocation("LocalFile.ts", 528);
                    akra.logger.assert(!(pUriLocal.protocol && pUriLocal.host != akra.info.uri.host), "Поддерживаются только локальные файлы в пределах текущего домена.");
                    ; ;
                    var pFolders = pUriLocal.path.split('/');
                    if(pFolders[0] == "" || pFolders[0] == ".") {
                        pFolders = pFolders.slice(1);
                    }
                    akra.logger.setSourceLocation("LocalFile.ts", 537);
                    akra.logger.assert(pUri.host === "temporary", "Поддерживаются только файловые системы типа \"temporary\".");
                    ; ;
                    this._pUri = akra.util.uri(pFolders.join("/"));
                } else {
                    akra.logger.setSourceLocation("LocalFile.ts", 542);
                    akra.logger.error("used non local uri");
                    ; ;
                }
            };
            LocalFile.errorHandler = function errorHandler(e) {
                var sMesg = "";
                switch(e.code) {
                    case FileError.QUOTA_EXCEEDED_ERR: {
                        sMesg += 'QUOTA_EXCEEDED_ERR';
                        break;

                    }
                    case FileError.NOT_FOUND_ERR: {
                        sMesg += 'NOT_FOUND_ERR';
                        break;

                    }
                    case FileError.SECURITY_ERR: {
                        sMesg += 'SECURITY_ERR';
                        break;

                    }
                    case FileError.INVALID_MODIFICATION_ERR: {
                        sMesg += 'INVALID_MODIFICATION_ERR';
                        break;

                    }
                    case FileError.INVALID_STATE_ERR: {
                        sMesg += 'INVALID_STATE_ERR';
                        break;

                    }
                    default: {
                        sMesg += 'Unknown Error';
                        break;

                    }
                }
                akra.logger.setSourceLocation("LocalFile.ts", 570);
                akra.logger.error(sMesg);
                ; ;
            }
            LocalFile.createDir = function createDir(pRootDirEntry, pFolders, fnCallback) {
                if(pFolders[0] == "." || pFolders[0] == "") {
                    pFolders = pFolders.slice(1);
                }
                pRootDirEntry.getDirectory(pFolders[0], {
                    create: true
                }, function (dirEntry) {
                    if(pFolders.length) {
                        LocalFile.createDir(dirEntry, pFolders.slice(1), fnCallback);
                    } else {
                        fnCallback(null);
                    }
                }, fnCallback);
            }
            LocalFile.defaultCallback = function (err) {
                if(err) {
                    LocalFile.errorHandler(err);
                }
            };
            return LocalFile;
        })();
        io.LocalFile = LocalFile;        
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
/*local file via local files system(async)*/
/**
* FIle implementation via <Local Storage>.
* ONLY FOR LOCAL FILES!!
*/
var akra;
(function (akra) {
    (function (io) {
        var StorageFile = (function (_super) {
            __extends(StorageFile, _super);
            function StorageFile(sFilename, sMode, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = io.TFile.defaultCallback; }
                        _super.call(this, sFilename, sMode, fnCallback);
            }
            StorageFile.prototype.clear = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = io.TFile.defaultCallback; }
                if(!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if(err) {
                            fnCallback(err);
                        }
                        this.clear.apply(this, _pArgv);
                    });
                    return;
                }
                ; ;
                localStorage.setItem(this.path, "");
                this._pFileMeta.size = 0;
                fnCallback(null, this);
            };
            StorageFile.prototype.read = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = io.TFile.defaultCallback; }
                if(!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if(err) {
                            fnCallback(err);
                        }
                        this.read.apply(this, _pArgv);
                    });
                    return;
                }
                ; ;
                akra.logger.setSourceLocation("StorageFile.ts", 36);
                akra.logger.assert(((this._iMode & (1 << (1))) != 0), "The file is not readable.");
                ; ;
                var pData = this.readData();
                var nPos = this._nCursorPosition;
                if(nPos) {
                    if(((this._iMode & (1 << (5))) != 0)) {
                        pData = (new Uint8Array((new Uint8Array(pData)).subarray(nPos))).buffer;
                    } else {
                        pData = pData.substr(nPos);
                    }
                }
                this.atEnd();
                if(fnCallback) {
                    fnCallback.call(this, null, pData);
                }
            };
            StorageFile.prototype.write = function (pData, fnCallback, sContentType) {
                if (typeof fnCallback === "undefined") { fnCallback = io.TFile.defaultCallback; }
                if(!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if(err) {
                            fnCallback(err);
                        }
                        this.write.apply(this, _pArgv);
                    });
                    return;
                }
                ; ;
                var iMode = this._iMode;
                var nSeek;
                var pCurrentData;
                akra.logger.setSourceLocation("StorageFile.ts", 66);
                akra.logger.assert(((iMode & (1 << (1))) != 0), "The file is not writable.");
                ; ;
                sContentType = sContentType || (((iMode & (1 << (5))) != 0) ? "application/octet-stream" : "text/plain");
                pCurrentData = this.readData();
                if(!akra.isString(pCurrentData)) {
                    pCurrentData = akra.util.abtos(pCurrentData);
                }
                nSeek = (akra.isString(pData) ? pData.length : pData.byteLength);
                if(!akra.isString(pData)) {
                    pData = akra.util.abtos(pData);
                }
                pData = (pCurrentData).substr(0, this._nCursorPosition) + (pData) + (pCurrentData).substr(this._nCursorPosition + (pData).length);
                try  {
                    localStorage.setItem(this.path, pData);
                } catch (e) {
                    fnCallback(e);
                }
                this._pFileMeta.size = pData.length;
                this._nCursorPosition += nSeek;
                fnCallback(null);
            };
            StorageFile.prototype.isExists = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = io.TFile.defaultCallback; }
                fnCallback.call(this, null, localStorage.getItem(this.path) == null);
            };
            StorageFile.prototype.remove = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = io.TFile.defaultCallback; }
                localStorage.removeItem(this.path);
                fnCallback.call(this, null);
            };
            StorageFile.prototype.readData = function () {
                var pFileMeta = this._pFileMeta;
                var pData = localStorage.getItem(this.path);
                var pDataBin;
                if(pData == null) {
                    pData = "";
                    if(((this._iMode & (1 << (1))) != 0)) {
                        localStorage.setItem(this.path, pData);
                    }
                }
                if(((this._iMode & (1 << (5))) != 0)) {
                    pDataBin = akra.util.stoab(pData);
                    pFileMeta.size = pDataBin.byteLength;
                    return pDataBin;
                } else {
                    pFileMeta.size = pData.length;
                    return pData;
                }
                return null;
            };
            StorageFile.prototype.update = function (fnCallback) {
                this._pFileMeta = null;
                this.readData();
                fnCallback.call(this, null);
            };
            return StorageFile;
        })(io.TFile);
        io.StorageFile = StorageFile;        
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (io) {
        (function (EIO) {
            EIO._map = [];
            EIO.IN = 1;
            EIO.OUT = 2;
            EIO.ATE = 4;
            EIO.APP = 8;
            EIO.TRUNC = 16;
            EIO.BINARY = 32;
            EIO.BIN = 32;
            EIO.TEXT = 64;
        })(io.EIO || (io.EIO = {}));
        var EIO = io.EIO;
        ; ;
        function filemode(sMode) {
            switch(sMode.toLowerCase()) {
                case "a+t": {
                    return EIO.IN | EIO.OUT | EIO.APP | EIO.TEXT;

                }
                case "w+t": {
                    return EIO.IN | EIO.OUT | EIO.TRUNC | EIO.TEXT;

                }
                case "r+t": {
                    return EIO.IN | EIO.OUT | EIO.TEXT;

                }
                case "at": {
                    return EIO.APP | EIO.TEXT;

                }
                case "wt": {
                    return EIO.OUT | EIO.TEXT;

                }
                case "rt": {
                    return EIO.IN | EIO.TEXT;

                }
                case "a+b": {
                    return EIO.IN | EIO.OUT | EIO.APP | EIO.BIN;

                }
                case "w+b": {
                    return EIO.IN | EIO.OUT | EIO.TRUNC | EIO.BIN;

                }
                case "r+b": {
                    return EIO.IN | EIO.OUT | EIO.BIN;

                }
                case "ab": {
                    return EIO.APP | EIO.BIN;

                }
                case "wb": {
                    return EIO.OUT | EIO.BIN;

                }
                case "rb": {
                    return EIO.IN | EIO.BIN;

                }
                case "a+": {
                    return EIO.IN | EIO.OUT | EIO.APP;

                }
                case "w+": {
                    return EIO.IN | EIO.OUT | EIO.TRUNC;

                }
                case "r+": {
                    return EIO.IN | EIO.OUT;

                }
                case "a": {
                    return EIO.APP | EIO.OUT;

                }
                case "w": {
                    return EIO.OUT;

                }
                case "r":
                default: {
                    return EIO.IN;

                }
            }
        }
        io.filemode = filemode;
        // function _fopen (sUri: string, iMode?: int): IFile;
        // function _fopen (sUri: string, sMode?: int): IFile;
        // function _fopen (pUri: IURI, iMode: int): IFile;
        // function _fopen (pUri: IURI, sMode: string): IFile;
        function _fopen(sUri, pMode) {
            if (typeof pMode === "undefined") { pMode = EIO.IN; }
            if(akra.info.api.webWorker) {
                return new io.TFile(sUri, pMode);
            } else {
                if(akra.info.api.fileSystem) {
                    return new io.LocalFile(sUri, pMode);
                } else {
                    return new io.StorageFile(sUri, pMode);
                }
            }
        }
        io.fopen = _fopen;
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (utils) {
        (function (test) {
            var test_1 = function () {
                test.shouldBeTrue("Threads support");
                test.shouldBeTrue("File creation");
                test.shouldBeTrue("File openning");
                test.shouldBeTrue("File writing(string)");
                test.shouldBeTrue("File reading(should be \"test_data\")");
                test.check(akra.info.api.webWorker);
                var pFile = akra.io.fopen("filesystem://temporary/data/data.txt", "r+");
                test.check(pFile != null);
                pFile.open(function (err, pMeta) {
                    if(err) {
                        test.failed();
                        return;
                    }
                    test.check(pMeta != null);
                    pFile.write("test_data", function (err, pMeta) {
                        if(err) {
                            test.check(null);
                        } else {
                            test.check(pMeta != null);
                            pFile.position = 0;
                            pFile.read(function (err, sData) {
                                test.check(!err && sData === "test_data");
                                console.log(arguments);
                            });
                        }
                    });
                });
            };
            new test.Test({
                name: "Local file API Test",
                main: test_1,
                description: "Test all file apis"
            });
        })(utils.test || (utils.test = {}));
        var test = utils.test;
    })(akra.utils || (akra.utils = {}));
    var utils = akra.utils;
})(akra || (akra = {}));
