var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// @data: data
/// @DATA: {data}|location()
// #define CRYPTO_API 1
// #define GUI 1
// #define WEBGL_DEBUG 1
// #define DETAILED_LOG 1
//trace all render entry
// #define __VIEW_INTERNALS__ 1
var akra;
(function (akra) {
    (function (ELogLevel) {
        ELogLevel._map = [];
        ELogLevel.NONE = 0x0000;
        ELogLevel.LOG = 0x0001;
        ELogLevel.INFORMATION = 0x0002;
        ELogLevel.WARNING = 0x0004;
        ELogLevel.ERROR = 0x0008;
        ELogLevel.CRITICAL = 0x0010;
        ELogLevel.ALL = 0x001F;
    })(akra.ELogLevel || (akra.ELogLevel = {}));
    var ELogLevel = akra.ELogLevel;
})(akra || (akra = {}));
/*I ## */
/*I ## */
/*I ## */
/*I ## */
var akra;
(function (akra) {
    var p = document.getElementsByTagName("script");
    /**@const*/ akra.DATA = (akra.DATA || ((p[p.length - 1]).getAttribute("data")) || "@DATA") + "/";
    akra.DEBUG = true;
    akra.logger;
    akra.typeOf;
    akra.typeOf = function typeOf(x) {
        var s = typeof x;
        if (s === "object") {
            if (x) {
                if (x instanceof Array) {
                    return 'array';
                } else if (x instanceof Object) {
                    return s;
                }
                var sClassName = Object.prototype.toString.call(x);
                if (sClassName == '[object Window]') {
                    return 'object';
                }
                if ((sClassName == '[object Array]' || typeof x.length == 'number' && typeof x.splice != 'undefined' && typeof x.propertyIsEnumerable != 'undefined' && !x.propertyIsEnumerable('splice'))) {
                    return 'array';
                }
                if ((sClassName == '[object Function]' || typeof x.call != 'undefined' && typeof x.propertyIsEnumerable != 'undefined' && !x.propertyIsEnumerable('call'))) {
                    return 'function';
                }
            } else {
                return 'null';
            }
        } else if (s == 'function' && typeof x.call == 'undefined') {
            return 'object';
        }
        return s;
    };
    /** @inline */
    akra.isDef = /** @inline */function (x) {
        return x !== undefined;
    };
    /** @inline */
    akra.isEmpty = /** @inline */function (x) {
        return x.length == 0;
    };
    // Note that undefined == null.
    /** @inline */
    akra.isDefAndNotNull = /** @inline */function (x) {
        return x != null;
    };
    /** @inline */
    akra.isNull = /** @inline */function (x) {
        return x === null;
    };
    /** @inline */
    akra.isBoolean = /** @inline */function (x) {
        return typeof x === "boolean";
    };
    /** @inline */
    akra.isString = /** @inline */function (x) {
        return typeof x === "string";
    };
    /** @inline */
    akra.isNumber = /** @inline */function (x) {
        return typeof x === "number";
    };
    /** @inline */
    akra.isFloat = akra.isNumber;
    /** @inline */
    akra.isInt = akra.isNumber;
    /** @inline */
    akra.isFunction = /** @inline */function (x) {
        return akra.typeOf(x) === "function";
    };
    /** @inline */
    akra.isObject = function (x) {
        var type = akra.typeOf(x);
        return type == "object" || type == "array" || type == "function";
    };
    akra.isArrayBuffer = /** @inline */function (x) {
        return x instanceof ArrayBuffer;
    };
    akra.isTypedArray = /** @inline */function (x) {
        return x !== null && typeof x === "object" && typeof x.byteOffset === "number";
    };
    akra.isBlob = /** @inline */function (x) {
        return x instanceof Blob;
    };
    /** @inline */
    akra.isArray = function (x) {
        return akra.typeOf(x) == "array";
    };
    ;
    // if (!isDef(console.assert)) {
    //     console.assert = function (isOK?: bool, ...pParams: any[]): void {
    //         if (!isOK) {
    //             trace('---------------------------');
    //             trace.apply(null, pParams);
    //             throw new Error("[assertion failed]");
    //         }
    //     }
    // }
    // export var trace = console.log.bind(console);
    // export var assert = console.assert.bind(console);
    // export var warning = console.warn.bind(console);
    // export var error = console.error.bind(console);
    // export var debug_print = (pArg:any, ...pParams: any[]): void => {
    //         trace.apply(null, arguments);
    // }
    // export var debug_assert = (isOK: bool, ...pParams: any[]): void => {
    //         assert.apply(null, arguments);
    // }
    // export var debug_warning = (pArg:any, ...pParams: any[]): void => {
    //         warning.apply(null, arguments);
    // }
    // export var debug_error = (pArg:any, ...pParams: any[]): void => {
    //         error.apply(null, arguments);
    // }
    function genArray(pType, nSize) {
        var tmp = new Array(nSize);
        for(var i = 0; i < nSize; ++i) {
            tmp[i] = (pType ? new pType() : null);
        }
        return tmp;
    }
    akra.genArray = genArray;
    /**@const*/ akra.INVALID_INDEX = 0xffff;
    // (-2147483646);
    /**@const*/ akra.MIN_INT32 = 0xffffffff;
    // ( 2147483647);
    /**@const*/ akra.MAX_INT32 = 0x7fffffff;
    // (-32768);
    /**@const*/ akra.MIN_INT16 = 0xffff;
    // ( 32767);
    /**@const*/ akra.MAX_INT16 = 0x7fff;
    // (-128);
    /**@const*/ akra.MIN_INT8 = 0xff;
    // ( 127);
    /**@const*/ akra.MAX_INT8 = 0x7f;
    /**@const*/ akra.MIN_UINT32 = 0;
    /**@const*/ akra.MAX_UINT32 = 0xffffffff;
    /**@const*/ akra.MIN_UINT16 = 0;
    /**@const*/ akra.MAX_UINT16 = 0xffff;
    /**@const*/ akra.MIN_UINT8 = 0;
    /**@const*/ akra.MAX_UINT8 = 0xff;
    /**@const*/ akra.SIZE_FLOAT64 = 8;
    /**@const*/ akra.SIZE_REAL64 = 8;
    /**@const*/ akra.SIZE_FLOAT32 = 4;
    /**@const*/ akra.SIZE_REAL32 = 4;
    /**@const*/ akra.SIZE_INT32 = 4;
    /**@const*/ akra.SIZE_UINT32 = 4;
    /**@const*/ akra.SIZE_INT16 = 2;
    /**@const*/ akra.SIZE_UINT16 = 2;
    /**@const*/ akra.SIZE_INT8 = 1;
    /**@const*/ akra.SIZE_UINT8 = 1;
    /**@const*/ akra.SIZE_BYTE = 1;
    /**@const*/ akra.SIZE_UBYTE = 1;
    //1.7976931348623157e+308
    /**@const*/ akra.MAX_FLOAT64 = Number.MAX_VALUE;
    //-1.7976931348623157e+308
    /**@const*/ akra.MIN_FLOAT64 = -Number.MAX_VALUE;
    //5e-324
    /**@const*/ akra.TINY_FLOAT64 = Number.MIN_VALUE;
    //    export const MAX_REAL64: number = Number.MAX_VALUE;   //1.7976931348623157e+308
    //    export const MIN_REAL64: number = -Number.MAX_VALUE;  //-1.7976931348623157e+308
    //    export const TINY_REAL64: number = Number.MIN_VALUE;  //5e-324
    //3.4e38
    /**@const*/ akra.MAX_FLOAT32 = 3.4e38;
    //-3.4e38
    /**@const*/ akra.MIN_FLOAT32 = -3.4e38;
    //1.5e-45
    /**@const*/ akra.TINY_FLOAT32 = 1.5e-45;
    //    export const MAX_REAL32: number = 3.4e38;     //3.4e38
    //    export const MIN_REAL32: number = -3.4e38;    //-3.4e38
    //    export const TINY_REAL32: number = 1.5e-45;   //1.5e-45
    /**@const*/ akra.DEFAULT_MATERIAL_NAME = "default";
    (function (EDataTypes) {
        EDataTypes._map = [];
        EDataTypes.BYTE = 0x1400;
        EDataTypes.UNSIGNED_BYTE = 0x1401;
        EDataTypes.SHORT = 0x1402;
        EDataTypes.UNSIGNED_SHORT = 0x1403;
        EDataTypes.INT = 0x1404;
        EDataTypes.UNSIGNED_INT = 0x1405;
        EDataTypes.FLOAT = 0x1406;
    })(akra.EDataTypes || (akra.EDataTypes = {}));
    var EDataTypes = akra.EDataTypes;
    ;
    (function (EDataTypeSizes) {
        EDataTypeSizes._map = [];
        EDataTypeSizes.BYTES_PER_BYTE = 1;
        EDataTypeSizes.BYTES_PER_UNSIGNED_BYTE = 1;
        EDataTypeSizes.BYTES_PER_UBYTE = 1;
        EDataTypeSizes.BYTES_PER_SHORT = 2;
        EDataTypeSizes.BYTES_PER_UNSIGNED_SHORT = 2;
        EDataTypeSizes.BYTES_PER_USHORT = 2;
        EDataTypeSizes.BYTES_PER_INT = 4;
        EDataTypeSizes.BYTES_PER_UNSIGNED_INT = 4;
        EDataTypeSizes.BYTES_PER_UINT = 4;
        EDataTypeSizes.BYTES_PER_FLOAT = 4;
    })(akra.EDataTypeSizes || (akra.EDataTypeSizes = {}));
    var EDataTypeSizes = akra.EDataTypeSizes;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
        function getTypeSize(eType) {
        switch(eType) {
            case EDataTypes.BYTE:
            case EDataTypes.UNSIGNED_BYTE:
                return 1;
            case EDataTypes.SHORT:
            case EDataTypes.UNSIGNED_SHORT:
                //case EImageTypes.UNSIGNED_SHORT_4_4_4_4:
                //case EImageTypes.UNSIGNED_SHORT_5_5_5_1:
                //case EImageTypes.UNSIGNED_SHORT_5_6_5:
                return 2;
            case EDataTypes.INT:
            case EDataTypes.UNSIGNED_INT:
            case EDataTypes.FLOAT:
                return 4;
            default:
 {
                    akra.logger.setSourceLocation("common.ts", 425);
                    akra.logger.error('unknown data/image type used');
                }
                ;
        }
    }
    akra.getTypeSize = getTypeSize;
    akra.sid = /** @inline */function () {
        return (++akra.sid._iTotal);
    };
    akra.sid._iTotal = 0;
    /** @inline */function now() {
        return Date.now();
    }
    akra.now = now;
    /** @inline */function memcpy(pDst, iDstOffset, pSrc, iSrcOffset, nLength) {
        var dstU8 = new Uint8Array(pDst, iDstOffset, nLength);
        var srcU8 = new Uint8Array(pSrc, iSrcOffset, nLength);
        dstU8.set(srcU8);
    }
    akra.memcpy = memcpy;
    ;
    //export function
    (window).URL = (window).URL ? (window).URL : (window).webkitURL ? (window).webkitURL : null;
    (window).BlobBuilder = (window).WebKitBlobBuilder || (window).MozBlobBuilder || (window).BlobBuilder;
    (window).requestFileSystem = (window).requestFileSystem || (window).webkitRequestFileSystem;
    (window).requestAnimationFrame = (window).requestAnimationFrame || (window).webkitRequestAnimationFrame || (window).mozRequestAnimationFrame;
    (window).WebSocket = (window).WebSocket || (window).MozWebSocket;
    // (<any>window).storageInfo = (<any>window).storageInfo || (<any>window).webkitPersistentStorage ;
    (window).storageInfo = (window).storageInfo || (window).webkitTemporaryStorage;
    (navigator).gamepads = (navigator).gamepads || (navigator).webkitGamepads;
    (navigator).getGamepads = (navigator).getGamepads || (navigator).webkitGetGamepads;
    Worker.prototype.postMessage = (Worker).prototype.webkitPostMessage || Worker.prototype.postMessage;
})(akra || (akra = {}));
;
function utf8_encode(argString) {
    // Encodes an ISO-8859-1 string to UTF-8
    //
    // version: 1109.2015
    // discuss at: http://phpjs.org/functions/utf8_encode
    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: sowberry
    // +    tweaked by: Jack
    // +   bugfixed by: Onno Marsman
    // +   improved by: Yves Sucaet
    // +   bugfixed by: Onno Marsman
    // +   bugfixed by: Ulrich
    // +   bugfixed by: Rafal Kukawski
    // *     example 1: utf8_encode('Kevin van Zonneveld');
    // *     returns 1: 'Kevin van Zonneveld'
    if (argString === null || typeof argString === "undefined") {
        return "";
    }
    // .replace(/\r\n/g, "\n").replace(/\r/g, "\n");
    var string = (argString + "");
    var utftext = "", start, end, stringl = 0;
    start = end = 0;
    stringl = string.length;
    for(var n = 0; n < stringl; n++) {
        var c1 = string.charCodeAt(n);
        var enc = null;
        if (c1 < 128) {
            end++;
        } else if (c1 > 127 && c1 < 2048) {
            enc = String.fromCharCode((c1 >> 6) | 192) + String.fromCharCode((c1 & 63) | 128);
        } else {
            enc = String.fromCharCode((c1 >> 12) | 224) + String.fromCharCode(((c1 >> 6) & 63) | 128) + String.fromCharCode((c1 & 63) | 128);
        }
        if (enc !== null) {
            if (end > start) {
                utftext += string.slice(start, end);
            }
            utftext += enc;
            start = end = n + 1;
        }
    }
    if (end > start) {
        utftext += string.slice(start, stringl);
    }
    return utftext;
}
function utf8_decode(str_data) {
    // http://kevin.vanzonneveld.net
    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
    // +      input by: Aman Gupta
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: Norman "zEh" Fuchs
    // +   bugfixed by: hitwork
    // +   bugfixed by: Onno Marsman
    // +      input by: Brett Zamir (http://brett-zamir.me)
    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // *     example 1: utf8_decode('Kevin van Zonneveld');
    // *     returns 1: 'Kevin van Zonneveld'
        var tmp_arr = [], i = 0, ac = 0, c1 = 0, c2 = 0, c3 = 0;
    str_data += "";
    while(i < str_data.length) {
        c1 = str_data.charCodeAt(i);
        if (c1 < 128) {
            tmp_arr[ac++] = String.fromCharCode(c1);
            i++;
        } else if (c1 > 191 && c1 < 224) {
            c2 = str_data.charCodeAt(i + 1);
            tmp_arr[ac++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
            i += 2;
        } else {
            c2 = str_data.charCodeAt(i + 1);
            c3 = str_data.charCodeAt(i + 2);
            tmp_arr[ac++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            i += 3;
        }
    }
    return tmp_arr.join("");
}
var akra;
(function (akra) {
    (function (libs) {
        /**
        * Encodes an ISO-8859-1 string to UTF-8
        * @treturn String
        */
        String.prototype.toUTF8 = function () {
            return utf8_encode(this);
        };
        /**
        * Converts a UTF-8 encoded string to ISO-8859-1
        * @treturn String
        */
        String.prototype.fromUTF8 = function () {
            return utf8_decode(this);
        };
        String.prototype.replaceAt = function (n, chr) {
            return this.substr(0, n) + chr + this.substr(n + chr.length);
        };
        Object.defineProperty(Array.prototype, 'first', {
            enumerable: false,
            configurable: true,
            get: function () {
                return this[0];
            }
        });
        Object.defineProperty(Array.prototype, 'last', {
            enumerable: false,
            configurable: true,
            get: function () {
                return this[this.length - 1];
            }
        });
        Object.defineProperty(Array.prototype, 'el', {
            enumerable: false,
            configurable: true,
            value: function (i) {
                i = i || 0;
                return this[i < 0 ? this.length + i : i];
            }
        });
        Object.defineProperty(Array.prototype, 'clear', {
            enumerable: false,
            configurable: true,
            value: function () {
                this.length = 0;
            }
        });
        Object.defineProperty(Array.prototype, 'swap', {
            enumerable: false,
            configurable: true,
            value: function (i, j) {
                if (i < this.length && j < this.length) {
                    var t = this[i];
                    this[i] = this[j];
                    this[j] = t;
                }
            }
        });
        Object.defineProperty(Array.prototype, 'insert', {
            enumerable: false,
            configurable: true,
            value: function (pElement) {
                if (typeof pElement.length === 'number') {
                    for(var i = 0, n = pElement.length; i < n; ++i) {
                        this.push(pElement[i]);
                    }
                    ;
                } else {
                    this.push(pElement);
                }
                return this;
            }
        });
        Number.prototype.toHex = function (iLength) {
            var sValue = this.toString(16);
            for(var i = 0; i < iLength - sValue.length; ++i) {
                sValue = '0' + sValue;
            }
            return sValue;
        };
        Number.prototype.printBinary = function (isPretty) {
            if (typeof isPretty === "undefined") { isPretty = true; }
            var res = "";
            for(var i = 0; i < 32; ++i) {
                if (i && (i % 4) == 0 && isPretty) {
                    res = ' ' + res;
                }
                (this >> i & 0x1 ? res = '1' + res : res = '0' + res);
            }
            return res;
        };
    })(akra.libs || (akra.libs = {}));
    var libs = akra.libs;
})(akra || (akra = {}));
var akra;
(function (akra) {
    /**
    * FLAG(x)
    * Сдвиг единицы на @a x позиций влево.
    */
    /**
    * TEST_BIT(value, bit)
    * Проверка того что у @a value бит под номером @a bit равен единице.
    */
    /**
    * TEST_ALL(value, set)
    * Проверка того что у @a value равны единице все биты,
    * которые равны единице у @a set.
    */
    /**
    * TEST_ANY(value, set)
    * Проверка того что у @a value равны единице хотя бы какие то из битов,
    * которые равны единице у @a set.
    */
    /**
    * SET_BIT(value, bit)
    * Выставляет бит под номером @a bit у числа @a value равным единице
    */
    /**
    * CLEAR_BIT(value, bit)
    * Выставляет бит под номером @a bit у числа @a value равным нулю
    */
    /**
    * SET_ALL(value, set)
    * Выставляет все биты у числа @a value равными единице,
    * которые равны единице у числа @a set
    */
    /**
    * CLEAR_ALL(value, set)
    * Выставляет все биты у числа @a value равными нулю,
    * которые равны единице у числа @a set
    */
    //#define SET_ALL(value, set, setting) (setting ? SET_ALL(value, set) : CLEAR_ALL(value, set))
    (function (bf) {
        /**
        * Сдвиг единицы на @a x позиций влево.
        * @inline
        */
        bf.flag = /** @inline */function (x) {
            return (1 << (x));
        };
        /**
        * Проверка того что у @a value бит под номером @a bit равен единице.
        * @inline
        */
        bf.testBit = /** @inline */function (value, bit) {
            return ((value & ((1 << (bit)))) != 0);
        };
        /**
        * Проверка того что у @a value равны единице все биты,
        * которые равны единице у @a set.
        * @inline
        */
        bf.testAll = /** @inline */function (value, set) {
            return (((value) & (set)) == (set));
        };
        /**
        * Проверка того что у @a value равны единице хотя бы какие то из битов,
        * которые равны единице у @a set.
        * @inline
        */
        bf.testAny = /** @inline */function (value, set) {
            return (((value) & (set)) != 0);
        };
        /**
        * Выставляет бит под номером @a bit у числа @a value равным единице
        * @inline
        */
        bf.setBit = /** @inline */function (value, bit, setting) {
            if (typeof setting === "undefined") { setting = true; }
            return (setting ? ((value) |= ((1 << ((bit))))) : (((value) &= ~((1 << ((bit)))))));
        };
        /**
        *
        * @inline
        */
        bf.clearBit = /** @inline */function (value, bit) {
            return ((value) &= ~((1 << ((bit)))));
        };
        /**
        * Выставляет бит под номером @a bit у числа @a value равным нулю
        * @inline
        */
        bf.setAll = /** @inline */function (value, set, setting) {
            if (typeof setting === "undefined") { setting = true; }
            return (setting ? ((value) |= (set)) : ((value) &= ~(set)));
        };
        /**
        * Выставляет все биты у числа @a value равными единице,
        * которые равны единице у числа @a set
        * @inline
        */
        bf.clearAll = /** @inline */function (value, set) {
            return ((value) &= ~(set));
        };
        /**
        * Выставляет все биты у числа @a value равными нулю,
        * которые равны единице у числа @a set
        * @inline
        */
        bf.equal = function (value, src) {
            value = src;
        };
        /**
        * Прирасваивает числу @a value число @a src
        * @inline
        */
        bf.isEqual = /** @inline */function (value, src) {
            return value == src;
        };
        /**
        * Если число @a value равно числу @a src возвращается true
        * @inline
        */
        bf.isNotEqaul = /** @inline */function (value, src) {
            return value != src;
        };
        /**
        * Прирасваивает числу @a value число @a src
        * @inline
        */
        bf.set = function (value, src) {
            value = src;
        };
        /**
        * Обнуляет число @a value
        * @inline
        */
        bf.clear = function (value) {
            value = 0;
        };
        /**
        * Выставляет все биты у числа @a value равными единице,
        * которые равны единице у числа @a src
        * @inline
        */
        bf.setFlags = /** @inline */function (value, src) {
            return (value |= src);
        };
        /**
        * Выставляет все биты у числа @a value равными нулю,
        * которые равны единице у числа @a src
        * @inline
        */
        bf.clearFlags = /** @inline */function (value, src) {
            return value &= ~src;
        };
        /**
        * Проверяет равно ли число @a value нулю. Если равно возвращает true.
        * Если не равно возвращает false.
        * @inline
        */
        bf.isEmpty = /** @inline */function (value) {
            return (value == 0);
        };
        /**
        * Возвращает общее количество бит числа @a value.
        * На самом деле возвращает всегда 32.
        * @inline
        */
        bf.totalBits = /** @inline */function (value) {
            return 32;
        };
        /**
        * Возвращает общее количество ненулевых бит числа @a value.
        * @inline
        */
        bf.totalSet = function (value) {
            var count = 0;
            var total = (32);
            for(var i = total; i; --i) {
                count += (value & 1);
                value >>= 1;
            }
            return (count);
        };
        /**
        * Convert N bit colour channel value to P bits. It fills P bits with the
        * bit pattern repeated. (this is /((1<<n)-1) in fixed point)
        */
        /** @inline */function fixedToFixed(value, n, p) {
            if (n > p) {
                // Less bits required than available; this is easy
                value >>= n - p;
            } else if (n < p) {
                // More bits required than are there, do the fill
                // Use old fashioned division, probably better than a loop
                if (value == 0) {
                    value = 0;
                } else if (value == ((1) << n) - 1) {
                    value = (1 << p) - 1;
                } else {
                    value = value * (1 << p) / ((1 << n) - 1);
                }
            }
            return value;
        }
        bf.fixedToFixed = fixedToFixed;
        /**
        * Convert floating point colour channel value between 0.0 and 1.0 (otherwise clamped)
        * to integer of a certain number of bits. Works for any value of bits between 0 and 31.
        */
        /** @inline */function floatToFixed(value, bits) {
            if (value <= 0.0) {
                return 0;
            } else if (value >= 1.0) {
                return (1 << bits) - 1;
            } else {
                return (value * (1 << bits));
            }
        }
        bf.floatToFixed = floatToFixed;
        /**
        * Fixed point to float
        */
        /** @inline */function fixedToFloat(value, bits) {
            return (value & ((1 << bits) - 1)) / ((1 << bits) - 1);
        }
        bf.fixedToFloat = fixedToFloat;
        /**
        * Write a n*8 bits integer value to memory in native endian.
        */
        /** @inline */function intWrite(pDest, n, value) {
            switch(n) {
                case 1:
                    pDest[0] = value;
                    break;
                case 2:
                    pDest[1] = ((value >> 8) & 0xFF);
                    pDest[0] = (value & 0xFF);
                    break;
                case 3:
                    pDest[2] = ((value >> 16) & 0xFF);
                    pDest[1] = ((value >> 8) & 0xFF);
                    pDest[0] = (value & 0xFF);
                    break;
                case 4:
                    pDest[3] = ((value >> 24) & 0xFF);
                    pDest[2] = ((value >> 16) & 0xFF);
                    pDest[1] = ((value >> 8) & 0xFF);
                    pDest[0] = (value & 0xFF);
                    break;
            }
        }
        bf.intWrite = intWrite;
        /**
        * Read a n*8 bits integer value to memory in native endian.
        */
        /** @inline */function intRead(pSrc, n) {
            switch(n) {
                case 1:
                    return pSrc[0];
                case 2:
                    return pSrc[0] | pSrc[1] << 8;
                case 3:
                    return pSrc[0] | pSrc[1] << 8 | pSrc[2] << 16;
                case 4:
                    return (pSrc[0]) | (pSrc[1] << 8) | (pSrc[2] << 16) | (pSrc[3] << 24);
            }
            return 0;
        }
        bf.intRead = intRead;
                //float32/uint32 union
        var _u32 = new Uint32Array(1);
        var _f32 = new Float32Array(_u32.buffer);
        /** @inline */function floatToHalf(f) {
            _f32[0] = f;
            return floatToHalfI(_u32[0]);
        }
        bf.floatToHalf = floatToHalf;
        /** @inline */function floatToHalfI(i) {
            var s = (i >> 16) & 0x00008000;
            var e = ((i >> 23) & 0x000000ff) - (127 - 15);
            var m = i & 0x007fffff;
            if (e <= 0) {
                if (e < -10) {
                    return 0;
                }
                m = (m | 0x00800000) >> (1 - e);
                return (s | (m >> 13));
            } else if (e == 0xff - (127 - 15)) {
                // Inf
                if (m == 0) {
                    return (s | 0x7c00);
                } else// NAN
                 {
                    m >>= 13;
                    return (s | 0x7c00 | m | (m == 0));
                }
            } else {
                // Overflow
                if (e > 30) {
                    return (s | 0x7c00);
                }
                return (s | (e << 10) | (m >> 13));
            }
        }
        bf.floatToHalfI = floatToHalfI;
        /**
        * Convert a float16 (NV_half_float) to a float32
        * Courtesy of OpenEXR
        */
        /** @inline */function halfToFloat(y) {
            _u32[0] = /*not inlined, because supportes only single statement functions(cur. st. count: 8)*/halfToFloatI(y);
            return _f32[0];
        }
        bf.halfToFloat = halfToFloat;
        /** Converts a half in uint16 format to a float
        in uint32 format
        */
        /** @inline */function halfToFloatI(y) {
            var s = (y >> 15) & 0x00000001;
            var e = (y >> 10) & 0x0000001f;
            var m = y & 0x000003ff;
            if (e == 0) {
                // Plus or minus zero
                if (m == 0) {
                    return s << 31;
                } else// Denormalized number -- renormalize it
                 {
                    while(!(m & 0x00000400)) {
                        m <<= 1;
                        e -= 1;
                    }
                    e += 1;
                    m &= ~0x00000400;
                }
            } else if (e == 31) {
                //Inf
                if (m == 0) {
                    return (s << 31) | 0x7f800000;
                } else//NaN
                 {
                    return (s << 31) | 0x7f800000 | (m << 13);
                }
            }
            e = e + (127 - 15);
            m = m << 13;
            return (s << 31) | (e << 23) | m;
        }
        bf.halfToFloatI = halfToFloatI;
    })(akra.bf || (akra.bf = {}));
    var bf = akra.bf;
})(akra || (akra = {}));
var akra;
(function (akra) {
    // #include "Singleton.ts"
    (function (util) {
        /* extends Singleton*/
        var Logger = (function () {
            function Logger() {
                //super();
                this._eUnknownCode = 0;
                this._sUnknownMessage = "Unknown code";
                this._eLogLevel = akra.ELogLevel.ALL;
                this._pGeneralRoutineMap = {};
                this._pCurrentSourceLocation = {
                    file: "",
                    line: 0
                };
                this._pLastLogEntity = {
                    code: this._eUnknownCode,
                    location: this._pCurrentSourceLocation,
                    message: this._sUnknownMessage,
                    info: null
                };
                this._pCodeFamilyMap = {};
                this._pCodeFamilyList = [];
                this._pCodeInfoMap = {};
                this._pCodeFamilyRoutineDMap = {};
                this._nFamilyGenerator = 0;
            }
            Logger._sDefaultFamilyName = "CodeFamily";
            Logger.prototype.init = function () {
                //TODO: Load file
                return true;
            };
            Logger.prototype.setLogLevel = function (eLevel) {
                this._eLogLevel = eLevel;
            };
            Logger.prototype.getLogLevel = function () {
                return this._eLogLevel;
            };
            Logger.prototype.registerCode = function (eCode, sMessage) {
                if (typeof sMessage === "undefined") { sMessage = this._sUnknownMessage; }
                if (((((this)._pCodeInfoMap[(eCode)]) !== undefined))) {
                    return false;
                }
                var sFamilyName = this.getFamilyName(eCode);
                if (((sFamilyName) === null)) {
                    return false;
                }
                var pCodeInfo = {
                    code: eCode,
                    message: sMessage,
                    familyName: sFamilyName
                };
                this._pCodeInfoMap[eCode] = pCodeInfo;
                return true;
            };
            Logger.prototype.setUnknownCode = function (eCode, sMessage) {
                this._eUnknownCode = eCode;
                this._sUnknownMessage = sMessage;
            };
            Logger.prototype.registerCodeFamily = function (eCodeMin, eCodeMax, sFamilyName) {
                if (!((sFamilyName) !== undefined)) {
                    sFamilyName = this.generateFamilyName();
                }
                if (((((this)._pCodeFamilyMap[(sFamilyName)]) !== undefined))) {
                    return false;
                }
                if (!this.isValidCodeInterval(eCodeMin, eCodeMax)) {
                    return false;
                }
                var pCodeFamily = {
                    familyName: sFamilyName,
                    codeMin: eCodeMin,
                    codeMax: eCodeMax
                };
                this._pCodeFamilyMap[sFamilyName] = pCodeFamily;
                this._pCodeFamilyList.push(pCodeFamily);
                return true;
            };
            Logger.prototype.getFamilyName = function (eCode) {
                var i = 0;
                var pCodeFamilyList = this._pCodeFamilyList;
                var pCodeFamily;
                for(i = 0; i < pCodeFamilyList.length; i++) {
                    pCodeFamily = pCodeFamilyList[i];
                    if (pCodeFamily.codeMin <= eCode && pCodeFamily.codeMax >= eCode) {
                        return pCodeFamily.familyName;
                    }
                }
                return null;
            };
            Logger.prototype.setCodeFamilyRoutine = function () {
                var sFamilyName = null;
                var fnLogRoutine = null;
                var eLevel = akra.ELogLevel.LOG;
                if ((typeof (arguments[0]) === "number")) {
                    sFamilyName = this.getFamilyName(arguments[0]);
                    fnLogRoutine = arguments[1];
                    eLevel = arguments[2];
                    if (((sFamilyName) === null)) {
                        return false;
                    }
                } else if ((typeof (arguments[0]) === "string")) {
                    sFamilyName = arguments[0];
                    fnLogRoutine = arguments[1];
                    eLevel = arguments[2];
                }
                if (!((((this)._pCodeFamilyMap[(sFamilyName)]) !== undefined))) {
                    return false;
                }
                var pCodeFamilyRoutineMap = this._pCodeFamilyRoutineDMap[sFamilyName];
                if (!((pCodeFamilyRoutineMap) !== undefined)) {
                    pCodeFamilyRoutineMap = this._pCodeFamilyRoutineDMap[sFamilyName] = {};
                }
                if (((((eLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.LOG)) == (/*checked (origin: akra)>>*/akra.ELogLevel.LOG)))) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.LOG] = fnLogRoutine;
                }
                if (((((eLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.INFORMATION)) == (/*checked (origin: akra)>>*/akra.ELogLevel.INFORMATION)))) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.INFORMATION] = fnLogRoutine;
                }
                if (((((eLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.WARNING)) == (/*checked (origin: akra)>>*/akra.ELogLevel.WARNING)))) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.WARNING] = fnLogRoutine;
                }
                if (((((eLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.ERROR)) == (/*checked (origin: akra)>>*/akra.ELogLevel.ERROR)))) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.ERROR] = fnLogRoutine;
                }
                if (((((eLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.CRITICAL)) == (/*checked (origin: akra)>>*/akra.ELogLevel.CRITICAL)))) {
                    pCodeFamilyRoutineMap[akra.ELogLevel.CRITICAL] = fnLogRoutine;
                }
                return true;
            };
            Logger.prototype.setLogRoutine = function (fnLogRoutine, eLevel) {
                if (((((eLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.LOG)) == (/*checked (origin: akra)>>*/akra.ELogLevel.LOG)))) {
                    this._pGeneralRoutineMap[akra.ELogLevel.LOG] = fnLogRoutine;
                }
                if (((((eLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.INFORMATION)) == (/*checked (origin: akra)>>*/akra.ELogLevel.INFORMATION)))) {
                    this._pGeneralRoutineMap[akra.ELogLevel.INFORMATION] = fnLogRoutine;
                }
                if (((((eLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.WARNING)) == (/*checked (origin: akra)>>*/akra.ELogLevel.WARNING)))) {
                    this._pGeneralRoutineMap[akra.ELogLevel.WARNING] = fnLogRoutine;
                }
                if (((((eLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.ERROR)) == (/*checked (origin: akra)>>*/akra.ELogLevel.ERROR)))) {
                    this._pGeneralRoutineMap[akra.ELogLevel.ERROR] = fnLogRoutine;
                }
                if (((((eLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.CRITICAL)) == (/*checked (origin: akra)>>*/akra.ELogLevel.CRITICAL)))) {
                    this._pGeneralRoutineMap[akra.ELogLevel.CRITICAL] = fnLogRoutine;
                }
            };
            Logger.prototype.setSourceLocation = function () {
                var sFile;
                var iLine;
                if (arguments.length === 2) {
                    sFile = arguments[0];
                    iLine = arguments[1];
                } else {
                    if (((arguments[0]) !== undefined) && !(((arguments[0]) === null))) {
                        sFile = arguments[0].file;
                        iLine = arguments[0].line;
                    } else {
                        sFile = "";
                        iLine = 0;
                    }
                }
                this._pCurrentSourceLocation.file = sFile;
                this._pCurrentSourceLocation.line = iLine;
            };
            Logger.prototype.log = function () {
                var pArgs = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    pArgs[_i] = arguments[_i + 0];
                }
                if (!((((this._eLogLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.LOG)) == (/*checked (origin: akra)>>*/akra.ELogLevel.LOG)))) {
                    return;
                }
                var fnLogRoutine = this._pGeneralRoutineMap[akra.ELogLevel.LOG];
                if (!((fnLogRoutine) !== undefined)) {
                    return;
                }
                var pLogEntity = this._pLastLogEntity;
                pLogEntity.code = this._eUnknownCode;
                pLogEntity.location = this._pCurrentSourceLocation;
                pLogEntity.info = pArgs;
                pLogEntity.message = this._sUnknownMessage;
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.info = function () {
                if (!((((this._eLogLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.INFORMATION)) == (/*checked (origin: akra)>>*/akra.ELogLevel.INFORMATION)))) {
                    return;
                }
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.INFORMATION);
                if (((fnLogRoutine) === null)) {
                    return;
                }
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.warning = function () {
                if (!((((this._eLogLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.WARNING)) == (/*checked (origin: akra)>>*/akra.ELogLevel.WARNING)))) {
                    return;
                }
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.WARNING);
                if (((fnLogRoutine) === null)) {
                    return;
                }
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.error = function () {
                if (!((((this._eLogLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.ERROR)) == (/*checked (origin: akra)>>*/akra.ELogLevel.ERROR)))) {
                    return;
                }
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.ERROR);
                if (((fnLogRoutine) === null)) {
                    return;
                }
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.criticalError = function () {
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.CRITICAL);
                var sSystemMessage = "A Critical error has occured! Code: " + pLogEntity.code.toString();
                if (((((this._eLogLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.CRITICAL)) == (/*checked (origin: akra)>>*/akra.ELogLevel.CRITICAL))) && !((fnLogRoutine) === null)) {
                    fnLogRoutine.call(null, pLogEntity);
                }
                alert(sSystemMessage);
                throw new Error(sSystemMessage);
            };
            Logger.prototype.assert = function () {
                var bCondition = arguments[0];
                if (!bCondition) {
                    var pLogEntity;
                    var fnLogRoutine;
                    var pArgs = [];
                    for(var i = 1; i < arguments.length; i++) {
                        pArgs[i - 1] = arguments[i];
                    }
                    pLogEntity = this.prepareLogEntity.apply(this, pArgs);
                    fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, akra.ELogLevel.CRITICAL);
                    var sSystemMessage = "A error has occured! Code: " + pLogEntity.code.toString() + "\n Accept to exit, refuse to continue.";
                    if (((((this._eLogLevel) & (/*checked (origin: akra)>>*/akra.ELogLevel.CRITICAL)) == (/*checked (origin: akra)>>*/akra.ELogLevel.CRITICAL))) && !((fnLogRoutine) === null)) {
                        fnLogRoutine.call(null, pLogEntity);
                    }
                    if (confirm(sSystemMessage)) {
                        throw new Error(sSystemMessage);
                    }
                }
            };
            Logger.prototype.generateFamilyName = function () {
                var sSuffix = (this._nFamilyGenerator++);
                var sName = Logger._sDefaultFamilyName + sSuffix;
                if (((((this)._pCodeFamilyMap[(sName)]) !== undefined))) {
                    return this.generateFamilyName();
                } else {
                    return sName;
                }
            };
            Logger.prototype.isValidCodeInterval = function (eCodeMin, eCodeMax) {
                if (eCodeMin > eCodeMax) {
                    return false;
                }
                var i = 0;
                var pCodeFamilyList = this._pCodeFamilyList;
                var pCodeFamily;
                for(i = 0; i < pCodeFamilyList.length; i++) {
                    pCodeFamily = pCodeFamilyList[i];
                    if ((pCodeFamily.codeMin <= eCodeMin && pCodeFamily.codeMax >= eCodeMin) || (pCodeFamily.codeMin <= eCodeMax && pCodeFamily.codeMax >= eCodeMax)) {
                        return false;
                    }
                }
                return true;
            };
            Logger.prototype.isUsedFamilyName = /** @inline */function (sFamilyName) {
                return ((this._pCodeFamilyMap[sFamilyName]) !== undefined);
            };
            Logger.prototype.isUsedCode = /** @inline */function (eCode) {
                return ((this._pCodeInfoMap[eCode]) !== undefined);
            };
            Logger.prototype.isLogEntity = function (pObj) {
                if (akra.isObject(pObj) && ((pObj.code) !== undefined) && ((pObj.location) !== undefined)) {
                    return true;
                }
                return false;
            };
            Logger.prototype.isLogCode = /** @inline */function (eCode) {
                return (typeof (eCode) === "number");
            };
            Logger.prototype.prepareLogEntity = function () {
                var eCode = this._eUnknownCode;
                var sMessage = this._sUnknownMessage;
                var pInfo = null;
                if (arguments.length === 1 && this.isLogEntity(arguments[0])) {
                    var pEntity = arguments[0];
                    eCode = pEntity.code;
                    pInfo = pEntity.info;
                    this.setSourceLocation(pEntity.location);
                    if (!((pEntity.message) !== undefined)) {
                        var pCodeInfo = this._pCodeInfoMap[eCode];
                        if (((pCodeInfo) !== undefined)) {
                            sMessage = pCodeInfo.message;
                        }
                    }
                } else {
                    if (((typeof ((arguments[0])) === "number"))) {
                        eCode = arguments[0];
                        if (arguments.length > 1) {
                            pInfo = new Array(arguments.length - 1);
                            var i = 0;
                            for(i = 0; i < pInfo.length; i++) {
                                pInfo[i] = arguments[i + 1];
                            }
                        }
                    } else {
                        eCode = this._eUnknownCode;
                        // if(arguments.length > 0){
                        pInfo = new Array(arguments.length);
                        var i = 0;
                        for(i = 0; i < pInfo.length; i++) {
                            pInfo[i] = arguments[i];
                        }
                        // }
                        // else {
                        //     pInfo = null;
                        // }
                                            }
                    var pCodeInfo = this._pCodeInfoMap[eCode];
                    if (((pCodeInfo) !== undefined)) {
                        sMessage = pCodeInfo.message;
                    }
                }
                var pLogEntity = this._pLastLogEntity;
                pLogEntity.code = eCode;
                pLogEntity.location = this._pCurrentSourceLocation;
                pLogEntity.message = sMessage;
                pLogEntity.info = pInfo;
                return pLogEntity;
            };
            Logger.prototype.getCodeRoutineFunc = function (eCode, eLevel) {
                var pCodeInfo = this._pCodeInfoMap[eCode];
                var fnLogRoutine;
                if (!((pCodeInfo) !== undefined)) {
                    fnLogRoutine = this._pGeneralRoutineMap[eLevel];
                    return ((fnLogRoutine) !== undefined) ? fnLogRoutine : null;
                }
                var pCodeFamilyRoutineMap = this._pCodeFamilyRoutineDMap[pCodeInfo.familyName];
                if (!((pCodeFamilyRoutineMap) !== undefined) || !((pCodeFamilyRoutineMap[eLevel]) !== undefined)) {
                    fnLogRoutine = this._pGeneralRoutineMap[eLevel];
                    return ((fnLogRoutine) !== undefined) ? fnLogRoutine : null;
                }
                fnLogRoutine = pCodeFamilyRoutineMap[eLevel];
                return fnLogRoutine;
            };
            return Logger;
        })();
        util.Logger = Logger;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        util.logger = new util.Logger();
        util.logger.init();
        util.logger.setUnknownCode(0, "Unknown code.");
        util.logger.setLogLevel(akra.ELogLevel.ALL);
        //Default code families
        util.logger.registerCodeFamily(0, 100, "SystemCodes");
        util.logger.registerCodeFamily(2000, 2199, "ParserSyntaxErrors");
        util.logger.registerCodeFamily(2200, 2500, "EffectSyntaxErrors");
        //Default log routines
        function sourceLocationToString(pLocation) {
            var pDate = new Date();
            var sTime = pDate.getHours() + ":" + pDate.getMinutes() + "." + pDate.getSeconds();
            var sLocation = "[" + pLocation.file + ":" + pLocation.line.toString() + " " + sTime + "]: ";
            return sLocation;
        }
        function logRoutine(pLogEntity) {
            var pArgs = pLogEntity.info;
            pArgs.unshift(sourceLocationToString(pLogEntity.location));
            console["log"].apply(console, pArgs);
        }
        function warningRoutine(pLogEntity) {
            var pArgs = pLogEntity.info;
            pArgs.unshift("Code: " + pLogEntity.code.toString());
            pArgs.unshift(sourceLocationToString(pLogEntity.location));
            console["warn"].apply(console, pArgs);
        }
        function errorRoutine(pLogEntity) {
            var pArgs = pLogEntity.info;
            pArgs.unshift(pLogEntity.message);
            pArgs.unshift("Error code: " + pLogEntity.code.toString() + ".");
            pArgs.unshift(sourceLocationToString(pLogEntity.location));
            console["error"].apply(console, pArgs);
        }
        util.logger.setLogRoutine(logRoutine, akra.ELogLevel.LOG | akra.ELogLevel.INFORMATION);
        util.logger.setLogRoutine(warningRoutine, akra.ELogLevel.WARNING);
        util.logger.setLogRoutine(errorRoutine, akra.ELogLevel.ERROR | akra.ELogLevel.CRITICAL);
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.logger = akra.util.logger;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    (function (EEventTypes) {
        EEventTypes._map = [];
        EEventTypes._map[0] = "BROADCAST";
        EEventTypes.BROADCAST = 0;
        EEventTypes._map[1] = "UNICAST";
        EEventTypes.UNICAST = 1;
    })(akra.EEventTypes || (akra.EEventTypes = {}));
    var EEventTypes = akra.EEventTypes;
    ;
    // callOnce(sSignal: string, fnListener?: Function, eType?: EEventTypes): bool;
    })(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    akra.createEngine;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ESceneTypes) {
        ESceneTypes._map = [];
        ESceneTypes._map[0] = "TYPE_3D";
        ESceneTypes.TYPE_3D = 0;
        ESceneTypes._map[1] = "TYPE_2D";
        ESceneTypes.TYPE_2D = 1;
    })(akra.ESceneTypes || (akra.ESceneTypes = {}));
    var ESceneTypes = akra.ESceneTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    (function (EEntityTypes) {
        EEntityTypes._map = [];
        EEntityTypes._map[0] = "UNKNOWN";
        EEntityTypes.UNKNOWN = 0;
        EEntityTypes._map[1] = "NODE";
        EEntityTypes.NODE = 1;
        EEntityTypes._map[2] = "JOINT";
        EEntityTypes.JOINT = 2;
        EEntityTypes._map[3] = "SCENE_NODE";
        EEntityTypes.SCENE_NODE = 3;
        EEntityTypes._map[4] = "CAMERA";
        EEntityTypes.CAMERA = 4;
        EEntityTypes._map[5] = "SHADOW_CASTER";
        EEntityTypes.SHADOW_CASTER = 5;
        EEntityTypes._map[6] = "MODEL_ENTRY";
        EEntityTypes.MODEL_ENTRY = 6;
        EEntityTypes.LIGHT = 37;
        EEntityTypes.SCENE_OBJECT = 64;
        EEntityTypes._map[65] = "MODEL";
        EEntityTypes.MODEL = 65;
        EEntityTypes._map[66] = "TERRAIN";
        EEntityTypes.TERRAIN = 66;
        EEntityTypes._map[67] = "TERRAIN_ROAM";
        EEntityTypes.TERRAIN_ROAM = 67;
        EEntityTypes._map[68] = "TERRAIN_SECTION";
        EEntityTypes.TERRAIN_SECTION = 68;
        EEntityTypes._map[69] = "TERRAIN_SECTION_ROAM";
        EEntityTypes.TERRAIN_SECTION_ROAM = 69;
        EEntityTypes._map[70] = "TEXT3D";
        EEntityTypes.TEXT3D = 70;
        EEntityTypes._map[71] = "SPRITE";
        EEntityTypes.SPRITE = 71;
        EEntityTypes._map[72] = "EMITTER";
        EEntityTypes.EMITTER = 72;
        EEntityTypes.UI_NODE = 100;
        // UI_HTMLNODE,
        // UI_DNDNODE,
        // UI_COMPONENT,
        // UI_BUTTON,
        // UI_LABEL,
        // UI_TREE,
        EEntityTypes.OBJECTS_LIMIT = 128;
    })(akra.EEntityTypes || (akra.EEntityTypes = {}));
    var EEntityTypes = akra.EEntityTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EUILayouts) {
        EUILayouts._map = [];
        EUILayouts._map[0] = "UNKNOWN";
        EUILayouts.UNKNOWN = 0;
        EUILayouts._map[1] = "HORIZONTAL";
        EUILayouts.HORIZONTAL = 1;
        EUILayouts._map[2] = "VERTICAL";
        EUILayouts.VERTICAL = 2;
    })(akra.EUILayouts || (akra.EUILayouts = {}));
    var EUILayouts = akra.EUILayouts;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    (function (EUINodeTypes) {
        EUINodeTypes._map = [];
        EUINodeTypes._map[0] = "UNKNOWN";
        EUINodeTypes.UNKNOWN = 0;
        EUINodeTypes._map[1] = "HTML";
        EUINodeTypes.HTML = 1;
        EUINodeTypes._map[2] = "DND";
        EUINodeTypes.DND = 2;
        EUINodeTypes._map[3] = "LAYOUT";
        EUINodeTypes.LAYOUT = 3;
        EUINodeTypes._map[4] = "COMPONENT";
        EUINodeTypes.COMPONENT = 4;
    })(akra.EUINodeTypes || (akra.EUINodeTypes = {}));
    var EUINodeTypes = akra.EUINodeTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    /*console.error(this.getEventTable());*/
    /**event, signal, slot*/
    /**event, signal, slot*/
    //#define END_EVENT_TABLE()
    (function (events) {
        var EventTable = (function () {
            function EventTable() {
                this.broadcast = {};
                this.unicast = {};
            }
            EventTable.prototype.addDestination = function (iGuid, sSignal, pTarget, sSlot, eType) {
                if (typeof eType === "undefined") { eType = akra.EEventTypes.BROADCAST; }
                if (eType === akra.EEventTypes.BROADCAST) {
                    if (this.findDestinationIndexBC(iGuid, sSignal, pTarget, sSlot) === -1) {
                        this.findBroadcastSignalMap(iGuid, sSignal).push({
                            target: pTarget,
                            callback: sSlot,
                            listener: null
                        });
                    }
                    return true;
                } else {
                    this.unicast[iGuid] = this.unicast[iGuid] || {};
                    //console.log(iGuid, sSignal, pTarget, sSlot, eType);
                    //console.warn(this.unicast);
                    if (!((this.unicast[iGuid][sSignal]) !== undefined)) {
                        this.unicast[iGuid][sSignal] = {
                            target: pTarget,
                            callback: sSlot,
                            listener: null
                        };
                        return true;
                    }
                }
                return false;
            };
            EventTable.prototype.findDestinationIndexBC = function (iGuid, sSignal, pTarget, sSlot) {
                var pList = this.findBroadcastSignalMap(iGuid, sSignal);
                for(var i = 0; i < pList.length; ++i) {
                    if (pList[i].target === pTarget && pList[i].callback === sSlot) {
                        return i;
                    }
                }
                return -1;
            };
            EventTable.prototype.removeDestination = function (iGuid, sSignal, pTarget, sSlot, eType) {
                if (typeof eType === "undefined") { eType = akra.EEventTypes.BROADCAST; }
                if (eType === akra.EEventTypes.BROADCAST) {
                    var pList = this.findBroadcastSignalMap(iGuid, sSignal);
                    var i = this.findDestinationIndexBC(iGuid, sSignal, pTarget, sSlot);
                    if (i != -1) {
                        pList.splice(i, 1);
                        return true;
                    }
                } else {
                    if (this.unicast[iGuid] && this.unicast[iGuid][sSignal]) {
                        delete this.unicast[iGuid][sSignal];
                        return true;
                    }
                }
 {
                    akra.logger.setSourceLocation("events/events.ts", 134);
                    akra.logger.warning("cannot remove destination for GUID <%s> with signal <%s>", iGuid, sSignal);
                }
                ;
                return false;
            };
            EventTable.prototype.addListener = function (iGuid, sSignal, fnListener, eType) {
                if (typeof eType === "undefined") { eType = akra.EEventTypes.BROADCAST; }
                if (eType === akra.EEventTypes.BROADCAST) {
                    // console.log("add listener(", iGuid, "):: ", "listener: ", fnListener, "signal: ", sSignal);
                    this.findBroadcastSignalMap(iGuid, sSignal).push({
                        target: null,
                        callback: null,
                        listener: fnListener
                    });
                    return true;
                } else {
                    this.unicast[iGuid] = this.unicast[iGuid] || {};
                    if (!((this.unicast[iGuid][sSignal]) !== undefined)) {
                        this.unicast[iGuid][sSignal] = {
                            target: null,
                            callback: null,
                            listener: fnListener
                        };
                        return true;
                    }
                }
 {
                    akra.logger.setSourceLocation("events/events.ts", 151);
                    akra.logger.warning("cannot add listener for GUID <%s> with signal <%s>", iGuid, sSignal);
                }
                ;
                return false;
            };
            EventTable.prototype.removeListener = function (iGuid, sSignal, fnListener, eType) {
                if (typeof eType === "undefined") { eType = akra.EEventTypes.BROADCAST; }
                if (eType === akra.EEventTypes.BROADCAST) {
                    var pList = this.findBroadcastSignalMap(iGuid, sSignal);
                    for(var i = 0; i < pList.length; ++i) {
                        if (pList[i].listener === fnListener) {
                            pList.splice(i, 1);
                            return true;
                        }
                    }
                } else {
                    if (this.unicast[iGuid] && this.unicast[iGuid][sSignal]) {
                        delete this.unicast[iGuid][sSignal];
                        return true;
                    }
                }
                return false;
            };
            EventTable.prototype.findBroadcastList = /** @inline */function (iGuid) {
                return (this.broadcast[iGuid] = this.broadcast[iGuid] || {});
            };
            EventTable.prototype.findUnicastList = function (iGuid) {
                //console.error(iGuid,this.unicast[iGuid]);
                this.unicast[iGuid] = this.unicast[iGuid] || {};
                return this.unicast[iGuid];
            };
            EventTable.prototype._sync = function (pTarget, pFrom) {
                //FIXME: release events of target...
                this.broadcast[pTarget.getGuid()] = this.broadcast[pFrom.getGuid()];
                this.unicast[pTarget.getGuid()] = this.unicast[pFrom.getGuid()];
            };
            EventTable.prototype.findBroadcastSignalMap = function (iGuid, sSignal) {
                this.broadcast[iGuid] = this.broadcast[iGuid] || {};
                this.broadcast[iGuid][sSignal] = this.broadcast[iGuid][sSignal] || [];
                return this.broadcast[iGuid][sSignal];
            };
            return EventTable;
        })();
        events.EventTable = EventTable;        
        var EventProvider = (function () {
            function EventProvider() {
                /**@protected*/ this._iGuid = akra.sid();
                /**@protected*/ this._pUnicastSlotMap = null;
                /**@protected*/ this._pBroadcastSlotList = null;
            }
            EventProvider.prototype.getGuid = /** @inline */function () {
                return this._iGuid;
            };
            EventProvider._pEventTable = new events.EventTable();
            EventProvider.prototype.getEventTable = /** @inline */function () {
                return EventProvider._pEventTable;
            };
            EventProvider.prototype.connect = /** @inline */function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().addDestination((((pSender))._iGuid), sSignal, this, sSlot, eType);
            };
            EventProvider.prototype.disconnect = /** @inline */function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().removeDestination((((pSender))._iGuid), sSignal, this, sSlot, eType);
            };
            EventProvider.prototype.bind = /** @inline */function (sSignal, fnListener, eType) {
                return (EventProvider._pEventTable).addListener(((this)._iGuid), sSignal, fnListener, eType);
            };
            EventProvider.prototype.unbind = /** @inline */function (sSignal, fnListener, eType) {
                return (EventProvider._pEventTable).removeListener(((this)._iGuid), sSignal, fnListener, eType);
            };
            EventProvider.prototype._syncTable = /** @inline */function (pFrom) {
                (EventProvider._pEventTable)._sync(this, pFrom);
            };
            return EventProvider;
        })();
        events.EventProvider = EventProvider;        
    })(akra.events || (akra.events = {}));
    var events = akra.events;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var ReferenceCounter = (function () {
            function ReferenceCounter(pSrc) {
                this.nReferenceCount = 0;
            }
            ReferenceCounter.prototype.referenceCount = /** @inline */
            function () {
                return this.nReferenceCount;
            };
            ReferenceCounter.prototype.destructor = /** @inline */
            function () {
 {
                    util.logger.setSourceLocation("util/ReferenceCounter.ts", 26);
                    util.logger.assert(this.nReferenceCount === 0, 'object is used');
                }
                ;
            };
            ReferenceCounter.prototype.release = function () {
 {
                    util.logger.setSourceLocation("util/ReferenceCounter.ts", 30);
                    util.logger.assert(this.nReferenceCount > 0, 'object is used');
                }
                ;
                this.nReferenceCount--;
                return this.nReferenceCount;
            };
            ReferenceCounter.prototype.addRef = function () {
 {
                    util.logger.setSourceLocation("util/ReferenceCounter.ts", 36);
                    util.logger.assert(this.nReferenceCount != akra.MIN_INT32, 'reference fail');
                }
                ;
                this.nReferenceCount++;
                return this.nReferenceCount;
            };
            ReferenceCounter.prototype.eq = /** @inline */
            function (pSrc) {
                return this;
            };
            return ReferenceCounter;
        })();
        util.ReferenceCounter = ReferenceCounter;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        (function (EEntityStates) {
            EEntityStates._map = [];
            //обновился ли сам узел?
            EEntityStates.k_Updated = 0x01;
            //есть ли среди потомков обновленные узлы
            EEntityStates.k_DescendantsUpdtated = 0x02;
            //если ли обновленные узлы среди братьев или их потомках
            EEntityStates.k_SiblingsUpdated = 0x04;
        })(util.EEntityStates || (util.EEntityStates = {}));
        var EEntityStates = util.EEntityStates;
        var Entity = (function (_super) {
            __extends(Entity, _super);
            function Entity(eType) {
                        _super.call(this);
                /**@protected*/ this._sName = null;
                /**@protected*/ this._pParent = null;
                /**@protected*/ this._pSibling = null;
                /**@protected*/ this._pChild = null;
                /**@protected*/ this._eType = akra.EEntityTypes.UNKNOWN;
                /**@protected*/ this._iStateFlags = 0;
                /**@protected*/ this._iGuid = akra.sid();
                /**@protected*/ this._pUnicastSlotMap = null;
                /**@protected*/ this._pBroadcastSlotList = null;
                this._eType = eType;
            }
            Object.defineProperty(Entity.prototype, "name", {
                get: /** @inline */function () {
                    return this._sName;
                },
                set: /** @inline */function (sName) {
                    this._sName = sName;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "parent", {
                get: /** @inline */function () {
                    return this._pParent;
                },
                set: /** @inline */function (pParent) {
                    this.attachToParent(pParent);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "sibling", {
                get: /** @inline */function () {
                    return this._pSibling;
                },
                set: /** @inline */function (pSibling) {
                    this._pSibling = pSibling;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "child", {
                get: /** @inline */function () {
                    return this._pChild;
                },
                set: /** @inline */function (pChild) {
                    this._pChild = pChild;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "type", {
                get: /** @inline */function () {
                    return this._eType;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "rightSibling", {
                get: function () {
                    var pSibling = ((this)._pSibling);
                    if (pSibling) {
                        while(pSibling.sibling) {
                            pSibling = pSibling.sibling;
                        }
                        return pSibling;
                    }
                    return this;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "depth", {
                get: function () {
                    var iDepth = -1;
                    for(var pEntity = this; pEntity; pEntity = pEntity.parent, ++iDepth) {
                    }
                    ;
                    return iDepth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "root", {
                get: function () {
                    for(var pEntity = this, iDepth = -1; pEntity.parent; pEntity = pEntity.parent, ++iDepth) {
                    }
                    ;
                    return pEntity;
                },
                enumerable: true,
                configurable: true
            });
            Entity.prototype.destroy = function (bRecursive, bPromoteChildren) {
                if (typeof bRecursive === "undefined") { bRecursive = false; }
                if (typeof bPromoteChildren === "undefined") { bPromoteChildren = true; }
                if (bRecursive) {
                    if (this._pSibling) {
                        this._pSibling.destroy(true);
                    }
                    if (this._pChild) {
                        this._pChild.destroy(true);
                    }
                }
                // destroy anything attached to this node
                //	destroySceneObject();
                // promote any children up to our parent
                if (bPromoteChildren && !bRecursive) {
                    this.promoteChildren();
                }
                // now remove ourselves from our parent
                this.detachFromParent();
                // we should now be removed from the tree, and have no dependants
                 {
                    util.logger.setSourceLocation("util/Entity.ts", 93);
                    util.logger.assert(this.referenceCount() == 0, "Attempting to delete a scene node which is still in use");
                }
                ;
 {
                    util.logger.setSourceLocation("util/Entity.ts", 94);
                    util.logger.assert(this._pSibling == null, "Failure Destroying Node");
                }
                ;
 {
                    util.logger.setSourceLocation("util/Entity.ts", 95);
                    util.logger.assert(this._pChild == null, "Failure Destroying Node");
                }
                ;
            };
            Entity.prototype.findEntity = function (sName) {
                var pEntity = null;
                if (this._sName === sName) {
                    return this;
                }
                if (this._pSibling) {
                    pEntity = this._pSibling.findEntity(sName);
                }
                if (pEntity == null && this._pChild) {
                    pEntity = this._pChild.findEntity(sName);
                }
                return pEntity;
            };
            Entity.prototype.explore = function (fn) {
                if (fn(this) === false) {
                    return;
                }
                if (this._pSibling) {
                    this._pSibling.explore(fn);
                }
                if (this._pChild) {
                    this._pChild.explore(fn);
                }
            };
            Entity.prototype.childOf = function (pParent) {
                for(var pEntity = this; pEntity; pEntity = pEntity.parent) {
                    if (pEntity.parent === pParent) {
                        return true;
                    }
                }
                return false;
            };
            Entity.prototype.children = function () {
                var pChildren = [];
                var pChild = ((this)._pChild);
                while(!((pChild) === null)) {
                    pChildren.push(pChild);
                    pChild = pChild.sibling;
                }
                return pChildren;
            };
            Entity.prototype.childAt = function (i) {
                var pChild = ((this)._pChild);
                var n = 0;
                while(!((pChild) === null)) {
                    if (n == i) {
                        return pChild;
                    }
                    n++;
                    pChild = pChild.sibling;
                }
                return pChild;
            };
            Entity.prototype.siblingCount = /**
            * Returns the current number of siblings of this object.
            */
            function () {
                var iCount = 0;
                if (this._pParent) {
                    var pNextSibling = this._pParent.child;
                    if (pNextSibling) {
                        while(pNextSibling) {
                            pNextSibling = pNextSibling.sibling;
                            ++iCount;
                        }
                    }
                }
                return iCount;
            };
            Entity.prototype.descCount = function () {
                var n = this.childCount();
                var pChild = ((this)._pChild);
                while(!((pChild) === null)) {
                    n += pChild.descCount();
                    pChild = pChild.sibling;
                }
                return n;
            };
            Entity.prototype.childCount = /**
            * Returns the current number of children of this object
            */
            function () {
                var iCount = 0;
                var pChild = ((this)._pChild);
                while(!((pChild) === null)) {
                    iCount++;
                    pChild = pChild.sibling;
                }
                // var pNextChild: IEntity = this.child;
                // if (pNextChild) {
                //     ++ iCount;
                //     while (pNextChild) {
                //         pNextChild = pNextChild.sibling;
                //         ++ iCount;
                //     }
                // }
                return iCount;
            };
            Entity.prototype.isUpdated = /** @inline */function () {
                return (((this._iStateFlags) & (EEntityStates.k_Updated)) == (EEntityStates.k_Updated));
            };
            Entity.prototype.hasUpdatedSubNodes = /** @inline */function () {
                return (((this._iStateFlags) & (EEntityStates.k_DescendantsUpdtated)) == (EEntityStates.k_DescendantsUpdtated));
            };
            Entity.prototype.recursiveUpdate = function () {
                // var bUpdated: bool = false;
                // update myself
                if (this.update()) {
                    ((this._iStateFlags) |= (EEntityStates.k_Updated));
                    // bUpdated = true;
                                    }
                // update my sibling
                if (this._pSibling && this._pSibling.recursiveUpdate()) {
                    ((this._iStateFlags) |= (EEntityStates.k_SiblingsUpdated));
                    // bUpdated = true;
                                    }
                // update my child
                if (this._pChild && this._pChild.recursiveUpdate()) {
                    ((this._iStateFlags) |= (EEntityStates.k_DescendantsUpdtated));
                    // bUpdated = true;
                                    }
                /*bUpdated */
                return (this._iStateFlags != 0);
            };
            Entity.prototype.recursivePreUpdate = function () {
                // clear the flags from the previous update
                this.prepareForUpdate();
                // update my sibling
                if (this._pSibling) {
                    this._pSibling.recursivePreUpdate();
                }
                // update my child
                if (this._pChild) {
                    this._pChild.recursivePreUpdate();
                }
            };
            Entity.prototype.prepareForUpdate = function () {
                this._iStateFlags = 0;
            };
            Entity.prototype.hasParent = /** Parent is not undef */
            /** @inline */function () {
                return ((this._pParent) != null);
            };
            Entity.prototype.hasChild = /** Child is not undef*/
            /** @inline */function () {
                return ((this._pChild) != null);
            };
            Entity.prototype.hasSibling = /** Sibling is not undef */
            /** @inline */function () {
                return ((this._pSibling) != null);
            };
            Entity.prototype.isASibling = /**
            * Checks to see if the provided item is a sibling of this object
            */
            function (pSibling) {
                if (!pSibling) {
                    return false;
                }
                // if the sibling we are looking for is me, or my FirstSibling, return true
                if (this == pSibling || this._pSibling == pSibling) {
                    return true;
                }
                // if we have a sibling, continue searching
                if (this._pSibling) {
                    return this._pSibling.isASibling(pSibling);
                }
                // it's not us, and we have no sibling to check. This is not a sibling of ours.
                return false;
            };
            Entity.prototype.isAChild = /** Checks to see if the provided item is a child of this object. (one branch depth only) */
            function (pChild) {
                if (!pChild) {
                    return (false);
                }
                // if the sibling we are looking for is my FirstChild return true
                if (this._pChild == pChild) {
                    return (true);
                }
                // if we have a child, continue searching
                if (this._pChild) {
                    return (this._pChild.isASibling(pChild));
                }
                // it's not us, and we have no child to check. This is not a sibling of ours.
                return (false);
            };
            Entity.prototype.isInFamily = /**
            * Checks to see if the provided item is a child or sibling of this object. If SearchEntireTree
            * is TRUE, the check is done recursivly through all siblings and children. SearchEntireTree
            * is FALSE by default.
            */
            function (pEntity, bSearchEntireTree) {
                if (!pEntity) {
                    return (false);
                }
                // if the model we are looking for is me or my immediate family, return true
                if (this == pEntity || this._pChild == pEntity || this._pSibling == pEntity) {
                    return (true);
                }
                // if not set to seach entire tree, just check my siblings and kids
                if (!bSearchEntireTree) {
                    if (this.isASibling(pEntity)) {
                        return (true);
                    }
                    if (this._pChild && this._pChild.isASibling(pEntity)) {
                        return (true);
                    }
                } else// seach entire Tree!!!
                 {
                    if (this._pSibling && this._pSibling.isInFamily(pEntity, bSearchEntireTree)) {
                        return (true);
                    }
                    if (this._pChild && this._pChild.isInFamily(pEntity, bSearchEntireTree)) {
                        return (true);
                    }
                }
                return (false);
            };
            Entity.prototype.addSibling = /**
            * Adds the provided ModelSpace object to the descendant list of this object. The provided
            * ModelSpace object is removed from any parent it may already belong to.
            */
            function (pSibling) {
                if (pSibling) {
                    // replace objects current sibling pointer with this new one
                    pSibling.sibling = this._pSibling;
                    ((this)._pSibling = (pSibling));
                }
                return pSibling;
            };
            Entity.prototype.addChild = /**
            * Adds the provided ModelSpace object to the descendant list of this object. The provided
            * ModelSpace object is removed from any parent it may already belong to.
            */
            function (pChild) {
                if (pChild) {
                    // Replace the new child's sibling pointer with our old first child.
                    pChild.sibling = this._pChild;
                    // the new child becomes our first child pointer.
                    this._pChild = pChild;
                    this.childAdded(pChild);
                }
                return pChild;
            };
            Entity.prototype.removeChild = /**
            * Removes a specified child object from this parent object. If the child is not the
            * FirstChild of this object, all of the Children are searched to find the object to remove.
            */
            function (pChild) {
                if (this._pChild && pChild) {
                    if (this._pChild == pChild) {
                        this._pChild = pChild.sibling;
                        pChild.sibling = null;
                    } else {
                        var pTempNode = this._pChild;
                        // keep searching until we find the node who's sibling is our target
                        // or we reach the end of the sibling chain
                        while(pTempNode && (pTempNode.sibling != pChild)) {
                            pTempNode = pTempNode.sibling;
                        }
                        // if we found the proper item, set it's FirstSibling to be the FirstSibling of the child
                        // we are removing
                        if (pTempNode) {
                            pTempNode.sibling = pChild.sibling;
                            pChild.sibling = null;
                        }
                    }
                    this.childRemoved(pChild);
                }
                return pChild;
            };
            Entity.prototype.removeAllChildren = /** Removes all Children from this parent object */
            function () {
                // keep removing children until end of chain is reached
                while(!((this._pChild) === null)) {
                    var pNextSibling = this._pChild.sibling;
                    this._pChild.detachFromParent();
                    this._pChild = pNextSibling;
                }
            };
            Entity.prototype.attachToParent = /** Attaches this object ot a new parent. Same as calling the parent's addChild() routine. */
            function (pParent) {
                var pParentPrev = ((this)._pParent);
                if (pParent != this._pParent) {
                    this.detachFromParent();
                    if (pParent) {
                        if (pParent.addChild(this)) {
                            this._pParent = pParent;
                            this._pParent.addRef();
                            this.attached();
                            return true;
                        }
                        return this.attachToParent(pParentPrev);
                    }
                }
                return false;
            };
            Entity.prototype.detachFromParent = function () {
                // tell our current parent to release us
                if (this._pParent) {
                    this._pParent.removeChild(this);
                    //TODO: разобраться что за херня!!!!
                    if (this._pParent) {
                        this._pParent.release();
                    }
                    this._pParent = null;
                    // my world matrix is now my local matrix
                    this.detached();
                    return true;
                }
                return false;
            };
            Entity.prototype.promoteChildren = /**
            * Attaches this object's children to it's parent, promoting them up the tree
            */
            function () {
                // Do I have any children to promote?
                while(!((this._pChild) === null)) {
                    var pNextSibling = this._pChild.sibling;
                    this._pChild.attachToParent(this._pParent);
                    this._pChild = pNextSibling;
                }
            };
            Entity.prototype.relocateChildren = function (pParent) {
                if (pParent != this) {
                    // Do I have any children to relocate?
                    while(!((this._pChild) === null)) {
                        var pNextSibling = this._pChild.sibling;
                        this._pChild.attachToParent(pParent);
                        this._pChild = pNextSibling;
                    }
                }
            };
            Entity.prototype.update = function () {
                return false;
            };
            Entity.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<entity' + (this._sName ? ' ' + this._sName : "") + '>';
                }
                var pSibling = this.sibling;
                var pChild = ((this)._pChild);
                var s = "";
                for(var i = 0; i < iDepth; ++i) {
                    s += ':  ';
                }
                s += '+----[depth: ' + this.depth + ']' + this.toString() + '\n';
                if (pChild) {
                    s += pChild.toString(true, iDepth + 1);
                }
                if (pSibling) {
                    s += pSibling.toString(true, iDepth);
                }
                return s;
            };
            Entity.prototype.getGuid = /** @inline */function () {
                return this._iGuid;
            };
            Entity._pEventTable = new akra.events.EventTable();
            Entity.prototype.getEventTable = /** @inline */function () {
                return Entity._pEventTable;
            };
            Entity.prototype.connect = /** @inline */function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().addDestination((((pSender))._iGuid), sSignal, this, sSlot, eType);
            };
            Entity.prototype.disconnect = /** @inline */function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().removeDestination((((pSender))._iGuid), sSignal, this, sSlot, eType);
            };
            Entity.prototype.bind = /** @inline */function (sSignal, fnListener, eType) {
                return (Entity._pEventTable).addListener(((this)._iGuid), sSignal, fnListener, eType);
            };
            Entity.prototype.unbind = /** @inline */function (sSignal, fnListener, eType) {
                return (Entity._pEventTable).removeListener(((this)._iGuid), sSignal, fnListener, eType);
            };
            Entity.prototype._syncTable = /** @inline */function (pFrom) {
                (Entity._pEventTable)._sync(this, pFrom);
            };
            Entity.prototype.attached = function () {
                var _recivier = this;
                this._pUnicastSlotMap = this._pUnicastSlotMap || ((Entity._pEventTable)).findUnicastList(this._iGuid);
                var _unicast = (this._pUnicastSlotMap).attached;
                if (((_unicast) !== undefined)) {
                    _unicast.target ? _unicast.target[_unicast.callback](_recivier) : _unicast.listener(_recivier);
                }
            };
            Entity.prototype.detached = function () {
                var _recivier = this;
                this._pUnicastSlotMap = this._pUnicastSlotMap || ((Entity._pEventTable)).findUnicastList(this._iGuid);
                var _unicast = (this._pUnicastSlotMap).detached;
                if (((_unicast) !== undefined)) {
                    _unicast.target ? _unicast.target[_unicast.callback](_recivier) : _unicast.listener(_recivier);
                }
            };
            Entity.prototype.childAdded = function (child) {
                var _recivier = this;
                this._pUnicastSlotMap = this._pUnicastSlotMap || ((Entity._pEventTable)).findUnicastList(this._iGuid);
                var _unicast = (this._pUnicastSlotMap).childAdded;
                if (((_unicast) !== undefined)) {
                    _unicast.target ? _unicast.target[_unicast.callback](_recivier, child) : _unicast.listener(_recivier, child);
                }
            };
            Entity.prototype.childRemoved = function (child) {
                var _recivier = this;
                this._pUnicastSlotMap = this._pUnicastSlotMap || ((Entity._pEventTable)).findUnicastList(this._iGuid);
                var _unicast = (this._pUnicastSlotMap).childRemoved;
                if (((_unicast) !== undefined)) {
                    _unicast.target ? _unicast.target[_unicast.callback](_recivier, child) : _unicast.listener(_recivier, child);
                }
            };
            return Entity;
        })(util.ReferenceCounter);
        util.Entity = Entity;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    /// @: data/ui/3d-party/jQuery/jquery-1.9.1.js|location()|script()|data_location({data},DATA)
    /// @: data/ui/3d-party/jQuery/jquery-ui.js|location()|script()|data_location({data},DATA)
    (function (ui) {
        //export const $ = jQuery;
        /**@const*/ ui.$document = $(document);
        /**@const*/ ui.$body = $(document.body);
        var Node = (function (_super) {
            __extends(Node, _super);
            function Node(parent, eNodeType) {
                if (typeof eNodeType === "undefined") { eNodeType = akra.EUINodeTypes.UNKNOWN; }
                        _super.call(this, akra.EEntityTypes.UI_NODE);
                this._pUI = parent instanceof ui.UI ? parent : (parent).ui;
                this._eNodeType = eNodeType;
                if (parent instanceof Node) {
                    this.attachToParent(parent);
                }
            }
            Object.defineProperty(Node.prototype, "ui", {
                get: /** @inline */function () {
                    return this._pUI;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "nodeType", {
                get: /** @inline */function () {
                    return this._eNodeType;
                },
                enumerable: true,
                configurable: true
            });
            Node.prototype.render = function (to) {
                return false;
            };
            Node.prototype.recursiveRender = function () {
                this.render();
                if (this.sibling) {
                    (this.sibling).recursiveRender();
                }
                if (((this)._pChild)) {
                    (((this)._pChild)).recursiveRender();
                }
            };
            Node.prototype.renderTarget = function () {
                var pTarget = this.findRenderTarget();
                return ((pTarget) === null) ? null : pTarget.renderTarget();
            };
            Node.prototype.hasRenderTarget = function () {
                return false;
            };
            Node.prototype.addChild = function (pChild) {
                if (((this)._pChild)) {
                    var pRightSibling = ((this)._pChild).rightSibling;
                    if (pRightSibling) {
                        pRightSibling.sibling = pChild;
                        this.childAdded(pChild);
                        return pChild;
                    }
                }
                return _super.prototype.addChild.call(this, pChild);
            };
            Node.prototype.attachToParent = function (pParent) {
                if (_super.prototype.attachToParent.call(this, pParent)) {
                    this.relocated(pParent);
                    return true;
                }
                return false;
            };
            Node.prototype.findRenderTarget = /**@protected*/ function () {
                var pParent = ((this)._pParent);
                while(!((pParent) === null)) {
                    if (!((pParent.hasRenderTarget()) === null)) {
                        return pParent;
                    }
                    pParent = pParent.parent;
                }
                return null;
            };
            Node.prototype.relocated = function (pLocation) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).relocated;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pLocation) : _broadcast[i].listener(_recivier, pLocation);
                    }
                }
                ;
                var pNode = ((this)._pChild);
                while(!((pNode) === null)) {
                    pNode.relocated(pLocation);
                    pNode = pNode.sibling;
                }
            };
            return Node;
        })(akra.util.Entity);
        ui.Node = Node;        
                        function isUI(parent) {
            return parent instanceof ui.UI;
        }
        ui.isUI = isUI;
                        function getUI(parent) {
            return isUI(parent) ? parent : (parent).ui;
        }
        ui.getUI = getUI;
        /** @inline */function isUINode(pEntity) {
            return ((pEntity) != null) && pEntity.type === akra.EEntityTypes.UI_NODE;
        }
        ui.isUINode = isUINode;
        /** @inline */function isLayout(pEntity) {
            return ((((pEntity)) != null) && (pEntity).type === /*checked (origin: akra)>>*/akra.EEntityTypes.UI_NODE) && (pEntity).nodeType === akra.EUINodeTypes.LAYOUT;
        }
        ui.isLayout = isLayout;
        /** @inline */function containsHTMLElement(pEntity) {
            return ((((pEntity)) != null) && (pEntity).type === /*checked (origin: akra)>>*/akra.EEntityTypes.UI_NODE) && (pEntity).nodeType >= akra.EUINodeTypes.HTML;
        }
        ui.containsHTMLElement = containsHTMLElement;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var HTMLNode = (function (_super) {
            __extends(HTMLNode, _super);
            function HTMLNode(parent, pElement, eNodeType) {
                if (typeof pElement === "undefined") { pElement = null; }
                if (typeof eNodeType === "undefined") { eNodeType = akra.EUINodeTypes.HTML; }
                        _super.call(this, ui.getUI(parent), eNodeType);
                this.$element = null;
                /**@protected*/ this._fnEventRedirector = null;
                var pNode = this;
                var fnEventRedirector = this._fnEventRedirector = function (e) {
                    if (HTMLNode.EVENTS.indexOf(e.type) == -1) {
                        return;
                    }
                    return (pNode)[e.type](e);
                };
                this.$element = $(pElement || "<div />");
                // this.$element.bind(HTMLNode.EVENTS.join(' '), fnEventRedirector);
                if (!ui.isUI(parent)) {
                    this.attachToParent(parent);
                }
            }
            Object.defineProperty(HTMLNode.prototype, "el", {
                get: /** @inline */function () {
                    return this.$element;
                },
                enumerable: true,
                configurable: true
            });
            HTMLNode.prototype.handleEvent = function (sEvent) {
                this.$element.bind(sEvent, this._fnEventRedirector);
                return true;
            };
            HTMLNode.prototype.disableEvent = function (sEvent) {
                this.$element.unbind(sEvent, this._fnEventRedirector);
            };
            HTMLNode.prototype.hasRenderTarget = function () {
                return true;
            };
            HTMLNode.prototype.renderTarget = function () {
                return this.$element;
            };
            HTMLNode.prototype.getHTMLElement = /** @inline */function () {
                return this.$element.get()[0];
            };
            HTMLNode.prototype.render = function (to) {
                var $to = ui.$body;
                var pTarget = null;
                if (!((to) !== undefined)) {
                    pTarget = this.findRenderTarget();
                    $to = ((pTarget) === null) ? $to : pTarget.renderTarget();
                } else {
                    if (to instanceof ui.Node) {
                        if (((this)._pParent) != to) {
                            return this.attachToParent(to);
                        }
                        $to = (to).renderTarget();
                    } else {
                        $to = $(to);
                    }
                }
                this.beforeRender();
                //trace($to, this.self());
                $to.append(this.self());
                this.rendered();
                return true;
            };
            HTMLNode.prototype.attachToParent = function (pParent, bRender) {
                if (typeof bRender === "undefined") { bRender = true; }
                if (_super.prototype.attachToParent.call(this, pParent)) {
                    if (bRender && !this.isRendered()) {
                        this.render(pParent);
                    }
                    return true;
                }
                return false;
            };
            HTMLNode.prototype.isFocused = function () {
                return !((this.$element) === null) && this.$element.is(":focus");
            };
            HTMLNode.prototype.isRendered = function () {
                //console.log((<any>new Error).stack)
                return !((this.$element) === null) && this.$element.parent().length > 0;
            };
            HTMLNode.prototype.destroy = function (bRecursive, bPromoteChildren) {
                _super.prototype.destroy.call(this, bRecursive, bPromoteChildren);
                this.$element.remove();
            };
            HTMLNode.prototype.width = /** @inline */function () {
                return this.$element.width();
            };
            HTMLNode.prototype.height = /** @inline */function () {
                return this.$element.height();
            };
            HTMLNode.prototype.valueOf = function () {
                return this.$element;
            };
            HTMLNode.prototype.hide = function () {
                ((this).$element).hide();
            };
            HTMLNode.prototype.show = function () {
                ((this).$element).show();
            };
            HTMLNode.prototype.self = /**@protected*/ function () {
                return this.$element;
            };
            HTMLNode.prototype.click = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).click;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.dblclick = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).dblclick;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mousemove = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).mousemove;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mouseup = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).mouseup;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mousedown = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).mousedown;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mouseover = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).mouseover;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mouseout = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).mouseout;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mouseenter = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).mouseenter;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mouseleave = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).mouseleave;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.focusin = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).focusin;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.focusout = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).focusout;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.blur = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).blur;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.change = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).change;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.keydown = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).keydown;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.keyup = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).keyup;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.resize = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).resize;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                }
            };
            HTMLNode.prototype.rendered = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).rendered;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                }
            };
            HTMLNode.prototype.beforeRender = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).beforeRender;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                }
            };
            HTMLNode.EVENTS = [
                "click", 
                "dblclick", 
                "mousemove", 
                "mouseup", 
                "mousedown", 
                "mouseover", 
                "mouseout", 
                "mouseenter", 
                "mouseleave", 
                "focusin", 
                "focusout", 
                "blur", 
                "change", 
                "keydown", 
                "keyup", 
                "resize"
            ];
            return HTMLNode;
        })(ui.Node);
        ui.HTMLNode = HTMLNode;        
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
        //
        // BASIC MATH AND UNIT CONVERSION CONSTANTS
        //
        math.E = Math.E;
        math.LN2 = Math.LN2;
        math.LOG2E = Math.LOG2E;
        math.LOG10E = Math.LOG10E;
        math.PI = Math.PI;
        math.SQRT1_2 = Math.SQRT1_2;
        math.SQRT2 = Math.SQRT2;
        math.LN10 = Math.LN10;
        math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
        math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
        math.FLOAT_PRECISION = (3.4e-8);
        math.TWO_PI = (2.0 * math.PI);
        math.HALF_PI = (math.PI / 2.0);
        math.QUARTER_PI = (math.PI / 4.0);
        math.EIGHTH_PI = (math.PI / 8.0);
        math.PI_SQUARED = (9.86960440108935861883449099987615113531369940724079);
        math.PI_INVERSE = (0.31830988618379067153776752674502872406891929148091);
        math.PI_OVER_180 = (math.PI / 180);
        math.PI_DIV_180 = (180 / math.PI);
        math.NATURAL_LOGARITHM_BASE = (2.71828182845904523536028747135266249775724709369996);
        math.EULERS_CONSTANT = (0.57721566490153286060651);
        math.SQUARE_ROOT_2 = (1.41421356237309504880168872420969807856967187537695);
        math.INVERSE_ROOT_2 = (0.707106781186547524400844362105198);
        math.SQUARE_ROOT_3 = (1.73205080756887729352744634150587236694280525381038);
        math.SQUARE_ROOT_5 = (2.23606797749978969640917366873127623544061835961153);
        math.SQUARE_ROOT_10 = (3.16227766016837933199889354443271853371955513932522);
        math.CUBE_ROOT_2 = (1.25992104989487316476721060727822835057025146470151);
        math.CUBE_ROOT_3 = (1.44224957030740838232163831078010958839186925349935);
        math.FOURTH_ROOT_2 = (1.18920711500272106671749997056047591529297209246382);
        math.NATURAL_LOG_2 = (0.69314718055994530941723212145817656807550013436026);
        math.NATURAL_LOG_3 = (1.09861228866810969139524523692252570464749055782275);
        math.NATURAL_LOG_10 = (2.30258509299404568401799145468436420760110148862877);
        math.NATURAL_LOG_PI = (1.14472988584940017414342735135305871164729481291531);
        math.BASE_TEN_LOG_PI = (0.49714987269413385435126828829089887365167832438044);
        math.NATURAL_LOGARITHM_BASE_INVERSE = (0.36787944117144232159552377016146086744581113103177);
        math.NATURAL_LOGARITHM_BASE_SQUARED = (7.38905609893065022723042746057500781318031557055185);
        math.GOLDEN_RATIO = ((math.SQUARE_ROOT_5 + 1.0) / 2.0);
        math.DEGREE_RATIO = (math.PI_DIV_180);
        math.RADIAN_RATIO = (math.PI_OVER_180);
        math.GRAVITY_CONSTANT = 9.81;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
        //
        // MATH AND UNIT CONVERSION FUNCTION PROTOTYPES
        //
        math.abs = Math.abs;
        math.acos = Math.acos;
        math.asin = Math.asin;
        math.atan = Math.atan;
        math.atan2 = Math.atan2;
        math.exp = Math.exp;
        math.min = Math.min;
        math.random = Math.random;
        math.sqrt = Math.sqrt;
        math.log = Math.log;
        math.round = Math.round;
        math.floor = Math.floor;
        math.ceil = Math.ceil;
        math.sin = Math.sin;
        math.cos = Math.cos;
        math.tan = Math.tan;
        math.pow = Math.pow;
        math.max = Math.max;
        /*
        -----------------------------------------------------------------
        
        Floating Point Macros
        
        -----------------------------------------------------------------
        */
        // reinterpret a float as an int32
        /** @inline */
        math.fpBits = /** @inline */function (f) {
            return math.floor(f);
        };
        // reinterpret an int32 as a float
        /** @inline */
        math.intBits = /** @inline */function (i) {
            return i;
        };
        // return 0 or -1 based on the sign of the float
        /** @inline */
        math.fpSign = /** @inline */function (f) {
            return (f >> 31);
        };
        // extract the 8 bits of exponent as a signed integer
        // by masking out this bits, shifting down by 23,
        // and subtracting the bias value of 127
        /** @inline */
        math.fpExponent = /** @inline */function (f) {
            return ((((/*checked (origin: math)>>*/akra.math.floor((f))) & 0x7fffffff) >> 23) - 127);
        };
        // return 0 or -1 based on the sign of the exponent
        /** @inline */
        math.fpExponentSign = /** @inline */function (f) {
            return ((((((/*checked (origin: math)>>*/akra.math.floor(((f)))) & 0x7fffffff) >> 23) - 127)) >> 31);
        };
        // get the 23 bits of mantissa without the implied bit
        /** @inline */
        math.fpPureMantissa = /** @inline */function (f) {
            return ((/*checked (origin: math)>>*/akra.math.floor((f))) & 0x7fffff);
        };
        // get the 23 bits of mantissa with the implied bit replaced
        /** @inline */
        math.fpMantissa = /** @inline */function (f) {
            return ((((/*checked (origin: math)>>*/akra.math.floor(((f)))) & 0x7fffff)) | (1 << 23));
        };
        math.fpOneBits = 0x3F800000;
        // flipSign is a helper Macro to
        // invert the sign of i if flip equals -1,
        // if flip equals 0, it does nothing
        //export var flipSign = (i, flip) ((i^ flip) - flip)
        /** @inline */
        math.flipSign = /** @inline */function (i, flip) {
            return ((flip == -1) ? -i : i);
        };
        /**
        * Абсолютное значение числа
        */
        math.absoluteValue = math.abs;
        /**
        * Pow
        */
        math.raiseToPower = math.pow;
        /**
        * Число положительно?
        */
        math.isPositive = /** @inline */function (a) {
            return (a >= 0);
        };
        /**
        * Число отрицательно?
        */
        math.isNegative = /** @inline */function (a) {
            return (a < 0);
        };
        /**
        * Число одного знака?
        */
        math.sameSigns = /** @inline */function (a, b) {
            return ((((a) < 0)) == (((b) < 0)));
        };
        /**
        * Копировать знак
        */
        math.copySign = /** @inline */function (a, b) {
            return ((((b) < 0)) ? -math.absoluteValue(a) : math.absoluteValue(a));
        };
        /**
        * Растояние между а и b меньше epsilon?
        */
        math.deltaRangeTest = /** @inline */function (a, b, epsilon) {
            if (typeof epsilon === "undefined") { epsilon = 0.0000001; }
            return ((math.absoluteValue(a - b) < epsilon) ? true : false);
        };
        /**
        * Ограничивает value интервалом [low,high]
        */
        math.clamp = /** @inline */function (value, low, high) {
            return math.max(low, math.min(value, high));
        };
        /**
        * Ограничивает value интервалом [0,+Infinity]
        */
        math.clampPositive = /** @inline */function (value) {
            return (value < 0 ? 0 : value);
        };
        /**
        * Ограничивает value интервалом [-Infinity,0]
        */
        math.clampNegative = /** @inline */function (value) {
            return (value > 0 ? 0 : value);
        };
        /**
        * Ограничивает value интервалом [-1,1]
        */
        math.clampUnitSize = /** @inline */function (value) {
            return (/*checked (origin: math)>>*/akra.math.max((-1), /*checked (origin: math)>>*/akra.math.min((value), (1))));
        };
        math.sign = /** @inline */function (value) {
            return value >= 0 ? 1 : -1;
        };
        /**
        * Номер с права начиная от нуля, самого левого установленного бита
        */
        math.highestBitSet = /** @inline */function (value) {
            return value == 0 ? (null) : (value < 0 ? 31 : ((math.log(value) / math.LN2) << 0));
        };
        /**
        * Номер с права начиная от нуля, самого правого установленного бита
        */
        math.lowestBitSet = function (value) {
            var temp;
            if (value == 0) {
                return null;
            }
            for(temp = 0; temp <= 31; temp++) {
                if (value & (1 << temp)) {
                    return temp;
                }
            }
            return null;
        };
        /**
        * Является ли число степенью двойки
        */
        math.isPowerOfTwo = /** @inline */function (value) {
            return (value > 0 && ((value) == 0 ? (null) : ((value) < 0 ? 31 : ((/*checked (origin: math)>>*/akra.math.log((value)) / /*checked (origin: math)>>*/akra.math.LN2) << 0))) == math.lowestBitSet(value));
        };
        /**
        * Округление до числа наиболее близкого к степени двойки
        */
        math.nearestPowerOfTwo = function (value) {
            if (value <= 1) {
                return 1;
            }
            var highestBit = ((value) == 0 ? (null) : ((value) < 0 ? 31 : ((/*checked (origin: math)>>*/akra.math.log((value)) / /*checked (origin: math)>>*/akra.math.LN2) << 0)));
            var roundingTest = value & (1 << (highestBit - 1));
            if (roundingTest != 0) {
                ++highestBit;
            }
            return 1 << highestBit;
        };
        /**
        * Округление до следующего числа являющегося к степени двойки
        */
        math.ceilingPowerOfTwo = function (value) {
            if (value <= 1) {
                return 1;
            }
            var highestBit = ((value) == 0 ? (null) : ((value) < 0 ? 31 : ((/*checked (origin: math)>>*/akra.math.log((value)) / /*checked (origin: math)>>*/akra.math.LN2) << 0)));
            var mask = value & ((1 << highestBit) - 1);
            highestBit += mask && 1;
            return 1 << highestBit;
        };
        /**
        * Округление до предыдущего числа являющегося к степени двойки
        */
        math.floorPowerOfTwo = function (value) {
            if (value <= 1) {
                return 1;
            }
            var highestBit = ((value) == 0 ? (null) : ((value) < 0 ? 31 : ((/*checked (origin: math)>>*/akra.math.log((value)) / /*checked (origin: math)>>*/akra.math.LN2) << 0)));
            return 1 << highestBit;
        };
        /**
        * Деление по модулю
        */
        math.modulus = /** @inline */function (e, divisor) {
            return (e - math.floor(e / divisor) * divisor);
        };
        /**
        *
        */
        math.mod = math.modulus;
        /**
        * Вырвнивание числа на alignment вверх
        */
        math.alignUp = function (value, alignment) {
            var iRemainder = (((value) - /*checked (origin: math)>>*/akra.math.floor((value) / (alignment)) * (alignment)));
            if (iRemainder == 0) {
                return (value);
            }
            return (value + (alignment - iRemainder));
        };
        /**
        * Вырвнивание числа на alignment вниз
        */
        math.alignDown = function (value, alignment) {
            var remainder = (((value) - /*checked (origin: math)>>*/akra.math.floor((value) / (alignment)) * (alignment)));
            if (remainder == 0) {
                return (value);
            }
            return (value - remainder);
        };
        /**
        * пнвертировать число
        */
        math.inverse = /** @inline */function (a) {
            return 1. / a;
        };
        /**
        * log base 2
        */
        math.log2 = /** @inline */function (f) {
            return math.log(f) / math.LN2;
        };
        /**
        * Округлени числа с определенной точностью, где округляется до значащих чисел как 1/(2^precision)
        */
        math.trimFloat = /** @inline */function (f, precision) {
            return f;
        };
        /**
        * Перевод дробного в целое с усеением
        */
        math.realToInt32_chop = /** @inline */function (a) {
            return math.round(a);
        };
        /**
        * Перевод дробного в целое до меньшего
        */
        math.realToInt32_floor = /** @inline */function (a) {
            return math.floor(a);
        };
        /**
        * Перевод дробного в целое до большего
        */
        math.realToInt32_ceil = /** @inline */function (a) {
            return math.ceil(a);
        };
        /**
        * Наибольший общий делитель
        */
        math.nod = function (n, m) {
            var p = n % m;
            while(p != 0) {
                n = m;
                m = p;
                p = n % m;
            }
            return m;
        };
        /**
        * Наименьшее общее кратное
        */
        math.nok = /** @inline */function (n, m) {
            return math.abs(n * m) / math.nod(n, m);
        };
        /**
        * Greatest common devider
        */
        math.gcd = math.nod;
        /**
        * Least common multiple
        */
        math.lcm = math.nok;
        // var pMat3Stack = new Array(100);
        // var iMat3StackIndex = 0;
        math.isRealEqual = function (a, b, tolerance) {
            if (typeof tolerance === "undefined") { tolerance = 1.19209e-007; }
            if (akra.math.abs(b - a) <= tolerance) {
                return true;
            } else {
                return false;
            }
        };
        function calcPOTtextureSize(nPixels) {
            var w, h;
            var n = nPixels;
            w = Math.ceil(Math.log(n) / Math.LN2 / 2.0);
            h = Math.ceil(Math.log(n / Math.pow(2, w)) / Math.LN2);
            w = Math.pow(2, w);
            h = Math.pow(2, h);
            n = w * h;
            return [
                w, 
                h, 
                n
            ];
        }
        math.calcPOTtextureSize = calcPOTtextureSize;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var DNDNode = (function (_super) {
            __extends(DNDNode, _super);
            function DNDNode(parent, element, eNodeType) {
                if (typeof eNodeType === "undefined") { eNodeType = akra.EUINodeTypes.DND; }
                        _super.call(this, ui.getUI(parent), element, eNodeType);
                /**@protected*/ this._bDraggableInited = false;
                /**@protected*/ this._bDroppableInited = false;
                if (!ui.isUI(parent)) {
                    this.attachToParent(parent);
                }
            }
            DNDNode.prototype.isDraggable = /** @inline */function () {
                return this._bDraggableInited && !this.$element.draggable("option", "disabled");
            };
            DNDNode.prototype.setDraggable = function (bValue, pOptions) {
                if (typeof bValue === "undefined") { bValue = true; }
                if (typeof pOptions === "undefined") { pOptions = {}; }
                if (!this._bDraggableInited) {
                    var pNode = this;
                    this.$element.draggable({
                        start: function (e) {
                            return pNode.dragStart(e);
                        },
                        stop: function (e) {
                            return pNode.dragStop(e);
                        },
                        drag: function (e) {
                            return pNode.move(e);
                        }
                    }).draggable("disable");
                    this._bDraggableInited = true;
                }
                if (!((((this)._pParent)) === null) && ((this.$element) != null)) {
                    pOptions.containment = ((pOptions.containment) !== undefined) ? pOptions.containment : "parent";
                    // this.$element.draggable("option", "containment", "parent");
                                    }
                pOptions.disabled = !bValue;
                // this.$element.draggable("option", "disabled", !bValue);
                ((((this)).$element).draggable((pOptions)));
            };
            DNDNode.prototype.setDraggableOptions = /** @inline */function (pOptions) {
                ((this).$element).draggable(pOptions);
            };
            DNDNode.prototype.setDroppable = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                if (!this._bDroppableInited) {
                    var pNode = this;
                    this.$element.droppable({
                        drop: function (e, info) {
                            return pNode.drop(e, info.draggable[0].component || null, info);
                        }
                    });
                    this._bDroppableInited = true;
                }
            };
            DNDNode.prototype.attachToParent = function (pParent, bRender) {
                if (typeof bRender === "undefined") { bRender = true; }
                var isAttached = _super.prototype.attachToParent.call(this, pParent, bRender);
                if (((this)._bDraggableInited && !(this).$element.draggable("option", "disabled"))) {
                    this.setDraggable(true);
                }
                return isAttached;
            };
            DNDNode.prototype.dragStart = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).dragStart;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            DNDNode.prototype.dragStop = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).dragStop;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            DNDNode.prototype.move = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).move;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            DNDNode.prototype.drop = function (e, comp, info) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).drop;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e, comp, info) : _broadcast[i].listener(_recivier, e, comp, info);
                    }
                }
            };
            return DNDNode;
        })(ui.HTMLNode);
        ui.DNDNode = DNDNode;        
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EUIComponents) {
        EUIComponents._map = [];
        EUIComponents._map[0] = "UNKNOWN";
        EUIComponents.UNKNOWN = 0;
        EUIComponents._map[1] = "WINDOW";
        EUIComponents.WINDOW = 1;
        EUIComponents._map[2] = "BUTTON";
        EUIComponents.BUTTON = 2;
        EUIComponents._map[3] = "SWITCH";
        EUIComponents.SWITCH = 3;
        EUIComponents._map[4] = "PANEL";
        EUIComponents.PANEL = 4;
        EUIComponents._map[5] = "POPUP";
        EUIComponents.POPUP = 5;
        EUIComponents._map[6] = "TABS";
        EUIComponents.TABS = 6;
        EUIComponents._map[7] = "LABEL";
        EUIComponents.LABEL = 7;
        EUIComponents._map[8] = "VECTOR";
        EUIComponents.VECTOR = 8;
        EUIComponents._map[9] = "MENU";
        EUIComponents.MENU = 9;
        EUIComponents._map[10] = "TREE";
        EUIComponents.TREE = 10;
        EUIComponents._map[11] = "TREE_NODE";
        EUIComponents.TREE_NODE = 11;
        EUIComponents._map[12] = "CANVAS";
        EUIComponents.CANVAS = 12;
        EUIComponents._map[13] = "SLIDER";
        EUIComponents.SLIDER = 13;
        EUIComponents._map[14] = "CHECKBOX";
        EUIComponents.CHECKBOX = 14;
        EUIComponents._map[15] = "CHECKBOX_LIST";
        EUIComponents.CHECKBOX_LIST = 15;
        EUIComponents._map[16] = "VIEWPORT_STATS";
        EUIComponents.VIEWPORT_STATS = 16;
        EUIComponents._map[17] = "CODE_EDITOR";
        EUIComponents.CODE_EDITOR = 17;
        EUIComponents._map[18] = "COLLADA_ANIMATION";
        // LISTENER_EDITOR,
        EUIComponents.COLLADA_ANIMATION = 18;
        EUIComponents._map[19] = "GRAPH";
        EUIComponents.GRAPH = 19;
        EUIComponents._map[20] = "GRAPH_NODE";
        EUIComponents.GRAPH_NODE = 20;
        EUIComponents._map[21] = "GRAPH_CONNECTOR";
        EUIComponents.GRAPH_CONNECTOR = 21;
        EUIComponents._map[22] = "GRAPH_CONTROLS";
        EUIComponents.GRAPH_CONTROLS = 22;
        EUIComponents._map[23] = "GRAPH_CONNECTIONAREA";
        EUIComponents.GRAPH_CONNECTIONAREA = 23;
    })(akra.EUIComponents || (akra.EUIComponents = {}));
    var EUIComponents = akra.EUIComponents;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EAjaxDataTypes) {
        EAjaxDataTypes._map = [];
        EAjaxDataTypes._map[0] = "TEXT";
        EAjaxDataTypes.TEXT = 0;
        EAjaxDataTypes._map[1] = "JSON";
        EAjaxDataTypes.JSON = 1;
        EAjaxDataTypes._map[2] = "BLOB";
        EAjaxDataTypes.BLOB = 2;
        EAjaxDataTypes._map[3] = "ARRAY_BUFFER";
        EAjaxDataTypes.ARRAY_BUFFER = 3;
        EAjaxDataTypes._map[4] = "DOCUMENT";
        EAjaxDataTypes.DOCUMENT = 4;
    })(akra.EAjaxDataTypes || (akra.EAjaxDataTypes = {}));
    var EAjaxDataTypes = akra.EAjaxDataTypes;
    (function (EAjaxHttpMethods) {
        EAjaxHttpMethods._map = [];
        EAjaxHttpMethods.GET = 1;
        EAjaxHttpMethods._map[2] = "POST";
        EAjaxHttpMethods.POST = 2;
    })(akra.EAjaxHttpMethods || (akra.EAjaxHttpMethods = {}));
    var EAjaxHttpMethods = akra.EAjaxHttpMethods;
    (function (EAjaxHttpCodes) {
        EAjaxHttpCodes._map = [];
        EAjaxHttpCodes.OK = 200;
        EAjaxHttpCodes._map[201] = "CREATED";
        EAjaxHttpCodes.CREATED = 201;
        EAjaxHttpCodes._map[202] = "ACCEPTED";
        EAjaxHttpCodes.ACCEPTED = 202;
        EAjaxHttpCodes._map[203] = "PARTIAL_INFORMATION";
        EAjaxHttpCodes.PARTIAL_INFORMATION = 203;
        EAjaxHttpCodes.MOVED = 301;
        EAjaxHttpCodes._map[302] = "FOUND";
        EAjaxHttpCodes.FOUND = 302;
        EAjaxHttpCodes._map[303] = "METHOD";
        EAjaxHttpCodes.METHOD = 303;
        EAjaxHttpCodes.NOT_MODIFIED = 304;
        EAjaxHttpCodes.BAD_REQUEST = 400;
        EAjaxHttpCodes._map[401] = "UNAUTHORIZED";
        EAjaxHttpCodes.UNAUTHORIZED = 401;
        EAjaxHttpCodes._map[402] = "PAYMENT_REQUIRED";
        EAjaxHttpCodes.PAYMENT_REQUIRED = 402;
        EAjaxHttpCodes._map[403] = "FORBIDDEN";
        EAjaxHttpCodes.FORBIDDEN = 403;
        EAjaxHttpCodes._map[404] = "NOT_FOUND";
        EAjaxHttpCodes.NOT_FOUND = 404;
        EAjaxHttpCodes.INTERNAL_ERROR = 500;
        EAjaxHttpCodes._map[501] = "NOT_IMPLEMENTED";
        EAjaxHttpCodes.NOT_IMPLEMENTED = 501;
        EAjaxHttpCodes._map[502] = "SERVICE_TEMPORARILY_OVERLOADED";
        EAjaxHttpCodes.SERVICE_TEMPORARILY_OVERLOADED = 502;
        EAjaxHttpCodes._map[503] = "GATEWAY_TIMEOUT";
        EAjaxHttpCodes.GATEWAY_TIMEOUT = 503;
    })(akra.EAjaxHttpCodes || (akra.EAjaxHttpCodes = {}));
    var EAjaxHttpCodes = akra.EAjaxHttpCodes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var Pathinfo = (function () {
            function Pathinfo(pPath) {
                this._sDirname = null;
                this._sExtension = null;
                this._sFilename = null;
                if (((pPath) !== undefined)) {
                    this.set(pPath);
                }
            }
            Object.defineProperty(Pathinfo.prototype, "path", {
                get: /** @inline */function () {
                    return this.toString();
                },
                set: /** @inline */function (sPath) {
                    this.set(sPath);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pathinfo.prototype, "dirname", {
                get: /** @inline */function () {
                    return this._sDirname;
                },
                set: /** @inline */function (sDirname) {
                    this._sDirname = sDirname;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pathinfo.prototype, "filename", {
                get: /** @inline */function () {
                    return this._sFilename;
                },
                set: /** @inline */function (sFilename) {
                    this._sFilename = sFilename;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pathinfo.prototype, "ext", {
                get: /** @inline */function () {
                    return this._sExtension;
                },
                set: /** @inline */function (sExtension) {
                    this._sExtension = sExtension;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pathinfo.prototype, "basename", {
                get: /** @inline */function () {
                    return (this._sFilename ? this._sFilename + (this._sExtension ? "." + this._sExtension : "") : "");
                },
                set: /** @inline */function (sBasename) {
                    var nPos = sBasename.lastIndexOf(".");
                    if (nPos < 0) {
                        this._sFilename = sBasename.substr(0);
                        this._sExtension = null;
                    } else {
                        this._sFilename = sBasename.substr(0, nPos);
                        this._sExtension = sBasename.substr(nPos + 1);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Pathinfo.prototype.set = function (sPath) {
                if ((typeof (sPath) === "string")) {
                    var pParts = sPath.replace('\\', '/').split('/');
                    /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/this.basename = pParts.pop();
                    this._sDirname = pParts.join('/');
                } else if (sPath instanceof Pathinfo) {
                    this._sDirname = sPath.dirname;
                    this._sFilename = sPath.filename;
                    this._sExtension = sPath.ext;
                } else {
                    //critical_error
                     {
                        util.logger.setSourceLocation("Pathinfo.ts", 68);
                        util.logger.error("Unexpected data type was used.");
                    }
                    ;
                }
            };
            Pathinfo.prototype.isAbsolute = function () {
                return this._sDirname[0] === "/";
            };
            Pathinfo.prototype.toString = function () {
                return (this._sDirname ? this._sDirname + "/" : "") + ((((this)._sFilename ? (this)._sFilename + ((this)._sExtension ? "." + (this)._sExtension : "") : "")));
            };
            return Pathinfo;
        })();
        util.Pathinfo = Pathinfo;        
        // export var pathinfo: (sPath: string) => IPathinfo;
        // export var pathinfo: (pPath: IPathinfo) => IPathinfo;
        util.pathinfo;
        util.pathinfo = function (pPath) {
            return new Pathinfo(pPath);
        };
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.Pathinfo = akra.util.Pathinfo;
    akra.pathinfo = akra.util.pathinfo;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var URI = (function () {
            function URI(pUri) {
                this.sScheme = null;
                this.sUserinfo = null;
                this.sHost = null;
                this.nPort = 0;
                this.sPath = null;
                this.sQuery = null;
                this.sFragment = null;
                if (pUri) {
                    this.set(pUri);
                }
            }
            Object.defineProperty(URI.prototype, "urn", {
                get: function () {
                    return (this.sPath ? this.sPath : "") + (this.sQuery ? '?' + this.sQuery : "") + (this.sFragment ? '#' + this.sFragment : "");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "url", {
                get: function () {
                    return (this.sScheme ? this.sScheme : "") + this.authority;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "authority", {
                get: function () {
                    return (this.sHost ? '//' + (this.sUserinfo ? this.sUserinfo + '@' : "") + this.sHost + (this.nPort ? ':' + this.nPort : "") : "");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "scheme", {
                get: /** @inline */function () {
                    return this.sScheme;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "protocol", {
                get: function () {
                    if (!this.sScheme) {
                        return this.sScheme;
                    }
                    return (this.sScheme.substr(0, this.sScheme.lastIndexOf(':')));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "userinfo", {
                get: /** @inline */function () {
                    return this.sUserinfo;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "host", {
                get: /** @inline */function () {
                    return this.sHost;
                },
                set: /** @inline */function (sHost) {
                    //TODO: check host format
                    this.sHost = sHost;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "port", {
                get: /** @inline */function () {
                    return this.nPort;
                },
                set: /** @inline */function (iPort) {
                    this.nPort = iPort;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "path", {
                get: /** @inline */function () {
                    return this.sPath;
                },
                set: /** @inline */function (sPath) {
                    // debug_assert(!isNull(sPath.match(new RegExp("^(/(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)$"))),
                    // 	"invalid path used: " + sPath);
                    //TODO: check path format
                    this.sPath = sPath;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "query", {
                get: /** @inline */function () {
                    //TODO: check query format
                    return this.sQuery;
                },
                set: /** @inline */function (sQuery) {
                    this.sQuery = sQuery;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "fragment", {
                get: /** @inline */function () {
                    return this.sFragment;
                },
                enumerable: true,
                configurable: true
            });
            URI.prototype.set = function (pData) {
                if ((typeof (pData) === "string")) {
                    var pUri = URI.uriExp.exec(pData);
 {
                        util.logger.setSourceLocation("URI.ts", 103);
                        util.logger.assert(pUri !== null, 'Invalid URI format used.\nused uri: ' + pData);
                    }
                    ;
                    if (!pUri) {
                        return null;
                    }
                    this.sScheme = pUri[1] || null;
                    this.sUserinfo = pUri[2] || null;
                    this.sHost = pUri[3] || null;
                    this.nPort = parseInt(pUri[4]) || null;
                    this.sPath = pUri[5] || pUri[6] || null;
                    this.sQuery = pUri[7] || null;
                    this.sFragment = pUri[8] || null;
                    return this;
                } else if (pData instanceof URI) {
                    return this.set(pData.toString());
                }
 {
                    util.logger.setSourceLocation("URI.ts", 124);
                    util.logger.error('Unexpected data type was used.');
                }
                ;
                return null;
            };
            URI.prototype.toString = function () {
                return this.url + this.urn;
            };
            URI.here = function here() {
                return new URI(document.location.href);
            };
            URI.uriExp = new RegExp("^([a-z0-9+.-]+:)?(?:\\/\\/(?:((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*)@)?((?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*)(?::(\\d*))?(\\/(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?|(\\/?(?:[a-z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})*(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?)(?:\\?((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?$", "i");
            URI.resolve = /*
            composed as follows:
            ^
            ([a-z0-9+.-]+):							#scheme
            (?:
            //							#it has an authority:
            (?:((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*)@)?	#userinfo
            ((?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*)		#host
            (?::(\d*))?						#port
            (/(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?	#path
            |
            #it doesn't have an authority:
            (/?(?:[a-z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})+(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?	#path
            )
            (?:
            \?((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*)	#query string
            )?
            (?:
            #((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*)	#fragment
            )?
            $
            */
            function resolve(sFile, sAbsolutePath) {
                if (typeof sAbsolutePath === "undefined") { sAbsolutePath = document.location.pathname; }
                var pCurrentPath = null;
                var pFile = (new /*checked (origin: akra)>>*/akra.util.URI((sFile)));
                if (!((pFile.host) === null) || akra.util.pathinfo(pFile.path).isAbsolute()) {
                    //another server or absolute path
                    return sFile;
                }
                pCurrentPath = (new /*checked (origin: akra)>>*/akra.util.URI((sAbsolutePath)));
                pCurrentPath.path = akra.util.pathinfo(pCurrentPath.path).dirname + "/" + sFile;
                // console.log(sFile, sAbsolutePath, pCurrentPath.toString());
                return pCurrentPath.toString();
            };
            return URI;
        })();
        util.URI = URI;        
        util.uri = /** @inline */function (sUri) {
            return new akra.util.URI(sUri);
        };
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.uri = akra.util.uri;
})(akra || (akra = {}));
var akra;
(function (akra) {
    // #include "ReferenceCounter.ts"
    // #include "Singleton.ts"
    // #include "BrowserInfo.ts"
    // #include "ApiInfo.ts"
    // #include "ScreenInfo.ts"
    // #include "DeviceInfo.ts"
    // #include "UtilTimer.ts"
    // #include "Entity.ts"
    // #include "ThreadManager.ts"
    (function (util) {
        //string to array buffer
        util.stoab = function (s) {
            var len = s.length;
            var pCodeList = new Uint8Array(len);
            for(var i = 0; i < len; ++i) {
                /*& 0xFF;*/
                pCodeList[i] = s.charCodeAt(i);
            }
            return pCodeList.buffer;
        };
        util.abtos = function (pBuf) {
            var pData = new Uint8Array(pBuf);
            var s = "";
            for(var n = 0; n < pData.length; ++n) {
                s += String.fromCharCode(pData[n]);
            }
            return s;
            // return String.fromCharCode.apply(null, Array.prototype.slice.call(new Uint8Array(pBuf), 0));
                    };
        function abtota(pBuffer, eType) {
            switch(eType) {
                case akra.EDataTypes.FLOAT:
                    return new Float32Array(pBuffer);
                case akra.EDataTypes.SHORT:
                    return new Int16Array(pBuffer);
                case akra.EDataTypes.UNSIGNED_SHORT:
                    return new Uint16Array(pBuffer);
                case akra.EDataTypes.INT:
                    return new Int32Array(pBuffer);
                case akra.EDataTypes.UNSIGNED_INT:
                    return new Uint32Array(pBuffer);
                case akra.EDataTypes.BYTE:
                    return new Int8Array(pBuffer);
                default:
                case akra.EDataTypes.UNSIGNED_BYTE:
                    return new Uint8Array(pBuffer);
            }
        }
        util.abtota = abtota;
        function parseJSON(sJSON) {
            return eval('(' + sJSON + ')');
        }
        util.parseJSON = parseJSON;
        function btoa(pBlob, fn) {
            var pReader = new FileReader();
            pReader.onload = function (e) {
                fn(null, e.target.result);
            };
            pReader.onerror = function (e) {
                fn(e, null);
            };
            pReader.readAsArrayBuffer(pBlob);
        }
        util.btoa = btoa;
        /**
        * Преобразование html-сформированного текста
        * в dom.
        */
        function parseHTML(sHTML, useDocFragment) {
            if (typeof useDocFragment === "undefined") { useDocFragment = true; }
            var pDivEl = document.createElement('div');
            var pDocFrag;
            pDivEl.innerHTML = sHTML;
            if (!useDocFragment) {
                return pDivEl.childNodes;
            }
            pDocFrag = document.createDocumentFragment();
            for(var i = 0, len = pDivEl.childNodes.length; i < len; ++i) {
                if (!((pDivEl.childNodes[i]) !== undefined)) {
                    continue;
                }
                pDocFrag.appendChild(pDivEl.childNodes[i]);
            }
            return pDocFrag;
        }
        util.parseHTML = parseHTML;
        ;
        function blobFromDataURL(sBlobURL, fn) {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", sBlobURL, true);
            xhr.responseType = "blob";
            xhr.onload = function (e) {
                if (this.status == 200) {
                    fn(this.response);
                }
            };
            xhr.send();
        }
        util.blobFromDataURL = blobFromDataURL;
        function dataURItoBlob(dataURI) {
            // convert base64 to raw binary data held in a string
            // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
            var byteString = atob(dataURI.split(',')[1]);
            // separate out the mime component
            var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
            // write the bytes of the string to an ArrayBuffer
            var ab = new ArrayBuffer(byteString.length);
            var ia = new Uint8Array(ab);
            for(var i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }
            // write the ArrayBuffer to a blob, and you're done
            var bb = new Blob([
                ab
            ], {
                type: mimeString
            });
            return bb;
        }
        util.dataURItoBlob = dataURItoBlob;
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (io) {
        var pDefaulParams = {
            async: false,
            statusCode: {},
            success: null,
            error: null,
            beforeSend: null,
            data: null,
            cache: false,
            contentType: "application/x-www-form-urlencoded",
            dataType: /*or string*/
            akra.EAjaxDataTypes.TEXT,
            type: /*or string*/
            akra.EAjaxHttpMethods.GET,
            timeout: 0
        };
        function stringToHttpMethod(sMethod) {
            sMethod = sMethod.toLowerCase();
            if (sMethod === "get") {
                return akra.EAjaxHttpMethods.GET;
            }
            return akra.EAjaxHttpMethods.POST;
        }
        io.stringToHttpMethod = stringToHttpMethod;
        function stringToAjaxDataType(sDataType) {
            sDataType = sDataType.toLowerCase();
            switch(sDataType) {
                case "json":
                    return akra.EAjaxDataTypes.JSON;
                case "blob":
                    return akra.EAjaxDataTypes.BLOB;
                case "html":
                case "document":
                    return akra.EAjaxDataTypes.DOCUMENT;
                case "array_buffer":
                case "arraybuffer":
                    return akra.EAjaxDataTypes.ARRAY_BUFFER;
            }
            return akra.EAjaxDataTypes.TEXT;
        }
        io.stringToAjaxDataType = stringToAjaxDataType;
        function ajaxDataTypeToXHRResponseType(eDataType) {
            switch(eDataType) {
                case akra.EAjaxDataTypes.BLOB:
                    return "blob";
                case akra.EAjaxDataTypes.ARRAY_BUFFER:
                    return "arraybuffer";
                case akra.EAjaxDataTypes.DOCUMENT:
                    return "document";
                case akra.EAjaxDataTypes.TEXT:
                    return "text";
            }
            return "";
        }
        io.ajaxDataTypeToXHRResponseType = ajaxDataTypeToXHRResponseType;
        function createXMLHttpRequest() {
            if ((window).XMLHttpRequest) {
                return new XMLHttpRequest();
            } else if ((window).ActiveXObject) {
                return new ActiveXObject("Microsoft.XMLHTTP");
            }
            return null;
        }
        io.createXMLHttpRequest = createXMLHttpRequest;
        function queryString(pData, sPrefix) {
            if (typeof sPrefix === "undefined") { sPrefix = null; }
            if ((typeof (pData) === "string")) {
                return pData;
            }
            var pQueryParts = [];
            for(var p in pData) {
                var k = sPrefix ? sPrefix + "[" + p + "]" : p, v = pData[p];
                pQueryParts.push(akra.isObject(v) ? queryString(v, k) : encodeURIComponent(k) + "=" + encodeURIComponent(v));
            }
            return pQueryParts.join("&");
        }
        io.queryString = queryString;
        function convertXHRResponse(pRequest, eType, isAsync) {
            switch(eType) {
                case akra.EAjaxDataTypes.TEXT:
                    return String(pRequest.responseText);
                case akra.EAjaxDataTypes.JSON:
                    return akra.util.parseJSON(pRequest.responseText);
                case akra.EAjaxDataTypes.BLOB:
                    return (isAsync ? pRequest.response : (new (Blob)([
                        pRequest.responseText
                    ], {
                        type: "application/octet-stream"
                    })));
                case akra.EAjaxDataTypes.ARRAY_BUFFER:
                    return (isAsync ? (pRequest.response) : pRequest.responseText);
                case akra.EAjaxDataTypes.DOCUMENT:
                    return (isAsync ? pRequest.response : akra.util.parseHTML(pRequest.responseText));
            }
            return null;
        }
                        function _ajax(pUrl, pSettings, pRequest) {
            var iTimeoutId = 0;
            var isAborted = false;
            var sQueryString;
            var pData;
            var sUrl;
            if ((typeof (arguments[0]) === "string")) {
                sUrl = String(arguments[0]);
                pSettings = arguments[1] || {};
                pRequest = arguments[2];
                pSettings.url = sUrl;
            } else {
                pSettings = arguments[0];
                pRequest = arguments[1];
            }
            pData = pSettings.data || {};
            //setup default parameters
            for(var sKey in pDefaulParams) {
                if (((pSettings[sKey]) !== undefined)) {
                    continue;
                }
                pSettings[sKey] = pDefaulParams[sKey];
            }
            //if something parameters setuped by strings
            if ((typeof (pSettings.type) === "string")) {
                pSettings.type = stringToHttpMethod(pSettings.type);
            }
            if ((typeof (pSettings.dataType) === "string")) {
                pSettings.dataType = stringToAjaxDataType(pSettings.dataType);
            }
            var fnCauseError = function (pReq, pErr) {
                if (!pSettings.error) {
 {
                        akra.logger.setSourceLocation("io/ajax.ts", 158);
                        akra.logger.error(pErr);
                    }
                    ;
                } else {
                    pSettings.error(pReq, (pReq ? pReq.statusText : null), pErr);
                }
            };
            var fnBeforeResult = function () {
                if (iTimeoutId !== null) {
                    clearTimeout(iTimeoutId);
                }
            };
            pRequest = pRequest || createXMLHttpRequest();
            if (!pRequest) {
                fnCauseError(null, new Error("Invalid request object."));
            }
            if (pSettings.timeout > 0) {
                iTimeoutId = setTimeout(function () {
                    isAborted = true;
                    pRequest.abort();
                    fnCauseError(pRequest, new Error("Timeout is over."));
                }, pSettings.timeout);
            }
            if (pSettings.beforeSend) {
                if (!pSettings.beforeSend(pRequest, pSettings)) {
                    return null;
                }
            }
            if (pSettings.cache) {
                pData["TIMESTAMP"] = (Date.now());
            }
            sQueryString = queryString(pData);
            pRequest.onreadystatechange = function () {
                if (isAborted) {
                    return;
                }
                if (pRequest.readyState == this.HEADERS_RECEIVED) {
                    if (pSettings.timeout > 0) {
                        clearTimeout(iTimeoutId);
                    }
                }
                if (pRequest.readyState == this.DONE) {
                    var iStatusCode = pRequest.status;
                    var fnStatusHandler = pSettings.statusCode[iStatusCode];
                    if (((fnStatusHandler) != null)) {
                        fnStatusHandler(pRequest.status);
                    }
                    fnBeforeResult();
                    if (iStatusCode == akra.EAjaxHttpCodes.OK) {
                        if (pSettings.success) {
                            pSettings.success(convertXHRResponse(pRequest, pSettings.dataType, true), pRequest.statusText, pRequest);
                        }
                    } else if (!fnStatusHandler) {
                        fnCauseError(pRequest, new Error("Request is not completed successfully (code: " + iStatusCode + ")"));
                    }
                }
            };
            if (isAborted) {
                return null;
            }
            if (pSettings.async) {
                try  {
                    if (pSettings.type == akra.EAjaxHttpMethods.GET) {
                        pRequest.open("GET", pSettings.url + (sQueryString.length ? "?" + sQueryString : ""), true);
                        pRequest.responseType = ajaxDataTypeToXHRResponseType(pSettings.dataType);
                        pRequest.send(null);
                    } else {
                        pRequest.open("POST", pSettings.url, true);
                        pRequest.setRequestHeader("Content-Type", pSettings.contentType);
                        pRequest.responseType = ajaxDataTypeToXHRResponseType(pSettings.dataType);
                        pRequest.send(sQueryString);
                    }
                } catch (e) {
                    fnCauseError(pRequest, e);
                }
            } else {
                if (pSettings.type == akra.EAjaxHttpMethods.GET) {
                    pRequest.open("GET", pSettings.url + "?" + sQueryString, false);
                    pRequest.send(null);
                } else {
                    pRequest.open("POST", pSettings.url, false);
                    pRequest.setRequestHeader("Content-type", pSettings.contentType);
                    pRequest.send(sQueryString);
                }
                fnBeforeResult();
                return {
                    data: convertXHRResponse(pRequest, pSettings.dataType, false),
                    statusText: pRequest.statusText,
                    xhr: pRequest
                };
            }
            return null;
        }
        io.ajax = _ajax;
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var Singleton = (function () {
            function Singleton() {
                var _constructor = (this).constructor;
 {
                    util.logger.setSourceLocation("Singleton.ts", 10);
                    util.logger.assert(!((_constructor._pInstance) !== undefined), 'Singleton class may be created only one time.');
                }
                ;
                _constructor._pInstance = this;
            }
            return Singleton;
        })();
        util.Singleton = Singleton;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var BrowserInfo = (function (_super) {
            __extends(BrowserInfo, _super);
            function BrowserInfo() {
                        _super.call(this);
                this.sBrowser = null;
                this.sVersion = null;
                this.sOS = null;
                this.sVersionSearch = null;
                this.init();
            }
            Object.defineProperty(BrowserInfo.prototype, "name", {
                get: function () {
                    return this.sBrowser;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BrowserInfo.prototype, "version", {
                get: function () {
                    return this.sVersion;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BrowserInfo.prototype, "os", {
                get: function () {
                    return this.sOS;
                },
                enumerable: true,
                configurable: true
            });
            BrowserInfo.prototype.init = function () {
                this.sBrowser = this.searchString(BrowserInfo.dataBrowser) || "An unknown browser";
                this.sVersion = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
                this.sOS = this.searchString(BrowserInfo.dataOS) || "an unknown OS";
            };
            BrowserInfo.prototype.searchString = function (pDataBrowser) {
                for(var i = 0; i < pDataBrowser.length; i++) {
                    var sData = pDataBrowser[i].string;
                    var dataProp = pDataBrowser[i].prop;
                    this.sVersionSearch = pDataBrowser[i].versionSearch || pDataBrowser[i].identity;
                    if (sData) {
                        if (sData.indexOf(pDataBrowser[i].subString) != -1) {
                            return pDataBrowser[i].identity;
                        }
                    } else if (dataProp) {
                        return pDataBrowser[i].identity;
                    }
                }
                return null;
            };
            BrowserInfo.prototype.searchVersion = function (sData) {
                var iStartIndex = sData.indexOf(this.sVersionSearch);
                if (iStartIndex == -1) {
                    return null;
                }
                iStartIndex = sData.indexOf('/', iStartIndex + 1);
                if (iStartIndex == -1) {
                    return null;
                }
                var iEndIndex = sData.indexOf(' ', iStartIndex + 1);
                if (iEndIndex == -1) {
                    iEndIndex = sData.indexOf(';', iStartIndex + 1);
                    if (iEndIndex == -1) {
                        return null;
                    }
                    return sData.slice(iStartIndex + 1);
                }
                return sData.slice((iStartIndex + 1), iEndIndex);
            };
            BrowserInfo.dataBrowser = [
                {
                    string: navigator.userAgent,
                    subString: "Chrome",
                    identity: "Chrome"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "OmniWeb",
                    versionSearch: "OmniWeb/",
                    identity: "OmniWeb"
                }, 
                {
                    string: navigator.vendor,
                    subString: "Apple",
                    identity: "Safari",
                    versionSearch: "Version"
                }, 
                {
                    prop: window.opera,
                    identity: "Opera",
                    versionSearch: "Version"
                }, 
                {
                    string: navigator.vendor,
                    subString: "iCab",
                    identity: "iCab"
                }, 
                {
                    string: navigator.vendor,
                    subString: "KDE",
                    identity: "Konqueror"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "Firefox",
                    identity: "Firefox"
                }, 
                {
                    string: navigator.vendor,
                    subString: "Camino",
                    identity: "Camino"
                }, 
                {
                    string: // for newer Netscapes (6+)
                    navigator.userAgent,
                    subString: "Netscape",
                    identity: "Netscape"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "MSIE",
                    identity: "Explorer",
                    versionSearch: "MSIE"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "Gecko",
                    identity: "Mozilla",
                    versionSearch: "rv"
                }, 
                {
                    string: // for older Netscapes (4-)
                    navigator.userAgent,
                    subString: "Mozilla",
                    identity: "Netscape",
                    versionSearch: "Mozilla"
                }
            ];
            BrowserInfo.dataOS = [
                {
                    string: navigator.platform,
                    subString: "Win",
                    identity: "Windows"
                }, 
                {
                    string: navigator.platform,
                    subString: "Mac",
                    identity: "Mac"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "iPhone",
                    identity: "iPhone/iPod"
                }, 
                {
                    string: navigator.platform,
                    subString: "Linux",
                    identity: "Linux"
                }
            ];
            return BrowserInfo;
        })(util.Singleton);
        util.BrowserInfo = BrowserInfo;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var ScreenInfo = (function () {
            function ScreenInfo() { }
            Object.defineProperty(ScreenInfo.prototype, "width", {
                get: function () {
                    return screen.width;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "height", {
                get: function () {
                    return screen.height;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "aspect", {
                get: function () {
                    return screen.width / screen.height;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "pixelDepth", {
                get: function () {
                    return screen.pixelDepth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "colorDepth", {
                get: function () {
                    return screen.colorDepth;
                },
                enumerable: true,
                configurable: true
            });
            return ScreenInfo;
        })();
        util.ScreenInfo = ScreenInfo;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
/* ClearBufferMask */
/* BeginMode */
/* AlphaFunction (not supported in ES20) */
/*      NEVER */
/*      LESS */
/*      EQUAL */
/*      LEQUAL */
/*      GREATER */
/*      NOTEQUAL */
/*      GEQUAL */
/*      ALWAYS */
/* BlendingFactorDest */
/* BlendingFactorSrc */
/*      ZERO */
/*      ONE */
/*      SRC_ALPHA */
/*      ONE_MINUS_SRC_ALPHA */
/*      DST_ALPHA */
/*      ONE_MINUS_DST_ALPHA */
/* BlendEquationSeparate */
/* same as BLEND_EQUATION */
/* BlendSubtract */
/* Separate Blend Functions */
/* Buffer Objects */
/* CullFaceMode */
/* DepthFunction */
/*      NEVER */
/*      LESS */
/*      EQUAL */
/*      LEQUAL */
/*      GREATER */
/*      NOTEQUAL */
/*      GEQUAL */
/*      ALWAYS */
/* EnableCap */
/* TEXTURE_2D */
/* ErrorCode */
/* FrontFaceDirection */
/* GetPName */
/*      SCISSOR_TEST */
/*      POLYGON_OFFSET_FILL */
/* GetTextureParameter */
/*      TEXTURE_MAG_FILTER */
/*      TEXTURE_MIN_FILTER */
/*      TEXTURE_WRAP_S */
/*      TEXTURE_WRAP_T */
/* HintMode */
/* HintTarget */
/* DataType */
/* PixelFormat */
/* PixelType */
/*      UNSIGNED_BYTE */
/* Shaders */
/* StencilFunction */
/* StencilOp */
/*      ZERO */
/* StringName */
/* TextureMagFilter */
/* TextureMinFilter */
/*      NEAREST */
/*      LINEAR */
/* TextureParameterName */
/* TextureTarget */
/* TextureUnit */
/* TextureWrapMode */
/* Uniform Types */
/* Vertex Arrays */
/* Shader Source */
/* Shader Precision-Specified Types */
/* Framebuffer Object. */
/* WebGL-specific enums */
//WebGL Extensions
//draft
//Future
var akra;
(function (akra) {
    (function (EPixelFormats) {
        EPixelFormats._map = [];
        /*Unknown pixel format.*/
        EPixelFormats.UNKNOWN = 0;
        /*8-bit pixel format, all bits luminance.*/
        EPixelFormats.L8 = 1;
        EPixelFormats.BYTE_L = EPixelFormats.L8;
        /*16-bit pixel format, all bits luminance.*/
        EPixelFormats.L16 = 2;
        EPixelFormats.SHORT_L = EPixelFormats.L16;
        /*8-bit pixel format, all bits alpha.*/
        EPixelFormats.A8 = 3;
        EPixelFormats.BYTE_A = EPixelFormats.A8;
        /*8-bit pixel format, 4 bits alpha, 4 bits luminance.*/
        EPixelFormats.A4L4 = 4;
        /*2 byte pixel format, 1 byte luminance, 1 byte alpha*/
        EPixelFormats.BYTE_LA = 5;
        /*16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.*/
        EPixelFormats.R5G6B5 = 6;
        /*16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.*/
        EPixelFormats.B5G6R5 = 7;
        /*8-bit pixel format, 2 bits blue, 3 bits green, 3 bits red.*/
        EPixelFormats.R3G3B2 = 31;
        /*16-bit pixel format, 4 bits for alpha, red, green and blue.*/
        EPixelFormats.A4R4G4B4 = 8;
        /*16-bit pixel format, 5 bits for blue, green, red and 1 for alpha.*/
        EPixelFormats.A1R5G5B5 = 9;
        /*24-bit pixel format, 8 bits for red, green and blue.*/
        EPixelFormats.R8G8B8 = 10;
        /*24-bit pixel format, 8 bits for blue, green and red.*/
        EPixelFormats.B8G8R8 = 11;
        /*32-bit pixel format, 8 bits for alpha, red, green and blue.*/
        EPixelFormats.A8R8G8B8 = 12;
        /*32-bit pixel format, 8 bits for blue, green, red and alpha.*/
        EPixelFormats.A8B8G8R8 = 13;
        /*32-bit pixel format, 8 bits for blue, green, red and alpha.*/
        EPixelFormats.B8G8R8A8 = 14;
        /*32-bit pixel format, 8 bits for red, green, blue and alpha.*/
        EPixelFormats.R8G8B8A8 = 28;
        /*32-bit pixel format, 8 bits for red, 8 bits for green, 8 bits for blue like A8R8G8B8, but alpha will get discarded*/
        EPixelFormats.X8R8G8B8 = 26;
        /*32-bit pixel format, 8 bits for blue, 8 bits for green, 8 bits for red like A8B8G8R8, but alpha will get discarded*/
        EPixelFormats.X8B8G8R8 = 27;
        /*3 byte pixel format, 1 byte for red, 1 byte for green, 1 byte for blue*/
        EPixelFormats.BYTE_RGB = EPixelFormats.R8G8B8;
        /*3 byte pixel format, 1 byte for blue, 1 byte for green, 1 byte for red*/
        EPixelFormats.BYTE_BGR = EPixelFormats.B8G8R8;
        /*4 byte pixel format, 1 byte for blue, 1 byte for green, 1 byte for red and one byte for alpha*/
        EPixelFormats.BYTE_BGRA = EPixelFormats.B8G8R8A8;
        /*4 byte pixel format, 1 byte for red, 1 byte for green, 1 byte for blue, and one byte for alpha*/
        EPixelFormats.BYTE_RGBA = EPixelFormats.R8G8B8A8;
        EPixelFormats.BYTE_ABGR = EPixelFormats.A8B8G8R8;
        EPixelFormats.BYTE_ARGB = EPixelFormats.A8R8G8B8;
        /*32-bit pixel format, 2 bits for alpha, 10 bits for red, green and blue.*/
        EPixelFormats.A2R10G10B10 = 15;
        /*32-bit pixel format, 10 bits for blue, green and red, 2 bits for alpha.*/
        EPixelFormats.A2B10G10R10 = 16;
        /*DDS (DirectDraw Surface) DXT1 format.*/
        EPixelFormats.DXT1 = 17;
        /*DDS (DirectDraw Surface) DXT2 format.*/
        EPixelFormats.DXT2 = 18;
        /*DDS (DirectDraw Surface) DXT3 format.*/
        EPixelFormats.DXT3 = 19;
        /*DDS (DirectDraw Surface) DXT4 format.*/
        EPixelFormats.DXT4 = 20;
        /*DDS (DirectDraw Surface) DXT5 format.*/
        EPixelFormats.DXT5 = 21;
        /*16-bit pixel format, 16 bits (float) for red*/
        EPixelFormats.FLOAT16_R = 32;
        /*48-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue*/
        EPixelFormats.FLOAT16_RGB = 22;
        /*64-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue, 16 bits (float) for alpha*/
        EPixelFormats.FLOAT16_RGBA = 23;
        /*32-bit pixel format, 32 bits (float) for red*/
        EPixelFormats.FLOAT32_R = 33;
        /*96-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue*/
        EPixelFormats.FLOAT32_RGB = 24;
        /*128-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue, 32 bits (float) for alpha*/
        EPixelFormats.FLOAT32_RGBA = 25;
        /*32-bit, 2-channel s10e5 floating point pixel format, 16-bit green, 16-bit red*/
        EPixelFormats.FLOAT16_GR = 35;
        /*64-bit, 2-channel floating point pixel format, 32-bit green, 32-bit red*/
        EPixelFormats.FLOAT32_GR = 36;
        /*Float Depth texture format*/
        EPixelFormats.FLOAT32_DEPTH = 29;
        EPixelFormats.DEPTH8 = 44;
        /*Byte Depth texture format */
        EPixelFormats.BYTE_DEPTH = EPixelFormats.DEPTH8;
        EPixelFormats.DEPTH16 = 45;
        EPixelFormats.SHORT_DEPTH = EPixelFormats.DEPTH16;
        EPixelFormats.DEPTH32 = 46;
        EPixelFormats.DEPTH24STENCIL8 = 47;
        /*64-bit pixel format, 16 bits for red, green, blue and alpha*/
        EPixelFormats.SHORT_RGBA = 30;
        /*32-bit pixel format, 16-bit green, 16-bit red*/
        EPixelFormats.SHORT_GR = 34;
        /*48-bit pixel format, 16 bits for red, green and blue*/
        EPixelFormats.SHORT_RGB = 37;
        /*PVRTC (PowerVR) RGB 2 bpp.*/
        EPixelFormats.PVRTC_RGB2 = 38;
        /*PVRTC (PowerVR) RGBA 2 bpp.*/
        EPixelFormats.PVRTC_RGBA2 = 39;
        /*PVRTC (PowerVR) RGB 4 bpp.*/
        EPixelFormats.PVRTC_RGB4 = 40;
        /*PVRTC (PowerVR) RGBA 4 bpp.*/
        EPixelFormats.PVRTC_RGBA4 = 41;
        /*8-bit pixel format, all bits red.*/
        EPixelFormats.R8 = 42;
        /*16-bit pixel format, 8 bits red, 8 bits green.*/
        EPixelFormats.RG8 = 43;
        EPixelFormats.TOTAL = 48;
    })(akra.EPixelFormats || (akra.EPixelFormats = {}));
    var EPixelFormats = akra.EPixelFormats;
    ;
    /**
    * Flags defining some on/off properties of pixel formats
    */
    (function (EPixelFormatFlags) {
        EPixelFormatFlags._map = [];
        // This format has an alpha channel
        EPixelFormatFlags.HASALPHA = 0x00000001;
        // This format is compressed. This invalidates the values in elemBytes,
        // elemBits and the bit counts as these might not be fixed in a compressed format.
        EPixelFormatFlags.COMPRESSED = 0x00000002;
        // This is a floating point format
        EPixelFormatFlags.FLOAT = 0x00000004;
        // This is a depth format (for depth textures)
        EPixelFormatFlags.DEPTH = 0x00000008;
        // Format is in native endian. Generally true for the 16, 24 and 32 bits
        // formats which can be represented as machine integers.
        EPixelFormatFlags.NATIVEENDIAN = 0x00000010;
        // This is an intensity format instead of a RGB one. The luminance
        // replaces R,G and B. (but not A)
        EPixelFormatFlags.LUMINANCE = 0x00000020;
        EPixelFormatFlags.STENCIL = 0x00000040;
    })(akra.EPixelFormatFlags || (akra.EPixelFormatFlags = {}));
    var EPixelFormatFlags = akra.EPixelFormatFlags;
    /** Pixel component format */
    (function (EPixelComponentTypes) {
        EPixelComponentTypes._map = [];
        /*Byte per component (8 bit fixed 0.0..1.0)*/
        EPixelComponentTypes.BYTE = 0;
        /*Short per component (16 bit fixed 0.0..1.0))*/
        EPixelComponentTypes.SHORT = 1;
        EPixelComponentTypes.INT = 2;
        /*16 bit float per component*/
        EPixelComponentTypes.FLOAT16 = 3;
        /*32 bit float per component*/
        EPixelComponentTypes.FLOAT32 = 4;
        /*Number of pixel types*/
        EPixelComponentTypes.COUNT = 5;
    })(akra.EPixelComponentTypes || (akra.EPixelComponentTypes = {}));
    var EPixelComponentTypes = akra.EPixelComponentTypes;
    ;
    (function (EFilters) {
        EFilters._map = [];
        EFilters._map[0] = "NEAREST";
        EFilters.NEAREST = 0;
        EFilters._map[1] = "LINEAR";
        EFilters.LINEAR = 1;
        EFilters._map[2] = "BILINEAR";
        EFilters.BILINEAR = 2;
        EFilters._map[3] = "BOX";
        EFilters.BOX = 3;
        EFilters._map[4] = "TRIANGLE";
        EFilters.TRIANGLE = 4;
        EFilters._map[5] = "BICUBIC";
        EFilters.BICUBIC = 5;
    })(akra.EFilters || (akra.EFilters = {}));
    var EFilters = akra.EFilters;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EHardwareBufferFlags) {
        EHardwareBufferFlags._map = [];
        EHardwareBufferFlags.STATIC = 0x01;
        EHardwareBufferFlags.DYNAMIC = 0x02;
        EHardwareBufferFlags.STREAM = 0x80;
        EHardwareBufferFlags.READABLE = 0x04;
        EHardwareBufferFlags.BACKUP_COPY = 0x08;
        /** indicate, that buffer does not use GPU memory or other specific memory. */
        EHardwareBufferFlags.SOFTWARE = 0x10;
        /** Indicate, tha buffer uses specific data aligment */
        EHardwareBufferFlags.ALIGNMENT = 0x20;
        /** Indicates that the application will be refilling the contents
        of the buffer regularly (not just updating, but generating the
        contents from scratch), and therefore does not mind if the contents
        of the buffer are lost somehow and need to be recreated. This
        allows and additional level of optimisation on the buffer.
        This option only really makes sense when combined with
        DYNAMIC and without READING.
        */
        EHardwareBufferFlags.DISCARDABLE = 0x40;
        EHardwareBufferFlags.STATIC_READABLE = EHardwareBufferFlags.STATIC | EHardwareBufferFlags.READABLE;
        EHardwareBufferFlags.DYNAMIC_DISCARDABLE = EHardwareBufferFlags.DYNAMIC | EHardwareBufferFlags.DISCARDABLE;
    })(akra.EHardwareBufferFlags || (akra.EHardwareBufferFlags = {}));
    var EHardwareBufferFlags = akra.EHardwareBufferFlags;
    (function (ELockFlags) {
        ELockFlags._map = [];
        ELockFlags.READ = 0x01;
        ELockFlags.WRITE = 0x02;
        ELockFlags.DISCARD = 0x04;
        ELockFlags.NO_OVERWRITE = 0x08;
        ELockFlags.NORMAL = ELockFlags.READ | ELockFlags.WRITE;
    })(akra.ELockFlags || (akra.ELockFlags = {}));
    var ELockFlags = akra.ELockFlags;
})(akra || (akra = {}));
;
var akra;
(function (akra) {
    (function (math) {
        var Vec2 = (function () {
            function Vec2(fValue1, fValue2) {
                this.x = 0.;
                this.y = 0.;
                var nArgumentsLength = arguments.length;
                var v2fVec = this;
                // if (<any>this === window || <any>this === akra || <any>this === akra.math) {
                //     v2fVec = Vec2.stack[Vec2.stackPosition ++];
                //     if(Vec2.stackPosition == Vec2.stackSize){
                //         Vec2.stackPosition = 0;
                //     }
                // }
                switch(nArgumentsLength) {
                    case 1:
                        v2fVec.set(arguments[0]);
                        break;
                    case 2:
                        v2fVec.set(arguments[0], arguments[1]);
                        break;
                    default:
                        v2fVec.x = v2fVec.y = 0.;
                        break;
                }
            }
            Object.defineProperty(Vec2.prototype, "xx", {
                get: function () {
                    return Vec2.stackCeil.set(this.x, this.x);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec2.prototype, "xy", {
                get: function () {
                    return Vec2.stackCeil.set(this.x, this.y);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec2.prototype, "yx", {
                get: function () {
                    return Vec2.stackCeil.set(this.y, this.x);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec2.prototype, "yy", {
                get: function () {
                    return Vec2.stackCeil.set(this.y, this.y);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Vec2.prototype.set = function (fValue1, fValue2) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 0:
                        this.x = this.y = 0.;
                        break;
                    case 1:
                        if ((typeof (arguments[0]) === "number")) {
                            this.x = this.y = arguments[0];
                        } else if (arguments[0] instanceof Vec2) {
                            var v2fVec = arguments[0];
                            this.x = v2fVec.x;
                            this.y = v2fVec.y;
                        } else {
                            var pArray = arguments[0];
                            this.x = pArray[0];
                            this.y = pArray[1];
                        }
                        break;
                    case 2:
                        this.x = arguments[0];
                        this.y = arguments[1];
                        break;
                }
                ;
                return this;
            };
            Vec2.prototype.clear = /** @inline */function () {
                this.x = this.y = 0.;
                return this;
            };
            Vec2.prototype.add = function (v2fVec, v2fDestination) {
                if (!((v2fDestination) !== undefined)) {
                    v2fDestination = this;
                }
                v2fDestination.x = this.x + v2fVec.x;
                v2fDestination.y = this.y + v2fVec.y;
                return v2fDestination;
            };
            Vec2.prototype.subtract = function (v2fVec, v2fDestination) {
                if (!((v2fDestination) !== undefined)) {
                    v2fDestination = this;
                }
                v2fDestination.x = this.x - v2fVec.x;
                v2fDestination.y = this.y - v2fVec.y;
                return v2fDestination;
            };
            Vec2.prototype.dot = /** @inline */function (v2fVec) {
                return this.x * v2fVec.x + this.y * v2fVec.y;
            };
            Vec2.prototype.isEqual = function (v2fVec, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                if (fEps === 0.) {
                    if (this.x != v2fVec.x || this.y != v2fVec.y) {
                        return false;
                    }
                } else {
                    if (math.abs(this.x - v2fVec.x) > fEps || math.abs(this.y - v2fVec.y) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec2.prototype.isClear = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                if (fEps === 0.) {
                    if (this.x != 0. || this.y != 0.) {
                        return false;
                    }
                } else {
                    if (math.abs(this.x) > fEps || math.abs(this.y) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec2.prototype.negate = function (v2fDestination) {
                if (!((v2fDestination) !== undefined)) {
                    v2fDestination = this;
                }
                v2fDestination.x = -this.x;
                v2fDestination.y = -this.y;
                return v2fDestination;
            };
            Vec2.prototype.scale = function (fScale, v2fDestination) {
                if (!((v2fDestination) !== undefined)) {
                    v2fDestination = this;
                }
                v2fDestination.x = this.x * fScale;
                v2fDestination.y = this.y * fScale;
                return v2fDestination;
            };
            Vec2.prototype.normalize = function (v2fDestination) {
                if (!((v2fDestination) !== undefined)) {
                    v2fDestination = this;
                }
                var x = this.x, y = this.y;
                var fLength = math.sqrt(x * x + y * y);
                if (fLength !== 0.) {
                    var fInvLength = 1. / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                }
                v2fDestination.x = x;
                v2fDestination.y = y;
                return v2fDestination;
            };
            Vec2.prototype.length = /** @inline */function () {
                var x = this.x, y = this.y;
                return math.sqrt(x * x + y * y);
            };
            Vec2.prototype.lengthSquare = /** @inline */function () {
                var x = this.x, y = this.y;
                return x * x + y * y;
            };
            Vec2.prototype.direction = function (v2fVec, v2fDestination) {
                if (!((v2fDestination) !== undefined)) {
                    v2fDestination = this;
                }
                var x = v2fVec.x - this.x;
                var y = v2fVec.y - this.y;
                var fLength = math.sqrt(x * x + y * y);
                if (fLength !== 0.) {
                    var fInvLength = 1. / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                }
                v2fDestination.x = x;
                v2fDestination.y = y;
                return v2fDestination;
            };
            Vec2.prototype.mix = function (v2fVec, fA, v2fDestination) {
                if (!((v2fDestination) !== undefined)) {
                    v2fDestination = this;
                }
                fA = (/*checked (origin: math)>>*/akra.math.max((0.), /*checked (origin: math)>>*/akra.math.min((fA), (1.))));
                var fA1 = 1. - fA;
                var fA2 = fA;
                v2fDestination.x = fA1 * this.x + fA2 * v2fVec.x;
                v2fDestination.y = fA1 * this.y + fA2 * v2fVec.y;
                return v2fDestination;
            };
            Vec2.prototype.toString = /** @inline */function () {
                return "[x: " + this.x + ", y: " + this.y + "]";
            };
            Object.defineProperty(Vec2, "stackCeil", {
                get: function () {
                    Vec2.stackPosition = Vec2.stackPosition === Vec2.stackSize - 1 ? 0 : Vec2.stackPosition;
                    return Vec2.stack[Vec2.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Vec2.stackSize = 100;
            Vec2.stackPosition = 0;
            Vec2.stack = (function () {
                var pStack = new Array(Vec2.stackSize);
                for(var i = 0; i < Vec2.stackSize; i++) {
                    pStack[i] = new Vec2();
                }
                return pStack;
            })();
            return Vec2;
        })();
        math.Vec2 = Vec2;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
;
;
var akra;
(function (akra) {
    (function (math) {
        var Vec3 = (function () {
            function Vec3(fValue1, fValue2, fValue3) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        this.set(arguments[0]);
                        break;
                    case 2:
                        this.set(arguments[0], arguments[1]);
                        break;
                    case 3:
                        this.set(arguments[0], arguments[1], arguments[2]);
                        break;
                    default:
                        this.x = this.y = this.z = 0.;
                        break;
                }
            }
            Object.defineProperty(Vec3.prototype, "xx", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.x, this.x);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xy", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.x, this.y);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xz", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.x, this.z);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yx", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.y, this.x);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yy", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.y, this.y);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yz", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.y, this.z);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zx", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.z, this.x);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zy", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.z, this.y);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zz", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.z, this.z);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xxx", {
                get: function () {
                    return Vec3.stackCeil.set(this.x, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xxy", {
                get: function () {
                    return Vec3.stackCeil.set(this.x, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xxz", {
                get: function () {
                    return Vec3.stackCeil.set(this.x, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xyx", {
                get: function () {
                    return Vec3.stackCeil.set(this.x, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xyy", {
                get: function () {
                    return Vec3.stackCeil.set(this.x, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xyz", {
                get: function () {
                    return Vec3.stackCeil.set(this.x, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xzx", {
                get: function () {
                    return Vec3.stackCeil.set(this.x, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xzy", {
                get: function () {
                    return Vec3.stackCeil.set(this.x, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xzz", {
                get: function () {
                    return Vec3.stackCeil.set(this.x, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yxx", {
                get: function () {
                    return Vec3.stackCeil.set(this.y, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yxy", {
                get: function () {
                    return Vec3.stackCeil.set(this.y, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yxz", {
                get: function () {
                    return Vec3.stackCeil.set(this.y, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yyx", {
                get: function () {
                    return Vec3.stackCeil.set(this.y, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yyy", {
                get: function () {
                    return Vec3.stackCeil.set(this.y, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yyz", {
                get: function () {
                    return Vec3.stackCeil.set(this.y, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yzx", {
                get: function () {
                    return Vec3.stackCeil.set(this.y, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yzy", {
                get: function () {
                    return Vec3.stackCeil.set(this.y, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yzz", {
                get: function () {
                    return Vec3.stackCeil.set(this.y, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zxx", {
                get: function () {
                    return Vec3.stackCeil.set(this.z, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zxy", {
                get: function () {
                    return Vec3.stackCeil.set(this.z, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zxz", {
                get: function () {
                    return Vec3.stackCeil.set(this.z, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zyx", {
                get: function () {
                    return Vec3.stackCeil.set(this.z, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zyy", {
                get: function () {
                    return Vec3.stackCeil.set(this.z, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zyz", {
                get: function () {
                    return Vec3.stackCeil.set(this.z, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zzx", {
                get: function () {
                    return Vec3.stackCeil.set(this.z, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zzy", {
                get: function () {
                    return Vec3.stackCeil.set(this.z, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zzz", {
                get: function () {
                    return Vec3.stackCeil.set(this.z, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Vec3.prototype.set = function (fValue1, fValue2, fValue3) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 0:
                        this.x = this.y = this.z = 0.;
                        break;
                    case 1:
                        if ((typeof (arguments[0]) === "number")) {
                            this.x = this.y = this.z = arguments[0];
                        } else if (arguments[0] instanceof Vec3) {
                            var v3fVec = arguments[0];
                            this.x = v3fVec.x;
                            this.y = v3fVec.y;
                            this.z = v3fVec.z;
                        } else {
                            var pArray = arguments[0];
                            this.x = pArray[0];
                            this.y = pArray[1];
                            this.z = pArray[2];
                        }
                        break;
                    case 2:
                        if ((typeof (arguments[0]) === "number")) {
                            var fValue = arguments[0];
                            var v2fVec = arguments[1];
                            this.x = fValue;
                            this.y = v2fVec.x;
                            this.z = v2fVec.y;
                        } else {
                            var v2fVec = arguments[0];
                            var fValue = arguments[1];
                            this.x = v2fVec.x;
                            this.y = v2fVec.y;
                            this.z = fValue;
                        }
                        break;
                    case 3:
                        this.x = arguments[0];
                        this.y = arguments[1];
                        this.z = arguments[2];
                        break;
                }
                return this;
            };
            Vec3.prototype.clear = /** @inline */function () {
                this.x = this.y = this.z = 0.;
                return this;
            };
            Vec3.prototype.add = function (v3fVec, v3fDestination) {
                if (!((v3fDestination) !== undefined)) {
                    v3fDestination = this;
                }
                v3fDestination.x = this.x + v3fVec.x;
                v3fDestination.y = this.y + v3fVec.y;
                v3fDestination.z = this.z + v3fVec.z;
                return v3fDestination;
            };
            Vec3.prototype.subtract = function (v3fVec, v3fDestination) {
                if (!((v3fDestination) !== undefined)) {
                    v3fDestination = this;
                }
                v3fDestination.x = this.x - v3fVec.x;
                v3fDestination.y = this.y - v3fVec.y;
                v3fDestination.z = this.z - v3fVec.z;
                return v3fDestination;
            };
            Vec3.prototype.dot = /** @inline */function (v3fVec) {
                return this.x * v3fVec.x + this.y * v3fVec.y + this.z * v3fVec.z;
            };
            Vec3.prototype.cross = function (v3fVec, v3fDestination) {
                if (!((v3fDestination) !== undefined)) {
                    v3fDestination = this;
                }
                var x1 = this.x, y1 = this.y, z1 = this.z;
                var x2 = v3fVec.x, y2 = v3fVec.y, z2 = v3fVec.z;
                v3fDestination.x = y1 * z2 - z1 * y2;
                v3fDestination.y = z1 * x2 - x1 * z2;
                v3fDestination.z = x1 * y2 - y1 * x2;
                return v3fDestination;
            };
            Vec3.prototype.isEqual = function (v3fVec, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                if (fEps === 0.) {
                    if (this.x != v3fVec.x || this.y != v3fVec.y || this.z != v3fVec.z) {
                        return false;
                    }
                } else {
                    if (math.abs(this.x - v3fVec.x) > fEps || math.abs(this.y - v3fVec.y) > fEps || math.abs(this.z - v3fVec.z) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec3.prototype.isClear = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                if (fEps === 0.) {
                    if (this.x != 0. || this.y != 0. || this.z != 0.) {
                        return false;
                    }
                } else {
                    if (math.abs(this.x) > fEps || math.abs(this.y) > fEps || math.abs(this.z) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec3.prototype.negate = function (v3fDestination) {
                if (!((v3fDestination) !== undefined)) {
                    v3fDestination = this;
                }
                v3fDestination.x = -this.x;
                v3fDestination.y = -this.y;
                v3fDestination.z = -this.z;
                return v3fDestination;
            };
            Vec3.prototype.scale = function (fScale, v3fDestination) {
                if (!((v3fDestination) !== undefined)) {
                    v3fDestination = this;
                }
                if ((typeof (arguments[0]) === "number")) {
                    var fScale = arguments[0];
                    v3fDestination.x = this.x * fScale;
                    v3fDestination.y = this.y * fScale;
                    v3fDestination.z = this.z * fScale;
                } else {
                    var v3fScale = arguments[0];
                    v3fDestination.x = this.x * v3fScale.x;
                    v3fDestination.y = this.y * v3fScale.y;
                    v3fDestination.z = this.z * v3fScale.z;
                }
                return v3fDestination;
            };
            Vec3.prototype.normalize = function (v3fDestination) {
                if (!v3fDestination) {
                    v3fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z;
                var fLength = math.sqrt(x * x + y * y + z * z);
                if (fLength !== 0.) {
                    var fInvLength = 1. / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                    z *= fInvLength;
                }
                v3fDestination.x = x;
                v3fDestination.y = y;
                v3fDestination.z = z;
                return v3fDestination;
            };
            Vec3.prototype.length = /** @inline */function () {
                return math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
            };
            Vec3.prototype.lengthSquare = /** @inline */function () {
                var x = this.x, y = this.y, z = this.z;
                return x * x + y * y + z * z;
            };
            Vec3.prototype.direction = function (v3fVec, v3fDestination) {
                if (!((v3fDestination) !== undefined)) {
                    v3fDestination = this;
                }
                var x = v3fVec.x - this.x;
                var y = v3fVec.y - this.y;
                var z = v3fVec.z - this.z;
                var fLength = math.sqrt(x * x + y * y + z * z);
                if (fLength !== 0.) {
                    var fInvLength = 1. / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                    z *= fInvLength;
                }
                v3fDestination.x = x;
                v3fDestination.y = y;
                v3fDestination.z = z;
                return v3fDestination;
            };
            Vec3.prototype.mix = function (v3fVec, fA, v3fDestination) {
                if (!((v3fDestination) !== undefined)) {
                    v3fDestination = this;
                }
                fA = (/*checked (origin: math)>>*/akra.math.max((0.), /*checked (origin: math)>>*/akra.math.min((fA), (1.))));
                var fA1 = 1. - fA;
                var fA2 = fA;
                v3fDestination.x = fA1 * this.x + fA2 * v3fVec.x;
                v3fDestination.y = fA1 * this.y + fA2 * v3fVec.y;
                v3fDestination.z = fA1 * this.z + fA2 * v3fVec.z;
                return v3fDestination;
            };
            Vec3.prototype.toString = /** @inline */function () {
                return "[x: " + this.x + " ,y: " + this.y + ", z: " + this.z + "]";
            };
            Vec3.prototype.toTranslationMatrix = function (m4fDestination) {
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = new math.Mat4(1.);
                } else {
                    m4fDestination.set(1.);
                }
                var pData = m4fDestination.data;
                pData[12] = this.x;
                pData[13] = this.y;
                pData[14] = this.z;
                return m4fDestination;
            };
            Vec3.prototype.vec3TransformCoord = function (m4fTransformation, v3fDestination) {
                if (!v3fDestination) {
                    v3fDestination = this;
                }
                var pData = m4fTransformation.data;
                var x = this.x;
                var y = this.y;
                var z = this.z;
                var w;
                x = pData[0] * x + pData[4] * y + pData[8] * z + pData[12];
                y = pData[1] * x + pData[5] * y + pData[9] * z + pData[13];
                z = pData[2] * x + pData[6] * y + pData[10] * z + pData[14];
                w = pData[2] * x + pData[7] * y + pData[11] * z + pData[15];
                var fInvW = 1. / w;
                v3fDestination.x = x * fInvW;
                v3fDestination.y = y * fInvW;
                v3fDestination.z = z * fInvW;
                return v3fDestination;
            };
            Object.defineProperty(Vec3, "stackCeil", {
                get: function () {
                    Vec3.stackPosition = Vec3.stackPosition === Vec3.stackSize - 1 ? 0 : Vec3.stackPosition;
                    return Vec3.stack[Vec3.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Vec3.stackSize = 256;
            Vec3.stackPosition = 0;
            Vec3.stack = (function () {
                var pStack = new Array(Vec3.stackSize);
                for(var i = 0; i < Vec3.stackSize; i++) {
                    pStack[i] = new Vec3();
                }
                return pStack;
            })();
            return Vec3;
        })();
        math.Vec3 = Vec3;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
        var Vec4 = (function () {
            function Vec4(fValue1, fValue2, fValue3, fValue4) {
                var nArgumentsLength = arguments.length;
                var v4fVec = this;
                // if (<any>this === window || <any>this === akra || <any>this === akra.math) {
                //     v4fVec = Vec4.stack[Vec4.stackPosition ++];
                //     if(Vec4.stackPosition == Vec4.stackSize){
                //         Vec4.stackPosition = 0;
                //     }
                // }
                switch(nArgumentsLength) {
                    case 1:
                        v4fVec.set(arguments[0]);
                        break;
                    case 2:
                        v4fVec.set(arguments[0], arguments[1]);
                        break;
                    case 3:
                        v4fVec.set(arguments[0], arguments[1], arguments[2]);
                        break;
                    case 4:
                        v4fVec.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;
                    default:
                        v4fVec.x = v4fVec.y = v4fVec.z = v4fVec.w = 0.;
                        break;
                }
            }
            Object.defineProperty(Vec4.prototype, "xx", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.x, this.x);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xy", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.x, this.y);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xz", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.x, this.z);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xw", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.x, this.w);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yx", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.y, this.x);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yy", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.y, this.y);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yz", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.y, this.z);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yw", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.y, this.w);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zx", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.z, this.x);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zy", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.z, this.y);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zz", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.z, this.z);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zw", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.z, this.w);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wx", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.w, this.x);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wy", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.w, this.y);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wz", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.w, this.z);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ww", {
                get: function () {
                    return math.Vec2.stackCeil.set(this.w, this.w);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxw", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyw", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzw", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xww", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.x, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxw", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyw", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzw", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yww", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.y, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxw", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyw", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzw", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zww", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.z, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxw", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyw", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzw", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwx", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwy", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwz", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "www", {
                get: function () {
                    return math.Vec3.stackCeil.set(this.w, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxwx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxwy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxwz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxww", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xywx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xywy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xywz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyww", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzwx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzwy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzwz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzww", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwwx", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwwy", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwwz", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwww", {
                get: function () {
                    return Vec4.stackCeil.set(this.x, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxwx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxwy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxwz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxww", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yywx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yywy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yywz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyww", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzwx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzwy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzwz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzww", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywwx", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywwy", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywwz", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywww", {
                get: function () {
                    return Vec4.stackCeil.set(this.y, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxwx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxwy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxwz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxww", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zywx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zywy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zywz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyww", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzwx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzwy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzwz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzww", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwwx", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwwy", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwwz", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwww", {
                get: function () {
                    return Vec4.stackCeil.set(this.z, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxwx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxwy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxwz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxww", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wywx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wywy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wywz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyww", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzwx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzwy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzwz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzww", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxw", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyw", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzw", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwwx", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwwy", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwwz", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwww", {
                get: function () {
                    return Vec4.stackCeil.set(this.w, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Vec4.prototype.set = function () {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 0:
                        this.x = this.y = this.z = this.w = 0.;
                        break;
                    case 1:
                        if ((typeof (arguments[0]) === "number")) {
                            this.x = this.y = this.z = this.w = arguments[0];
                        } else if (arguments[0] instanceof Vec4) {
                            var v4fVec = arguments[0];
                            this.x = v4fVec.x;
                            this.y = v4fVec.y;
                            this.z = v4fVec.z;
                            this.w = v4fVec.w;
                        } else //color
                        if (((arguments[0].r) !== undefined)) {
                            this.x = arguments[0].r;
                            this.y = arguments[0].g;
                            this.z = arguments[0].b;
                            this.w = arguments[0].a;
                        } else {
                            //array
                            var pArray = arguments[0];
                            this.x = pArray[0];
                            this.y = pArray[1];
                            this.z = pArray[2];
                            this.w = pArray[3];
                        }
                        break;
                    case 2:
                        if ((typeof (arguments[0]) === "number")) {
                            var fValue = arguments[0];
                            var v3fVec = arguments[1];
                            this.x = fValue;
                            this.y = v3fVec.x;
                            this.z = v3fVec.y;
                            this.w = v3fVec.z;
                        } else if (arguments[0] instanceof math.Vec2) {
                            var v2fVec1 = arguments[0];
                            var v2fVec2 = arguments[1];
                            this.x = v2fVec1.x;
                            this.y = v2fVec1.y;
                            this.z = v2fVec2.x;
                            this.w = v2fVec2.y;
                        } else {
                            var v3fVec = arguments[0];
                            var fValue = arguments[1];
                            this.x = v3fVec.x;
                            this.y = v3fVec.y;
                            this.z = v3fVec.z;
                            this.w = fValue;
                        }
                        break;
                    case 3:
                        if ((typeof (arguments[0]) === "number")) {
                            var fValue1 = arguments[0];
                            if ((typeof (arguments[1]) === "number")) {
                                var fValue2 = arguments[1];
                                var v2fVec = arguments[2];
                                this.x = fValue1;
                                this.y = fValue2;
                                this.z = v2fVec.x;
                                this.w = v2fVec.y;
                            } else {
                                var v2fVec = arguments[1];
                                var fValue2 = arguments[2];
                                this.x = fValue1;
                                this.y = v2fVec.x;
                                this.z = v2fVec.y;
                                this.w = fValue2;
                            }
                        } else {
                            var v2fVec = arguments[0];
                            var fValue1 = arguments[1];
                            var fValue2 = arguments[2];
                            this.x = v2fVec.x;
                            this.y = v2fVec.y;
                            this.z = fValue1;
                            this.w = fValue2;
                        }
                        break;
                    case 4:
                        this.x = arguments[0];
                        this.y = arguments[1];
                        this.z = arguments[2];
                        this.w = arguments[3];
                        break;
                }
                return this;
            };
            Vec4.prototype.clear = /** @inline */function () {
                this.x = this.y = this.z = this.w = 0.;
                return this;
            };
            Vec4.prototype.add = function (v4fVec, v4fDestination) {
                if (!((v4fDestination) !== undefined)) {
                    v4fDestination = this;
                }
                v4fDestination.x = this.x + v4fVec.x;
                v4fDestination.y = this.y + v4fVec.y;
                v4fDestination.z = this.z + v4fVec.z;
                v4fDestination.w = this.w + v4fVec.w;
                return v4fDestination;
            };
            Vec4.prototype.subtract = function (v4fVec, v4fDestination) {
                if (!((v4fDestination) !== undefined)) {
                    v4fDestination = this;
                }
                v4fDestination.x = this.x - v4fVec.x;
                v4fDestination.y = this.y - v4fVec.y;
                v4fDestination.z = this.z - v4fVec.z;
                v4fDestination.w = this.w - v4fVec.w;
                return v4fDestination;
            };
            Vec4.prototype.dot = /** @inline */function (v4fVec) {
                return this.x * v4fVec.x + this.y * v4fVec.y + this.z * v4fVec.z + this.w * v4fVec.w;
            };
            Vec4.prototype.isEqual = function (v4fVec, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                if (fEps === 0.) {
                    if (this.x != v4fVec.x || this.y != v4fVec.y || this.z != v4fVec.z || this.w != v4fVec.w) {
                        return false;
                    }
                } else {
                    if (math.abs(this.x - v4fVec.x) > fEps || math.abs(this.y - v4fVec.y) > fEps || math.abs(this.z - v4fVec.z) > fEps || math.abs(this.w - v4fVec.w) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec4.prototype.isClear = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                if (fEps === 0.) {
                    if (this.x != 0. || this.y != 0. || this.z != 0. || this.w != 0.) {
                        return false;
                    }
                } else {
                    if (math.abs(this.x) > fEps || math.abs(this.y) > fEps || math.abs(this.z) > fEps || math.abs(this.w) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Vec4.prototype.negate = function (v4fDestination) {
                if (!((v4fDestination) !== undefined)) {
                    v4fDestination = this;
                }
                v4fDestination.x = -this.x;
                v4fDestination.y = -this.y;
                v4fDestination.z = -this.z;
                v4fDestination.w = -this.w;
                return v4fDestination;
            };
            Vec4.prototype.scale = function (fScale, v4fDestination) {
                if (!((v4fDestination) !== undefined)) {
                    v4fDestination = this;
                }
                v4fDestination.x = this.x * fScale;
                v4fDestination.y = this.y * fScale;
                v4fDestination.z = this.z * fScale;
                v4fDestination.w = this.w * fScale;
                return v4fDestination;
            };
            Vec4.prototype.normalize = function (v4fDestination) {
                if (!((v4fDestination) !== undefined)) {
                    v4fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fLength = math.sqrt(x * x + y * y + z * z + w * w);
                if (fLength !== 0.) {
                    var fInvLength = 1. / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                    z *= fInvLength;
                    w *= fInvLength;
                }
                v4fDestination.x = x;
                v4fDestination.y = y;
                v4fDestination.z = z;
                v4fDestination.w = w;
                return v4fDestination;
            };
            Vec4.prototype.length = /** @inline */function () {
                var x = this.x, y = this.y, z = this.z, w = this.w;
                return math.sqrt(x * x + y * y + z * z + w * w);
            };
            Vec4.prototype.lengthSquare = /** @inline */function () {
                var x = this.x, y = this.y, z = this.z, w = this.w;
                return x * x + y * y + z * z + w * w;
            };
            Vec4.prototype.direction = function (v4fVec, v4fDestination) {
                if (!((v4fDestination) !== undefined)) {
                    v4fDestination = this;
                }
                var x = v4fVec.x - this.x;
                var y = v4fVec.y - this.y;
                var z = v4fVec.z - this.z;
                var w = v4fVec.w - this.w;
                var fLength = math.sqrt(x * x + y * y + z * z + w * w);
                if (fLength !== 0.) {
                    var fInvLength = 1. / fLength;
                    x *= fInvLength;
                    y *= fInvLength;
                    z *= fInvLength;
                    w *= fInvLength;
                }
                v4fDestination.x = x;
                v4fDestination.y = y;
                v4fDestination.z = z;
                v4fDestination.w = w;
                return v4fDestination;
            };
            Vec4.prototype.mix = function (v4fVec, fA, v4fDestination) {
                if (!((v4fDestination) !== undefined)) {
                    v4fDestination = this;
                }
                fA = (/*checked (origin: math)>>*/akra.math.max((0.), /*checked (origin: math)>>*/akra.math.min((fA), (1.))));
                var fA1 = 1. - fA;
                var fA2 = fA;
                v4fDestination.x = fA1 * this.x + fA2 * v4fVec.x;
                v4fDestination.y = fA1 * this.y + fA2 * v4fVec.y;
                v4fDestination.z = fA1 * this.z + fA2 * v4fVec.z;
                v4fDestination.w = fA1 * this.w + fA2 * v4fVec.w;
                return v4fDestination;
            };
            Vec4.prototype.toString = /** @inline */function () {
                return "[x: " + this.x + ", y: " + this.y + ", z: " + this.z + ", w: " + this.w + "]";
            };
            Object.defineProperty(Vec4, "stackCeil", {
                get: function () {
                    Vec4.stackPosition = Vec4.stackPosition === Vec4.stackSize - 1 ? 0 : Vec4.stackPosition;
                    return Vec4.stack[Vec4.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Vec4.stackSize = 100;
            Vec4.stackPosition = 0;
            Vec4.stack = (function () {
                var pStack = new Array(Vec4.stackSize);
                for(var i = 0; i < Vec4.stackSize; i++) {
                    pStack[i] = new Vec4();
                }
                return pStack;
            })();
            return Vec4;
        })();
        math.Vec4 = Vec4;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
;
;
var akra;
(function (akra) {
    (function (math) {
        var Mat3 = (function () {
            function Mat3(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        this.set(arguments[0]);
                        break;
                    case 3:
                        this.set(arguments[0], arguments[1], arguments[2]);
                        break;
                    case 9:
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
                        break;
                    default:
                        break;
                }
            }
            Mat3.prototype.set = function (fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9) {
                this.data = this.data || new Float32Array(9);
                var pData = this.data;
                //без аргументов инициализируется нулями
                var nArgumentsLength = arguments.length;
                if (nArgumentsLength == 0) {
                    pData[0] = pData[3] = pData[6] = 0;
                    pData[1] = pData[4] = pData[7] = 0;
                    pData[2] = pData[5] = pData[8] = 0;
                }
                if (nArgumentsLength == 1) {
                    if ((typeof (arguments[0]) === "number")) {
                        var nValue = arguments[0];
                        pData[0] = nValue;
                        pData[3] = 0;
                        pData[6] = 0;
                        pData[1] = 0;
                        pData[4] = nValue;
                        pData[7] = 0;
                        pData[2] = 0;
                        pData[5] = 0;
                        pData[8] = nValue;
                    } else if (((arguments[0].data) !== undefined)) {
                        var pElements = arguments[0].data;
                        if (pElements.length === 9) {
                            //Mat3
                            pData[0] = pElements[0];
                            pData[3] = pElements[3];
                            pData[6] = pElements[6];
                            pData[1] = pElements[1];
                            pData[4] = pElements[4];
                            pData[7] = pElements[7];
                            pData[2] = pElements[2];
                            pData[5] = pElements[5];
                            pData[8] = pElements[8];
                        } else {
                            //Mat4
                            pData[0] = pElements[0];
                            pData[3] = pElements[4];
                            pData[6] = pElements[8];
                            pData[1] = pElements[1];
                            pData[4] = pElements[5];
                            pData[7] = pElements[9];
                            pData[2] = pElements[2];
                            pData[5] = pElements[6];
                            pData[8] = pElements[10];
                        }
                    } else if (arguments[0] instanceof math.Vec3) {
                        var v3fVec = arguments[0];
                        //диагональ
                        pData[0] = v3fVec.x;
                        pData[3] = 0;
                        pData[6] = 0;
                        pData[1] = 0;
                        pData[4] = v3fVec.y;
                        pData[7] = 0;
                        pData[2] = 0;
                        pData[5] = 0;
                        pData[8] = v3fVec.z;
                    } else {
                        var pElements = arguments[0];
                        if (pElements.length == 3) {
                            //ложим диагональ
                            pData[0] = pElements[0];
                            pData[3] = 0;
                            pData[6] = 0;
                            pData[1] = 0;
                            pData[4] = pElements[1];
                            pData[7] = 0;
                            pData[2] = 0;
                            pData[5] = 0;
                            pData[8] = pElements[2];
                        } else {
                            pData[0] = pElements[0];
                            pData[3] = pElements[3];
                            pData[6] = pElements[6];
                            pData[1] = pElements[1];
                            pData[4] = pElements[4];
                            pData[7] = pElements[7];
                            pData[2] = pElements[2];
                            pData[5] = pElements[5];
                            pData[8] = pElements[8];
                        }
                    }
                } else if (nArgumentsLength == 3) {
                    if ((typeof (arguments[0]) === "number")) {
                        //выставляем диагональ
                        pData[0] = arguments[0];
                        pData[3] = 0;
                        pData[6] = 0;
                        pData[1] = 0;
                        pData[4] = arguments[1];
                        pData[7] = 0;
                        pData[2] = 0;
                        pData[5] = 0;
                        pData[8] = arguments[2];
                    } else {
                        var pData1, pData2, pData3;
                        if (arguments[0] instanceof math.Vec3) {
                            var v3fVec1 = arguments[0];
                            var v3fVec2 = arguments[1];
                            var v3fVec3 = arguments[2];
                            //ложим по столбцам
                            pData[0] = v3fVec1.x;
                            pData[3] = v3fVec2.x;
                            pData[6] = v3fVec3.x;
                            pData[1] = v3fVec1.y;
                            pData[4] = v3fVec2.y;
                            pData[7] = v3fVec3.y;
                            pData[2] = v3fVec1.z;
                            pData[5] = v3fVec2.z;
                            pData[8] = v3fVec3.z;
                        } else {
                            var v3fVec1 = arguments[0];
                            var v3fVec2 = arguments[1];
                            var v3fVec3 = arguments[2];
                            //ложим по столбцам
                            pData[0] = v3fVec1[0];
                            pData[3] = v3fVec2[0];
                            pData[6] = v3fVec3[0];
                            pData[1] = v3fVec1[1];
                            pData[4] = v3fVec2[1];
                            pData[7] = v3fVec3[1];
                            pData[2] = v3fVec1[2];
                            pData[5] = v3fVec2[2];
                            pData[8] = v3fVec3[2];
                        }
                    }
                } else if (nArgumentsLength == 9) {
                    //просто числа
                    pData[0] = arguments[0];
                    pData[3] = arguments[3];
                    pData[6] = arguments[6];
                    pData[1] = arguments[1];
                    pData[4] = arguments[4];
                    pData[7] = arguments[7];
                    pData[2] = arguments[2];
                    pData[5] = arguments[5];
                    pData[8] = arguments[8];
                }
                return this;
            };
            Mat3.prototype.identity = function () {
                var pData = this.data;
                pData[0] = 1.;
                pData[3] = 0.;
                pData[6] = 0.;
                pData[1] = 0.;
                pData[4] = 1.;
                pData[7] = 0.;
                pData[2] = 0.;
                pData[5] = 0.;
                pData[8] = 1.;
                return this;
            };
            Mat3.prototype.add = function (m3fMat, m3fDestination) {
                if (!((m3fDestination) !== undefined)) {
                    m3fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData1[0] + pData2[0];
                pDataDestination[3] = pData1[3] + pData2[3];
                pDataDestination[6] = pData1[6] + pData2[6];
                pDataDestination[1] = pData1[1] + pData2[1];
                pDataDestination[4] = pData1[4] + pData2[4];
                pDataDestination[7] = pData1[7] + pData2[7];
                pDataDestination[2] = pData1[2] + pData2[2];
                pDataDestination[5] = pData1[5] + pData2[5];
                pDataDestination[8] = pData1[8] + pData2[8];
                return m3fDestination;
            };
            Mat3.prototype.subtract = function (m3fMat, m3fDestination) {
                if (!((m3fDestination) !== undefined)) {
                    m3fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData1[0] - pData2[0];
                pDataDestination[3] = pData1[3] - pData2[3];
                pDataDestination[6] = pData1[6] - pData2[6];
                pDataDestination[1] = pData1[1] - pData2[1];
                pDataDestination[4] = pData1[4] - pData2[4];
                pDataDestination[7] = pData1[7] - pData2[7];
                pDataDestination[2] = pData1[2] - pData2[2];
                pDataDestination[5] = pData1[5] - pData2[5];
                pDataDestination[8] = pData1[8] - pData2[8];
                return m3fDestination;
            };
            Mat3.prototype.multiply = function (m3fMat, m3fDestination) {
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                if (!((m3fDestination) !== undefined)) {
                    m3fDestination = this;
                }
                var pDataDestination = m3fDestination.data;
                // Cache the matrix values (makes for huge speed increases!)
                                var a11 = pData1[0], a12 = pData1[3], a13 = pData1[6];
                var a21 = pData1[1], a22 = pData1[4], a23 = pData1[7];
                var a31 = pData1[2], a32 = pData1[5], a33 = pData1[8];
                var b11 = pData2[0], b12 = pData2[3], b13 = pData2[6];
                var b21 = pData2[1], b22 = pData2[4], b23 = pData2[7];
                var b31 = pData2[2], b32 = pData2[5], b33 = pData2[8];
                pDataDestination[0] = a11 * b11 + a12 * b21 + a13 * b31;
                pDataDestination[3] = a11 * b12 + a12 * b22 + a13 * b32;
                pDataDestination[6] = a11 * b13 + a12 * b23 + a13 * b33;
                pDataDestination[1] = a21 * b11 + a22 * b21 + a23 * b31;
                pDataDestination[4] = a21 * b12 + a22 * b22 + a23 * b32;
                pDataDestination[7] = a21 * b13 + a22 * b23 + a23 * b33;
                pDataDestination[2] = a31 * b11 + a32 * b21 + a33 * b31;
                pDataDestination[5] = a31 * b12 + a32 * b22 + a33 * b32;
                pDataDestination[8] = a31 * b13 + a32 * b23 + a33 * b33;
                return m3fDestination;
            };
            Mat3.prototype.multiplyVec3 = function (v3fVec, v3fDestination) {
                var pData = this.data;
                if (!((v3fDestination) !== undefined)) {
                    v3fDestination = v3fVec;
                }
                var x = v3fVec.x, y = v3fVec.y, z = v3fVec.z;
                v3fDestination.x = pData[0] * x + pData[3] * y + pData[6] * z;
                v3fDestination.y = pData[1] * x + pData[4] * y + pData[7] * z;
                v3fDestination.z = pData[2] * x + pData[5] * y + pData[8] * z;
                return v3fDestination;
            };
            Mat3.prototype.transpose = function (m3fDestination) {
                var pData = this.data;
                if (!((m3fDestination) !== undefined)) {
                    //быстрее будет явно обработать оба случая
                                        var a12 = pData[3], a13 = pData[6], a23 = pData[7];
                    pData[3] = pData[1];
                    pData[6] = pData[2];
                    pData[1] = a12;
                    pData[7] = pData[5];
                    pData[2] = a13;
                    pData[5] = a23;
                    return this;
                }
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[3] = pData[1];
                pDataDestination[6] = pData[2];
                pDataDestination[1] = pData[3];
                pDataDestination[4] = pData[4];
                pDataDestination[7] = pData[5];
                pDataDestination[2] = pData[6];
                pDataDestination[5] = pData[7];
                pDataDestination[8] = pData[8];
                return m3fDestination;
            };
            Mat3.prototype.determinant = function () {
                var pData = this.data;
                var a11 = pData[0], a12 = pData[3], a13 = pData[6];
                var a21 = pData[1], a22 = pData[4], a23 = pData[7];
                var a31 = pData[2], a32 = pData[5], a33 = pData[8];
                return a11 * (a22 * a33 - a23 * a32) - a12 * (a21 * a33 - a23 * a31) + a13 * (a21 * a32 - a22 * a31);
            };
            Mat3.prototype.inverse = function (m3fDestination) {
                if (!((m3fDestination) !== undefined)) {
                    m3fDestination = this;
                }
                var pData = this.data;
                var pDataDestination = m3fDestination.data;
                var a11 = pData[0], a12 = pData[3], a13 = pData[6];
                var a21 = pData[1], a22 = pData[4], a23 = pData[7];
                var a31 = pData[2], a32 = pData[5], a33 = pData[8];
                var A11 = a22 * a33 - a23 * a32;
                var A12 = a21 * a33 - a23 * a31;
                var A13 = a21 * a32 - a22 * a31;
                var A21 = a12 * a33 - a13 * a32;
                var A22 = a11 * a33 - a13 * a31;
                var A23 = a11 * a32 - a12 * a31;
                var A31 = a12 * a23 - a13 * a22;
                var A32 = a11 * a23 - a13 * a21;
                var A33 = a11 * a22 - a12 * a21;
                var fDeterminant = a11 * A11 - a12 * A12 + a13 * A13;
                if (fDeterminant == 0.) {
 {
                        akra.logger.setSourceLocation("Mat3.ts", 445);
                        akra.logger.error("обращение матрицы с нулевым детеминантом:\n", this.toString());
                    }
                    ;
                    return m3fDestination.set(1.);
                    //чтоб все не навернулось
                                    }
                var fInverseDeterminant = 1. / fDeterminant;
                pDataDestination[0] = A11 * fInverseDeterminant;
                pDataDestination[3] = -A21 * fInverseDeterminant;
                pDataDestination[6] = A31 * fInverseDeterminant;
                pDataDestination[1] = -A12 * fInverseDeterminant;
                pDataDestination[4] = A22 * fInverseDeterminant;
                pDataDestination[7] = -A32 * fInverseDeterminant;
                pDataDestination[2] = A13 * fInverseDeterminant;
                pDataDestination[5] = -A23 * fInverseDeterminant;
                pDataDestination[8] = A33 * fInverseDeterminant;
                return m3fDestination;
            };
            Mat3.prototype.isEqual = function (m3fMat, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                if (fEps == 0) {
                    if (pData1[0] != pData2[0] || pData1[3] != pData2[3] || pData1[6] != pData2[6] || pData1[1] != pData2[1] || pData1[4] != pData2[4] || pData1[7] != pData2[7] || pData1[2] != pData2[2] || pData1[5] != pData2[5] || pData1[8] != pData2[8]) {
                        return false;
                    }
                } else {
                    if (Math.abs(pData1[0] - pData2[0]) > fEps || Math.abs(pData1[3] - pData2[3]) > fEps || Math.abs(pData1[6] - pData2[6]) > fEps || Math.abs(pData1[1] - pData2[1]) > fEps || Math.abs(pData1[4] - pData2[4]) > fEps || Math.abs(pData1[7] - pData2[7]) > fEps || Math.abs(pData1[2] - pData2[2]) > fEps || Math.abs(pData1[5] - pData2[5]) > fEps || Math.abs(pData1[8] - pData2[8]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat3.prototype.isDiagonal = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                var pData = this.data;
                if (fEps == 0) {
                    if (pData[3] != 0 || pData[6] != 0 || pData[1] != 0 || pData[7] != 0 || pData[2] != 0 || pData[5] != 0) {
                        return false;
                    }
                } else {
                    if (Math.abs(pData[3]) > fEps || Math.abs(pData[6]) > fEps || Math.abs(pData[1]) > fEps || Math.abs(pData[7]) > fEps || Math.abs(pData[2]) > fEps || Math.abs(pData[5]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat3.prototype.toMat4 = function (m4fDestination) {
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = new math.Mat4();
                }
                var pData = this.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[3];
                pDataDestination[8] = pData[6];
                pDataDestination[12] = 0;
                pDataDestination[1] = pData[1];
                pDataDestination[5] = pData[4];
                pDataDestination[9] = pData[7];
                pDataDestination[13] = 0;
                pDataDestination[2] = pData[2];
                pDataDestination[6] = pData[5];
                pDataDestination[10] = pData[8];
                pDataDestination[14] = 0;
                pDataDestination[3] = 0;
                pDataDestination[7] = 0;
                pDataDestination[11] = 0;
                pDataDestination[15] = 1;
                return m4fDestination;
            };
            Mat3.prototype.toQuat4 = function (q4fDestination) {
                if (!((q4fDestination) !== undefined)) {
                    q4fDestination = new math.Quat4();
                }
                var pData = this.data;
                var a11 = pData[0], a12 = pData[3], a13 = pData[6];
                var a21 = pData[1], a22 = pData[4], a23 = pData[7];
                var a31 = pData[2], a32 = pData[5], a33 = pData[8];
                /*x^2*/
                var x2 = ((a11 - a22 - a33) + 1) / 4;
                /*y^2*/
                var y2 = ((a22 - a11 - a33) + 1) / 4;
                /*z^2*/
                var z2 = ((a33 - a11 - a22) + 1) / 4;
                /*w^2*/
                var w2 = ((a11 + a22 + a33) + 1) / 4;
                var fMax = Math.max(x2, Math.max(y2, Math.max(z2, w2)));
                if (fMax == x2) {
                    //максимальная компонента берется положительной
                    var x = Math.sqrt(x2);
                    q4fDestination.x = x;
                    q4fDestination.y = (a21 + a12) / 4 / x;
                    q4fDestination.z = (a31 + a13) / 4 / x;
                    q4fDestination.w = (a32 - a23) / 4 / x;
                } else if (fMax == y2) {
                    //максимальная компонента берется положительной
                    var y = Math.sqrt(y2);
                    q4fDestination.x = (a21 + a12) / 4 / y;
                    q4fDestination.y = y;
                    q4fDestination.z = (a32 + a23) / 4 / y;
                    q4fDestination.w = (a13 - a31) / 4 / y;
                } else if (fMax == z2) {
                    //максимальная компонента берется положительной
                    var z = Math.sqrt(z2);
                    q4fDestination.x = (a31 + a13) / 4 / z;
                    q4fDestination.y = (a32 + a23) / 4 / z;
                    q4fDestination.z = z;
                    q4fDestination.w = (a21 - a12) / 4 / z;
                } else {
                    //максимальная компонента берется положительной
                    var w = Math.sqrt(w2);
                    q4fDestination.x = (a32 - a23) / 4 / w;
                    q4fDestination.y = (a13 - a31) / 4 / w;
                    q4fDestination.z = (a21 - a12) / 4 / w;
                    q4fDestination.w = w;
                }
                return q4fDestination;
            };
            Mat3.prototype.toString = function () {
                var pData = this.data;
                return '[' + pData[0] + ', ' + pData[3] + ', ' + pData[6] + ',\n' + +pData[1] + ', ' + pData[4] + ', ' + pData[7] + ',\n' + +pData[2] + ', ' + pData[5] + ', ' + pData[8] + ']';
            };
            Mat3.prototype.decompose = function (q4fRotation, v3fScale) {
                //изначально предполагаем, что порядок умножения был rot * scale
                var m3fRotScale = this;
                var m3fRotScaleTransposed = this.transpose(Mat3.stackCeil.set());
                var isRotScale = true;
                //понадобятся если порядок умножения был другим
                                var m3fScaleRot = null, m3fScaleRotTransposed = null;
                //было отражение или нет
                var scaleSign = (m3fRotScale.determinant() >= 0.) ? 1 : -1;
                var m3fResult = Mat3.stackCeil.set();
                //first variant rot * scale
                // (rot * scale)T * (rot * scale) =
                // scaleT * rotT * rot * scale = scaleT *rot^-1 * rot * scale =
                // scaleT * scale
                m3fRotScaleTransposed.multiply(m3fRotScale, m3fResult);
                if (!m3fResult.isDiagonal(1e-4)) {
                    //предположение было неверным
                    isRotScale = false;
                    //просто переобозначения чтобы не было путаницы
                    m3fScaleRot = m3fRotScale;
                    m3fScaleRotTransposed = m3fRotScaleTransposed;
                    //second variant scale * rot
                    // (scale * rot) * (scale * rot)T =
                    // scale * rot * rotT * scaleT = scale *rot * rot^-1 * scaleT =
                    // scale * scaleT
                    m3fScaleRot.multiply(m3fScaleRotTransposed, m3fResult);
                }
                var pResultData = m3fResult.data;
                var x = math.sqrt(pResultData[0]);
                /*если было отражение, считается что оно было по y*/
                var y = math.sqrt(pResultData[4]) * scaleSign;
                var z = math.sqrt(pResultData[8]);
                v3fScale.x = x;
                v3fScale.y = y;
                v3fScale.z = z;
                var m3fInverseScale = Mat3.stackCeil.set(1. / x, 1. / y, 1. / z);
                if (isRotScale) {
                    m3fRotScale.multiply(m3fInverseScale, Mat3.stackCeil.set()).toQuat4(q4fRotation);
                    return true;
                } else {
                    m3fInverseScale.multiply(m3fScaleRot, Mat3.stackCeil.set()).toQuat4(q4fRotation);
 {
                        akra.logger.setSourceLocation("Mat3.ts", 674);
                        akra.logger.assert(false, "порядок умножения scale rot в данный момент не поддерживается");
                    }
                    ;
                    return false;
                }
            };
            Mat3.prototype.row = function (iRow, v3fDestination) {
                if (!((v3fDestination) !== undefined)) {
                    v3fDestination = new math.Vec3();
                }
                var pData = this.data;
                switch(iRow) {
                    case 1:
                        v3fDestination.x = pData[0];
                        v3fDestination.y = pData[3];
                        v3fDestination.z = pData[6];
                        break;
                    case 2:
                        v3fDestination.x = pData[1];
                        v3fDestination.y = pData[4];
                        v3fDestination.z = pData[7];
                        break;
                    case 3:
                        v3fDestination.x = pData[2];
                        v3fDestination.y = pData[5];
                        v3fDestination.z = pData[8];
                        break;
                }
                return v3fDestination;
            };
            Mat3.prototype.column = function (iColumn, v3fDestination) {
                if (!((v3fDestination) !== undefined)) {
                    v3fDestination = new math.Vec3();
                }
                var pData = this.data;
                switch(iColumn) {
                    case 1:
                        v3fDestination.x = pData[0];
                        v3fDestination.y = pData[1];
                        v3fDestination.z = pData[2];
                        break;
                    case 2:
                        v3fDestination.x = pData[3];
                        v3fDestination.y = pData[4];
                        v3fDestination.z = pData[5];
                        break;
                    case 3:
                        v3fDestination.x = pData[6];
                        v3fDestination.y = pData[7];
                        v3fDestination.z = pData[8];
                        break;
                }
                return v3fDestination;
            };
            Mat3.fromYawPitchRoll = function fromYawPitchRoll(fYaw, fPitch, fRoll, m3fDestination) {
                if (arguments.length <= 2) {
                    //Vec3 + m3fDestination
                    var v3fVec = arguments[0];
                    fYaw = v3fVec.x;
                    fPitch = v3fVec.y;
                    fRoll = v3fVec.z;
                    m3fDestination = arguments[1];
                }
                if (!((m3fDestination) !== undefined)) {
                    m3fDestination = new Mat3();
                }
                var pDataDestination = m3fDestination.data;
                var fSin1 = Math.sin(fYaw);
                var fSin2 = Math.sin(fPitch);
                var fSin3 = Math.sin(fRoll);
                var fCos1 = Math.cos(fYaw);
                var fCos2 = Math.cos(fPitch);
                var fCos3 = Math.cos(fRoll);
                pDataDestination[0] = fCos1 * fCos3 + fSin1 * fSin2 * fSin3;
                pDataDestination[3] = fCos3 * fSin1 * fSin2 - fCos1 * fSin3;
                pDataDestination[6] = fCos2 * fSin1;
                pDataDestination[1] = fCos2 * fSin3;
                pDataDestination[4] = fCos2 * fCos3;
                pDataDestination[7] = -fSin2;
                pDataDestination[2] = fCos1 * fSin2 * fSin3 - fCos3 * fSin1;
                pDataDestination[5] = fSin1 * fSin3 + fCos1 * fCos3 * fSin2;
                pDataDestination[8] = fCos1 * fCos2;
                return m3fDestination;
            };
            Mat3.fromXYZ = function fromXYZ(fX, fY, fZ, m3fDestination) {
                if (arguments.length <= 2) {
                    //Vec3 + m3fDestination
                    var v3fVec = arguments[0];
                    return Mat3.fromYawPitchRoll(v3fVec.y, v3fVec.x, v3fVec.z, arguments[1]);
                } else {
                    //fX fY fZ m3fDestination
                    var fX = arguments[0];
                    var fY = arguments[1];
                    var fZ = arguments[2];
                    return Mat3.fromYawPitchRoll(fY, fX, fZ, arguments[3]);
                }
            };
            Object.defineProperty(Mat3, "stackCeil", {
                get: function () {
                    Mat3.stackPosition = Mat3.stackPosition === Mat3.stackSize - 1 ? 0 : Mat3.stackPosition;
                    return Mat3.stack[Mat3.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Mat3.stackSize = 100;
            Mat3.stackPosition = 0;
            Mat3.stack = (function () {
                var pStack = new Array(Mat3.stackSize);
                for(var i = 0; i < Mat3.stackSize; i++) {
                    pStack[i] = new Mat3();
                }
                return pStack;
            })();
            return Mat3;
        })();
        math.Mat3 = Mat3;        
        ;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
;
;
var akra;
(function (akra) {
    (function (math) {
        var Mat4 = (function () {
            function Mat4(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9, fValue10, fValue11, fValue12, fValue13, fValue14, fValue15, fValue16) {
                var nArgumentsLength = arguments.length;
                if (nArgumentsLength === 2) {
                    if ((typeof (arguments[1]) === "boolean")) {
                        if (arguments[1]) {
                            this.data = arguments[0];
                        } else {
                            this.data = new Float32Array(16);
                            this.set(arguments[0]);
                        }
                    } else {
                        this.data = new Float32Array(16);
                        this.set(arguments[0], arguments[1]);
                    }
                } else {
                    this.data = new Float32Array(16);
                    switch(nArgumentsLength) {
                        case 1:
                            if (arguments[0] instanceof math.Mat3) {
                                this.set(arguments[0], math.Vec3.stackCeil.set(0.));
                            } else {
                                this.set(arguments[0]);
                            }
                            break;
                        case 4:
                            this.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                            break;
                        case 16:
                            this.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
                            break;
                        default:
                            break;
                    }
                }
            }
            Mat4.prototype.set = function () {
                var nArgumentsLength = arguments.length;
                var pData = this.data;
                if (nArgumentsLength === 0) {
                    pData[0] = pData[4] = pData[8] = pData[12] = pData[1] = pData[5] = pData[9] = pData[13] = pData[2] = pData[6] = pData[10] = pData[14] = pData[3] = pData[7] = pData[11] = pData[15] = 0.;
                    return this;
                }
                if (nArgumentsLength === 1) {
                    if ((typeof (arguments[0]) === "number")) {
                        var fValue = arguments[0];
                        pData[0] = fValue;
                        pData[4] = 0.;
                        pData[8] = 0.;
                        pData[12] = 0.;
                        pData[1] = 0.;
                        pData[5] = fValue;
                        pData[9] = 0.;
                        pData[13] = 0.;
                        pData[2] = 0.;
                        pData[6] = 0.;
                        pData[10] = fValue;
                        pData[14] = 0.;
                        pData[3] = 0.;
                        pData[7] = 0.;
                        pData[11] = 0.;
                        pData[15] = fValue;
                    } else if (arguments[0] instanceof math.Vec4) {
                        var v4fVec = arguments[0];
                        pData[0] = v4fVec.x;
                        pData[4] = 0.;
                        pData[8] = 0.;
                        pData[12] = 0.;
                        pData[1] = 0.;
                        pData[5] = v4fVec.y;
                        pData[9] = 0.;
                        pData[13] = 0.;
                        pData[2] = 0.;
                        pData[6] = 0.;
                        pData[10] = v4fVec.z;
                        pData[14] = 0.;
                        pData[3] = 0.;
                        pData[7] = 0.;
                        pData[11] = 0.;
                        pData[15] = v4fVec.w;
                    } else if (((arguments[0].data) !== undefined)) {
                        var pMatrixData = arguments[0].data;
                        if (pMatrixData.length == 16) {
                            //Mat4
                            pData.set(pMatrixData);
                        } else {
                            //Mat3
                            pData[0] = pMatrixData[0];
                            pData[4] = pMatrixData[3];
                            pData[8] = pMatrixData[6];
                            pData[1] = pMatrixData[1];
                            pData[5] = pMatrixData[4];
                            pData[9] = pMatrixData[7];
                            pData[2] = pMatrixData[2];
                            pData[6] = pMatrixData[5];
                            pData[10] = pMatrixData[8];
                            pData[3] = 0.;
                            pData[7] = 0.;
                            pData[11] = 0.;
                            pData[15] = 1.;
                        }
                    } else {
                        //array
                        var pArray = arguments[0];
                        if (pArray.length === 4) {
                            pData[0] = pArray[0];
                            pData[4] = 0.;
                            pData[8] = 0.;
                            pData[12] = 0.;
                            pData[1] = 0.;
                            pData[5] = pArray[1];
                            pData[9] = 0.;
                            pData[13] = 0.;
                            pData[2] = 0.;
                            pData[6] = 0.;
                            pData[10] = pArray[2];
                            pData[14] = 0.;
                            pData[3] = 0.;
                            pData[7] = 0.;
                            pData[11] = 0.;
                            pData[15] = pArray[3];
                        } else {
                            //length == 16
                            pData[0] = pArray[0];
                            pData[4] = pArray[4];
                            pData[8] = pArray[8];
                            pData[12] = pArray[12];
                            pData[1] = pArray[1];
                            pData[5] = pArray[5];
                            pData[9] = pArray[9];
                            pData[13] = pArray[13];
                            pData[2] = pArray[2];
                            pData[6] = pArray[6];
                            pData[10] = pArray[10];
                            pData[14] = pArray[14];
                            pData[3] = pArray[3];
                            pData[7] = pArray[7];
                            pData[11] = pArray[11];
                            pData[15] = pArray[15];
                        }
                    }
                } else if (nArgumentsLength == 2) {
                    var pMatrixData = arguments[0];
                    var v3fTranslation = arguments[1];
                    pData[0] = pMatrixData[0];
                    pData[4] = pMatrixData[3];
                    pData[8] = pMatrixData[6];
                    pData[12] = v3fTranslation.x;
                    pData[1] = pMatrixData[1];
                    pData[5] = pMatrixData[4];
                    pData[9] = pMatrixData[7];
                    pData[13] = v3fTranslation.y;
                    pData[2] = pMatrixData[2];
                    pData[6] = pMatrixData[5];
                    pData[10] = pMatrixData[8];
                    pData[14] = v3fTranslation.z;
                    pData[3] = 0.;
                    pData[7] = 0.;
                    pData[11] = 0.;
                    pData[15] = 1.;
                } else if (nArgumentsLength == 4) {
                    if ((typeof (arguments[0]) === "number")) {
                        pData[0] = arguments[0];
                        pData[4] = 0;
                        pData[8] = 0;
                        pData[12] = 0;
                        pData[1] = 0;
                        pData[5] = arguments[1];
                        pData[9] = 0;
                        pData[13] = 0;
                        pData[2] = 0;
                        pData[6] = 0;
                        pData[10] = arguments[2];
                        pData[14] = 0;
                        pData[3] = 0;
                        pData[7] = 0;
                        pData[11] = 0;
                        pData[15] = arguments[3];
                    } else if (arguments[0] instanceof math.Vec4) {
                        var v4fColumn1 = arguments[0];
                        var v4fColumn2 = arguments[1];
                        var v4fColumn3 = arguments[2];
                        var v4fColumn4 = arguments[3];
                        pData[0] = v4fColumn1.x;
                        pData[4] = v4fColumn2.x;
                        pData[8] = v4fColumn3.x;
                        pData[12] = v4fColumn4.x;
                        pData[1] = v4fColumn1.y;
                        pData[5] = v4fColumn2.y;
                        pData[9] = v4fColumn3.y;
                        pData[13] = v4fColumn4.y;
                        pData[2] = v4fColumn1.z;
                        pData[6] = v4fColumn2.z;
                        pData[10] = v4fColumn3.z;
                        pData[14] = v4fColumn4.z;
                        pData[3] = v4fColumn1.w;
                        pData[7] = v4fColumn2.w;
                        pData[11] = v4fColumn3.w;
                        pData[15] = v4fColumn4.w;
                    } else {
                        //arrays
                        var v4fColumn1 = arguments[0];
                        var v4fColumn2 = arguments[1];
                        var v4fColumn3 = arguments[2];
                        var v4fColumn4 = arguments[3];
                        pData[0] = v4fColumn1[0];
                        pData[4] = v4fColumn2[0];
                        pData[8] = v4fColumn3[0];
                        pData[12] = v4fColumn4[0];
                        pData[1] = v4fColumn1[1];
                        pData[5] = v4fColumn2[1];
                        pData[9] = v4fColumn3[1];
                        pData[13] = v4fColumn4[1];
                        pData[2] = v4fColumn1[2];
                        pData[6] = v4fColumn2[2];
                        pData[10] = v4fColumn3[2];
                        pData[14] = v4fColumn4[2];
                        pData[3] = v4fColumn1[3];
                        pData[7] = v4fColumn2[3];
                        pData[11] = v4fColumn3[3];
                        pData[15] = v4fColumn4[3];
                    }
                } else {
                    //nArgumentsLength === 16
                    pData[0] = arguments[0];
                    pData[4] = arguments[4];
                    pData[8] = arguments[8];
                    pData[12] = arguments[12];
                    pData[1] = arguments[1];
                    pData[5] = arguments[5];
                    pData[9] = arguments[9];
                    pData[13] = arguments[13];
                    pData[2] = arguments[2];
                    pData[6] = arguments[6];
                    pData[10] = arguments[10];
                    pData[14] = arguments[14];
                    pData[3] = arguments[3];
                    pData[7] = arguments[7];
                    pData[11] = arguments[11];
                    pData[15] = arguments[15];
                }
                return this;
            };
            Mat4.prototype.identity = function () {
                var pData = this.data;
                pData[0] = 1.;
                pData[4] = 0.;
                pData[8] = 0.;
                pData[12] = 0.;
                pData[1] = 0.;
                pData[5] = 1.;
                pData[9] = 0.;
                pData[13] = 0.;
                pData[2] = 0.;
                pData[6] = 0.;
                pData[10] = 1.;
                pData[14] = 0.;
                pData[3] = 0.;
                pData[7] = 0.;
                pData[11] = 0.;
                pData[15] = 1.;
                return this;
            };
            Mat4.prototype.add = function (m4fMat, m4fDestination) {
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData1[0] + pData2[0];
                pDataDestination[4] = pData1[4] + pData2[4];
                pDataDestination[8] = pData1[8] + pData2[8];
                pDataDestination[12] = pData1[12] + pData2[12];
                pDataDestination[1] = pData1[1] + pData2[1];
                pDataDestination[5] = pData1[5] + pData2[5];
                pDataDestination[9] = pData1[9] + pData2[9];
                pDataDestination[13] = pData1[13] + pData2[13];
                pDataDestination[2] = pData1[2] + pData2[2];
                pDataDestination[6] = pData1[6] + pData2[6];
                pDataDestination[10] = pData1[10] + pData2[10];
                pDataDestination[14] = pData1[14] + pData2[14];
                pDataDestination[3] = pData1[3] + pData2[3];
                pDataDestination[7] = pData1[7] + pData2[7];
                pDataDestination[11] = pData1[11] + pData2[11];
                pDataDestination[15] = pData1[15] + pData2[15];
                return m4fDestination;
            };
            Mat4.prototype.subtract = function (m4fMat, m4fDestination) {
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData1[0] - pData2[0];
                pDataDestination[4] = pData1[4] - pData2[4];
                pDataDestination[8] = pData1[8] - pData2[8];
                pDataDestination[12] = pData1[12] - pData2[12];
                pDataDestination[1] = pData1[1] - pData2[1];
                pDataDestination[5] = pData1[5] - pData2[5];
                pDataDestination[9] = pData1[9] - pData2[9];
                pDataDestination[13] = pData1[13] - pData2[13];
                pDataDestination[2] = pData1[2] - pData2[2];
                pDataDestination[6] = pData1[6] - pData2[6];
                pDataDestination[10] = pData1[10] - pData2[10];
                pDataDestination[14] = pData1[14] - pData2[14];
                pDataDestination[3] = pData1[3] - pData2[3];
                pDataDestination[7] = pData1[7] - pData2[7];
                pDataDestination[11] = pData1[11] - pData2[11];
                pDataDestination[15] = pData1[15] - pData2[15];
                return m4fDestination;
            };
            Mat4.prototype.multiply = function (m4fMat, m4fDestination) {
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                var pDataDestination = m4fDestination.data;
                //кешируем значения матриц для ускорения
                                var a11 = pData1[0], a12 = pData1[4], a13 = pData1[8], a14 = pData1[12];
                var a21 = pData1[1], a22 = pData1[5], a23 = pData1[9], a24 = pData1[13];
                var a31 = pData1[2], a32 = pData1[6], a33 = pData1[10], a34 = pData1[14];
                var a41 = pData1[3], a42 = pData1[7], a43 = pData1[11], a44 = pData1[15];
                var b11 = pData2[0], b12 = pData2[4], b13 = pData2[8], b14 = pData2[12];
                var b21 = pData2[1], b22 = pData2[5], b23 = pData2[9], b24 = pData2[13];
                var b31 = pData2[2], b32 = pData2[6], b33 = pData2[10], b34 = pData2[14];
                var b41 = pData2[3], b42 = pData2[7], b43 = pData2[11], b44 = pData2[15];
                pDataDestination[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
                pDataDestination[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
                pDataDestination[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
                pDataDestination[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
                pDataDestination[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
                pDataDestination[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
                pDataDestination[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
                pDataDestination[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
                pDataDestination[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
                pDataDestination[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
                pDataDestination[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
                pDataDestination[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
                pDataDestination[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
                pDataDestination[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
                pDataDestination[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
                pDataDestination[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
                return m4fDestination;
            };
            Mat4.prototype.multiplyLeft = /** @inline */function (m4fMat, m4fDestination) {
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = this;
                }
                return m4fMat.multiply(this, m4fDestination);
            };
            Mat4.prototype.multiplyVec4 = function (v4fVec, v4fDestination) {
                if (!((v4fDestination) !== undefined)) {
                    v4fDestination = v4fVec;
                }
                var pData = this.data;
                var x = v4fVec.x, y = v4fVec.y, z = v4fVec.z, w = v4fVec.w;
                v4fDestination.x = pData[0] * x + pData[4] * y + pData[8] * z + pData[12] * w;
                v4fDestination.y = pData[1] * x + pData[5] * y + pData[9] * z + pData[13] * w;
                v4fDestination.z = pData[2] * x + pData[6] * y + pData[10] * z + pData[14] * w;
                v4fDestination.w = pData[3] * x + pData[7] * y + pData[11] * z + pData[15] * w;
                return v4fDestination;
            };
            Mat4.prototype.transpose = function (m4fDestination) {
                var pData = this.data;
                if (!((m4fDestination) !== undefined)) {
                    var a12 = pData[4], a13 = pData[8], a14 = pData[12];
                    var a23 = pData[9], a24 = pData[13];
                    var a34 = pData[14];
                    pData[4] = pData[1];
                    pData[8] = pData[2];
                    pData[12] = pData[3];
                    pData[1] = a12;
                    pData[9] = pData[6];
                    pData[13] = pData[7];
                    pData[2] = a13;
                    pData[6] = a23;
                    pData[14] = pData[11];
                    pData[3] = a14;
                    pData[7] = a24;
                    pData[11] = a34;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[1];
                pDataDestination[8] = pData[2];
                pDataDestination[12] = pData[3];
                pDataDestination[1] = pData[4];
                pDataDestination[5] = pData[5];
                pDataDestination[9] = pData[6];
                pDataDestination[13] = pData[7];
                pDataDestination[2] = pData[8];
                pDataDestination[6] = pData[9];
                pDataDestination[10] = pData[10];
                pDataDestination[14] = pData[11];
                pDataDestination[3] = pData[12];
                pDataDestination[7] = pData[13];
                pDataDestination[11] = pData[14];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.determinant = function () {
                var pData = this.data;
                var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
                var a41 = pData[3], a42 = pData[7], a43 = pData[11], a44 = pData[15];
                return a41 * a32 * a23 * a14 - a31 * a42 * a23 * a14 - a41 * a22 * a33 * a14 + a21 * a42 * a33 * a14 + a31 * a22 * a43 * a14 - a21 * a32 * a43 * a14 - a41 * a32 * a13 * a24 + a31 * a42 * a13 * a24 + a41 * a12 * a33 * a24 - a11 * a42 * a33 * a24 - a31 * a12 * a43 * a24 + a11 * a32 * a43 * a24 + a41 * a22 * a13 * a34 - a21 * a42 * a13 * a34 - a41 * a12 * a23 * a34 + a11 * a42 * a23 * a34 + a21 * a12 * a43 * a34 - a11 * a22 * a43 * a34 - a31 * a22 * a13 * a44 + a21 * a32 * a13 * a44 + a31 * a12 * a23 * a44 - a11 * a32 * a23 * a44 - a21 * a12 * a33 * a44 + a11 * a22 * a33 * a44;
            };
            Mat4.prototype.inverse = function (m4fDestination) {
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = this;
                }
                var pData = this.data;
                var pDataDestination = m4fDestination.data;
                // Cache the matrix values (makes for huge speed increases!)
                                var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
                var a41 = pData[3], a42 = pData[7], a43 = pData[11], a44 = pData[15];
                var b00 = a11 * a22 - a12 * a21;
                var b01 = a11 * a23 - a13 * a21;
                var b02 = a11 * a24 - a14 * a21;
                var b03 = a12 * a23 - a13 * a22;
                var b04 = a12 * a24 - a14 * a22;
                var b05 = a13 * a24 - a14 * a23;
                var b06 = a31 * a42 - a32 * a41;
                var b07 = a31 * a43 - a33 * a41;
                var b08 = a31 * a44 - a34 * a41;
                var b09 = a32 * a43 - a33 * a42;
                var b10 = a32 * a44 - a34 * a42;
                var b11 = a33 * a44 - a34 * a43;
                var fDeterminant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                if (fDeterminant === 0.) {
 {
                        akra.logger.setSourceLocation("Mat4.ts", 621);
                        akra.logger.assert(false, "обращение матрицы с нулевым детеминантом:\n" + this.toString());
                    }
                    ;
                    //чтоб все не навернулось
                    return m4fDestination.set(1.);
                }
                var fInverseDeterminant = 1 / fDeterminant;
                pDataDestination[0] = (a22 * b11 - a23 * b10 + a24 * b09) * fInverseDeterminant;
                pDataDestination[4] = (-a12 * b11 + a13 * b10 - a14 * b09) * fInverseDeterminant;
                pDataDestination[8] = (a42 * b05 - a43 * b04 + a44 * b03) * fInverseDeterminant;
                pDataDestination[12] = (-a32 * b05 + a33 * b04 - a34 * b03) * fInverseDeterminant;
                pDataDestination[1] = (-a21 * b11 + a23 * b08 - a24 * b07) * fInverseDeterminant;
                pDataDestination[5] = (a11 * b11 - a13 * b08 + a14 * b07) * fInverseDeterminant;
                pDataDestination[9] = (-a41 * b05 + a43 * b02 - a44 * b01) * fInverseDeterminant;
                pDataDestination[13] = (a31 * b05 - a33 * b02 + a34 * b01) * fInverseDeterminant;
                pDataDestination[2] = (a21 * b10 - a22 * b08 + a24 * b06) * fInverseDeterminant;
                pDataDestination[6] = (-a11 * b10 + a12 * b08 - a14 * b06) * fInverseDeterminant;
                pDataDestination[10] = (a41 * b04 - a42 * b02 + a44 * b00) * fInverseDeterminant;
                pDataDestination[14] = (-a31 * b04 + a32 * b02 - a34 * b00) * fInverseDeterminant;
                pDataDestination[3] = (-a21 * b09 + a22 * b07 - a23 * b06) * fInverseDeterminant;
                pDataDestination[7] = (a11 * b09 - a12 * b07 + a13 * b06) * fInverseDeterminant;
                pDataDestination[11] = (-a41 * b03 + a42 * b01 - a43 * b00) * fInverseDeterminant;
                pDataDestination[15] = (a31 * b03 - a32 * b01 + a33 * b00) * fInverseDeterminant;
                return m4fDestination;
            };
            Mat4.prototype.trace = /** @inline */function () {
                var pData = this.data;
                return pData[0] + pData[5] + pData[10] + pData[15];
            };
            Mat4.prototype.isEqual = function (m4fMat, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                if (fEps === 0.) {
                    if (pData1[0] != pData2[0] || pData1[4] != pData2[4] || pData1[8] != pData2[8] || pData1[12] != pData2[12] || pData1[1] != pData2[1] || pData1[5] != pData2[5] || pData1[9] != pData2[9] || pData1[13] != pData2[13] || pData1[2] != pData2[2] || pData1[6] != pData2[6] || pData1[10] != pData2[10] || pData1[14] != pData2[14] || pData1[3] != pData2[3] || pData1[7] != pData2[7] || pData1[11] != pData2[11] || pData1[15] != pData2[15]) {
                        return false;
                    }
                } else {
                    if (math.abs(pData1[0] - pData2[0]) > fEps || math.abs(pData1[4] - pData2[4]) > fEps || math.abs(pData1[8] - pData2[8]) > fEps || math.abs(pData1[12] - pData2[12]) > fEps || math.abs(pData1[1] - pData2[1]) > fEps || math.abs(pData1[5] - pData2[5]) > fEps || math.abs(pData1[9] - pData2[9]) > fEps || math.abs(pData1[13] - pData2[13]) > fEps || math.abs(pData1[2] - pData2[2]) > fEps || math.abs(pData1[6] - pData2[6]) > fEps || math.abs(pData1[10] - pData2[10]) > fEps || math.abs(pData1[14] - pData2[14]) > fEps || math.abs(pData1[3] - pData2[3]) > fEps || math.abs(pData1[7] - pData2[7]) > fEps || math.abs(pData1[11] - pData2[11]) > fEps || math.abs(pData1[15] - pData2[15]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat4.prototype.isDiagonal = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                var pData = this.data;
                if (fEps === 0.) {
                    if (pData[4] !== 0. || pData[8] !== 0. || pData[12] != 0. || pData[1] !== 0. || pData[9] !== 0. || pData[13] != 0. || pData[2] !== 0. || pData[6] !== 0. || pData[14] != 0. || pData[3] !== 0. || pData[7] !== 0. || pData[11] != 0.) {
                        return false;
                    }
                } else {
                    if (math.abs(pData[4]) > fEps || math.abs(pData[8]) > fEps || math.abs(pData[12]) > fEps || math.abs(pData[1]) > fEps || math.abs(pData[9]) > fEps || math.abs(pData[13]) > fEps || math.abs(pData[2]) > fEps || math.abs(pData[6]) > fEps || math.abs(pData[14]) > fEps || math.abs(pData[3]) > fEps || math.abs(pData[7]) > fEps || math.abs(pData[11]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat4.prototype.toMat3 = function (m3fDestination) {
                if (!((m3fDestination) !== undefined)) {
                    m3fDestination = new math.Mat3();
                }
                var pData = this.data;
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[3] = pData[4];
                pDataDestination[6] = pData[8];
                pDataDestination[1] = pData[1];
                pDataDestination[4] = pData[5];
                pDataDestination[7] = pData[9];
                pDataDestination[2] = pData[2];
                pDataDestination[5] = pData[6];
                pDataDestination[8] = pData[10];
                return m3fDestination;
            };
            Mat4.prototype.toQuat4 = function (q4fDestination) {
                if (!((q4fDestination) !== undefined)) {
                    q4fDestination = new math.Quat4();
                }
                var pData = this.data;
                var a11 = pData[0], a12 = pData[4], a13 = pData[8];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10];
                /*x^2*/
                var x2 = ((a11 - a22 - a33) + 1.) / 4.;
                /*y^2*/
                var y2 = ((a22 - a11 - a33) + 1.) / 4.;
                /*z^2*/
                var z2 = ((a33 - a11 - a22) + 1.) / 4.;
                /*w^2*/
                var w2 = ((a11 + a22 + a33) + 1.) / 4.;
                var fMax = math.max(x2, math.max(y2, math.max(z2, w2)));
                if (fMax == x2) {
                    //максимальная компонента берется положительной
                    var x = math.sqrt(x2);
                    q4fDestination.x = x;
                    q4fDestination.y = (a21 + a12) / 4. / x;
                    q4fDestination.z = (a31 + a13) / 4. / x;
                    q4fDestination.w = (a32 - a23) / 4. / x;
                } else if (fMax == y2) {
                    //максимальная компонента берется положительной
                    var y = math.sqrt(y2);
                    q4fDestination.x = (a21 + a12) / 4. / y;
                    q4fDestination.y = y;
                    q4fDestination.z = (a32 + a23) / 4. / y;
                    q4fDestination.w = (a13 - a31) / 4. / y;
                } else if (fMax == z2) {
                    //максимальная компонента берется положительной
                    var z = math.sqrt(z2);
                    q4fDestination.x = (a31 + a13) / 4. / z;
                    q4fDestination.y = (a32 + a23) / 4. / z;
                    q4fDestination.z = z;
                    q4fDestination.w = (a21 - a12) / 4. / z;
                } else {
                    //максимальная компонента берется положительной
                    var w = math.sqrt(w2);
                    q4fDestination.x = (a32 - a23) / 4. / w;
                    q4fDestination.y = (a13 - a31) / 4. / w;
                    q4fDestination.z = (a21 - a12) / 4. / w;
                    q4fDestination.w = w;
                }
                return q4fDestination;
            };
            Mat4.prototype.toRotationMatrix = function (m4fDestination) {
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = new Mat4();
                }
                var pData = this.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[4];
                pDataDestination[8] = pData[8];
                pDataDestination[12] = 0.;
                pDataDestination[1] = pData[1];
                pDataDestination[5] = pData[5];
                pDataDestination[9] = pData[9];
                pDataDestination[13] = 0.;
                pDataDestination[2] = pData[2];
                pDataDestination[6] = pData[6];
                pDataDestination[10] = pData[10];
                pDataDestination[14] = 0.;
                pDataDestination[3] = 0.;
                pDataDestination[7] = 0.;
                pDataDestination[11] = 0.;
                pDataDestination[15] = 1.;
                return m4fDestination;
            };
            Mat4.prototype.toString = function (iFixed) {
                if (typeof iFixed === "undefined") { iFixed = 2; }
                var pData = this.data;
                return '[' + pData[0].toFixed(iFixed) + ", " + pData[4].toFixed(iFixed) + ', ' + pData[8].toFixed(iFixed) + ', ' + pData[12].toFixed(iFixed) + ',\n' + pData[1].toFixed(iFixed) + ", " + pData[5].toFixed(iFixed) + ', ' + pData[9].toFixed(iFixed) + ', ' + pData[13].toFixed(iFixed) + ',\n' + pData[2].toFixed(iFixed) + ", " + pData[6].toFixed(iFixed) + ', ' + pData[10].toFixed(iFixed) + ', ' + pData[14].toFixed(iFixed) + ',\n' + pData[3].toFixed(iFixed) + ", " + pData[7].toFixed(iFixed) + ', ' + pData[11].toFixed(iFixed) + ', ' + pData[15].toFixed(iFixed) + ']';
            };
            Mat4.prototype.rotateRight = function (fAngle, v3fAxis, m4fDestination) {
                var pData = this.data;
                var x = v3fAxis.x, y = v3fAxis.y, z = v3fAxis.z;
                var fLength = Math.sqrt(x * x + y * y + z * z);
                if (fLength === 0.) {
 {
                        akra.logger.setSourceLocation("Mat4.ts", 857);
                        akra.logger.assert(false, "попытка вращения вокруг оси нулевой длины. Угол " + fAngle + ". Ось " + v3fAxis.toString());
                    }
                    ;
                    if (((m4fDestination) !== undefined)) {
                        m4fDestination.set(this);
                    } else {
                        m4fDestination = this;
                    }
                    return m4fDestination;
                }
                var fInvLength = 1. / fLength;
                x *= fInvLength;
                y *= fInvLength;
                z *= fInvLength;
                var a11 = pData[0], a12 = pData[4], a13 = pData[8];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10];
                var fSin = math.sin(fAngle);
                var fCos = math.cos(fAngle);
                var fTmp = 1. - fCos;
                //build Rotation matrix
                                var b11 = fCos + fTmp * x * x, b12 = fTmp * x * y - fSin * z, b13 = fTmp * x * z + fSin * y;
                var b21 = fTmp * y * z + fSin * z, b22 = fCos + fTmp * y * y, b23 = fTmp * y * z - fSin * x;
                var b31 = fTmp * z * x - fSin * y, b32 = fTmp * z * y + fSin * x, b33 = fCos + fTmp * z * z;
                if (!((m4fDestination) !== undefined)) {
                    pData[0] = a11 * b11 + a12 * b21 + a13 * b31;
                    pData[4] = a11 * b12 + a12 * b22 + a13 * b32;
                    pData[8] = a11 * b13 + a12 * b23 + a13 * b33;
                    pData[1] = a21 * b11 + a22 * b21 + a23 * b31;
                    pData[5] = a21 * b12 + a22 * b22 + a23 * b32;
                    pData[9] = a21 * b13 + a22 * b23 + a23 * b33;
                    pData[2] = a31 * b11 + a32 * b21 + a33 * b31;
                    pData[6] = a31 * b12 + a32 * b22 + a33 * b32;
                    pData[10] = a31 * b13 + a32 * b23 + a33 * b33;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = a11 * b11 + a12 * b21 + a13 * b31;
                pDataDestination[4] = a11 * b12 + a12 * b22 + a13 * b32;
                pDataDestination[8] = a11 * b13 + a12 * b23 + a13 * b33;
                pDataDestination[12] = pData[12];
                pDataDestination[1] = a21 * b11 + a22 * b21 + a23 * b31;
                pDataDestination[5] = a21 * b12 + a22 * b22 + a23 * b32;
                pDataDestination[9] = a21 * b13 + a22 * b23 + a23 * b33;
                pDataDestination[13] = pData[13];
                pDataDestination[2] = a31 * b11 + a32 * b21 + a33 * b31;
                pDataDestination[6] = a31 * b12 + a32 * b22 + a33 * b32;
                pDataDestination[10] = a31 * b13 + a32 * b23 + a33 * b33;
                pDataDestination[14] = pData[14];
                pDataDestination[3] = pData[3];
                pDataDestination[7] = pData[7];
                pDataDestination[11] = pData[11];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.rotateLeft = function (fAngle, v3fAxis, m4fDestination) {
                var pData = this.data;
                var x = v3fAxis.x, y = v3fAxis.y, z = v3fAxis.z;
                var fLength = Math.sqrt(x * x + y * y + z * z);
                if (fLength === 0.) {
 {
                        akra.logger.setSourceLocation("Mat4.ts", 935);
                        akra.logger.assert(false, "попытка вращения вокруг оси нулевой длины. Угол " + fAngle + ". Ось " + v3fAxis.toString());
                    }
                    ;
                    if (((m4fDestination) !== undefined)) {
                        m4fDestination.set(this);
                    } else {
                        m4fDestination = this;
                    }
                    return m4fDestination;
                }
                var fInvLength = 1. / fLength;
                x *= fInvLength;
                y *= fInvLength;
                z *= fInvLength;
                var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
                var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
                var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
                var fSin = math.sin(fAngle);
                var fCos = math.cos(fAngle);
                var fTmp = 1. - fCos;
                //build Rotation matrix
                                var b11 = fCos + fTmp * x * x, b12 = fTmp * x * y - fSin * z, b13 = fTmp * x * z + fSin * y;
                var b21 = fTmp * y * z + fSin * z, b22 = fCos + fTmp * y * y, b23 = fTmp * y * z - fSin * x;
                var b31 = fTmp * z * x - fSin * y, b32 = fTmp * z * y + fSin * x, b33 = fCos + fTmp * z * z;
                if (!((m4fDestination) !== undefined)) {
                    pData[0] = b11 * a11 + b12 * a21 + b13 * a31;
                    pData[4] = b11 * a12 + b12 * a22 + b13 * a32;
                    pData[8] = b11 * a13 + b12 * a23 + b13 * a33;
                    pData[12] = b11 * a14 + b12 * a24 + b13 * a34;
                    pData[1] = b21 * a11 + b22 * a21 + b23 * a31;
                    pData[5] = b21 * a12 + b22 * a22 + b23 * a32;
                    pData[9] = b21 * a13 + b22 * a23 + b23 * a33;
                    pData[13] = b21 * a14 + b22 * a24 + b23 * a34;
                    pData[2] = b31 * a11 + b32 * a21 + b33 * a31;
                    pData[6] = b31 * a12 + b32 * a22 + b33 * a32;
                    pData[10] = b31 * a13 + b32 * a23 + b33 * a33;
                    pData[14] = b31 * a14 + b32 * a24 + b33 * a34;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = b11 * a11 + b12 * a21 + b13 * a31;
                pDataDestination[4] = b11 * a12 + b12 * a22 + b13 * a32;
                pDataDestination[8] = b11 * a13 + b12 * a23 + b13 * a33;
                pDataDestination[12] = b11 * a14 + b12 * a24 + b13 * a34;
                pDataDestination[1] = b21 * a11 + b22 * a21 + b23 * a31;
                pDataDestination[5] = b21 * a12 + b22 * a22 + b23 * a32;
                pDataDestination[9] = b21 * a13 + b22 * a23 + b23 * a33;
                pDataDestination[13] = b21 * a14 + b22 * a24 + b23 * a34;
                pDataDestination[2] = b31 * a11 + b32 * a21 + b33 * a31;
                pDataDestination[6] = b31 * a12 + b32 * a22 + b33 * a32;
                pDataDestination[10] = b31 * a13 + b32 * a23 + b33 * a33;
                pDataDestination[14] = b31 * a14 + b32 * a24 + b33 * a34;
                pDataDestination[3] = pData[3];
                pDataDestination[7] = pData[7];
                pDataDestination[11] = pData[11];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.setTranslation = /** @inline */function (v3fTranslation) {
                var pData = this.data;
                pData[12] = v3fTranslation.x;
                pData[13] = v3fTranslation.y;
                pData[14] = v3fTranslation.z;
                return this;
            };
            Mat4.prototype.getTranslation = /** @inline */function (v3fTranslation) {
                if (!((v3fTranslation) !== undefined)) {
                    v3fTranslation = new math.Vec3();
                }
                var pData = this.data;
                v3fTranslation.x = pData[12];
                v3fTranslation.y = pData[13];
                v3fTranslation.z = pData[14];
                return v3fTranslation;
            };
            Mat4.prototype.translateRight = function (v3fTranslation, m4fDestination) {
                var pData = this.data;
                var x = v3fTranslation.x, y = v3fTranslation.y, z = v3fTranslation.z;
                if (!((m4fDestination) !== undefined)) {
                    pData[12] = pData[0] * x + pData[4] * y + pData[8] * z + pData[12];
                    pData[13] = pData[1] * x + pData[5] * y + pData[9] * z + pData[13];
                    pData[14] = pData[2] * x + pData[6] * y + pData[10] * z + pData[14];
                    pData[15] = pData[3] * x + pData[7] * y + pData[11] * z + pData[15];
                    //строго говоря последнюю строчку умножать не обязательно, так как она должна быть -> 0 0 0 1
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                //кешируем матрицу вращений
                                var a11 = pData[0], a12 = pData[4], a13 = pData[8];
                var a21 = pData[0], a22 = pData[5], a23 = pData[9];
                var a31 = pData[0], a32 = pData[6], a33 = pData[10];
                var a41 = pData[0], a42 = pData[7], a43 = pData[11];
                pDataDestination[0] = a11;
                pDataDestination[4] = a12;
                pDataDestination[8] = a13;
                pDataDestination[12] = a11 * x + a12 * y + a13 * z + pData[12];
                pDataDestination[1] = a21;
                pDataDestination[5] = a22;
                pDataDestination[9] = a23;
                pDataDestination[13] = a21 * x + a22 * y + a23 * z + pData[13];
                pDataDestination[2] = a31;
                pDataDestination[6] = a32;
                pDataDestination[10] = a33;
                pDataDestination[14] = a31 * x + a32 * y + a33 * z + pData[14];
                pDataDestination[3] = a41;
                pDataDestination[7] = a42;
                pDataDestination[11] = a43;
                pDataDestination[15] = a41 * x + a42 * y + a43 * z + pData[15];
                return m4fDestination;
            };
            Mat4.prototype.translateLeft = function (v3fTranslation, m4fDestination) {
                var pData = this.data;
                var x = v3fTranslation.x, y = v3fTranslation.y, z = v3fTranslation.z;
                if (!((m4fDestination) !== undefined)) {
                    pData[12] = x + pData[12];
                    pData[13] = y + pData[13];
                    pData[14] = z + pData[14];
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[4];
                pDataDestination[8] = pData[8];
                pDataDestination[12] = x + pData[12];
                pDataDestination[1] = pData[1];
                pDataDestination[5] = pData[5];
                pDataDestination[9] = pData[9];
                pDataDestination[13] = y + pData[13];
                pDataDestination[2] = pData[2];
                pDataDestination[6] = pData[6];
                pDataDestination[10] = pData[10];
                pDataDestination[14] = z + pData[14];
                pDataDestination[3] = pData[3];
                pDataDestination[7] = pData[7];
                pDataDestination[11] = pData[11];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.scaleRight = function (v3fScale, m4fDestination) {
                var pData = this.data;
                var x = v3fScale.x, y = v3fScale.y, z = v3fScale.z;
                if (!((m4fDestination) !== undefined)) {
                    pData[0] *= x;
                    pData[4] *= y;
                    pData[8] *= z;
                    pData[1] *= x;
                    pData[5] *= y;
                    pData[9] *= z;
                    pData[2] *= x;
                    pData[6] *= y;
                    pData[10] *= z;
                    //скейлить эти компоненты необязательно, так как там должны лежать нули
                    pData[3] *= x;
                    pData[7] *= y;
                    pData[11] *= z;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0] * x;
                pDataDestination[4] = pData[4] * y;
                pDataDestination[8] = pData[8] * z;
                pDataDestination[12] = pData[12];
                pDataDestination[1] = pData[1] * x;
                pDataDestination[5] = pData[5] * y;
                pDataDestination[9] = pData[9] * z;
                pDataDestination[13] = pData[13];
                pDataDestination[2] = pData[2] * x;
                pDataDestination[6] = pData[6] * y;
                pDataDestination[10] = pData[10] * z;
                pDataDestination[14] = pData[14];
                //скейлить эти компоненты необязательно, так как там должны лежать нули
                pDataDestination[3] = pData[3] * x;
                pDataDestination[7] = pData[7] * y;
                pDataDestination[11] = pData[11] * z;
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.scaleLeft = function (v3fScale, m4fDestination) {
                var pData = this.data;
                var x = v3fScale.x, y = v3fScale.y, z = v3fScale.z;
                if (!((m4fDestination) !== undefined)) {
                    pData[0] *= x;
                    pData[4] *= x;
                    pData[8] *= x;
                    pData[12] *= x;
                    pData[1] *= y;
                    pData[5] *= y;
                    pData[9] *= y;
                    pData[13] *= y;
                    pData[2] *= z;
                    pData[6] *= z;
                    pData[10] *= z;
                    pData[14] *= z;
                    return this;
                }
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0] * x;
                pDataDestination[4] = pData[4] * x;
                pDataDestination[8] = pData[8] * x;
                pDataDestination[12] = pData[12] * x;
                pDataDestination[1] = pData[1] * y;
                pDataDestination[5] = pData[5] * y;
                pDataDestination[9] = pData[9] * y;
                pDataDestination[13] = pData[13] * y;
                pDataDestination[2] = pData[2] * z;
                pDataDestination[6] = pData[6] * z;
                pDataDestination[10] = pData[10] * z;
                pDataDestination[14] = pData[14] * z;
                pDataDestination[3] = pData[3];
                pDataDestination[7] = pData[7];
                pDataDestination[11] = pData[11];
                pDataDestination[15] = pData[15];
                return m4fDestination;
            };
            Mat4.prototype.decompose = /** @inline */function (q4fRotation, v3fScale, v3fTranslation) {
                /*not inlined, because supportes only single statement functions(cur. st. count: 7)*/this.getTranslation(v3fTranslation);
                var m3fRotScale = this.toMat3(math.Mat3.stackCeil.set());
                return m3fRotScale.decompose(q4fRotation, v3fScale);
            };
            Mat4.prototype.row = function (iRow, v4fDestination) {
                if (!((v4fDestination) !== undefined)) {
                    v4fDestination = new math.Vec4();
                }
                var pData = this.data;
                switch(iRow) {
                    case 1:
                        v4fDestination.x = pData[0];
                        v4fDestination.y = pData[4];
                        v4fDestination.z = pData[8];
                        v4fDestination.w = pData[12];
                        break;
                    case 2:
                        v4fDestination.x = pData[1];
                        v4fDestination.y = pData[5];
                        v4fDestination.z = pData[9];
                        v4fDestination.w = pData[13];
                        break;
                    case 3:
                        v4fDestination.x = pData[2];
                        v4fDestination.y = pData[6];
                        v4fDestination.z = pData[10];
                        v4fDestination.w = pData[14];
                        break;
                    case 4:
                        v4fDestination.x = pData[3];
                        v4fDestination.y = pData[7];
                        v4fDestination.z = pData[11];
                        v4fDestination.w = pData[15];
                        break;
                }
                return v4fDestination;
            };
            Mat4.prototype.column = function (iColumn, v4fDestination) {
                if (!((v4fDestination) !== undefined)) {
                    v4fDestination = new math.Vec4();
                }
                var pData = this.data;
                switch(iColumn) {
                    case 1:
                        v4fDestination.x = pData[0];
                        v4fDestination.y = pData[1];
                        v4fDestination.z = pData[2];
                        v4fDestination.w = pData[3];
                        break;
                    case 2:
                        v4fDestination.x = pData[4];
                        v4fDestination.y = pData[5];
                        v4fDestination.z = pData[6];
                        v4fDestination.w = pData[7];
                        break;
                    case 3:
                        v4fDestination.x = pData[8];
                        v4fDestination.y = pData[9];
                        v4fDestination.z = pData[10];
                        v4fDestination.w = pData[11];
                        break;
                    case 4:
                        v4fDestination.x = pData[12];
                        v4fDestination.y = pData[13];
                        v4fDestination.z = pData[14];
                        v4fDestination.w = pData[15];
                        break;
                }
                return v4fDestination;
            };
            Mat4.prototype.unproj = function (v, v4fDestination) {
                if (!((v4fDestination) !== undefined)) {
                    v4fDestination = new math.Vec4();
                }
                var pData = this.data;
                var v3fScreen = v;
                var x, y, z;
                if (((((this).data[15] === 1) ? true : false))) {
                    //orthogonal projection case
                    z = (v3fScreen.z - pData[14]) / pData[10];
                    y = (v3fScreen.y - pData[13]) / pData[5];
                    x = (v3fScreen.x - pData[12]) / pData[0];
                } else {
                    //frustum case
                    z = -pData[14] / (pData[10] + v3fScreen.z);
                    y = -(v3fScreen.y + pData[9]) * z / pData[5];
                    x = -(v3fScreen.x + pData[8]) * z / pData[0];
                }
                v4fDestination.x = x;
                v4fDestination.y = y;
                v4fDestination.z = z;
                v4fDestination.w = 1.;
                return v4fDestination;
            };
            Mat4.prototype.unprojZ = function (fZ) {
                var pData = this.data;
                if (((((this).data[15] === 1) ? true : false))) {
                    //orthogonal projection case
                    return (fZ - pData[14]) / pData[10];
                } else {
                    //pData[__43] === -1
                    //frustum case
                    return -pData[14] / (pData[10] + fZ);
                }
            };
            Mat4.prototype.isOrthogonalProjection = /** @inline */function () {
                // var pData: Float32Array = this.data;
                // if(pData[__44] === 1){
                // 	//orthogonal projection
                // 	return true;
                // }
                // else{
                // 	//pData[__43] === -1
                // 	//frustum projection
                // 	return false;
                // }
                return ((this.data[15] === 1) ? true : false);
            };
            Mat4.fromYawPitchRoll = function fromYawPitchRoll(fYaw, fPitch, fRoll, m4fDestination) {
                if (arguments.length <= 2) {
                    //Vec3 + m4fDestination
                    var v3fVec = arguments[0];
                    fYaw = v3fVec.x;
                    fPitch = v3fVec.y;
                    fRoll = v3fVec.z;
                    m4fDestination = arguments[1];
                }
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = new Mat4();
                }
                var pDataDestination = m4fDestination.data;
                var fSin1 = Math.sin(fYaw);
                var fSin2 = Math.sin(fPitch);
                var fSin3 = Math.sin(fRoll);
                var fCos1 = Math.cos(fYaw);
                var fCos2 = Math.cos(fPitch);
                var fCos3 = Math.cos(fRoll);
                pDataDestination[0] = fCos1 * fCos3 + fSin1 * fSin2 * fSin3;
                pDataDestination[4] = fCos3 * fSin1 * fSin2 - fCos1 * fSin3;
                pDataDestination[8] = fCos2 * fSin1;
                pDataDestination[12] = 0.;
                pDataDestination[1] = fCos2 * fSin3;
                pDataDestination[5] = fCos2 * fCos3;
                pDataDestination[9] = -fSin2;
                pDataDestination[13] = 0.;
                pDataDestination[2] = fCos1 * fSin2 * fSin3 - fCos3 * fSin1;
                pDataDestination[6] = fSin1 * fSin3 + fCos1 * fCos3 * fSin2;
                pDataDestination[10] = fCos1 * fCos2;
                pDataDestination[14] = 0.;
                pDataDestination[3] = 0.;
                pDataDestination[7] = 0.;
                pDataDestination[11] = 0.;
                pDataDestination[15] = 1.;
                return m4fDestination;
            };
            Mat4.fromXYZ = function fromXYZ(fX, fY, fZ, m4fDestination) {
                if (arguments.length <= 2) {
                    //Vec3 + m4fDestination
                    var v3fVec = arguments[0];
                    return Mat4.fromYawPitchRoll(v3fVec.y, v3fVec.x, v3fVec.z, arguments[1]);
                } else {
                    //fX fY fZ m4fDestination
                    var fX = arguments[0];
                    var fY = arguments[1];
                    var fZ = arguments[2];
                    return Mat4.fromYawPitchRoll(fY, fX, fZ, arguments[3]);
                }
            };
            Mat4.frustum = function frustum(fLeft, fRight, fBottom, fTop, fNear, fFar, m4fDestination) {
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = new Mat4();
                }
                var pDataDestination = m4fDestination.data;
                var fRL = fRight - fLeft;
                var fTB = fTop - fBottom;
                var fFN = fFar - fNear;
                pDataDestination[0] = 2. * fNear / fRL;
                pDataDestination[4] = 0.;
                pDataDestination[8] = (fRight + fLeft) / fRL;
                pDataDestination[12] = 0.;
                pDataDestination[1] = 0.;
                pDataDestination[5] = 2. * fNear / fTB;
                pDataDestination[9] = (fTop + fBottom) / fTB;
                pDataDestination[13] = 0.;
                pDataDestination[2] = 0.;
                pDataDestination[6] = 0.;
                pDataDestination[10] = -(fFar + fNear) / fFN;
                pDataDestination[14] = -2. * fFar * fNear / fFN;
                pDataDestination[3] = 0.;
                pDataDestination[7] = 0.;
                pDataDestination[11] = -1.;
                pDataDestination[15] = 0.;
                return m4fDestination;
            };
            Mat4.perspective = /** @inline */function perspective(fFovy, fAspect, fNear, fFar, m4fDestination) {
                var fTop = fNear * math.tan(fFovy / 2.);
                var fRight = fTop * fAspect;
                return Mat4.frustum(-fRight, fRight, -fTop, fTop, fNear, fFar, m4fDestination);
            };
            Mat4.orthogonalProjectionAsymmetric = function orthogonalProjectionAsymmetric(fLeft, fRight, fBottom, fTop, fNear, fFar, m4fDestination) {
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = new Mat4();
                }
                var pDataDestination = m4fDestination.data;
                var fRL = fRight - fLeft;
                var fTB = fTop - fBottom;
                var fFN = fFar - fNear;
                pDataDestination[0] = 2. / fRL;
                pDataDestination[4] = 0.;
                pDataDestination[8] = 0.;
                pDataDestination[12] = -(fRight + fLeft) / fRL;
                pDataDestination[1] = 0.;
                pDataDestination[5] = 2. / fTB;
                pDataDestination[9] = 0.;
                pDataDestination[13] = -(fTop + fBottom) / fTB;
                pDataDestination[2] = 0.;
                pDataDestination[6] = 0.;
                pDataDestination[10] = -2. / fFN;
                pDataDestination[14] = -(fFar + fNear) / fFN;
                pDataDestination[3] = 0.;
                pDataDestination[7] = 0.;
                pDataDestination[11] = 0.;
                pDataDestination[15] = 1.;
                return m4fDestination;
            };
            Mat4.orthogonalProjection = /** @inline */function orthogonalProjection(fWidth, fHeight, fNear, fFar, m4fDestination) {
                var fRight = fWidth / 2.;
                var fTop = fHeight / 2.;
                return Mat4.orthogonalProjectionAsymmetric(-fRight, fRight, -fTop, fTop, fNear, fFar, m4fDestination);
            };
            Mat4.lookAt = function lookAt(v3fEye, v3fCenter, v3fUp, m4fDestination) {
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = new Mat4(1.);
                }
                var fEyeX = v3fEye.x, fEyeY = v3fEye.y, fEyeZ = v3fEye.z;
                var fCenterX = v3fCenter.x, fCenterY = v3fCenter.y, fCenterZ = v3fCenter.z;
                var fUpX = v3fUp.x, fUpY = v3fUp.y, fUpZ = v3fUp.z;
                var fLength;
                var fInvLength;
                if (fEyeX === fCenterX && fEyeY === fCenterY && fEyeZ === fCenterZ) {
                    return m4fDestination;
                }
                var fXNewX, fXNewY, fXNewZ;
                var fYNewX, fYNewY, fYNewZ;
                var fZNewX, fZNewY, fZNewZ;
                //ось Z направлена на наблюдателя
                fZNewX = fEyeX - fCenterX;
                fZNewY = fEyeY - fCenterY;
                fZNewZ = fEyeZ - fCenterZ;
                fLength = math.sqrt(fZNewX * fZNewX + fZNewY * fZNewY + fZNewZ * fZNewZ);
                fInvLength = 1. / fLength;
                //новая ось Z
                fZNewX = fZNewX * fInvLength;
                fZNewY = fZNewY * fInvLength;
                fZNewZ = fZNewZ * fInvLength;
                //новая ось X
                fXNewX = fUpY * fZNewZ - fUpZ * fZNewY;
                fXNewY = fUpZ * fZNewX - fUpX * fZNewZ;
                fXNewZ = fUpX * fZNewY - fUpY * fZNewX;
                fLength = math.sqrt(fXNewX * fXNewX + fXNewY * fXNewY + fXNewZ * fXNewZ);
                if (fLength) {
                    fInvLength = 1. / fLength;
                    fXNewX = fXNewX * fInvLength;
                    fXNewY = fXNewY * fInvLength;
                    fXNewZ = fXNewZ * fInvLength;
                }
                //новая ось Y
                fYNewX = fZNewY * fXNewZ - fZNewZ * fXNewY;
                fYNewY = fZNewZ * fXNewX - fZNewX * fXNewZ;
                fYNewZ = fZNewX * fXNewY - fZNewY * fXNewX;
                //нормировать ненужно, так как было векторное умножение двух ортонормированных векторов
                //положение камеры в новых осях
                var fEyeNewX = fEyeX * fXNewX + fEyeY * fXNewY + fEyeZ * fXNewZ;
                var fEyeNewY = fEyeX * fYNewX + fEyeY * fYNewY + fEyeZ * fYNewZ;
                var fEyeNewZ = fEyeX * fZNewX + fEyeY * fZNewY + fEyeZ * fZNewZ;
                var pDataDestination = m4fDestination.data;
                //lookAt matrix === camera view matrix
                //почему новый базис записывается по строкам?
                //это сзязано с тем, что это получающаяся матрица -
                //это viewMatrix камеры, а на эту матрицу умножается при рендеринге, то есть
                //модель должна испытать преобразования противоположные тем, которые испытывает камера
                //то есть вращение в другую сторону(базис по строкам) и сдвиг в противоположную сторону
                pDataDestination[0] = fXNewX;
                pDataDestination[4] = fXNewY;
                pDataDestination[8] = fXNewZ;
                /*отъезжаем в позицию камеры*/
                pDataDestination[12] = -fEyeNewX;
                pDataDestination[1] = fYNewX;
                pDataDestination[5] = fYNewY;
                pDataDestination[9] = fYNewZ;
                /*отъезжаем в позицию камеры*/
                pDataDestination[13] = -fEyeNewY;
                pDataDestination[2] = fZNewX;
                pDataDestination[6] = fZNewY;
                pDataDestination[10] = fZNewZ;
                /*отъезжаем в позицию камеры*/
                pDataDestination[14] = -fEyeNewZ;
                pDataDestination[3] = 0.;
                pDataDestination[7] = 0.;
                pDataDestination[11] = 0.;
                pDataDestination[15] = 1.;
                return m4fDestination;
            };
            Object.defineProperty(Mat4, "stackCeil", {
                get: function () {
                    Mat4.stackPosition = Mat4.stackPosition === Mat4.stackSize - 1 ? 0 : Mat4.stackPosition;
                    return Mat4.stack[Mat4.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Mat4.stackSize = 100;
            Mat4.stackPosition = 0;
            Mat4.stack = (function () {
                var pStack = new Array(Mat4.stackSize);
                for(var i = 0; i < Mat4.stackSize; i++) {
                    pStack[i] = new Mat4();
                }
                return pStack;
            })();
            return Mat4;
        })();
        math.Mat4 = Mat4;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
        var Quat4 = (function () {
            function Quat4(fX, fY, fZ, fW) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        this.set(arguments[0]);
                        break;
                    case 2:
                        this.set(arguments[0], arguments[1]);
                        break;
                    case 4:
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;
                    default:
                        this.x = this.y = this.z = 0.;
                        this.w = 1.;
                        break;
                }
            }
            Quat4.prototype.set = function (fX, fY, fZ, fW) {
                var nArgumentsLength = arguments.length;
                if (nArgumentsLength === 0) {
                    this.x = this.y = this.z = 0.;
                    this.w = 1.;
                }
                if (nArgumentsLength === 1) {
                    if (arguments[0] instanceof Quat4) {
                        var q4fQuat = arguments[0];
                        this.x = q4fQuat.x;
                        this.y = q4fQuat.y;
                        this.z = q4fQuat.z;
                        this.w = q4fQuat.w;
                    } else {
                        //Array
                        var pElements = arguments[0];
                        this.x = pElements[0];
                        this.y = pElements[1];
                        this.z = pElements[2];
                        this.w = pElements[3];
                    }
                } else if (nArgumentsLength === 2) {
                    //float float
                    //vec3 float
                    if ((typeof (arguments[0]) === "number")) {
                        //float float
                        var fValue = arguments[0];
                        this.x = fValue;
                        this.y = fValue;
                        this.z = fValue;
                        this.w = arguments[1];
                    } else {
                        //vec3 float
                        var v3fValue = arguments[0];
                        this.x = v3fValue.x;
                        this.y = v3fValue.y;
                        this.z = v3fValue.z;
                        this.w = arguments[1];
                    }
                } else if (nArgumentsLength === 4) {
                    this.x = arguments[0];
                    this.y = arguments[1];
                    this.z = arguments[2];
                    this.w = arguments[3];
                }
                return this;
            };
            Quat4.prototype.multiply = function (q4fQuat, q4fDestination) {
                if (!((q4fDestination) !== undefined)) {
                    q4fDestination = this;
                }
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                q4fDestination.x = x1 * w2 + x2 * w1 + y1 * z2 - z1 * y2;
                q4fDestination.y = y1 * w2 + y2 * w1 + z1 * x2 - x1 * z2;
                q4fDestination.z = z1 * w2 + z2 * w1 + x1 * y2 - y1 * x2;
                q4fDestination.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;
                return q4fDestination;
            };
            Quat4.prototype.multiplyVec3 = function (v3fVec, v3fDestination) {
                if (!((v3fDestination) !== undefined)) {
                    v3fDestination = v3fVec;
                }
                var q4fVec = Quat4.stackCeil.set(v3fVec, 0.);
                var qInverse = this.inverse(Quat4.stackCeil.set());
                var qResult = this.multiply(q4fVec.multiply(qInverse), Quat4.stackCeil.set());
                v3fDestination.x = qResult.x;
                v3fDestination.y = qResult.y;
                v3fDestination.z = qResult.z;
                return v3fDestination;
            };
            Quat4.prototype.conjugate = function (q4fDestination) {
                if (!((q4fDestination) !== undefined)) {
                    this.x = -this.x;
                    this.y = -this.y;
                    this.z = -this.z;
                    return this;
                }
                q4fDestination.x = -this.x;
                q4fDestination.y = -this.y;
                q4fDestination.z = -this.z;
                q4fDestination.w = this.w;
                return q4fDestination;
            };
            Quat4.prototype.inverse = function (q4fDestination) {
                if (!((q4fDestination) !== undefined)) {
                    q4fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fSqLength = x * x + y * y + z * z + w * w;
                if (fSqLength === 0.) {
                    q4fDestination.x = 0.;
                    q4fDestination.y = 0.;
                    q4fDestination.z = 0.;
                    q4fDestination.w = 0.;
                } else {
                    var fInvSqLength = 1. / fSqLength;
                    q4fDestination.x = -x * fInvSqLength;
                    q4fDestination.y = -y * fInvSqLength;
                    q4fDestination.z = -z * fInvSqLength;
                    q4fDestination.w = w * fInvSqLength;
                }
                return q4fDestination;
            };
            Quat4.prototype.length = /** @inline */function () {
                var x = this.x, y = this.y, z = this.z, w = this.w;
                return math.sqrt(x * x + y * y + z * z + w * w);
            };
            Quat4.prototype.normalize = function (q4fDestination) {
                if (!((q4fDestination) !== undefined)) {
                    q4fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fLength = math.sqrt(x * x + y * y + z * z + w * w);
                if (fLength === 0.) {
                    q4fDestination.x = 0.;
                    q4fDestination.y = 0.;
                    q4fDestination.z = 0.;
                    q4fDestination.w = 0.;
                } else {
                    var fInvLength = 1 / fLength;
                    q4fDestination.x = x * fInvLength;
                    q4fDestination.y = y * fInvLength;
                    q4fDestination.z = z * fInvLength;
                    q4fDestination.w = w * fInvLength;
                }
                return q4fDestination;
            };
            Quat4.prototype.calculateW = function (q4fDestination) {
                var x = this.x, y = this.y, z = this.z;
                if (!((q4fDestination) !== undefined)) {
                    this.w = math.sqrt(1. - x * x - y * y - z * z);
                    return this;
                }
                q4fDestination.x = x;
                q4fDestination.y = y;
                q4fDestination.z = z;
                q4fDestination.w = math.sqrt(1. - x * x - y * y - z * z);
                return q4fDestination;
            };
            Quat4.prototype.isEqual = function (q4fQuat, fEps, asMatrix) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                if (typeof asMatrix === "undefined") { asMatrix = false; }
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                var fLength1 = math.sqrt(x1 * x1 + y1 * y1 + z1 * z1 + w1 * w1);
                var fLength2 = math.sqrt(x2 * x2 + y2 * y2 + z2 * z2 + w2 * w2);
                if (math.abs(fLength2 - fLength2) > fEps) {
                    return false;
                }
                var cosHalfTheta = (x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2) / fLength1 / fLength2;
                if (asMatrix) {
                    cosHalfTheta = math.abs(cosHalfTheta);
                }
                if (1. - cosHalfTheta > fEps) {
                    return false;
                }
                return true;
            };
            Quat4.prototype.getYaw = function () {
                var fYaw;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fx2 = x * 2.;
                var fy2 = y * 2.;
                if (math.abs(x) == math.abs(w)) {
                    //вырожденный случай обрабатывается отдельно
                    //
                    var wTemp = w * math.sqrt(2.);
                    //cos(Yaw/2)*cos(Roll/2) + sin(Yaw/2)*sin(Roll/2) = cos((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //cos(Yaw/2)*cos(Roll/2) - sin(Yaw/2)*sin(Roll/2) = cos((Yaw+Roll)/2); Roll = 0;
                    var yTemp = y * math.sqrt(2.);
                    //sin(Yaw/2)*cos(Roll/2) - cos(Yaw/2)*sin(Roll/2) = sin((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //sin(Yaw/2)*cos(Roll/2) + cos(Yaw/2)*sin(Roll/2) = sin((Yaw+Roll)/2); Roll = 0;
                    fYaw = math.atan2(yTemp, wTemp) * 2.;
                    //fRoll = 0;
                    //убираем дополнительный оборот
                    var pi = math.PI;
                    if (fYaw > pi) {
                        fYaw -= pi;
                        //fRoll = (x == w) ? -pi : pi;
                                            } else if (fYaw < -pi) {
                        fYaw += pi;
                        //fRoll = (x == w) ? pi : -pi;
                                            }
                } else {
                    //Math.atan2(sin(Yaw)*cos(Pitch),cos(Yaw)*cos(Pitch));
                    fYaw = math.atan2(fx2 * z + fy2 * w, 1. - (fx2 * x + fy2 * y));
                }
                return fYaw;
            };
            Quat4.prototype.getPitch = function () {
                var fPitch;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fx2 = x * 2.;
                var fy2 = y * 2.;
                /*в очень редких случаях из-за ошибок округления получается результат > 1*/
                var fSinPitch = (/*checked (origin: math)>>*/akra.math.max((-1.), /*checked (origin: math)>>*/akra.math.min((fx2 * w - fy2 * z), (1.))));
                fPitch = math.asin(fSinPitch);
                return fPitch;
            };
            Quat4.prototype.getRoll = function () {
                var fRoll;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fx2 = x * 2.;
                var fz2 = z * 2.;
                if (math.abs(x) == math.abs(w)) {
                    //вырожденный случай обрабатывается отдельно
                    //
                    var wTemp = w * math.sqrt(2.);
                    //cos(Yaw/2)*cos(Roll/2) + sin(Yaw/2)*sin(Roll/2) = cos((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //cos(Yaw/2)*cos(Roll/2) - sin(Yaw/2)*sin(Roll/2) = cos((Yaw+Roll)/2); Roll = 0;
                    var yTemp = y * math.sqrt(2.);
                    //sin(Yaw/2)*cos(Roll/2) - cos(Yaw/2)*sin(Roll/2) = sin((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //sin(Yaw/2)*cos(Roll/2) + cos(Yaw/2)*sin(Roll/2) = sin((Yaw+Roll)/2); Roll = 0;
                    var fYaw = math.atan2(yTemp, wTemp) * 2.;
                    fRoll = 0.;
                    //убираем дополнительный оборот
                    var pi = math.PI;
                    if (fYaw > pi) {
                        //fYaw -= pi;
                        fRoll = (x == w) ? -pi : pi;
                    } else if (fYaw < -pi) {
                        //fYaw += pi;
                        fRoll = (x == w) ? pi : -pi;
                    }
                } else {
                    //Math.atan2(cos(Pitch) * sin(Roll),cos(Pitch)*cos(Roll));
                    fRoll = math.atan2(fx2 * y + fz2 * w, 1. - (fx2 * x + fz2 * z));
                }
                return fRoll;
            };
            Quat4.prototype.toYawPitchRoll = function (v3fDestination) {
                if (!((v3fDestination) !== undefined)) {
                    v3fDestination = new math.Vec3();
                }
                var fYaw, fPitch, fRoll;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fx2 = x * 2.;
                var fy2 = y * 2.;
                var fz2 = z * 2.;
                var fw2 = w * 2.;
                /*в очень редких случаях из-за ошибок округления получается результат > 1*/
                var fSinPitch = (/*checked (origin: math)>>*/akra.math.max((-1.), /*checked (origin: math)>>*/akra.math.min((fx2 * w - fy2 * z), (1.))));
                fPitch = math.asin(fSinPitch);
                //не известен знак косинуса, как следствие это потребует дополнительной проверки.
                //как показала практика - это не на что не влияет, просто один и тот же кватернион можно получить двумя разными вращениями
                if (math.abs(x) == math.abs(w)) {
                    //вырожденный случай обрабатывается отдельно
                    //
                    var wTemp = w * math.sqrt(2.);
                    //cos(Yaw/2)*cos(Roll/2) + sin(Yaw/2)*sin(Roll/2) = cos((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //cos(Yaw/2)*cos(Roll/2) - sin(Yaw/2)*sin(Roll/2) = cos((Yaw+Roll)/2); Roll = 0;
                    var yTemp = y * math.sqrt(2.);
                    //sin(Yaw/2)*cos(Roll/2) - cos(Yaw/2)*sin(Roll/2) = sin((Yaw-Roll)/2); Roll = 0;
                    //x==-w
                    //sin(Yaw/2)*cos(Roll/2) + cos(Yaw/2)*sin(Roll/2) = sin((Yaw+Roll)/2); Roll = 0;
                    fYaw = math.atan2(yTemp, wTemp) * 2.;
                    fRoll = 0.;
                    //убираем дополнительный оборот
                    var pi = math.PI;
                    if (fYaw > pi) {
                        fYaw -= pi;
                        fRoll = (x == w) ? -pi : pi;
                    } else if (fYaw < -pi) {
                        fYaw += pi;
                        fRoll = (x == w) ? pi : -pi;
                    }
                } else {
                    //Math.atan2(sin(Yaw)*cos(Pitch),cos(Yaw)*cos(Pitch));
                    fYaw = math.atan2(fx2 * z + fy2 * w, 1. - (fx2 * x + fy2 * y));
                    //Math.atan2(cos(Pitch) * sin(Roll),cos(Pitch)*cos(Roll));
                    fRoll = math.atan2(fx2 * y + fz2 * w, 1. - (fx2 * x + fz2 * z));
                }
                v3fDestination.x = fYaw;
                v3fDestination.y = fPitch;
                v3fDestination.z = fRoll;
                return v3fDestination;
            };
            Quat4.prototype.toMat3 = function (m3fDestination) {
                if (!((m3fDestination) !== undefined)) {
                    m3fDestination = new math.Mat3();
                }
                var pDataDestination = m3fDestination.data;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                //потом необходимо ускорить
                pDataDestination[0] = 1. - 2. * (y * y + z * z);
                pDataDestination[3] = 2. * (x * y - z * w);
                pDataDestination[6] = 2. * (x * z + y * w);
                pDataDestination[1] = 2. * (x * y + z * w);
                pDataDestination[4] = 1. - 2. * (x * x + z * z);
                pDataDestination[7] = 2. * (y * z - x * w);
                pDataDestination[2] = 2. * (x * z - y * w);
                pDataDestination[5] = 2. * (y * z + x * w);
                pDataDestination[8] = 1. - 2. * (x * x + y * y);
                return m3fDestination;
            };
            Quat4.prototype.toMat4 = function (m4fDestination) {
                if (!((m4fDestination) !== undefined)) {
                    m4fDestination = new math.Mat4();
                }
                var pDataDestination = m4fDestination.data;
                var x = this.x, y = this.y, z = this.z, w = this.w;
                //потом необходимо ускорить
                pDataDestination[0] = 1. - 2. * (y * y + z * z);
                pDataDestination[4] = 2. * (x * y - z * w);
                pDataDestination[8] = 2. * (x * z + y * w);
                pDataDestination[12] = 0.;
                pDataDestination[1] = 2. * (x * y + z * w);
                pDataDestination[5] = 1. - 2. * (x * x + z * z);
                pDataDestination[9] = 2. * (y * z - x * w);
                pDataDestination[13] = 0.;
                pDataDestination[2] = 2. * (x * z - y * w);
                pDataDestination[6] = 2. * (y * z + x * w);
                pDataDestination[10] = 1. - 2. * (x * x + y * y);
                pDataDestination[14] = 0.;
                pDataDestination[3] = 0.;
                pDataDestination[7] = 0.;
                pDataDestination[11] = 0.;
                pDataDestination[15] = 1.;
                return m4fDestination;
            };
            Quat4.prototype.toString = /** @inline */function () {
                return "[x: " + this.x + ", y: " + this.y + ", z: " + this.z + ", w: " + this.w + "]";
            };
            Quat4.prototype.mix = function (q4fQuat, fA, q4fDestination, bShortestPath) {
                if (typeof bShortestPath === "undefined") { bShortestPath = true; }
                if (!((q4fDestination) !== undefined)) {
                    q4fDestination = this;
                }
                fA = (/*checked (origin: math)>>*/akra.math.max((0), /*checked (origin: math)>>*/akra.math.min((fA), (1))));
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                //скалярное произведение
                var fCos = x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2;
                if (fCos < 0. && bShortestPath) {
                    x2 = -x2;
                    y2 = -y2;
                    z2 = -z2;
                    w2 = -w2;
                }
                var k1 = 1. - fA;
                var k2 = fA;
                q4fDestination.x = x1 * k1 + x2 * k2;
                q4fDestination.y = y1 * k1 + y2 * k2;
                q4fDestination.z = z1 * k1 + z2 * k2;
                q4fDestination.w = w1 * k1 + w2 * k2;
                return q4fDestination;
            };
            Quat4.prototype.smix = function (q4fQuat, fA, q4fDestination, bShortestPath) {
                if (typeof bShortestPath === "undefined") { bShortestPath = true; }
                if (!((q4fDestination) !== undefined)) {
                    q4fDestination = this;
                }
                fA = (/*checked (origin: math)>>*/akra.math.max((0), /*checked (origin: math)>>*/akra.math.min((fA), (1))));
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                //скалярное произведение
                var fCos = x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2;
                if (fCos < 0 && bShortestPath) {
                    fCos = -fCos;
                    x2 = -x2;
                    y2 = -y2;
                    z2 = -z2;
                    w2 = -w2;
                }
                var fEps = 1e-3;
                if (math.abs(fCos) < 1. - fEps) {
                    var fSin = math.sqrt(1. - fCos * fCos);
                    var fInvSin = 1. / fSin;
                    var fAngle = math.atan2(fSin, fCos);
                    var k1 = math.sin((1. - fA) * fAngle) * fInvSin;
                    var k2 = math.sin(fA * fAngle) * fInvSin;
                    q4fDestination.x = x1 * k1 + x2 * k2;
                    q4fDestination.y = y1 * k1 + y2 * k2;
                    q4fDestination.z = z1 * k1 + z2 * k2;
                    q4fDestination.w = w1 * k1 + w2 * k2;
                } else {
                    //два кватерниона или очень близки (тогда можно делать линейную интерполяцию)
                    //или два кватениона диаметрально противоположны, тогда можно интерполировать любым способом
                    //позже надо будет реализовать какой-нибудь, а пока тоже линейная интерполяция
                    var k1 = 1 - fA;
                    var k2 = fA;
                    var x = x1 * k1 + x2 * k2;
                    var y = y1 * k1 + y2 * k2;
                    var z = z1 * k1 + z2 * k2;
                    var w = w1 * k1 + w2 * k2;
                    // и нормализуем так-как мы сошли со сферы
                    var fLength = math.sqrt(x * x + y * y + z * z + w * w);
                    var fInvLen = fLength ? 1 / fLength : 0;
                    q4fDestination.x = x * fInvLen;
                    q4fDestination.y = y * fInvLen;
                    q4fDestination.z = z * fInvLen;
                    q4fDestination.w = w * fInvLen;
                }
                return q4fDestination;
            };
            Quat4.fromForwardUp = function fromForwardUp(v3fForward, v3fUp, q4fDestination) {
                if (!((q4fDestination) !== undefined)) {
                    q4fDestination = new Quat4();
                }
                var fForwardX = v3fForward.x, fForwardY = v3fForward.y, fForwardZ = v3fForward.z;
                var fUpX = v3fUp.x, fUpY = v3fUp.y, fUpZ = v3fUp.z;
                var m3fTemp = math.Mat3.stackCeil.set();
                var pTempData = m3fTemp.data;
                pTempData[0] = fUpY * fForwardZ - fUpZ * fForwardY;
                pTempData[3] = fUpX;
                pTempData[6] = fForwardX;
                pTempData[1] = fUpZ * fForwardX - fUpX * fForwardZ;
                pTempData[4] = fUpY;
                pTempData[7] = fForwardY;
                pTempData[2] = fUpX * fForwardY - fUpY * fForwardX;
                pTempData[5] = fUpZ;
                pTempData[8] = fForwardZ;
                return m3fTemp.toQuat4(q4fDestination);
            };
            Quat4.fromAxisAngle = function fromAxisAngle(v3fAxis, fAngle, q4fDestination) {
                if (!((q4fDestination) !== undefined)) {
                    q4fDestination = new Quat4();
                }
                var x = v3fAxis.x, y = v3fAxis.y, z = v3fAxis.z;
                var fLength = math.sqrt(x * x + y * y + z * z);
                if (fLength === 0.) {
                    q4fDestination.x = q4fDestination.y = q4fDestination.z = 0;
                    q4fDestination.w = 1;
                    return q4fDestination;
                }
                var fInvLength = 1 / fLength;
                x *= fInvLength;
                y *= fInvLength;
                z *= fInvLength;
                var fSin = math.sin(fAngle / 2);
                var fCos = math.cos(fAngle / 2);
                q4fDestination.x = x * fSin;
                q4fDestination.y = y * fSin;
                q4fDestination.z = z * fSin;
                q4fDestination.w = fCos;
                return q4fDestination;
            };
            Quat4.fromYawPitchRoll = function fromYawPitchRoll(fYaw, fPitch, fRoll, q4fDestination) {
                if (arguments.length <= 2) {
                    var v3fVec = arguments[0];
                    fYaw = v3fVec.x;
                    fPitch = v3fVec.y;
                    fRoll = v3fVec.z;
                    q4fDestination = arguments[1];
                }
                if (!((q4fDestination) !== undefined)) {
                    q4fDestination = new Quat4();
                }
                var fHalfYaw = fYaw * 0.5;
                var fHalfPitch = fPitch * 0.5;
                var fHalfRoll = fRoll * 0.5;
                var fCos1 = math.cos(fHalfYaw), fSin1 = math.sin(fHalfYaw);
                var fCos2 = math.cos(fHalfPitch), fSin2 = math.sin(fHalfPitch);
                var fCos3 = math.cos(fHalfRoll), fSin3 = math.sin(fHalfRoll);
                q4fDestination.x = fCos1 * fSin2 * fCos3 + fSin1 * fCos2 * fSin3;
                q4fDestination.y = fSin1 * fCos2 * fCos3 - fCos1 * fSin2 * fSin3;
                q4fDestination.z = fCos1 * fCos2 * fSin3 - fSin1 * fSin2 * fCos3;
                q4fDestination.w = fCos1 * fCos2 * fCos3 + fSin1 * fSin2 * fSin3;
                return q4fDestination;
            };
            Quat4.fromXYZ = function fromXYZ(fX, fY, fZ, q4fDestination) {
                if (arguments.length <= 2) {
                    //Vec3 + m4fDestination
                    var v3fVec = arguments[0];
                    return Quat4.fromYawPitchRoll(v3fVec.y, v3fVec.x, v3fVec.z, arguments[1]);
                } else {
                    //fX fY fZ m4fDestination
                    var fX = arguments[0];
                    var fY = arguments[1];
                    var fZ = arguments[2];
                    return Quat4.fromYawPitchRoll(fY, fX, fZ, arguments[3]);
                }
            };
            Object.defineProperty(Quat4, "stackCeil", {
                get: function () {
                    Quat4.stackPosition = Quat4.stackPosition === Quat4.stackSize - 1 ? 0 : Quat4.stackPosition;
                    return Quat4.stack[Quat4.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Quat4.stackSize = 256;
            Quat4.stackPosition = 0;
            Quat4.stack = (function () {
                var pStack = new Array(Quat4.stackSize);
                for(var i = 0; i < Quat4.stackSize; i++) {
                    pStack[i] = new Quat4();
                }
                return pStack;
            })();
            return Quat4;
        })();
        math.Quat4 = Quat4;        
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
        //    export function vec2(): IVec2;
        //    export function vec2(fValue: float): IVec2;
        //    export function vec2(v2fVec: IVec2): IVec2;
        //    export function vec2(pArray: float[]): IVec2;
        //    export function vec2(fValue1: float, fValue2: float): IVec2;
        //    export function vec2(fValue1?, fValue2?): IVec2{
        //        var nArgumentsLength: uint = arguments.length;
        //        var v2fVec: IVec2 = Vec2.stack[Vec2.stackPosition ++];
        //        if(Vec2.stackPosition == Vec2.stackSize){
        //            Vec2.stackPosition = 0;
        //        }
        //        switch(nArgumentsLength){
        //            case 1:
        //                v2fVec.set(arguments[0]);
        //                break;
        //            case 2:
        //                v2fVec.set(arguments[0], arguments[1]);
        //                break;
        //            default:
        //                v2fVec.x = v2fVec.y = 0.;
        //                break;
        //        }
        //        return v2fVec;
        //    };
        //    export function vec3(): IVec3;
        //    export function vec3(fValue: float): IVec3;
        //    export function vec3(v3fVec: IVec3): IVec3;
        //    export function vec3(pArray: float[]): IVec3;
        //    export function vec3(fValue: float, v2fVec: IVec2): IVec3;
        //    export function vec3(v2fVec: IVec2, fValue: float): IVec3;
        //    export function vec3(fValue1: float, fValue2: float, fValue3: float): IVec3;
        //    export function vec3(fValue1?, fValue2?, fValue3?): IVec3{
        //        var nArgumentsLength: uint = arguments.length;
        //        var v3fVec: IVec3 = Vec3.stack[Vec3.stackPosition ++];
        //        if(Vec3.stackPosition == Vec3.stackSize){
        //            Vec3.stackPosition = 0;
        //        }
        //        switch(nArgumentsLength){
        //            case 1:
        //                v3fVec.set(arguments[0]);
        //                break;
        //            case 2:
        //                v3fVec.set(arguments[0], arguments[1]);
        //                break;
        //            case 3:
        //                v3fVec.set(arguments[0], arguments[1], arguments[2]);
        //                break;
        //            default:
        //                v3fVec.x = v3fVec.y = v3fVec.z = 0.;
        //                break;
        //        }
        //        return v3fVec;
        //    };
        //    export function vec4(): IVec4;
        //    export function vec4(fValue: float): IVec4;
        //    export function vec4(v4fVec: IVec4): IVec4;
        //    export function vec4(pArray: float[]): IVec4;
        //    export function vec4(fValue: float, v3fVec: IVec3): IVec4;
        //    export function vec4(v2fVec1: IVec2, v2fVec2: IVec2): IVec4;
        //    export function vec4(v3fVec: IVec3, fValue: float): IVec4;
        //    export function vec4(fValue1: float, fValue2: float, v2fVec: IVec2): IVec4;
        //    export function vec4(fValue1: float, v2fVec: IVec2, fValue2: float): IVec4;
        //    export function vec4(v2fVec: IVec2 ,fValue1: float, fValue2: float): IVec4;
        //    export function vec4(fValue1: float, fValue2: float, fValue3: float, fValue4: float): IVec4;
        //    export function vec4(fValue1?, fValue2?, fValue3?, fValue4?): IVec4{
        //        var nArgumentsLength: uint = arguments.length;
        //        var v4fVec: IVec4 = Vec4.stack[Vec4.stackPosition ++];
        //        if(Vec4.stackPosition == Vec4.stackSize){
        //            Vec4.stackPosition = 0;
        //        }
        //        switch(nArgumentsLength){
        //            case 1:
        //                v4fVec.set(arguments[0]);
        //                break;
        //            case 2:
        //                v4fVec.set(arguments[0],arguments[1]);
        //                break;
        //            case 3:
        //                v4fVec.set(arguments[0],arguments[1], arguments[2]);
        //                break;
        //            case 4:
        //                v4fVec.set(arguments[0],arguments[1], arguments[2], arguments[3]);
        //                break;
        //            default:
        //                v4fVec.x = v4fVec.y = v4fVec.z = v4fVec.w = 0.;
        //                break;
        //        }
        //        return v4fVec;
        //    };
        //    export function quat4(): IQuat4;
        // export function quat4(q4fQuat: IQuat4): IQuat4;
        // export function quat4(pArray: float[]): IQuat4;
        // export function quat4(fValue: float, fW: float): IQuat4;
        // export function quat4(v3fValue: IVec3, fW: float): IQuat4;
        // export function quat4(fX: float, fY: float, fZ: float, fW: float): IQuat4;
        // export function quat4(fX?, fY?, fZ?, fW?): IQuat4{
        // 	var nArgumentsLength: uint = arguments.length;
        // 	var q4fQuat: IQuat4 = Quat4.stack[Quat4.stackPosition ++];
        // 	if(Quat4.stackPosition == Quat4.stackSize){
        //            Quat4.stackPosition = 0;
        // 	}
        // 	switch(nArgumentsLength){
        // 		case 1:
        // 			q4fQuat.set(arguments[0]);
        // 			break;
        // 		case 2:
        // 			q4fQuat.set(arguments[0], arguments[1]);
        // 			break;
        // 		case 4:
        // 			q4fQuat.set(arguments[0], arguments[1], arguments[2], arguments[3]);
        // 			break;
        // 		default:
        // 			q4fQuat.x = q4fQuat.y = q4fQuat.z = 0.;
        // 			q4fQuat.w = 1.;
        // 			break;
        // 	}
        // 	return q4fQuat;
        // };
        // export function mat3(): IMat3;
        // export function mat3(fValue: float): IMat3;
        // export function mat3(v3fVec: IVec3): IMat3;
        // export function mat3(m3fMat: IMat3): IMat3;
        // export function mat3(m4fMat: IMat4): IMat3;
        // export function mat3(pArray: float[]): IMat3;
        // export function mat3(fValue1: float, fValue2: float, fValue3: float): IMat3;
        // export function mat3(v3fVec1: IVec3, v3fVec2: IVec3, v3fVec3: IVec3): IMat3;
        // export function mat3(pArray1: float[], pArray2: float[], pArray3: float[]): IMat3;
        // export function mat3(fValue1: float, fValue2: float, fValue3: float,
        // 			fValue4: float, fValue5: float, fValue6: float,
        // 			fValue7: float, fValue8: float, fValue9: float): IMat3;
        // export function mat3(fValue1?, fValue2?, fValue3?,
        // 			fValue4?, fValue5?, fValue6?,
        // 			fValue7?, fValue8?, fValue9?): IMat3{
        // 	var nArgumentsLength: uint = arguments.length;
        // 	var m3fMat: IMat3 = Mat3.stack[Mat3.stackPosition ++];
        //        if(Mat3.stackPosition == Mat3.stackSize){
        //            Mat3.stackPosition = 0;
        // 	}
        // 	switch(nArgumentsLength){
        // 		case 1:
        // 			m3fMat.set(arguments[0]);
        // 			break;
        // 		case 3:
        // 			m3fMat.set(arguments[0], arguments[1], arguments[2]);
        // 			break;
        // 		case 9:
        // 			m3fMat.set(arguments[0], arguments[1], arguments[2],
        // 					 arguments[3], arguments[4], arguments[5],
        // 					 arguments[6], arguments[7], arguments[8]);
        // 			break;
        // 		default:
        // 			m3fMat.set(0.);
        // 			break;
        // 	}
        // 	return m3fMat;
        // };
        // export function mat4(): IMat4;
        // export function mat4(fValue: float): IMat4;
        // export function mat4(v4fVec: IVec4): IMat4;
        // export function mat4(m3fMat: IMat3, v3fTranslation?: IVec3): IMat4;
        // export function mat4(m4fMat: IMat4): IMat4;
        // export function mat4(pArray: float[]): IMat4;
        // export function mat4(pArray: Float32Array, bFlag: bool): IMat4;
        // export function mat4(fValue1: float, fValue2: float,
        // 		fValue3: float, fValue4: float): IMat4;
        // export function mat4(v4fVec1: IVec4, v4fVec2: IVec4,
        // 		v4fVec3: IVec4, v4fVec4: IVec4): IMat4;
        // export function mat4(pArray1: float[], pArray2: float[],
        // 		pArray3: float[], pArray4: float[]): IMat4;
        // export function mat4(fValue1: float, fValue2: float, fValue3: float, fValue4: float,
        // 		fValue5: float, fValue6: float, fValue7: float, fValue8: float,
        // 		fValue9: float, fValue10: float, fValue11: float, fValue12: float,
        // 		fValue13: float, fValue14: float, fValue15: float, fValue16: float): IMat4;
        // export function mat4(fValue1?, fValue2?, fValue3?, fValue4?,
        // 			fValue5?, fValue6?, fValue7?, fValue8?,
        // 			fValue9?, fValue10?, fValue11?, fValue12?,
        // 			fValue13?, fValue14?, fValue15?, fValue16?): IMat4{
        // 	var nArgumentsLength: uint = arguments.length;
        // 	var m4fMat: IMat4 = Mat4.stack[Mat4.stackPosition ++];
        //        if(Mat4.stackPosition == Mat4.stackSize){
        //            Mat4.stackPosition = 0;
        // 	}
        // 	if(nArgumentsLength === 2){
        // 		if(isBoolean(arguments[1])){
        // 			if(arguments[1]){
        // 				m4fMat.data = arguments[0];
        // 			}
        // 			else{
        // 				m4fMat.set(arguments[0]);
        // 			}
        // 		}
        // 		else{
        // 			m4fMat.set(arguments[0], arguments[1]);
        // 		}
        // 	}
        // 	else{
        // 		switch(nArgumentsLength){
        // 			case 1:
        // 				if(arguments[0] instanceof Mat3){
        // 					m4fMat.set(arguments[0],vec3(0.));
        // 				}
        // 				else{
        // 					m4fMat.set(arguments[0]);
        // 				}
        // 				break;
        // 			case 4:
        // 				m4fMat.set(arguments[0],arguments[1],arguments[2],arguments[3]);
        // 				break;
        // 			case 16:
        // 				m4fMat.set(arguments[0], arguments[1], arguments[2], arguments[3],
        // 					 arguments[4], arguments[5], arguments[6], arguments[7],
        // 					 arguments[8], arguments[9], arguments[10], arguments[11],
        // 					 arguments[12], arguments[13], arguments[14], arguments[15]);
        // 				 break;
        // 			 default:
        // 			 	break;
        // 		}
        // 	}
        // 	return m4fMat;
        // };
        function floatToFloat3(value) {
            var data = value;
            var result = math.Vec3.stackCeil.set(0.);
            if (data == 0.) {
                var signedZeroTest = 1. / value;
                if (signedZeroTest < 0.) {
                    result.x = 128.;
                }
                return result;
            }
            if (data < 0.) {
                result.x = 128.;
                data = -data;
            }
            var power = 0.;
            var counter = 0.;
            while(counter < 64.) {
                counter += 1.;
                if (data >= 2.) {
                    data = data * 0.5;
                    power += 1.;
                    if (power == 63.) {
                        counter = 65.;
                    }
                } else {
                    if (data < 1.) {
                        data = data * 2.;
                        power -= 1.;
                        if (power == -62.) {
                            counter = 65.;
                        }
                    } else {
                        counter = 65.;
                    }
                }
            }
            if (power == -62. && data < 1.) {
                power = 0.;
            } else {
                power = power + 63.;
                data = data - 1.;
            }
            result.x += power;
            data *= 256.;
            result.y = math.floor(data);
            data -= math.floor(data);
            data *= 256.;
            result.z = math.floor(data);
            return result;
        }
        math.floatToFloat3 = floatToFloat3;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.Vec2 = akra.math.Vec2;
    akra.Vec3 = akra.math.Vec3;
    akra.Vec4 = akra.math.Vec4;
    akra.Mat3 = akra.math.Mat3;
    akra.Mat4 = akra.math.Mat4;
    akra.Quat4 = akra.math.Quat4;
    // export var vec2 = math.vec2;
    // export var vec3 = math.vec3;
    // export var vec4 = math.vec4;
    // export var quat4 = math.quat4;
    // export var mat3 = math.mat3;
    // export var mat4 = math.mat4;
    })(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ECompareFunction) {
        ECompareFunction._map = [];
        ECompareFunction._map[0] = "ALWAYS_FAIL";
        ECompareFunction.ALWAYS_FAIL = 0;
        ECompareFunction._map[1] = "ALWAYS_PASS";
        ECompareFunction.ALWAYS_PASS = 1;
        ECompareFunction._map[2] = "LESS";
        ECompareFunction.LESS = 2;
        ECompareFunction._map[3] = "LESS_EQUAL";
        ECompareFunction.LESS_EQUAL = 3;
        ECompareFunction._map[4] = "EQUAL";
        ECompareFunction.EQUAL = 4;
        ECompareFunction._map[5] = "NOT_EQUAL";
        ECompareFunction.NOT_EQUAL = 5;
        ECompareFunction._map[6] = "GREATER_EQUAL";
        ECompareFunction.GREATER_EQUAL = 6;
        ECompareFunction._map[7] = "GREATER";
        ECompareFunction.GREATER = 7;
    })(akra.ECompareFunction || (akra.ECompareFunction = {}));
    var ECompareFunction = akra.ECompareFunction;
    (function (ECullingMode) {
        ECullingMode._map = [];
        ECullingMode.NONE = 1;
        ECullingMode.CLOCKWISE = 2;
        ECullingMode.ANTICLOCKWISE = 3;
    })(akra.ECullingMode || (akra.ECullingMode = {}));
    var ECullingMode = akra.ECullingMode;
    (function (EFrameBufferTypes) {
        EFrameBufferTypes._map = [];
        EFrameBufferTypes.COLOR = 0x1;
        EFrameBufferTypes.DEPTH = 0x2;
        EFrameBufferTypes.STENCIL = 0x4;
    })(akra.EFrameBufferTypes || (akra.EFrameBufferTypes = {}));
    var EFrameBufferTypes = akra.EFrameBufferTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    //API SPECIFIFC CONSTANTS
    (function (EPrimitiveTypes) {
        EPrimitiveTypes._map = [];
        EPrimitiveTypes.POINTLIST = 0;
        EPrimitiveTypes._map[1] = "LINELIST";
        EPrimitiveTypes.LINELIST = 1;
        EPrimitiveTypes._map[2] = "LINELOOP";
        EPrimitiveTypes.LINELOOP = 2;
        EPrimitiveTypes._map[3] = "LINESTRIP";
        EPrimitiveTypes.LINESTRIP = 3;
        EPrimitiveTypes._map[4] = "TRIANGLELIST";
        EPrimitiveTypes.TRIANGLELIST = 4;
        EPrimitiveTypes._map[5] = "TRIANGLESTRIP";
        EPrimitiveTypes.TRIANGLESTRIP = 5;
        EPrimitiveTypes._map[6] = "TRIANGLEFAN";
        EPrimitiveTypes.TRIANGLEFAN = 6;
    })(akra.EPrimitiveTypes || (akra.EPrimitiveTypes = {}));
    var EPrimitiveTypes = akra.EPrimitiveTypes;
    ;
    (function (ERenderCapabilitiesCategory) {
        ERenderCapabilitiesCategory._map = [];
        ERenderCapabilitiesCategory.C_COMMON = 0;
        ERenderCapabilitiesCategory.C_COMMON_2 = 1;
        ERenderCapabilitiesCategory.C_WEBGL = 2;
        ERenderCapabilitiesCategory.COUNT = 3;
    })(akra.ERenderCapabilitiesCategory || (akra.ERenderCapabilitiesCategory = {}));
    var ERenderCapabilitiesCategory = akra.ERenderCapabilitiesCategory;
    (function (ERenderCapabilities) {
        ERenderCapabilities._map = [];
        ERenderCapabilities.AUTOMIPMAP = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 0));
        ERenderCapabilities.BLENDING = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 1));
        /// Supports anisotropic texture filtering
        ERenderCapabilities.ANISOTROPY = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 2));
        /// Supports fixed-function DOT3 texture blend
        ERenderCapabilities.DOT3 = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 3));
        /// Supports cube mapping
        ERenderCapabilities.CUBEMAPPING = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 4));
        /// Supports hardware stencil buffer
        ERenderCapabilities.HWSTENCIL = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 5));
        /// Supports hardware vertex and index buffers
        ERenderCapabilities.VBO = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 7));
        /// Supports vertex programs (vertex shaders)
        ERenderCapabilities.VERTEX_PROGRAM = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 9));
        /// Supports fragment programs (pixel shaders)
        ERenderCapabilities.FRAGMENT_PROGRAM = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 10));
        /// Supports performing a scissor test to exclude areas of the screen
        ERenderCapabilities.SCISSOR_TEST = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 11));
        /// Supports separate stencil updates for both front and back faces
        ERenderCapabilities.TWO_SIDED_STENCIL = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 12));
        /// Supports wrapping the stencil value at the range extremeties
        ERenderCapabilities.STENCIL_WRAP = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 13));
        /// Supports hardware occlusion queries
        ERenderCapabilities.HWOCCLUSION = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 14));
        /// Supports user clipping planes
        ERenderCapabilities.USER_CLIP_PLANES = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 15));
        /// Supports the VET_UBYTE4 vertex element type
        ERenderCapabilities.VERTEX_FORMAT_UBYTE4 = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 16));
        /// Supports infinite far plane projection
        ERenderCapabilities.INFINITE_FAR_PLANE = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 17));
        /// Supports hardware render-to-texture (bigger than framebuffer)
        ERenderCapabilities.HWRENDER_TO_TEXTURE = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 18));
        /// Supports float textures and render targets
        ERenderCapabilities.TEXTURE_FLOAT = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 19));
        /// Supports non-power of two textures
        ERenderCapabilities.NON_POWER_OF_2_TEXTURES = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 20));
        /// Supports 3d (volume) textures
        ERenderCapabilities.TEXTURE_3D = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 21));
        /// Supports basic point sprite rendering
        ERenderCapabilities.POINT_SPRITES = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 22));
        /// Supports extra point parameters (minsize, maxsize, attenuation)
        ERenderCapabilities.POINT_EXTENDED_PARAMETERS = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 23));
        /// Supports vertex texture fetch
        ERenderCapabilities.VERTEX_TEXTURE_FETCH = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 24));
        /// Supports mipmap LOD biasing
        ERenderCapabilities.MIPMAP_LOD_BIAS = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 25));
        /// Supports hardware geometry programs
        ERenderCapabilities.GEOMETRY_PROGRAM = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 26));
        /// Supports rendering to vertex buffers
        ERenderCapabilities.HWRENDER_TO_VERTEX_BUFFER = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 27));
        /// Supports compressed textures
        ERenderCapabilities.TEXTURE_COMPRESSION = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 0));
        /// Supports compressed textures in the DXT/ST3C formats
        ERenderCapabilities.TEXTURE_COMPRESSION_DXT = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 1));
        /// Supports compressed textures in the VTC format
        ERenderCapabilities.TEXTURE_COMPRESSION_VTC = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 2));
        /// Supports compressed textures in the PVRTC format
        ERenderCapabilities.TEXTURE_COMPRESSION_PVRTC = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 3));
        /// Supports fixed-function pipeline
        ERenderCapabilities.FIXED_FUNCTION = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 4));
        /// Supports MRTs with different bit depths
        ERenderCapabilities.MRT_DIFFERENT_BIT_DEPTHS = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 5));
        /// Supports Alpha to Coverage (A2C)
        ERenderCapabilities.ALPHA_TO_COVERAGE = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 6));
        /// Supports Blending operations other than +
        ERenderCapabilities.ADVANCED_BLEND_OPERATIONS = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 7));
        /// Supports a separate depth buffer for RTTs. D3D 9 & 10, OGL w/FBO (FBO implies this flag)
        ERenderCapabilities.RTT_SEPARATE_DEPTHBUFFER = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 8));
        /// Supports using the MAIN depth buffer for RTTs. D3D 9&10, OGL w/FBO support unknown
        /// (undefined behavior?), OGL w/ copy supports it
        ERenderCapabilities.RTT_MAIN_DEPTHBUFFER_ATTACHABLE = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 9));
        /// Supports attaching a depth buffer to an RTT that has width & height less or equal than RTT's.
        /// Otherwise must be of _exact_ same resolution. D3D 9, OGL 3.0 (not 2.0, not D3D10)
        ERenderCapabilities.RTT_DEPTHBUFFER_RESOLUTION_LESSEQUAL = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 10));
        /// Supports using vertex buffers for instance data
        ERenderCapabilities.VERTEX_BUFFER_INSTANCE_DATA = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 11));
        /// Supports using vertex buffers for instance data
        ERenderCapabilities.CAN_GET_COMPILED_SHADER_BUFFER = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 12));
        // ***** GL Specific Caps *****
        /// Supports openGL GLEW version 1.5
        ERenderCapabilities.GL1_5_NOVBO = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 1));
        /// Support for Frame Buffer Objects (FBOs)
        ERenderCapabilities.FBO = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 2));
        /// Support for Frame Buffer Objects ARB implementation (regular FBO is higher precedence)
        ERenderCapabilities.FBO_ARB = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 3));
        /// Support for Frame Buffer Objects ATI implementation (ARB FBO is higher precedence)
        ERenderCapabilities.FBO_ATI = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 4));
        /// Support for PBuffer
        ERenderCapabilities.PBUFFER = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 5));
        /// Support for GL 1.5 but without HW occlusion workaround
        ERenderCapabilities.GL1_5_NOHWOCCLUSION = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 6));
        /// Support for point parameters ARB implementation
        ERenderCapabilities.POINT_EXTENDED_PARAMETERS_ARB = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 7));
        /// Support for point parameters EXT implementation
        ERenderCapabilities.POINT_EXTENDED_PARAMETERS_EXT = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 8));
        /// Support for Separate Shader Objects
        ERenderCapabilities.SEPARATE_SHADER_OBJECTS = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 9));
    })(akra.ERenderCapabilities || (akra.ERenderCapabilities = {}));
    var ERenderCapabilities = akra.ERenderCapabilities;
    // export enum EGLSpecifics {
    //     UNPACK_ALIGNMENT = 0x0CF5,
    //     PACK_ALIGNMENT = 0x0D05,
    //     UNPACK_FLIP_Y_WEBGL = 0x9240,
    //     UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241,
    //     CONTEXT_LOST_WEBGL = 0x9242,
    //     UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243,
    //     BROWSER_DEFAULT_WEBGL = 0x9244
    // };
    // export enum EBufferMasks {
    //     DEPTH_BUFFER_BIT               = 0x00000100,
    //     STENCIL_BUFFER_BIT             = 0x00000400,
    //     COLOR_BUFFER_BIT               = 0x00004000
    // };
    // export enum EBufferUsages {
    //     STREAM_DRAW = 0x88E0,
    //     STATIC_DRAW = 0x88E4,
    //     DYNAMIC_DRAW = 0x88E8
    // };
    // export enum EBufferTypes {
    //     ARRAY_BUFFER = 0x8892,
    //     ELEMENT_ARRAY_BUFFER = 0x8893,
    //     FRAME_BUFFER = 0x8D40,
    //     RENDER_BUFFER = 0x8D41
    // };
    (function (EAttachmentTypes) {
        EAttachmentTypes._map = [];
        EAttachmentTypes.COLOR_ATTACHMENT0 = 0x8CE0;
        EAttachmentTypes.DEPTH_ATTACHMENT = 0x8D00;
        EAttachmentTypes.STENCIL_ATTACHMENT = 0x8D20;
        EAttachmentTypes.DEPTH_STENCIL_ATTACHMENT = 0x821A;
    })(akra.EAttachmentTypes || (akra.EAttachmentTypes = {}));
    var EAttachmentTypes = akra.EAttachmentTypes;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    // #define color(...) Color.stackCeil.set(__VA_ARGS__)
    (function (util) {
        var Color = (function () {
            function Color(r, g, b, a) {
                this.set.apply(this, arguments);
            }
            Object.defineProperty(Color.prototype, "html", {
                get: function () {
                    // LOG(this.r, this.g, this.b);
                    var r = akra.math.round(this.r * 255).toString(16);
                    var g = akra.math.round(this.g * 255).toString(16);
                    var b = akra.math.round(this.b * 255).toString(16);
                    r = r.length < 2 ? "0" + r : r;
                    g = g.length < 2 ? "0" + g : g;
                    b = b.length < 2 ? "0" + b : b;
                    // LOG(r, g, b);
                    return "#" + r + g + b;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "htmlRgba", {
                get: function () {
                    return "rgba(" + akra.math.floor(255 * this.r) + ", " + akra.math.floor(255 * this.g) + ", " + akra.math.floor(255 * this.b) + ", " + this.a + ")";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "rgba", {
                get: function () {
                    var val32 = 0;
                    // Convert to 32bit pattern
                    val32 = (this.a * 255) << 24;
                    val32 += (this.b * 255) << 16;
                    val32 += (this.g * 255) << 8;
                    val32 += (this.r * 255);
                    val32 = val32 >>> 0;
                    return val32;
                },
                set: function (c) {
                    var val32 = c;
                    // Convert from 32bit pattern
                    this.a = ((val32 >> 24) & 0xFF) / 255.0;
                    this.b = ((val32 >> 16) & 0xFF) / 255.0;
                    this.g = ((val32 >> 8) & 0xFF) / 255.0;
                    this.r = (val32 & 0xFF) / 255.0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "argb", {
                get: function () {
                    var val32 = 0;
                    // Convert to 32bit pattern
                    val32 = (this.b * 255) << 24;
                    val32 += (this.g * 255) << 16;
                    val32 += (this.r * 255) << 8;
                    val32 += (this.a * 255);
                    val32 = val32 >>> 0;
                    return val32;
                },
                set: function (c) {
                    var val32 = c;
                    // Convert from 32bit pattern
                    this.b = ((val32 >> 24) & 0xFF) / 255.0;
                    this.g = ((val32 >> 16) & 0xFF) / 255.0;
                    this.r = ((val32 >> 8) & 0xFF) / 255.0;
                    this.a = (val32 & 0xFF) / 255.0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "bgra", {
                get: function () {
                    var val32 = 0;
                    // Convert to 32bit pattern
                    val32 = (this.a * 255) << 24;
                    val32 += (this.r * 255) << 16;
                    val32 += (this.g * 255) << 8;
                    val32 += (this.b * 255);
                    val32 = val32 >>> 0;
                    return val32;
                },
                set: function (c) {
                    var val32 = c;
                    // Convert from 32bit pattern
                    this.a = ((val32 >> 24) & 0xFF) / 255.0;
                    this.r = ((val32 >> 16) & 0xFF) / 255.0;
                    this.g = ((val32 >> 8) & 0xFF) / 255.0;
                    this.b = (val32 & 0xFF) / 255.0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "abgr", {
                get: function () {
                    var val32 = 0;
                    // Convert to 32bit pattern
                    val32 = (this.r * 255) << 24;
                    val32 += (this.g * 255) << 16;
                    val32 += (this.b * 255) << 8;
                    val32 += (this.a * 255);
                    val32 = val32 >>> 0;
                    return val32;
                },
                set: function (c) {
                    var val32 = c;
                    // Convert from 32bit pattern
                    this.r = ((val32 >> 24) & 0xFF) / 255.0;
                    this.g = ((val32 >> 16) & 0xFF) / 255.0;
                    this.b = ((val32 >> 8) & 0xFF) / 255.0;
                    this.a = (val32 & 0xFF) / 255.0;
                },
                enumerable: true,
                configurable: true
            });
            Color.prototype.set = function (r, g, b, a) {
                switch(arguments.length) {
                    case 0:
                        this.r = this.g = this.b = 0.;
                        this.a = 1.;
                        break;
                    case 1:
                        if ((typeof (arguments[0]) === "number")) {
                            this.r = this.g = this.b = r;
                            this.a = 1.;
                        } else if (((arguments[0].buffer) !== undefined)) {
                            var c = arguments[0];
                            this.r = c[0];
                            this.g = c[1];
                            this.b = c[2];
                            this.a = c[3];
                        } else {
                            var v = arguments[0];
                            this.r = v.r;
                            this.g = v.g;
                            this.b = v.b;
                            this.a = v.a;
                        }
                        break;
                    case 2:
                        this.r = this.g = this.b = r;
                        this.a = g;
                        break;
                    case 3:
                    case 4:
                        this.r = r;
                        this.g = g;
                        this.b = b;
                        this.a = ((a) !== undefined) ? a : 1.;
                        break;
                }
                return this;
            };
            Color.prototype.saturate = function () {
                if (this.r < 0.) {
                    this.r = 0.;
                } else if (this.r > 1.) {
                    this.r = 1.;
                }
                if (this.g < 0.) {
                    this.g = 0.;
                } else if (this.g > 1.) {
                    this.g = 1.;
                }
                if (this.b < 0.) {
                    this.b = 0.;
                } else if (this.b > 1.) {
                    this.b = 1.;
                }
                if (this.a < 0.) {
                    this.a = 0.;
                } else if (this.a > 1.) {
                    this.a = 1.;
                }
                return this;
            };
            Color.prototype.saturateCopy = /** As saturate, except that this colour value is unaffected and
            the saturated colour value is returned as a copy. */
            function () {
                var ret = new Color(this);
                ret.saturate();
                return ret;
            };
            Color.prototype.add = function (cColor, ppDest) {
                if (typeof ppDest === "undefined") { ppDest = new Color(); }
                ppDest.r = this.r + cColor.r;
                ppDest.g = this.g + cColor.g;
                ppDest.b = this.b + cColor.b;
                ppDest.a = this.a + cColor.a;
                return ppDest;
            };
            Color.prototype.subtract = function (cColor, ppDest) {
                if (typeof ppDest === "undefined") { ppDest = new Color(); }
                ppDest.r = this.r - cColor.r;
                ppDest.g = this.g - cColor.g;
                ppDest.b = this.b - cColor.b;
                ppDest.a = this.a - cColor.a;
                return ppDest;
            };
            Color.prototype.multiply = function (fScalar, ppDest) {
                if (typeof ppDest === "undefined") { ppDest = new Color(); }
                if ((typeof (fScalar) === "number")) {
                    var f = fScalar;
                    ppDest.r = this.r * f;
                    ppDest.g = this.g * f;
                    ppDest.b = this.b * f;
                    ppDest.a = this.a * f;
                } else {
                    var c = arguments[0];
                    ppDest.r = this.r * c.r;
                    ppDest.g = this.g * c.g;
                    ppDest.b = this.b * c.b;
                    ppDest.a = this.a * c.a;
                }
                return ppDest;
            };
            Color.prototype.divide = function (fScalar, ppDest) {
                if (typeof ppDest === "undefined") { ppDest = new Color(); }
                if ((typeof (fScalar) === "number")) {
                    var f = fScalar;
                    ppDest.r = this.r / f;
                    ppDest.g = this.g / f;
                    ppDest.b = this.b / f;
                    ppDest.a = this.a / f;
                } else {
                    var c = arguments[0];
                    ppDest.r = this.r / c.r;
                    ppDest.g = this.g / c.g;
                    ppDest.b = this.b / c.b;
                    ppDest.a = this.a / c.a;
                }
                return ppDest;
            };
            Color.prototype.setHSB = function (fHue, fSaturation, fBrightness) {
                // wrap hue
                if (fHue > 1.0) {
                    fHue -= fHue;
                } else if (fHue < 0.0) {
                    fHue += fHue + 1;
                }
                // clamp saturation / fBrightness
                fSaturation = akra.math.min(fSaturation, 1.0);
                fSaturation = akra.math.max(fSaturation, 0.0);
                fBrightness = akra.math.min(fBrightness, 1.0);
                fBrightness = akra.math.max(fBrightness, 0.0);
                if (fBrightness == 0.0) {
                    // early exit, this has to be black
                    this.r = this.g = this.b = 0.0;
                    return;
                }
                if (fSaturation == 0.0) {
                    // early exit, this has to be grey
                    this.r = this.g = this.b = fBrightness;
                    return;
                }
                var fHueDomain = fHue * 6.0;
                if (fHueDomain >= 6.0) {
                    // wrap around, and allow mathematical errors
                    fHueDomain = 0.0;
                }
                var domain = fHueDomain;
                var f1 = fBrightness * (1 - fSaturation);
                var f2 = fBrightness * (1 - fSaturation * (fHueDomain - domain));
                var f3 = fBrightness * (1 - fSaturation * (1 - (fHueDomain - domain)));
                switch(domain) {
                    case 0:
                        // red domain; green ascends
                        this.r = fBrightness;
                        this.g = f3;
                        this.b = f1;
                        break;
                    case 1:
                        // yellow domain; red descends
                        this.r = f2;
                        this.g = fBrightness;
                        this.b = f1;
                        break;
                    case 2:
                        // green domain; blue ascends
                        this.r = f1;
                        this.g = fBrightness;
                        this.b = f3;
                        break;
                    case 3:
                        // cyan domain; green descends
                        this.r = f1;
                        this.g = f2;
                        this.b = fBrightness;
                        break;
                    case 4:
                        // blue domain; red ascends
                        this.r = f3;
                        this.g = f1;
                        this.b = fBrightness;
                        break;
                    case 5:
                        // magenta domain; blue descends
                        this.r = fBrightness;
                        this.g = f1;
                        this.b = f2;
                        break;
                }
                return this;
            };
            Color.prototype.getHSB = function (pHsb) {
                if (typeof pHsb === "undefined") { pHsb = [
                    0., 
                    0., 
                    0.
                ]; }
                var vMin = akra.math.min(this.r, akra.math.min(this.g, this.b));
                var vMax = akra.math.max(this.r, akra.math.max(this.g, this.b));
                var delta = vMax - vMin;
                var brightness = vMax;
                var hue = 0.;
                var saturation;
                if (akra.math.isRealEqual(delta, 0.0, 1e-6)) {
                    // grey
                    hue = 0.;
                    saturation = 0.;
                } else {
                    // a colour
                    saturation = delta / vMax;
                    var deltaR = (((vMax - this.r) / 6.0) + (delta / 2.0)) / delta;
                    var deltaG = (((vMax - this.g) / 6.0) + (delta / 2.0)) / delta;
                    var deltaB = (((vMax - this.b) / 6.0) + (delta / 2.0)) / delta;
                    if (akra.math.isRealEqual(this.r, vMax)) {
                        hue = deltaB - deltaG;
                    } else if (akra.math.isRealEqual(this.g, vMax)) {
                        hue = 0.3333333 + deltaR - deltaB;
                    } else if (akra.math.isRealEqual(this.b, vMax)) {
                        hue = 0.6666667 + deltaG - deltaR;
                    }
                    if (hue < 0.0) {
                        hue += 1.0;
                    }
                    if (hue > 1.0) {
                        hue -= 1.0;
                    }
                }
                pHsb[0] = hue;
                pHsb[1] = saturation;
                pHsb[2] = brightness;
                return pHsb;
            };
            Color.prototype.toString = function () {
                return "{R: " + this.r + ", G: " + this.g + ", B: " + this.b + ", A: " + this.a + "} " + "( 0x" + this.rgba.toString(16) + " )";
            };
            Color.toFloat32Array = function toFloat32Array(pValue) {
                var pArr = new Float32Array(4);
                pArr[0] = pValue.r;
                pArr[1] = pValue.g;
                pArr[2] = pValue.b;
                pArr[3] = pValue.a;
                return pArr;
            };
            Color.BLACK = new Color(0);
            Color.WHITE = new Color(0xFF, 0xFF, 0xFF);
            Color.ZERO = new Color(0., 0., 0., 0.);
            Color.isEqual = function isEqual(c1, c2) {
                return c1.r === c2.r && c1.g === c2.g && c1.b === c2.b && c1.a === c2.a;
            };
            Color.ALICE_BLUE = new Color(0xF0 / 255., 0xF8 / 255., 0xFF / 255.);
            Color.ANTIQUE_WHITE = new Color(0xFA / 255., 0xEB / 255., 0xD7 / 255.);
            Color.AQUA = new Color(0x00 / 255., 0xFF / 255., 0xFF / 255.);
            Color.AQUA_MARINE = new Color(0x7F / 255., 0xFF / 255., 0xD4 / 255.);
            Color.AZURE = new Color(0xF0 / 255., 0xFF / 255., 0xFF / 255.);
            Color.BEIGE = new Color(0xF5 / 255., 0xF5 / 255., 0xDC / 255.);
            Color.BISQUE = new Color(0xFF / 255., 0xE4 / 255., 0xC4 / 255.);
            Color.BLANCHED_ALMOND = new Color(0xFF / 255., 0xEB / 255., 0xCD / 255.);
            Color.BLUE = new Color(0x00 / 255., 0x00 / 255., 0xFF / 255.);
            Color.BLUE_VIOLET = new Color(0x8A / 255., 0x2B / 255., 0xE2 / 255.);
            Color.BROWN = new Color(0xA5 / 255., 0x2A / 255., 0x2A / 255.);
            Color.BURLY_WOOD = new Color(0xDE / 255., 0xB8 / 255., 0x87 / 255.);
            Color.CADET_BLUE = new Color(0x5F / 255., 0x9E / 255., 0xA0 / 255.);
            Color.CHARTREUSE = new Color(0x7F / 255., 0xFF / 255., 0x00 / 255.);
            Color.CHOCOLATE = new Color(0xD2 / 255., 0x69 / 255., 0x1E / 255.);
            Color.CORAL = new Color(0xFF / 255., 0x7F / 255., 0x50 / 255.);
            Color.CORNFLOWER_BLUE = new Color(0x64 / 255., 0x95 / 255., 0xED / 255.);
            Color.CORNSILK = new Color(0xFF / 255., 0xF8 / 255., 0xDC / 255.);
            Color.CRIMSON = new Color(0xDC / 255., 0x14 / 255., 0x3C / 255.);
            Color.CYAN = new Color(0x00 / 255., 0xFF / 255., 0xFF / 255.);
            Color.DARK_BLUE = new Color(0x00 / 255., 0x00 / 255., 0x8B / 255.);
            Color.DARK_CYAN = new Color(0x00 / 255., 0x8B / 255., 0x8B / 255.);
            Color.DARK_GOLDEN_ROD = new Color(0xB8 / 255., 0x86 / 255., 0x0B / 255.);
            Color.DARK_GRAY = new Color(0xA9 / 255., 0xA9 / 255., 0xA9 / 255.);
            Color.DARK_GREEN = new Color(0x00 / 255., 0x64 / 255., 0x00 / 255.);
            Color.DARK_KHAKI = new Color(0xBD / 255., 0xB7 / 255., 0x6B / 255.);
            Color.DARK_MAGENTA = new Color(0x8B / 255., 0x00 / 255., 0x8B / 255.);
            Color.DARK_OLIVE_GREEN = new Color(0x55 / 255., 0x6B / 255., 0x2F / 255.);
            Color.DARK_ORANGE = new Color(0xFF / 255., 0x8C / 255., 0x00 / 255.);
            Color.DARK_ORCHID = new Color(0x99 / 255., 0x32 / 255., 0xCC / 255.);
            Color.DARK_RED = new Color(0x8B / 255., 0x00 / 255., 0x00 / 255.);
            Color.DARK_SALMON = new Color(0xE9 / 255., 0x96 / 255., 0x7A / 255.);
            Color.DARK_SEA_GREEN = new Color(0x8F / 255., 0xBC / 255., 0x8F / 255.);
            Color.DARK_SLATE_BLUE = new Color(0x48 / 255., 0x3D / 255., 0x8B / 255.);
            Color.DARK_SLATE_GRAY = new Color(0x2F / 255., 0x4F / 255., 0x4F / 255.);
            Color.DARK_TURQUOISE = new Color(0x00 / 255., 0xCE / 255., 0xD1 / 255.);
            Color.DARK_VIOLET = new Color(0x94 / 255., 0x00 / 255., 0xD3 / 255.);
            Color.DEEP_PINK = new Color(0xFF / 255., 0x14 / 255., 0x93 / 255.);
            Color.DEEP_SKY_BLUE = new Color(0x00 / 255., 0xBF / 255., 0xFF / 255.);
            Color.DIM_GRAY = new Color(0x69 / 255., 0x69 / 255., 0x69 / 255.);
            Color.DIM_GREY = new Color(0x69 / 255., 0x69 / 255., 0x69 / 255.);
            Color.DODGER_BLUE = new Color(0x1E / 255., 0x90 / 255., 0xFF / 255.);
            Color.FIRE_BRICK = new Color(0xB2 / 255., 0x22 / 255., 0x22 / 255.);
            Color.FLORAL_WHITE = new Color(0xFF / 255., 0xFA / 255., 0xF0 / 255.);
            Color.FOREST_GREEN = new Color(0x22 / 255., 0x8B / 255., 0x22 / 255.);
            Color.FUCHSIA = new Color(0xFF / 255., 0x00 / 255., 0xFF / 255.);
            Color.GAINSBORO = new Color(0xDC / 255., 0xDC / 255., 0xDC / 255.);
            Color.GHOST_WHITE = new Color(0xF8 / 255., 0xF8 / 255., 0xFF / 255.);
            Color.GOLD = new Color(0xFF / 255., 0xD7 / 255., 0x00 / 255.);
            Color.GOLDEN_ROD = new Color(0xDA / 255., 0xA5 / 255., 0x20 / 255.);
            Color.GRAY = new Color(0x80 / 255., 0x80 / 255., 0x80 / 255.);
            Color.GREEN = new Color(0x00 / 255., 0x80 / 255., 0x00 / 255.);
            Color.GREEN_YELLOW = new Color(0xAD / 255., 0xFF / 255., 0x2F / 255.);
            Color.HONEY_DEW = new Color(0xF0 / 255., 0xFF / 255., 0xF0 / 255.);
            Color.HOT_PINK = new Color(0xFF / 255., 0x69 / 255., 0xB4 / 255.);
            Color.INDIAN_RED = new Color(0xCD / 255., 0x5C / 255., 0x5C / 255.);
            Color.INDIGO = new Color(0x4B / 255., 0x00 / 255., 0x82 / 255.);
            Color.IVORY = new Color(0xFF / 255., 0xFF / 255., 0xF0 / 255.);
            Color.KHAKI = new Color(0xF0 / 255., 0xE6 / 255., 0x8C / 255.);
            Color.LAVENDER = new Color(0xE6 / 255., 0xE6 / 255., 0xFA / 255.);
            Color.LAVENDER_BLUSH = new Color(0xFF / 255., 0xF0 / 255., 0xF5 / 255.);
            Color.LAWN_GREEN = new Color(0x7C / 255., 0xFC / 255., 0x00 / 255.);
            Color.LEMON_CHIFFON = new Color(0xFF / 255., 0xFA / 255., 0xCD / 255.);
            Color.LIGHT_BLUE = new Color(0xAD / 255., 0xD8 / 255., 0xE6 / 255.);
            Color.LIGHT_CORAL = new Color(0xF0 / 255., 0x80 / 255., 0x80 / 255.);
            Color.LIGHT_CYAN = new Color(0xE0 / 255., 0xFF / 255., 0xFF / 255.);
            Color.LIGHT_GOLDEN_ROD_YELLOW = new Color(0xFA / 255., 0xFA / 255., 0xD2 / 255.);
            Color.LIGHT_GRAY = new Color(0xD3 / 255., 0xD3 / 255., 0xD3 / 255.);
            Color.LIGHT_GREEN = new Color(0x90 / 255., 0xEE / 255., 0x90 / 255.);
            Color.LIGHT_PINK = new Color(0xFF / 255., 0xB6 / 255., 0xC1 / 255.);
            Color.LIGHT_SALMON = new Color(0xFF / 255., 0xA0 / 255., 0x7A / 255.);
            Color.LIGHT_SEA_GREEN = new Color(0x20 / 255., 0xB2 / 255., 0xAA / 255.);
            Color.LIGHT_SKY_BLUE = new Color(0x87 / 255., 0xCE / 255., 0xFA / 255.);
            Color.LIGHT_SLATE_GRAY = new Color(0x77 / 255., 0x88 / 255., 0x99 / 255.);
            Color.LIGHT_STEEL_BLUE = new Color(0xB0 / 255., 0xC4 / 255., 0xDE / 255.);
            Color.LIGHT_YELLOW = new Color(0xFF / 255., 0xFF / 255., 0xE0 / 255.);
            Color.LIME = new Color(0x00 / 255., 0xFF / 255., 0x00 / 255.);
            Color.LIME_GREEN = new Color(0x32 / 255., 0xCD / 255., 0x32 / 255.);
            Color.LINEN = new Color(0xFA / 255., 0xF0 / 255., 0xE6 / 255.);
            Color.MAGENTA = new Color(0xFF / 255., 0x00 / 255., 0xFF / 255.);
            Color.MAROON = new Color(0x80 / 255., 0x00 / 255., 0x00 / 255.);
            Color.MEDIUM_AQUA_MARINE = new Color(0x66 / 255., 0xCD / 255., 0xAA / 255.);
            Color.MEDIUM_BLUE = new Color(0x00 / 255., 0x00 / 255., 0xCD / 255.);
            Color.MEDIUM_ORCHID = new Color(0xBA / 255., 0x55 / 255., 0xD3 / 255.);
            Color.MEDIUM_PURPLE = new Color(0x93 / 255., 0x70 / 255., 0xDB / 255.);
            Color.MEDIUM_SEA_GREEN = new Color(0x3C / 255., 0xB3 / 255., 0x71 / 255.);
            Color.MEDIUM_SLATE_BLUE = new Color(0x7B / 255., 0x68 / 255., 0xEE / 255.);
            Color.MEDIUM_SPRING_GREEN = new Color(0x00 / 255., 0xFA / 255., 0x9A / 255.);
            Color.MEDIUM_TURQUOISE = new Color(0x48 / 255., 0xD1 / 255., 0xCC / 255.);
            Color.MEDIUM_VIOLET_RED = new Color(0xC7 / 255., 0x15 / 255., 0x85 / 255.);
            Color.MIDNIGHT_BLUE = new Color(0x19 / 255., 0x19 / 255., 0x70 / 255.);
            Color.MINT_CREAM = new Color(0xF5 / 255., 0xFF / 255., 0xFA / 255.);
            Color.MISTY_ROSE = new Color(0xFF / 255., 0xE4 / 255., 0xE1 / 255.);
            Color.MOCCASIN = new Color(0xFF / 255., 0xE4 / 255., 0xB5 / 255.);
            Color.NAVAJO_WHITE = new Color(0xFF / 255., 0xDE / 255., 0xAD / 255.);
            Color.NAVY = new Color(0x00 / 255., 0x00 / 255., 0x80 / 255.);
            Color.OLD_LACE = new Color(0xFD / 255., 0xF5 / 255., 0xE6 / 255.);
            Color.OLIVE = new Color(0x80 / 255., 0x80 / 255., 0x00 / 255.);
            Color.OLIVE_DRAB = new Color(0x6B / 255., 0x8E / 255., 0x23 / 255.);
            Color.ORANGE = new Color(0xFF / 255., 0xA5 / 255., 0x00 / 255.);
            Color.ORANGE_RED = new Color(0xFF / 255., 0x45 / 255., 0x00 / 255.);
            Color.ORCHID = new Color(0xDA / 255., 0x70 / 255., 0xD6 / 255.);
            Color.PALE_GOLDEN_ROD = new Color(0xEE / 255., 0xE8 / 255., 0xAA / 255.);
            Color.PALE_GREEN = new Color(0x98 / 255., 0xFB / 255., 0x98 / 255.);
            Color.PALE_TURQUOISE = new Color(0xAF / 255., 0xEE / 255., 0xEE / 255.);
            Color.PALE_VIOLET_RED = new Color(0xDB / 255., 0x70 / 255., 0x93 / 255.);
            Color.PAPAYA_WHIP = new Color(0xFF / 255., 0xEF / 255., 0xD5 / 255.);
            Color.PEACH_PUFF = new Color(0xFF / 255., 0xDA / 255., 0xB9 / 255.);
            Color.PERU = new Color(0xCD / 255., 0x85 / 255., 0x3F / 255.);
            Color.PINK = new Color(0xFF / 255., 0xC0 / 255., 0xCB / 255.);
            Color.PLUM = new Color(0xDD / 255., 0xA0 / 255., 0xDD / 255.);
            Color.POWDER_BLUE = new Color(0xB0 / 255., 0xE0 / 255., 0xE6 / 255.);
            Color.PURPLE = new Color(0x80 / 255., 0x00 / 255., 0x80 / 255.);
            Color.RED = new Color(0xFF / 255., 0x00 / 255., 0x00 / 255.);
            Color.ROSY_BROWN = new Color(0xBC / 255., 0x8F / 255., 0x8F / 255.);
            Color.ROYAL_BLUE = new Color(0x41 / 255., 0x69 / 255., 0xE1 / 255.);
            Color.SADDLE_BROWN = new Color(0x8B / 255., 0x45 / 255., 0x13 / 255.);
            Color.SALMON = new Color(0xFA / 255., 0x80 / 255., 0x72 / 255.);
            Color.SANDY_BROWN = new Color(0xF4 / 255., 0xA4 / 255., 0x60 / 255.);
            Color.SEA_GREEN = new Color(0x2E / 255., 0x8B / 255., 0x57 / 255.);
            Color.SEA_SHELL = new Color(0xFF / 255., 0xF5 / 255., 0xEE / 255.);
            Color.SIENNA = new Color(0xA0 / 255., 0x52 / 255., 0x2D / 255.);
            Color.SILVER = new Color(0xC0 / 255., 0xC0 / 255., 0xC0 / 255.);
            Color.SKY_BLUE = new Color(0x87 / 255., 0xCE / 255., 0xEB / 255.);
            Color.SLATE_BLUE = new Color(0x6A / 255., 0x5A / 255., 0xCD / 255.);
            Color.SLATE_GRAY = new Color(0x70 / 255., 0x80 / 255., 0x90 / 255.);
            Color.SNOW = new Color(0xFF / 255., 0xFA / 255., 0xFA / 255.);
            Color.SPRING_GREEN = new Color(0x00 / 255., 0xFF / 255., 0x7F / 255.);
            Color.STEEL_BLUE = new Color(0x46 / 255., 0x82 / 255., 0xB4 / 255.);
            Color.TAN = new Color(0xD2 / 255., 0xB4 / 255., 0x8C / 255.);
            Color.TEAL = new Color(0x00 / 255., 0x80 / 255., 0x80 / 255.);
            Color.THISTLE = new Color(0xD8 / 255., 0xBF / 255., 0xD8 / 255.);
            Color.TOMATO = new Color(0xFF / 255., 0x63 / 255., 0x47 / 255.);
            Color.TURQUOISE = new Color(0x40 / 255., 0xE0 / 255., 0xD0 / 255.);
            Color.VIOLET = new Color(0xEE / 255., 0x82 / 255., 0xEE / 255.);
            Color.WHEAT = new Color(0xF5 / 255., 0xDE / 255., 0xB3 / 255.);
            Color.WHITE_SMOKE = new Color(0xF5 / 255., 0xF5 / 255., 0xF5 / 255.);
            Color.YELLOW = new Color(0xFF / 255., 0xFF / 255., 0x00 / 255.);
            Color.YELLOW_GREEN = new Color(0x9A / 255., 0xCD / 255., 0x32 / 255.);
            Object.defineProperty(Color, "stackCeil", {
                get: function () {
                    Color.stackPosition = Color.stackPosition === Color.stackSize - 1 ? 0 : Color.stackPosition;
                    return Color.stack[Color.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Color.stackSize = 20;
            Color.stackPosition = 0;
            Color.stack = (function () {
                var pStack = new Array(Color.stackSize);
                for(var i = 0; i < Color.stackSize; i++) {
                    pStack[i] = new Color();
                }
                return pStack;
            })();
            return Color;
        })();
        util.Color = Color;        
        var pVariousColors = [
            "BLUE", 
            "BLUE_VIOLET", 
            "BROWN", 
            "CADET_BLUE", 
            "CHARTREUSE", 
            "CRIMSON", 
            "CYAN", 
            "DEEP_PINK", 
            "DEEP_SKY_BLUE", 
            "DODGER_BLUE", 
            "FIRE_BRICK", 
            "FUCHSIA", 
            "GOLD", 
            "GREEN", 
            "GREEN_YELLOW", 
            "HOT_PINK", 
            "LAWN_GREEN", 
            "LIME", 
            "LIME_GREEN", 
            "MAGENTA", 
            "MEDIUM_BLUE", 
            "MEDIUM_ORCHID", 
            "MEDIUM_SPRING_GREEN", 
            "MEDIUM_VIOLET_RED", 
            "ORANGE", 
            "ORANGE_RED", 
            "PURPLE", 
            "RED", 
            "SPRING_GREEN", 
            "STEEL_BLUE", 
            "TOMATO", 
            "TURQUOISE", 
            "VIOLET", 
            "WHEAT", 
            "YELLOW", 
            "YELLOW_GREEN"
        ];
        var iVariousColor = 0;
        function randomColor(bVarious) {
            if (typeof bVarious === "undefined") { bVarious = false; }
            if (!bVarious) {
                return new Color(Math.random(), Math.random(), Math.random(), 1.);
            }
            if (iVariousColor === pVariousColors.length) {
                iVariousColor = 0;
            }
            return (Color)[pVariousColors[iVariousColor++]] || Color.WHITE;
        }
        util.randomColor = randomColor;
        /** @inline */function colorToVec4(pValue) {
            return akra.Vec4.stackCeil.set(pValue.r, pValue.g, pValue.b, pValue.a);
        }
        util.colorToVec4 = colorToVec4;
        function color() {
            var argv = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                argv[_i] = arguments[_i + 0];
            }
            var pColor = Color.stackCeil;
            return pColor.set.apply(pColor, arguments);
        }
        util.color = color;
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.Color = akra.util.Color;
    akra.color = akra.util.color;
})(akra || (akra = {}));
var akra;
(function (akra) {
    // #define box(...) Box.stackCeil.setPosition(__VA_ARGS__)
    (function (geometry) {
        var Box = (function () {
            function Box(l, t, ff, r, b, bb) {
                if (typeof l === "undefined") { l = 0; }
                if (typeof t === "undefined") { t = 0; }
                if (typeof ff === "undefined") { ff = 0; }
                if (typeof r === "undefined") { r = 1; }
                if (typeof b === "undefined") { b = 1; }
                if (typeof bb === "undefined") { bb = 1; }
                this.left = 0;
                this.top = 0;
                this.front = 0;
                this.right = 0;
                this.bottom = 0;
                this.back = 0;
                switch(arguments.length) {
                    case 1:
                        this.left = arguments[0].left;
                        this.top = arguments[0].top;
                        this.front = arguments[0].front;
                        this.right = arguments[0].right;
                        this.bottom = arguments[0].bottom;
                        this.back = arguments[0].back;
                        break;
                    case 0:
                    case 3:
                    case 6:
                        this.left = l;
                        this.top = t;
                        this.front = ff;
                        this.right = r;
                        this.bottom = b;
                        this.back = bb;
                        break;
                    case 4:
                        this.left = l;
                        this.top = t;
                        this.right = ff;
                        this.bottom = r;
                        this.back = 1;
                        this.front = 0;
                        break;
                    case 5:
 {
                            akra.logger.setSourceLocation("geometry/Box.ts", 64);
                            akra.logger.error("invalid number of arguments");
                        }
                        ;
                }
 {
                    akra.logger.setSourceLocation("geometry/Box.ts", 67);
                    akra.logger.assert(this.right >= this.left && this.bottom >= this.top && this.back >= this.front);
                }
                ;
            }
            Object.defineProperty(Box.prototype, "width", {
                get: /** @inline */function () {
                    return this.right - this.left;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Box.prototype, "height", {
                get: /** @inline */function () {
                    return this.bottom - this.top;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Box.prototype, "depth", {
                get: /** @inline */function () {
                    return this.back - this.front;
                },
                enumerable: true,
                configurable: true
            });
            Box.prototype.contains = function (pDest) {
                return (pDest.left >= this.left && pDest.top >= this.top && pDest.front >= this.front && pDest.right <= this.right && pDest.bottom <= this.bottom && pDest.back <= this.back);
            };
            Box.prototype.setPosition = function (iLeft, iTop, iWidth, iHeight, iFront, iDepth) {
                if (typeof iFront === "undefined") { iFront = 0; }
                if (typeof iDepth === "undefined") { iDepth = 1; }
                this.left = iLeft;
                this.top = iTop;
                this.right = iLeft + iWidth;
                this.bottom = iTop + iHeight;
                this.front = iFront;
                this.back = iFront + iDepth;
            };
            Box.prototype.isEqual = function (pDest) {
                return (pDest.left == this.left && pDest.top == this.top && pDest.front == this.front && pDest.right == this.right && pDest.bottom == this.bottom && pDest.back == this.back);
            };
            Box.prototype.toString = function () {
                return "---------------------------\n" + "left: " + this.left + ", right: " + this.right + "\n" + "top: " + this.top + ", bottom: " + this.bottom + "\n" + "front: " + this.front + ", back: " + this.back + "\n" + "---------------------------";
            };
            Object.defineProperty(Box, "stackCeil", {
                get: function () {
                    Box.stackPosition = Box.stackPosition === Box.stackSize - 1 ? 0 : Box.stackPosition;
                    return Box.stack[Box.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Box.stackSize = 20;
            Box.stackPosition = 0;
            Box.stack = (function () {
                var pStack = new Array(Box.stackSize);
                for(var i = 0; i < Box.stackSize; i++) {
                    pStack[i] = new Box();
                }
                return pStack;
            })();
            return Box;
        })();
        geometry.Box = Box;        
                                                function box(l, t, ff, r, b, bb) {
            if (typeof l === "undefined") { l = 0; }
            if (typeof t === "undefined") { t = 0; }
            if (typeof ff === "undefined") { ff = 0; }
            if (typeof r === "undefined") { r = 1; }
            if (typeof b === "undefined") { b = 1; }
            if (typeof bb === "undefined") { bb = 1; }
            var pBox = Box.stack[Box.stackPosition++];
            if (Box.stackPosition === Box.stackSize) {
                Box.stackPosition = 0;
            }
            switch(arguments.length) {
                case 1:
                    pBox.setPosition(arguments[0].left, arguments[0].top, arguments[0].width, arguments[0].height, arguments[0].front, arguments[0].depth);
                    break;
                case 0:
                case 3:
                case 6:
                    pBox.setPosition(l, t, r - l, b - t, ff, bb - ff);
                    break;
                case 4:
                    pBox.setPosition(l, t, arguments[2] - l, arguments[3] - t, 0, 1);
                    break;
                default:
 {
                        akra.logger.setSourceLocation("geometry/Box.ts", 130);
                        akra.logger.error("Inavlid number of arguments");
                    }
                    ;
            }
            return pBox;
        }
        geometry.box = box;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    ;
    /**
    * Отражает состояние ресурса
    **/
    (function (EResourceItemEvents) {
        EResourceItemEvents._map = [];
        EResourceItemEvents._map[0] = "CREATED";
        //ресур создан
        EResourceItemEvents.CREATED = 0;
        EResourceItemEvents._map[1] = "LOADED";
        //ресур заполнен данным и готов к использованию
        EResourceItemEvents.LOADED = 1;
        EResourceItemEvents._map[2] = "DISABLED";
        //ресур в данный момент отключен для использования
        EResourceItemEvents.DISABLED = 2;
        EResourceItemEvents._map[3] = "ALTERED";
        //ресур был изменен после загрузки
        EResourceItemEvents.ALTERED = 3;
        EResourceItemEvents._map[4] = "TOTALRESOURCEFLAGS";
        EResourceItemEvents.TOTALRESOURCEFLAGS = 4;
    })(akra.EResourceItemEvents || (akra.EResourceItemEvents = {}));
    var EResourceItemEvents = akra.EResourceItemEvents;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EImageFlags) {
        EImageFlags._map = [];
        EImageFlags.COMPRESSED = 0x00000001;
        EImageFlags.CUBEMAP = 0x00000002;
        EImageFlags.TEXTURE_3D = 0x00000004;
    })(akra.EImageFlags || (akra.EImageFlags = {}));
    var EImageFlags = akra.EImageFlags;
    ;
    (function (EImageCubeFlags) {
        EImageCubeFlags._map = [];
        EImageCubeFlags.POSITIVE_X = 0x00000001;
        EImageCubeFlags.NEGATIVE_X = 0x00000002;
        EImageCubeFlags.POSITIVE_Y = 0x00000004;
        EImageCubeFlags.NEGATIVE_Y = 0x00000008;
        EImageCubeFlags.POSITIVE_Z = 0x000000010;
        EImageCubeFlags.NEGATIVE_Z = 0x000000020;
    })(akra.EImageCubeFlags || (akra.EImageCubeFlags = {}));
    var EImageCubeFlags = akra.EImageCubeFlags;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (pixelUtil) {
        var PixelBox = (function (_super) {
            __extends(PixelBox, _super);
            function PixelBox(iWidth, iHeight, iDepth, ePixelFormat, pPixelData) {
                if (typeof pPixelData === "undefined") { pPixelData = null; }
                if (arguments.length === 0) {
                                _super.call(this);
                    this.data = null;
                    this.format = akra.EPixelFormats.UNKNOWN;
                    this.setConsecutive();
                    return;
                }
                if (arguments.length >= 4) {
                                _super.call(this, 0, 0, 0, iWidth, iHeight, iDepth);
                    this.data = ((arguments[4]) !== undefined) ? (arguments[4]) : null;
                    this.format = arguments[3];
                } else {
                                _super.call(this, arguments[0]);
                    this.data = arguments[2];
                    this.format = arguments[1];
                }
                this.setConsecutive();
            }
            PixelBox.prototype.setConsecutive = function () {
                this.rowPitch = ((this).right - (this).left);
                this.slicePitch = ((this).right - (this).left) * ((this).bottom - (this).top);
            };
            PixelBox.prototype.getRowSkip = function () {
                return this.rowPitch - ((this).right - (this).left);
            };
            PixelBox.prototype.getSliceSkip = function () {
                return this.slicePitch - (((this).bottom - (this).top) * this.rowPitch);
            };
            PixelBox.prototype.isConsecutive = function () {
                return this.rowPitch == ((this).right - (this).left) && this.slicePitch == ((this).right - (this).left) * ((this).bottom - (this).top);
            };
            PixelBox.prototype.getConsecutiveSize = function () {
                return pixelUtil.getMemorySize(((this).right - (this).left), ((this).bottom - (this).top), ((this).back - (this).front), this.format);
            };
            PixelBox.prototype.getSubBox = function (pDest, pDestPixelBox) {
                if (typeof pDestPixelBox === "undefined") { pDestPixelBox = null; }
                if ((((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*//*checked (origin: pixelUtil)>>*/akra.pixelUtil.getDescriptionFor(((this.format))).flags) & /*checked (origin: akra)>>*/akra.EPixelFormatFlags.COMPRESSED) > 0)) {
                    if (pDest.left == this.left && pDest.top == this.top && pDest.front == this.front && pDest.right == this.right && pDest.bottom == this.bottom && pDest.back == this.back) {
                        // Entire buffer is being queried
                        return this;
                    }
 {
                        akra.logger.setSourceLocation("PixelBox.ts", 69);
                        akra.logger.error("Cannot return subvolume of compressed PixelBuffer", "PixelBox::getSubVolume");
                    }
                    ;
                }
                if (!this.contains(pDest)) {
 {
                        akra.logger.setSourceLocation("PixelBox.ts", 74);
                        akra.logger.error("Bounds out of range", "PixelBox::getSubVolume");
                    }
                    ;
                }
                var elemSize = (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*//*checked (origin: pixelUtil)>>*/akra.pixelUtil.getDescriptionFor((this.format)).elemBytes);
                // Calculate new data origin
                // Notice how we do not propagate left/top/front from the incoming box, since
                // the returned pointer is already offset
                var rval = null;
                if (((pDestPixelBox) === null)) {
                    rval = new PixelBox();
                } else {
                    rval = pDestPixelBox;
                }
                rval.setPosition(0, 0, pDest.width, pDest.height, 0, pDest.depth);
                rval.format = this.format;
                rval.data = (this.data).subarray(((pDest.left - this.left) * elemSize) + ((pDest.top - this.top) * this.rowPitch * elemSize) + ((pDest.front - this.front) * this.slicePitch * elemSize));
                rval.rowPitch = this.rowPitch;
                rval.slicePitch = this.slicePitch;
                rval.format = this.format;
                return rval;
            };
            PixelBox.prototype.getColorAt = function (pColor, x, y, z) {
                if (typeof z === "undefined") { z = 0; }
                if (((pColor) === null)) {
                    pColor = new akra.Color(0.);
                }
                var pixelSize = (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*//*checked (origin: pixelUtil)>>*/akra.pixelUtil.getDescriptionFor((this.format)).elemBytes);
                var pixelOffset = pixelSize * (z * this.slicePitch + y * this.rowPitch + x);
                pixelUtil.unpackColour(pColor, this.format, this.data.subarray(pixelOffset, pixelOffset + pixelSize));
                return pColor;
            };
            PixelBox.prototype.setColorAt = function (pColor, x, y, z) {
                if (typeof z === "undefined") { z = 0; }
                var pixelSize = (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*//*checked (origin: pixelUtil)>>*/akra.pixelUtil.getDescriptionFor((this.format)).elemBytes);
                var pixelOffset = pixelSize * (z * this.slicePitch + y * this.rowPitch + x);
                (/*checked (origin: pixelUtil)>>*/akra.pixelUtil.packColourFloat((pColor).r, (pColor).g, (pColor).b, (pColor).a, (this.format), (this.data.subarray(pixelOffset, pixelOffset + pixelSize))));
            };
            PixelBox.prototype.scale = function (pDest, eFilter) {
                if (typeof eFilter === "undefined") { eFilter = akra.EFilters.BILINEAR; }
                return false;
            };
            PixelBox.prototype.refresh = function (pExtents, ePixelFormat, pPixelData) {
                this.left = pExtents.left;
                this.top = pExtents.top;
                this.front = pExtents.front;
                this.right = pExtents.right;
                this.bottom = pExtents.bottom;
                this.back = pExtents.back;
                this.data = pPixelData;
                this.format = ePixelFormat;
                this.setConsecutive();
            };
            PixelBox.prototype.toString = function () {
                return "|---------------------------|\n" + _super.prototype.toString.call(this) + "\n" + "length: " + (this.data ? this.data.length : 0) + "\n" + "|---------------------------|";
            };
            Object.defineProperty(PixelBox, "stackCeil", {
                get: function () {
                    PixelBox.stackPosition = PixelBox.stackPosition === PixelBox.stackSize - 1 ? 0 : PixelBox.stackPosition;
                    return PixelBox.stack[PixelBox.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            PixelBox.stackSize = 20;
            PixelBox.stackPosition = 0;
            PixelBox.stack = (function () {
                var pStack = new Array(PixelBox.stackSize);
                for(var i = 0; i < PixelBox.stackSize; i++) {
                    pStack[i] = new PixelBox();
                }
                return pStack;
            })();
            return PixelBox;
        })(akra.geometry.Box);
        pixelUtil.PixelBox = PixelBox;        
                                function pixelBox() {
            var pPixelBox = PixelBox.stack[PixelBox.stackPosition++];
            if (PixelBox.stackPosition === PixelBox.stackSize) {
                PixelBox.stackPosition = 0;
            }
            var pBox = null;
            var pPixelData = null;
            var ePixelFormat = akra.EPixelFormats.UNKNOWN;
            switch(arguments.length) {
                case 2:
                case 3:
                    pBox = arguments[0];
                    ePixelFormat = arguments[1];
                    pPixelData = arguments[2] || null;
                    break;
                case 4:
                case 5:
                    pBox = akra.geometry.box(0, 0, 0, arguments[0], arguments[1], arguments[2]);
                    ePixelFormat = arguments[3];
                    pPixelData = arguments[4] || null;
                    break;
                default:
                    pBox = akra.geometry.box(0, 0, 0, 1, 1, 1);
                    break;
            }
            pPixelBox.refresh(pBox, ePixelFormat, pPixelData);
            return pPixelBox;
        }
        pixelUtil.pixelBox = pixelBox;
    })(akra.pixelUtil || (akra.pixelUtil = {}));
    var pixelUtil = akra.pixelUtil;
})(akra || (akra = {}));
var akra;
(function (akra) {
    function fillPixelFormats(pData) {
        var pPixelFormats = [];
        for(var i = 0; i < pData.length; ++i) {
            var pEl = pData[i];
            pPixelFormats.push({
                name: pEl[0],
                elemBytes: pEl[1],
                flags: pEl[2],
                componentType: pEl[3],
                componentCount: pEl[4],
                rbits: pEl[5],
                gbits: pEl[6],
                bbits: pEl[7],
                abits: pEl[8],
                rmask: pEl[9],
                gmask: pEl[10],
                bmask: pEl[11],
                amask: pEl[12],
                rshift: pEl[13],
                gshift: pEl[14],
                bshift: pEl[15],
                ashift: pEl[16]
            });
        }
        return pPixelFormats;
    }
    var pPixelFormats = fillPixelFormats([
        [
            "PF_UNKNOWN", 
            /* Bytes per element */
            0, 
            /* Flags */
            0, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            0, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //1-----------------------------------------------------------------------
        [
            "PF_L8", 
            /* Bytes per element */
            1, 
            /* Flags */
            akra.EPixelFormatFlags.LUMINANCE | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            1, 
            /* rbits, gbits, bbits, abits */
            8, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0xFF, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //2-----------------------------------------------------------------------
        [
            "PF_L16", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.LUMINANCE | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.SHORT, 
            1, 
            /* rbits, gbits, bbits, abits */
            16, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0xFFFF, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //3-----------------------------------------------------------------------
        [
            "PF_A8", 
            /* Bytes per element */
            1, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            1, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            8, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0xFF, 
            0, 
            0, 
            0, 
            0
        ], 
        //4-----------------------------------------------------------------------
        [
            "PF_A4L4", 
            /* Bytes per element */
            1, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.LUMINANCE | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            2, 
            /* rbits, gbits, bbits, abits */
            4, 
            0, 
            0, 
            4, 
            /* Masks and shifts */
            0x0F, 
            0, 
            0, 
            0xF0, 
            0, 
            0, 
            0, 
            4
        ], 
        //5-----------------------------------------------------------------------
        [
            "PF_BYTE_LA", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.LUMINANCE, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            2, 
            /* rbits, gbits, bbits, abits */
            8, 
            0, 
            0, 
            8, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //6-----------------------------------------------------------------------
        [
            "PF_R5G6B5", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            5, 
            6, 
            5, 
            0, 
            /* Masks and shifts */
            0xF800, 
            0x07E0, 
            0x001F, 
            0, 
            11, 
            5, 
            0, 
            0
        ], 
        //7-----------------------------------------------------------------------
        [
            "PF_B5G6R5", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            5, 
            6, 
            5, 
            0, 
            /* Masks and shifts */
            0x001F, 
            0x07E0, 
            0xF800, 
            0, 
            0, 
            5, 
            11, 
            0
        ], 
        //8-----------------------------------------------------------------------
        [
            "PF_A4R4G4B4", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            4, 
            4, 
            4, 
            4, 
            /* Masks and shifts */
            0x0F00, 
            0x00F0, 
            0x000F, 
            0xF000, 
            8, 
            4, 
            0, 
            12
        ], 
        //9-----------------------------------------------------------------------
        [
            "PF_A1R5G5B5", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            5, 
            5, 
            5, 
            1, 
            /* Masks and shifts */
            0x7C00, 
            0x03E0, 
            0x001F, 
            0x8000, 
            10, 
            5, 
            0, 
            15, 
            
        ], 
        //10-----------------------------------------------------------------------
        [
            "PF_R8G8B8", 
            /* Bytes per element */
            /* 24 bit integer -- special*/
            3, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            0, 
            /* Masks and shifts */
            0xFF0000, 
            0x00FF00, 
            0x0000FF, 
            0, 
            16, 
            8, 
            0, 
            0
        ], 
        //11-----------------------------------------------------------------------
        [
            "PF_B8G8R8", 
            /* Bytes per element */
            /* 24 bit integer -- special*/
            3, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            0, 
            /* Masks and shifts */
            0x0000FF, 
            0x00FF00, 
            0xFF0000, 
            0, 
            0, 
            8, 
            16, 
            0
        ], 
        //12-----------------------------------------------------------------------
        [
            "PF_A8R8G8B8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            8, 
            /* Masks and shifts */
            0x00FF0000, 
            0x0000FF00, 
            0x000000FF, 
            0xFF000000, 
            16, 
            8, 
            0, 
            24
        ], 
        //13-----------------------------------------------------------------------
        [
            "PF_A8B8G8R8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            8, 
            /* Masks and shifts */
            0x000000FF, 
            0x0000FF00, 
            0x00FF0000, 
            0xFF000000, 
            0, 
            8, 
            16, 
            24, 
            
        ], 
        //14-----------------------------------------------------------------------
        [
            "PF_B8G8R8A8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            8, 
            /* Masks and shifts */
            0x0000FF00, 
            0x00FF0000, 
            0xFF000000, 
            0x000000FF, 
            8, 
            16, 
            24, 
            0
        ], 
        //15-----------------------------------------------------------------------
        [
            "PF_A2R10G10B10", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            10, 
            10, 
            10, 
            2, 
            /* Masks and shifts */
            0x3FF00000, 
            0x000FFC00, 
            0x000003FF, 
            0xC0000000, 
            20, 
            10, 
            0, 
            30
        ], 
        //16-----------------------------------------------------------------------
        [
            "PF_A2B10G10R10", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            10, 
            10, 
            10, 
            2, 
            /* Masks and shifts */
            0x000003FF, 
            0x000FFC00, 
            0x3FF00000, 
            0xC0000000, 
            0, 
            10, 
            20, 
            30
        ], 
        //17-----------------------------------------------------------------------
        [
            "PF_DXT1", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            /* No alpha*/
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //18-----------------------------------------------------------------------
        [
            "PF_DXT2", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //19-----------------------------------------------------------------------
        [
            "PF_DXT3", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //20-----------------------------------------------------------------------
        [
            "PF_DXT4", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //21-----------------------------------------------------------------------
        [
            "PF_DXT5", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //22-----------------------------------------------------------------------
        [
            "PF_FLOAT16_RGB", 
            /* Bytes per element */
            6, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT16, 
            3, 
            /* rbits, gbits, bbits, abits */
            16, 
            16, 
            16, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //23-----------------------------------------------------------------------
        [
            "PF_FLOAT16_RGBA", 
            /* Bytes per element */
            8, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT16, 
            4, 
            /* rbits, gbits, bbits, abits */
            16, 
            16, 
            16, 
            16, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //24-----------------------------------------------------------------------
        [
            "PF_FLOAT32_RGB", 
            /* Bytes per element */
            12, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT32, 
            3, 
            /* rbits, gbits, bbits, abits */
            32, 
            32, 
            32, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //25-----------------------------------------------------------------------
        [
            "PF_FLOAT32_RGBA", 
            /* Bytes per element */
            16, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT32, 
            4, 
            /* rbits, gbits, bbits, abits */
            32, 
            32, 
            32, 
            32, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //26-----------------------------------------------------------------------
        [
            "PF_X8R8G8B8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            0, 
            /* Masks and shifts */
            0x00FF0000, 
            0x0000FF00, 
            0x000000FF, 
            0xFF000000, 
            16, 
            8, 
            0, 
            24
        ], 
        //27-----------------------------------------------------------------------
        [
            "PF_X8B8G8R8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            0, 
            /* Masks and shifts */
            0x000000FF, 
            0x0000FF00, 
            0x00FF0000, 
            0xFF000000, 
            0, 
            8, 
            16, 
            24
        ], 
        //28-----------------------------------------------------------------------
        [
            "PF_R8G8B8A8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA | akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            8, 
            8, 
            /* Masks and shifts */
            0xFF000000, 
            0x00FF0000, 
            0x0000FF00, 
            0x000000FF, 
            24, 
            16, 
            8, 
            0
        ], 
        //29-----------------------------------------------------------------------
        [
            "PF_FLOAT32_DEPTH", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.DEPTH, 
            /* Component type and count */
            /* ?*/
            akra.EPixelComponentTypes.FLOAT32, 
            1, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //30-----------------------------------------------------------------------
        [
            "PF_SHORT_RGBA", 
            /* Bytes per element */
            8, 
            /* Flags */
            akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.SHORT, 
            4, 
            /* rbits, gbits, bbits, abits */
            16, 
            16, 
            16, 
            16, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //31-----------------------------------------------------------------------
        [
            "PF_R3G3B2", 
            /* Bytes per element */
            1, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            3, 
            3, 
            2, 
            0, 
            /* Masks and shifts */
            0xE0, 
            0x1C, 
            0x03, 
            0, 
            5, 
            2, 
            0, 
            0
        ], 
        //32-----------------------------------------------------------------------
        [
            "PF_FLOAT16_R", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT16, 
            1, 
            /* rbits, gbits, bbits, abits */
            16, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //33-----------------------------------------------------------------------
        [
            "PF_FLOAT32_R", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT32, 
            1, 
            /* rbits, gbits, bbits, abits */
            32, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //34-----------------------------------------------------------------------
        [
            "PF_SHORT_GR", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.SHORT, 
            2, 
            /* rbits, gbits, bbits, abits */
            16, 
            16, 
            0, 
            0, 
            /* Masks and shifts */
            0x0000FFFF, 
            0xFFFF0000, 
            0, 
            0, 
            0, 
            16, 
            0, 
            0
        ], 
        //35-----------------------------------------------------------------------
        [
            "PF_FLOAT16_GR", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT16, 
            2, 
            /* rbits, gbits, bbits, abits */
            16, 
            16, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //36-----------------------------------------------------------------------
        [
            "PF_FLOAT32_GR", 
            /* Bytes per element */
            8, 
            /* Flags */
            akra.EPixelFormatFlags.FLOAT, 
            /* Component type and count */
            akra.EPixelComponentTypes.FLOAT32, 
            2, 
            /* rbits, gbits, bbits, abits */
            32, 
            32, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //37-----------------------------------------------------------------------
        [
            "PF_SHORT_RGB", 
            /* Bytes per element */
            6, 
            /* Flags */
            0, 
            /* Component type and count */
            akra.EPixelComponentTypes.SHORT, 
            3, 
            /* rbits, gbits, bbits, abits */
            16, 
            16, 
            16, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //38-----------------------------------------------------------------------
        [
            "PF_PVRTC_RGB2", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //39-----------------------------------------------------------------------
        [
            "PF_PVRTC_RGBA2", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //40-----------------------------------------------------------------------
        [
            "PF_PVRTC_RGB4", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            3, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //41-----------------------------------------------------------------------
        [
            "PF_PVRTC_RGBA4", 
            /* Bytes per element */
            0, 
            /* Flags */
            akra.EPixelFormatFlags.COMPRESSED | akra.EPixelFormatFlags.HASALPHA, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            4, 
            /* rbits, gbits, bbits, abits */
            0, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //42-----------------------------------------------------------------------
        [
            "PF_R8", 
            /* Bytes per element */
            1, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            1, 
            /* rbits, gbits, bbits, abits */
            8, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0xFF0000, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //43-----------------------------------------------------------------------
        [
            "PF_RG8", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.NATIVEENDIAN, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            2, 
            /* rbits, gbits, bbits, abits */
            8, 
            8, 
            0, 
            0, 
            /* Masks and shifts */
            0xFF0000, 
            0x00FF00, 
            0, 
            0, 
            8, 
            0, 
            0, 
            0
        ], 
        //44-----------------------------------------------------------------------
        [
            "PF_DEPTH_BYTE", 
            /* Bytes per element */
            1, 
            /* Flags */
            akra.EPixelFormatFlags.DEPTH, 
            /* Component type and count */
            akra.EPixelComponentTypes.BYTE, 
            1, 
            /* rbits, gbits, bbits, abits */
            8, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0xFF, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //45-----------------------------------------------------------------------
        [
            "PF_DEPTH_SHORT", 
            /* Bytes per element */
            2, 
            /* Flags */
            akra.EPixelFormatFlags.DEPTH, 
            /* Component type and count */
            akra.EPixelComponentTypes.SHORT, 
            1, 
            /* rbits, gbits, bbits, abits */
            16, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0xFFFF, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //46-----------------------------------------------------------------------
        [
            "PF_DEPTH_INT", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.DEPTH, 
            /* Component type and count */
            akra.EPixelComponentTypes.INT, 
            1, 
            /* rbits, gbits, bbits, abits */
            32, 
            0, 
            0, 
            0, 
            /* Masks and shifts */
            0xFFFFFFFF, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        //47-----------------------------------------------------------------------
        [
            "PF_DEPTH24STENCIL8", 
            /* Bytes per element */
            4, 
            /* Flags */
            akra.EPixelFormatFlags.DEPTH | akra.EPixelFormatFlags.STENCIL, 
            /* Component type and count */
            akra.EPixelComponentTypes.INT, 
            1, 
            /* rbits, gbits, bbits, abits */
            24, 
            8, 
            0, 
            0, 
            /* Masks and shifts */
            0x00FFFFFF, 
            0xFF000000, 
            0, 
            0, 
            0, 
            24, 
            0, 
            0
        ], 
        
    ]);
    var _pColorValue = {
        r: 0.,
        g: 0.,
        b: 0.,
        a: 1.
    };
    (function (pixelUtil) {
        /** @inline */function getDescriptionFor(eFmt) {
            var ord = eFmt;
 {
                akra.logger.setSourceLocation("pixelUtil/pixelUtil.ts", 736);
                akra.logger.assert(ord >= 0 && ord < akra.EPixelFormats.TOTAL, "getDescriptionFor:" + ord);
            }
            ;
            return pPixelFormats[ord];
        }
        pixelUtil.getDescriptionFor = getDescriptionFor;
        /** Returns the size in bytes of an element of the given pixel format.
        @return
        The size in bytes of an element. See Remarks.
        @remarks
        Passing PF_UNKNOWN will result in returning a size of 0 bytes.
        */
        /** @inline */function getNumElemBytes(eFormat) {
            return /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(eFormat).elemBytes;
        }
        pixelUtil.getNumElemBytes = getNumElemBytes;
        /** Returns the size in bits of an element of the given pixel format.
        @return
        The size in bits of an element. See Remarks.
        @remarks
        Passing PF_UNKNOWN will result in returning a size of 0 bits.
        */
        /** @inline */function getNumElemBits(eFormat) {
            return /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(eFormat).elemBytes * 8;
        }
        pixelUtil.getNumElemBits = getNumElemBits;
        /** Returns the size in memory of a region with the given extents and pixel
        format with consecutive memory layout.
        @param width
        The width of the area
        @param height
        The height of the area
        @param depth
        The depth of the area
        @param format
        The format of the area
        @return
        The size in bytes
        @remarks
        In case that the format is non-compressed, this simply returns
        width*height*depth*PixelUtil::getNumElemBytes(format). In the compressed
        case, this does serious magic.
        */
        function getMemorySize(iWidth, iHeight, iDepth, eFormat) {
            if ((((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(((eFormat))).flags) & /*checked (origin: akra)>>*/akra.EPixelFormatFlags.COMPRESSED) > 0)) {
                switch(eFormat) {
                    case // DXT formats work by dividing the image into 4x4 blocks, then encoding each
                    // 4x4 block with a certain number of bytes.
                    akra.EPixelFormats.DXT1:
                        return Math.floor((iWidth + 3) / 4) * Math.floor((iHeight + 3) / 4) * 8 * iDepth;
                    case akra.EPixelFormats.DXT2:
                    case akra.EPixelFormats.DXT3:
                    case akra.EPixelFormats.DXT4:
                    case akra.EPixelFormats.DXT5:
                        return Math.floor((iWidth + 3) / 4) * Math.floor((iHeight + 3) / 4) * 16 * iDepth;
                        // Size calculations from the PVRTC OpenGL extension spec
                        // http://www.khronos.org/registry/gles/extensions/IMG/IMG_texture_compression_pvrtc.txt
                        // Basically, 32 bytes is the minimum texture size.  Smaller textures are padded up to 32 bytes
                                            case akra.EPixelFormats.PVRTC_RGB2:
                    case akra.EPixelFormats.PVRTC_RGBA2:
 {
                            akra.logger.setSourceLocation("pixelUtil/pixelUtil.ts", 798);
                            akra.logger.assert(iDepth == 1);
                        }
                        ;
                        return (akra.math.max(iWidth, 16) * akra.math.max(iHeight, 8) * 2 + 7) / 8;
                    case akra.EPixelFormats.PVRTC_RGB4:
                    case akra.EPixelFormats.PVRTC_RGBA4:
 {
                            akra.logger.setSourceLocation("pixelUtil/pixelUtil.ts", 802);
                            akra.logger.assert(iDepth == 1);
                        }
                        ;
                        return (akra.math.max(iWidth, 8) * akra.math.max(iHeight, 8) * 4 + 7) / 8;
                    default:
 {
                            akra.logger.setSourceLocation("pixelUtil/pixelUtil.ts", 805);
                            akra.logger.error("Invalid compressed pixel format", "PixelUtil::getMemorySize");
                        }
                        ;
                }
            } else {
                return iWidth * iHeight * iDepth * (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((eFormat)).elemBytes);
            }
        }
        pixelUtil.getMemorySize = getMemorySize;
        /** Returns the property flags for this pixel format
        @return
        A bitfield combination of PFF_HASALPHA, PFF_ISCOMPRESSED,
        PFF_FLOAT, PFF_DEPTH, PFF_NATIVEENDIAN, PFF_LUMINANCE
        @remarks
        This replaces the separate functions for formatHasAlpha, formatIsFloat, ...
        */
        /** @inline */function getFlags(eFormat) {
            return /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(eFormat).flags;
        }
        pixelUtil.getFlags = getFlags;
        /** Shortcut method to determine if the format has an alpha component */
        /** @inline */function hasAlpha(eFormat) {
            return ((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((eFormat)).flags) & akra.EPixelFormatFlags.HASALPHA) > 0;
        }
        pixelUtil.hasAlpha = hasAlpha;
        /** Shortcut method to determine if the format is floating point */
        /** @inline */function isFloatingPoint(eFormat) {
            return ((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((eFormat)).flags) & akra.EPixelFormatFlags.FLOAT) > 0;
        }
        pixelUtil.isFloatingPoint = isFloatingPoint;
        /** Shortcut method to determine if the format is compressed */
        /** @inline */function isCompressed(eFormat) {
            return ((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((eFormat)).flags) & akra.EPixelFormatFlags.COMPRESSED) > 0;
        }
        pixelUtil.isCompressed = isCompressed;
        /** Shortcut method to determine if the format is a depth format. */
        /** @inline */function isDepth(eFormat) {
            return ((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((eFormat)).flags) & akra.EPixelFormatFlags.DEPTH) > 0;
        }
        pixelUtil.isDepth = isDepth;
        /** Shortcut method to determine if the format is in native endian format. */
        /** @inline */function isNativeEndian(eFormat) {
            return ((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((eFormat)).flags) & akra.EPixelFormatFlags.NATIVEENDIAN) > 0;
        }
        pixelUtil.isNativeEndian = isNativeEndian;
        /** Shortcut method to determine if the format is a luminance format. */
        /** @inline */function isLuminance(eFormat) {
            return ((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((eFormat)).flags) & akra.EPixelFormatFlags.LUMINANCE) > 0;
        }
        pixelUtil.isLuminance = isLuminance;
        /** Return wether a certain image extent is valid for this image format.
        @param width
        The width of the area
        @param height
        The height of the area
        @param depth
        The depth of the area
        @param format
        The format of the area
        @remarks For non-compressed formats, this is always true. For DXT formats,
        only sizes with a width and height multiple of 4 and depth 1 are allowed.
        */
        function isValidExtent(iWidth, iHeight, iDepth, eFormat) {
            if ((((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(((eFormat))).flags) & /*checked (origin: akra)>>*/akra.EPixelFormatFlags.COMPRESSED) > 0)) {
                switch(eFormat) {
                    case akra.EPixelFormats.DXT1:
                    case akra.EPixelFormats.DXT2:
                    case akra.EPixelFormats.DXT3:
                    case akra.EPixelFormats.DXT4:
                    case akra.EPixelFormats.DXT5:
                        return ((iWidth & 3) == 0 && (iHeight & 3) == 0 && iDepth == 1);
                    default:
                        return true;
                }
            } else {
                return true;
            }
        }
        pixelUtil.isValidExtent = isValidExtent;
        /** Gives the number of bits (RGBA) for a format. See remarks.
        @remarks      For non-colour formats (dxt, depth) this returns [0,0,0,0].
        */
        function getBitDepths(eFormat) {
            /**@const*/ var des = /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(eFormat);
            var rgba = [];
            rgba[0] = des.rbits;
            rgba[1] = des.gbits;
            rgba[2] = des.bbits;
            rgba[3] = des.abits;
            return rgba;
        }
        pixelUtil.getBitDepths = getBitDepths;
        /** Gives the masks for the R, G, B and A component
        @note			Only valid for native endian formats
        */
        function getBitMasks(eFormat) {
            /**@const*/ var des = /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(eFormat);
            var rgba = [];
            rgba[0] = des.rmask;
            rgba[1] = des.gmask;
            rgba[2] = des.bmask;
            rgba[3] = des.amask;
            return rgba;
        }
        pixelUtil.getBitMasks = getBitMasks;
        /** Gives the bit shifts for R, G, B and A component
        @note			Only valid for native endian formats
        */
        function getBitShifts(eFormat) {
            /**@const*/ var des = /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(eFormat);
            var rgba = [];
            rgba[0] = des.rshift;
            rgba[1] = des.gshift;
            rgba[2] = des.bshift;
            rgba[3] = des.ashift;
            return rgba;
        }
        pixelUtil.getBitShifts = getBitShifts;
        /** Gets the name of an image format
        */
        /** @inline */function getFormatName(eSrcFormat) {
            return /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(eSrcFormat).name;
        }
        pixelUtil.getFormatName = getFormatName;
        /** Returns wether the format can be packed or unpacked with the packColour()
        and unpackColour() functions. This is generally not true for compressed and
        depth formats as they are special. It can only be true for formats with a
        fixed element size.
        @return
        true if yes, otherwise false
        */
        function isAccessible(eSrcFormat) {
            if (eSrcFormat == akra.EPixelFormats.UNKNOWN) {
                return false;
            }
            var flags = (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((eSrcFormat)).flags);
            return !((flags & akra.EPixelFormatFlags.COMPRESSED) || (flags & akra.EPixelFormatFlags.DEPTH));
        }
        pixelUtil.isAccessible = isAccessible;
        /** Returns the component type for a certain pixel format. Returns PCT_BYTE
        in case there is no clear component type like with compressed formats.
        This is one of PCT_BYTE, PCT_SHORT, PCT_FLOAT16, PCT_FLOAT32.
        */
        /** @inline */function getComponentType(eFmt) {
            return /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(eFmt).componentType;
        }
        pixelUtil.getComponentType = getComponentType;
        /** Returns the component count for a certain pixel format. Returns 3(no alpha) or
        4 (has alpha) in case there is no clear component type like with compressed formats.
        */
        /** @inline */function getComponentCount(eFmt) {
            return /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(eFmt).componentCount;
        }
        pixelUtil.getComponentCount = getComponentCount;
        /** @inline */function getComponentTypeBits(eFormat) {
            var eType = (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((eFormat)).componentType);
            switch(eType) {
                case /*Byte per component (8 bit fixed 0.0..1.0)*/
                akra.EPixelComponentTypes.BYTE:
                    return 8;
                    /*Short per component (16 bit fixed 0.0..1.0))*/
                                    case akra.EPixelComponentTypes.SHORT:
                    return 16;
                    /*16 bit float per component*/
                                    case akra.EPixelComponentTypes.FLOAT16:
                    return 16;
                    /*32 bit float per component*/
                                    case akra.EPixelComponentTypes.FLOAT32:
                    return 32;
            }
            return 0;
        }
        pixelUtil.getComponentTypeBits = getComponentTypeBits;
        /** Gets the format from given name.
        @param  name            The string of format name
        @param  accessibleOnly  If true, non-accessible format will treat as invalid format,
        otherwise, all supported format are valid.
        @param  caseSensitive   Should be set true if string match should use case sensitivity.
        @return                The format match the format name, or PF_UNKNOWN if is invalid name.
        */
        function getFormatFromName(sName, isAccessibleOnly, isCaseSensitive) {
            if (typeof isAccessibleOnly === "undefined") { isAccessibleOnly = false; }
            if (typeof isCaseSensitive === "undefined") { isCaseSensitive = false; }
            var tmp = sName;
            if (!isCaseSensitive) {
                // We are stored upper-case format names.
                tmp = tmp.toUpperCase();
            }
            for(var i = 0; i < akra.EPixelFormats.TOTAL; ++i) {
                var ePf = i;
                if (!isAccessibleOnly || isAccessible(ePf)) {
                    if (tmp == (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((ePf)).name)) {
                        return ePf;
                    }
                }
            }
            return akra.EPixelFormats.UNKNOWN;
        }
        pixelUtil.getFormatFromName = getFormatFromName;
        /** Gets the BNF expression of the pixel-formats.
        @note                   The string returned by this function is intended to be used as a BNF expression
        to work with Compiler2Pass.
        @param  accessibleOnly  If true, only accessible pixel format will take into account, otherwise all
        pixel formats list in EPixelFormats enumeration will being returned.
        @return                A string contains the BNF expression.
        */
        function getBNFExpressionOfPixelFormats(isAccessibleOnly) {
            if (typeof isAccessibleOnly === "undefined") { isAccessibleOnly = false; }
            // Collect format names sorted by length, it's required by BNF compiler
            // that similar tokens need longer ones comes first.
            var formatNames = new Array();
            for(var i = 0; i < akra.EPixelFormats.TOTAL; ++i) {
                var ePf = (i);
                if (!isAccessibleOnly || isAccessible(ePf)) {
                    var formatName = (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((ePf)).name);
                    formatNames.push({
                        first: formatName.length,
                        second: formatName
                    });
                }
            }
            // Populate the BNF expression in reverse order
            var result = "";
            // Note: Stupid M$ VC7.1 can't dealing operator!= with FormatNameMap::const_reverse_iterator.
            for(var j in formatNames) {
                if (!((result).length == 0)) {
                    result += " | ";
                }
                result += "'" + formatNames[j] + "'";
            }
            return result;
        }
        pixelUtil.getBNFExpressionOfPixelFormats = getBNFExpressionOfPixelFormats;
        /** Returns the similar format but acoording with given bit depths.
        @param fmt      The original foamt.
        @param integerBits Preferred bit depth (pixel bits) for integer pixel format.
        Available values: 0, 16 and 32, where 0 (the default) means as it is.
        @param floatBits Preferred bit depth (channel bits) for float pixel format.
        Available values: 0, 16 and 32, where 0 (the default) means as it is.
        @return        The format that similar original format with bit depth according
        with preferred bit depth, or original format if no conversion occurring.
        */
        function getFormatForBitDepths(eFmt, iIntegerBits, iFloatBits) {
            switch(iIntegerBits) {
                case 16:
                    switch(eFmt) {
                        case akra.EPixelFormats.R8G8B8:
                        case akra.EPixelFormats.X8R8G8B8:
                            return akra.EPixelFormats.R5G6B5;
                        case akra.EPixelFormats.B8G8R8:
                        case akra.EPixelFormats.X8B8G8R8:
                            return akra.EPixelFormats.B5G6R5;
                        case akra.EPixelFormats.A8R8G8B8:
                        case akra.EPixelFormats.R8G8B8A8:
                        case akra.EPixelFormats.A8B8G8R8:
                        case akra.EPixelFormats.B8G8R8A8:
                            return akra.EPixelFormats.A4R4G4B4;
                        case akra.EPixelFormats.A2R10G10B10:
                        case akra.EPixelFormats.A2B10G10R10:
                            return akra.EPixelFormats.A1R5G5B5;
                        default:
                            // use original image format
                            break;
                    }
                    break;
                case 32:
                    switch(eFmt) {
                        case akra.EPixelFormats.R5G6B5:
                            return akra.EPixelFormats.X8R8G8B8;
                        case akra.EPixelFormats.B5G6R5:
                            return akra.EPixelFormats.X8B8G8R8;
                        case akra.EPixelFormats.A4R4G4B4:
                            return akra.EPixelFormats.A8R8G8B8;
                        case akra.EPixelFormats.A1R5G5B5:
                            return akra.EPixelFormats.A2R10G10B10;
                        default:
                            // use original image format
                            break;
                    }
                    break;
                default:
                    // use original image format
                    break;
            }
            switch(iFloatBits) {
                case 16:
                    switch(eFmt) {
                        case akra.EPixelFormats.FLOAT32_R:
                            return akra.EPixelFormats.FLOAT16_R;
                        case akra.EPixelFormats.FLOAT32_RGB:
                            return akra.EPixelFormats.FLOAT16_RGB;
                        case akra.EPixelFormats.FLOAT32_RGBA:
                            return akra.EPixelFormats.FLOAT16_RGBA;
                        default:
                            // use original image format
                            break;
                    }
                    break;
                case 32:
                    switch(eFmt) {
                        case akra.EPixelFormats.FLOAT16_R:
                            return akra.EPixelFormats.FLOAT32_R;
                        case akra.EPixelFormats.FLOAT16_RGB:
                            return akra.EPixelFormats.FLOAT32_RGB;
                        case akra.EPixelFormats.FLOAT16_RGBA:
                            return akra.EPixelFormats.FLOAT32_RGBA;
                        default:
                            // use original image format
                            break;
                    }
                    break;
                default:
                    // use original image format
                    break;
            }
            return eFmt;
        }
        pixelUtil.getFormatForBitDepths = getFormatForBitDepths;
        /** Pack a colour value to memory
        @param colour	The colour
        @param pf		Pixelformat in which to write the colour
        @param dest		Destination memory location
        */
        /** @inline */function packColour(cColour, ePf, pDest) {
            packColourFloat(cColour.r, cColour.g, cColour.b, cColour.a, ePf, pDest);
        }
        pixelUtil.packColour = packColour;
        /** Pack a colour value to memory
        @param r,g,b,a	The four colour components, range 0x00 to 0xFF
        @param pf		Pixelformat in which to write the colour
        @param dest		Destination memory location
        */
        function packColourUint(r, g, b, a, ePf, pDest) {
            // if (arguments.length < 4) {
            // 	var cColour: IColor = arguments[0];
            // 	packColour(cColour.r, cColour.g, cColour.b, cColour.a, ePf, pDest);
            // 	return;
            // }
            /**@const*/ var des = /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(ePf);
            if (des.flags & akra.EPixelFormatFlags.NATIVEENDIAN) {
                // Shortcut for integer formats packing
                var value = ((/*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.fixedToFixed(r, 8, des.rbits) << des.rshift) & des.rmask) | ((/*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.fixedToFixed(g, 8, des.gbits) << des.gshift) & des.gmask) | ((/*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.fixedToFixed(b, 8, des.bbits) << des.bshift) & des.bmask) | ((/*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.fixedToFixed(a, 8, des.abits) << des.ashift) & des.amask);
                // And write to memory
                /*not inlined, because first statement is not return/call/dot(cur st.: Switch)*/akra.bf.intWrite(pDest, des.elemBytes, value);
            } else {
                // Convert to float
                packColourFloat(r / 255.0, g / 255.0, b / 255.0, a / 255.0, ePf, pDest);
            }
        }
        pixelUtil.packColourUint = packColourUint;
        /** Pack a colour value to memory
        @param r,g,b,a	The four colour components, range 0.0f to 1.0f
        (an exception to this case exists for floating point pixel
        formats, which don't clamp to 0.0f..1.0f)
        @param pf		Pixelformat in which to write the colour
        @param dest		Destination memory location
        */
        function packColourFloat(r, g, b, a, ePf, pDest) {
            // Catch-it-all here
            /**@const*/ var des = /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(ePf);
            if (des.flags & akra.EPixelFormatFlags.NATIVEENDIAN) {
                // Do the packing
                //std::cerr << dest << " " << r << " " << g <<  " " << b << " " << a << std::endl;
                /**@const*/ var value = ((/*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(r, des.rbits) << des.rshift) & des.rmask) | ((/*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(g, des.gbits) << des.gshift) & des.gmask) | ((/*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(b, des.bbits) << des.bshift) & des.bmask) | ((/*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(a, des.abits) << des.ashift) & des.amask);
                // And write to memory
                /*not inlined, because first statement is not return/call/dot(cur st.: Switch)*/akra.bf.intWrite(pDest, des.elemBytes, value);
            } else {
                switch(ePf) {
                    case akra.EPixelFormats.FLOAT32_R:
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 1))[0] = r;
                        break;
                    case akra.EPixelFormats.FLOAT32_GR:
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 1))[0] = g;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 2))[1] = r;
                        break;
                    case akra.EPixelFormats.FLOAT32_RGB:
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 1))[0] = r;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 2))[1] = g;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 3))[2] = b;
                        break;
                    case akra.EPixelFormats.FLOAT32_RGBA:
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 1))[0] = r;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 2))[1] = g;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 3))[2] = b;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 4))[3] = a;
                        break;
                    case akra.EPixelFormats.FLOAT16_R:
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.floatToHalf(r);
                        break;
                    case akra.EPixelFormats.FLOAT16_GR:
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.floatToHalf(g);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.floatToHalf(r);
                        break;
                    case akra.EPixelFormats.FLOAT16_RGB:
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.floatToHalf(r);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.floatToHalf(g);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 3))[2] = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.floatToHalf(b);
                        break;
                    case akra.EPixelFormats.FLOAT16_RGBA:
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.floatToHalf(r);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.floatToHalf(g);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 3))[2] = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.floatToHalf(b);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 4))[3] = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.floatToHalf(a);
                        break;
                    case akra.EPixelFormats.SHORT_RGB:
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(r, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(g, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 3))[2] = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(b, 16);
                        break;
                    case akra.EPixelFormats.SHORT_RGBA:
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(r, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(g, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 3))[2] = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(b, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 4))[3] = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(a, 16);
                        break;
                    case akra.EPixelFormats.BYTE_LA:
                        pDest[0] = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(r, 8);
                        pDest[1] = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(a, 8);
                        break;
                    default:
                        // Not yet supported
                         {
                            akra.logger.setSourceLocation("pixelUtil/pixelUtil.ts", 1249);
                            akra.logger.error("pack to " + (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((ePf)).name) + " not implemented", "PixelUtil::packColour");
                        }
                        ;
                        break;
                }
            }
        }
        pixelUtil.packColourFloat = packColourFloat;
        /** Unpack a colour value from memory
        @param colour	The colour is returned here
        @param pf		Pixelformat in which to read the colour
        @param src		Source memory location
        */
        function unpackColour(cColour, ePf, pSrc) {
            unpackColourFloat(cColour, ePf, pSrc);
        }
        pixelUtil.unpackColour = unpackColour;
        /** Unpack a colour value from memory
        @param r,g,b,a	The colour is returned here (as byte)
        @param pf		Pixelformat in which to read the colour
        @param src		Source memory location
        @remarks 	This function returns the colour components in 8 bit precision,
        this will lose precision when coming from PF_A2R10G10B10 or floating
        point formats.
        */
        function unpackColourUint(rgba, ePf, pSrc) {
            /**@const*/ var des = /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(ePf);
            var r = 0, g = 0, b = 0, a = 0;
            if (des.flags & akra.EPixelFormatFlags.NATIVEENDIAN) {
                // Shortcut for integer formats unpacking
                /**@const*/ var value = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.intRead(pSrc, des.elemBytes);
                if (des.flags & akra.EPixelFormatFlags.LUMINANCE) {
                    // Luminance format -- only rbits used
                    r = g = b = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.fixedToFixed((value & des.rmask) >> des.rshift, des.rbits, 8);
                } else {
                    r = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.fixedToFixed((value & des.rmask) >> des.rshift, des.rbits, 8);
                    g = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.fixedToFixed((value & des.gmask) >> des.gshift, des.gbits, 8);
                    b = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.fixedToFixed((value & des.bmask) >> des.bshift, des.bbits, 8);
                }
                if (des.flags & akra.EPixelFormatFlags.HASALPHA) {
                    a = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.fixedToFixed((value & des.amask) >> des.ashift, des.abits, 8);
                } else {
                    /* No alpha, default a component to full*/
                    a = 255;
                }
            } else {
                // Do the operation with the more generic floating point
                var pRGBA = _pColorValue;
                unpackColourFloat(pRGBA, ePf, pSrc);
                r = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(pRGBA.r, 8);
                g = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(pRGBA.g, 8);
                b = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(pRGBA.b, 8);
                a = /*not inlined, because first statement is not return/call/dot(cur st.: If)*/akra.bf.floatToFixed(pRGBA.a, 8);
            }
            rgba[0] = r;
            rgba[1] = g;
            rgba[2] = b;
            rgba[3] = a;
        }
        pixelUtil.unpackColourUint = unpackColourUint;
        /** Unpack a colour value from memory
        @param r,g,b,a	The colour is returned here (as float)
        @param pf		Pixelformat in which to read the colour
        @param src		Source memory location
        */
        function unpackColourFloat(rgba, ePf, pSrc) {
            /**@const*/ var des = /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(ePf);
            var r = 0., g = 0., b = 0., a = 0.;
            if (des.flags & akra.EPixelFormatFlags.NATIVEENDIAN) {
                // Shortcut for integer formats unpacking
                /**@const*/ var value = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.intRead(pSrc, des.elemBytes);
                if (des.flags & akra.EPixelFormatFlags.LUMINANCE) {
                    // Luminance format -- only rbits used
                    r = g = b = ((((value & des.rmask) >>> des.rshift) & ((1 << (des.rbits)) - 1)) / ((1 << (des.rbits)) - 1));
                } else {
                    r = ((((value & des.rmask) >>> des.rshift) & ((1 << (des.rbits)) - 1)) / ((1 << (des.rbits)) - 1));
                    g = ((((value & des.gmask) >>> des.gshift) & ((1 << (des.gbits)) - 1)) / ((1 << (des.gbits)) - 1));
                    b = ((((value & des.bmask) >>> des.bshift) & ((1 << (des.bbits)) - 1)) / ((1 << (des.bbits)) - 1));
                }
                if (des.flags & akra.EPixelFormatFlags.HASALPHA) {
                    a = ((((value & des.amask) >>> des.ashift) & ((1 << (des.abits)) - 1)) / ((1 << (des.abits)) - 1));
                } else {
                    /* No alpha, default a component to full*/
                    a = 1.0;
                }
            } else {
                switch(ePf) {
                    case akra.EPixelFormats.FLOAT32_DEPTH:
                    case akra.EPixelFormats.FLOAT32_R:
                        r = g = b = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 1))[0];
                        a = 1.0;
                        break;
                    case akra.EPixelFormats.FLOAT32_GR:
                        g = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 1))[0];
                        r = b = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 2))[1];
                        a = 1.0;
                        break;
                    case akra.EPixelFormats.FLOAT32_RGB:
                        r = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 1))[0];
                        g = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 2))[1];
                        b = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 3))[2];
                        a = 1.0;
                        break;
                    case akra.EPixelFormats.FLOAT32_RGBA:
                        r = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 1))[0];
                        g = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 2))[1];
                        b = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 3))[2];
                        a = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 4))[3];
                        break;
                    case akra.EPixelFormats.FLOAT16_R:
                        r = g = b = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]);
                        a = 1.0;
                        break;
                    case akra.EPixelFormats.FLOAT16_GR:
                        g = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]);
                        r = b = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[1]);
                        a = 1.0;
                        break;
                    case akra.EPixelFormats.FLOAT16_RGB:
                        r = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]);
                        g = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[1]);
                        b = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[2]);
                        a = 1.0;
                        break;
                    case akra.EPixelFormats.FLOAT16_RGBA:
                        r = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]);
                        g = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[1]);
                        b = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 3))[2]);
                        a = /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/akra.bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 4))[3]);
                        break;
                    case akra.EPixelFormats.SHORT_RGB:
                        r = ((((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]) & ((1 << (16)) - 1)) / ((1 << (16)) - 1));
                        g = ((((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[1]) & ((1 << (16)) - 1)) / ((1 << (16)) - 1));
                        b = ((((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 3))[2]) & ((1 << (16)) - 1)) / ((1 << (16)) - 1));
                        a = 1.0;
                        break;
                    case akra.EPixelFormats.SHORT_RGBA:
                        r = ((((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]) & ((1 << (16)) - 1)) / ((1 << (16)) - 1));
                        g = ((((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[1]) & ((1 << (16)) - 1)) / ((1 << (16)) - 1));
                        b = ((((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 3))[2]) & ((1 << (16)) - 1)) / ((1 << (16)) - 1));
                        a = ((((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 4))[3]) & ((1 << (16)) - 1)) / ((1 << (16)) - 1));
                        break;
                    case akra.EPixelFormats.BYTE_LA:
                        r = g = b = ((((pSrc)[0]) & ((1 << (8)) - 1)) / ((1 << (8)) - 1));
                        a = ((((pSrc)[1]) & ((1 << (8)) - 1)) / ((1 << (8)) - 1));
                        break;
                    default:
                        // Not yet supported
                         {
                            akra.logger.setSourceLocation("pixelUtil/pixelUtil.ts", 1421);
                            akra.logger.error("unpack from " + (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((ePf)).name) + " not implemented", "PixelUtil::unpackColour");
                        }
                        ;
                        break;
                }
            }
            rgba.r = r;
            rgba.g = g;
            rgba.b = b;
            rgba.a = a;
        }
        pixelUtil.unpackColourFloat = unpackColourFloat;
                        function bulkPixelConversion(pSrc, eSrcFormat, pDest, eDstFormat, iCount) {
            var src = null, dst = null;
            if (arguments.length > 2) {
                src = new pixelUtil.PixelBox(iCount, 1, 1, eSrcFormat, pSrc);
                dst = new pixelUtil.PixelBox(iCount, 1, 1, eDstFormat, pDest);
            } else {
                src = arguments[0];
                dst = arguments[1];
            }
            if (src.width !== dst.width || src.height !== dst.height || src.depth !== dst.depth) {
 {
                    akra.logger.setSourceLocation("pixelUtil/pixelUtil.ts", 1469);
                    akra.logger.criticalError("Size dest and src pictures is different");
                }
                ;
                return;
            }
            // Check for compressed formats, we don't support decompression, compression or recoding
            if ((((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(((src.format))).flags) & /*checked (origin: akra)>>*/akra.EPixelFormatFlags.COMPRESSED) > 0) || (((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(((dst.format))).flags) & /*checked (origin: akra)>>*/akra.EPixelFormatFlags.COMPRESSED) > 0)) {
                if (src.format == dst.format) {
                    //_memcpy(dst.data.buffer, src.data.buffer, src.getConsecutiveSize());
                    dst.data.set(src.data.subarray(0, src.getConsecutiveSize()));
                    return;
                } else {
 {
                        akra.logger.setSourceLocation("pixelUtil/pixelUtil.ts", 1482);
                        akra.logger.error("This method can not be used to compress or decompress images", "PixelUtil::bulkPixelConversion");
                    }
                    ;
                }
            }
            // The easy case
            if (src.format == dst.format) {
                // Everything consecutive?
                if (src.isConsecutive() && dst.isConsecutive()) {
                    //_memcpy(dst.data.buffer, src.data.buffer, src.getConsecutiveSize());
                    dst.data.set(src.data.subarray(0, src.getConsecutiveSize()));
                    return;
                }
                var srcPixelSize = (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((src.format)).elemBytes);
                var dstPixelSize = (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((dst.format)).elemBytes);
                var srcptr = src.data.subarray((src.left + src.top * src.rowPitch + src.front * src.slicePitch) * srcPixelSize);
                var dstptr = dst.data.subarray((dst.left + dst.top * dst.rowPitch + dst.front * dst.slicePitch) * dstPixelSize);
                // Calculate pitches+skips in bytes
                var srcRowPitchBytes = src.rowPitch * srcPixelSize;
                //var size_t srcRowSkipBytes = src.getRowSkip()*srcPixelSize;
                var srcSliceSkipBytes = src.getSliceSkip() * srcPixelSize;
                var dstRowPitchBytes = dst.rowPitch * dstPixelSize;
                //var size_t dstRowSkipBytes = dst.getRowSkip()*dstPixelSize;
                var dstSliceSkipBytes = dst.getSliceSkip() * dstPixelSize;
                // Otherwise, copy per row
                /**@const*/ var rowSize = src.width * srcPixelSize;
                for(var z = src.front; z < src.back; z++) {
                    for(var y = src.top; y < src.bottom; y++) {
                        //_memcpy(dstptr.buffer, srcptr.buffer, rowSize);
                        dstptr.set(srcptr.subarray(0, rowSize));
                        srcptr = srcptr.subarray(srcRowPitchBytes);
                        dstptr = dstptr.subarray(dstRowPitchBytes);
                    }
                    srcptr = srcptr.subarray(srcSliceSkipBytes);
                    dstptr = dstptr.subarray(dstSliceSkipBytes);
                }
                return;
            }
            // Converting to PF_X8R8G8B8 is exactly the same as converting to
            // PF_A8R8G8B8. (same with PF_X8B8G8R8 and PF_A8B8G8R8)
            if (dst.format == akra.EPixelFormats.X8R8G8B8 || dst.format == akra.EPixelFormats.X8B8G8R8) {
                // Do the same conversion, with EPixelFormats.A8R8G8B8, which has a lot of
                // optimized conversions
                var tempdst = dst;
                tempdst.format = (dst.format == akra.EPixelFormats.X8R8G8B8) ? akra.EPixelFormats.A8R8G8B8 : akra.EPixelFormats.A8B8G8R8;
                bulkPixelConversion(src, tempdst);
                return;
            }
            // Converting from EPixelFormats.X8R8G8B8 is exactly the same as converting from
            // EPixelFormats.A8R8G8B8, given that the destination format does not have alpha.
            if ((src.format == akra.EPixelFormats.X8R8G8B8 || src.format == akra.EPixelFormats.X8B8G8R8) && !(((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor(((dst.format))).flags) & /*checked (origin: akra)>>*/akra.EPixelFormatFlags.HASALPHA) > 0)) {
                // Do the same conversion, with EPixelFormats.A8R8G8B8, which has a lot of
                // optimized conversions
                var tempsrc = src;
                tempsrc.format = src.format == akra.EPixelFormats.X8R8G8B8 ? akra.EPixelFormats.A8R8G8B8 : akra.EPixelFormats.A8B8G8R8;
                bulkPixelConversion(tempsrc, dst);
                return;
            }
            var srcPixelSize = (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((src.format)).elemBytes);
            var dstPixelSize = (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*/getDescriptionFor((dst.format)).elemBytes);
            var srcptr = src.data.subarray((src.left + src.top * src.rowPitch + src.front * src.slicePitch) * srcPixelSize);
            var dstptr = dst.data.subarray((dst.left + dst.top * dst.rowPitch + dst.front * dst.slicePitch) * dstPixelSize);
            // Old way, not taking into account box dimensions
            //uint8 *srcptr = static_cast<uint8*>(src.data), *dstptr = static_cast<uint8*>(dst.data);
            // Calculate pitches+skips in bytes
            var srcRowSkipBytes = src.getRowSkip() * srcPixelSize;
            var srcSliceSkipBytes = src.getSliceSkip() * srcPixelSize;
            var dstRowSkipBytes = dst.getRowSkip() * dstPixelSize;
            var dstSliceSkipBytes = dst.getSliceSkip() * dstPixelSize;
            // The brute force fallback
            // var r: float = 0, g: float = 0, b: float = 0, a: float = 1;
            var rgba = _pColorValue;
            for(var z = src.front; z < src.back; z++) {
                for(var y = src.top; y < src.bottom; y++) {
                    for(var x = src.left; x < src.right; x++) {
                        unpackColourFloat(rgba, src.format, srcptr);
                        packColourFloat(rgba.r, rgba.g, rgba.b, rgba.a, dst.format, dstptr);
                        srcptr = srcptr.subarray(srcPixelSize);
                        dstptr = dstptr.subarray(dstPixelSize);
                    }
                    srcptr = srcptr.subarray(srcRowSkipBytes);
                    dstptr = dstptr.subarray(dstRowSkipBytes);
                }
                srcptr = srcptr.subarray(srcSliceSkipBytes);
                dstptr = dstptr.subarray(dstSliceSkipBytes);
            }
        }
        pixelUtil.bulkPixelConversion = bulkPixelConversion;
        function calculateSizeForImage(nMipLevels, nFaces, iWidth, iHeight, iDepth, eFormat) {
            var iSize = 0;
            var mip = 0;
            for(mip = 0; mip < nMipLevels; ++mip) {
                iSize += getMemorySize(iWidth, iHeight, iDepth, eFormat) * nFaces;
                if (iWidth !== 1) {
                    iWidth /= 2;
                }
                if (iHeight !== 1) {
                    iHeight /= 2;
                }
                if (iDepth !== 1) {
                    iDepth /= 2;
                }
            }
            return iSize;
        }
        pixelUtil.calculateSizeForImage = calculateSizeForImage;
    })(akra.pixelUtil || (akra.pixelUtil = {}));
    var pixelUtil = akra.pixelUtil;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        webgl.maxTextureSize = 0;
        webgl.maxCubeMapTextureSize = 0;
        webgl.maxViewPortSize = 0;
        webgl.maxTextureImageUnits = 0;
        webgl.maxVertexAttributes = 0;
        webgl.maxVertexTextureImageUnits = 0;
        webgl.maxCombinedTextureImageUnits = 0;
        webgl.maxColorAttachments = 1;
        webgl.stencilBits = 0;
        webgl.colorBits = [
            0, 
            0, 
            0
        ];
        webgl.alphaBits = 0;
        webgl.multisampleType = 0.;
        webgl.shaderVersion = 0;
        webgl.hasNonPowerOf2Textures = false;
        webgl.isANGLE = false;
        var isSupported = false;
        webgl.pSupportedExtensionList = null;
        // var pLoadedExtensionList: Object = null;
        function makeDebugContext(pWebGLContext) {
            if ((((window).WebGLDebugUtils) !== undefined)) {
                pWebGLContext = WebGLDebugUtils.makeDebugContext(pWebGLContext, function (err, funcName, args) {
 {
                        akra.logger.setSourceLocation("webgl/WebGL.ts", 54);
                        akra.logger.log(("\n" + (new Error()).stack.split("\n").slice(1).join("\n")));
                    }
                    ;
                    throw WebGLDebugUtils.glEnumToString(err) + " was caused by call to: " + funcName;
                }, function (funcName, args) {
 {
                        akra.logger.setSourceLocation("webgl/WebGL.ts", 58);
                        akra.logger.log("gl." + funcName + "(" + WebGLDebugUtils.glFunctionArgsToString(funcName, args) + ")");
                    }
                    ;
                });
            }
            return pWebGLContext;
        }
        function loadExtension(pWebGLContext, sExtName) {
            var pWebGLExtentionList = (pWebGLContext).extentionList = (pWebGLContext).extentionList || {};
            var pWebGLExtension;
            if (!hasExtension(sExtName)) {
 {
                    akra.logger.setSourceLocation("webgl/WebGL.ts", 70);
                    akra.logger.warning("Extension " + sExtName + " unsupported for this platform.");
                }
                ;
                return false;
            }
            if (pWebGLExtension = pWebGLContext.getExtension(sExtName)) {
                if (((pWebGLExtentionList[sExtName]) != null)) {
                    // debug_print("Extension " + sExtName + " already loaded for this context.");
                    return true;
                }
                pWebGLExtentionList[sExtName] = pWebGLExtension;
 {
                    akra.logger.setSourceLocation("webgl/WebGL.ts", 82);
                    akra.logger.log("loaded WebGL extension: ", sExtName);
                }
                ;
                for(var j in pWebGLExtension) {
                    if ((/*checked (origin: akra)>>*/akra.typeOf((pWebGLExtension[j])) === "function")) {
                        //debug_print("created func WebGLRenderingContext::" + j + "(...)");
                        pWebGLContext[j] = function () {
                            pWebGLContext[j] = new Function("var t = this.extentionList[" + sExtName + "];" + "t." + j + ".apply(t, arguments);");
                        };
                    } else {
                        //debug_print("created const WebGLRenderingContext::" + j + " = " + pWebGLExtension[j]);
                        pWebGLContext[j] = pWebGLExtension[j];
                    }
                }
                return true;
            }
 {
                akra.logger.setSourceLocation("webgl/WebGL.ts", 103);
                akra.logger.warning("cannot load extension: ", sExtName);
            }
            ;
            return false;
        }
        webgl.loadExtension = loadExtension;
        function checkIsAngle(pWebGLContext) {
            var pProgram = pWebGLContext.createProgram();
            var sVertex = "            attribute vec3 pos;            struct S {              vec3 b[1];            };            uniform S s[1];            void main(void) {              float t = s[0].b[0].x;              gl_Position = vec4(pos, 1. + t);            }";
            var sFragment = "void main(void){}";
            var pVertexShader = pWebGLContext.createShader(0x8B31);
            var pFragmentShader = pWebGLContext.createShader(0x8B30);
            pWebGLContext.shaderSource(pVertexShader, sVertex);
            pWebGLContext.compileShader(pVertexShader);
            pWebGLContext.shaderSource(pFragmentShader, sFragment);
            pWebGLContext.compileShader(pFragmentShader);
            pWebGLContext.attachShader(pProgram, pVertexShader);
            pWebGLContext.attachShader(pProgram, pFragmentShader);
            pWebGLContext.linkProgram(pProgram);
            if (!pWebGLContext.getProgramParameter(pProgram, 0x8B82)) {
 {
                    akra.logger.setSourceLocation("webgl/WebGL.ts", 138);
                    akra.logger.error("cannot compile GLSL shader for ANGLE renderer");
                }
                ;
 {
                    akra.logger.setSourceLocation("webgl/WebGL.ts", 140);
                    akra.logger.log(pWebGLContext.getShaderInfoLog(pVertexShader));
                }
                ;
 {
                    akra.logger.setSourceLocation("webgl/WebGL.ts", 141);
                    akra.logger.log(pWebGLContext.getShaderSource(pVertexShader) || sVertex);
                }
                ;
 {
                    akra.logger.setSourceLocation("webgl/WebGL.ts", 143);
                    akra.logger.log(pWebGLContext.getShaderInfoLog(pFragmentShader));
                }
                ;
 {
                    akra.logger.setSourceLocation("webgl/WebGL.ts", 144);
                    akra.logger.log(pWebGLContext.getShaderSource(pFragmentShader) || sFragment);
                }
                ;
                return false;
            }
 {
                akra.logger.setSourceLocation("webgl/WebGL.ts", 150);
                akra.logger.assert(pWebGLContext.getProgramParameter(pProgram, 0x8B86) > 0, "no uniforms founded in angle test shader!");
            }
            ;
            return pWebGLContext.getActiveUniform(pProgram, 0).name != "s[0].b[0]";
        }
        function setupContext(pWebGLContext) {
            //test context not created yet
            if (((/*checked (origin: webgl)>>*/akra.webgl.pSupportedExtensionList) === null)) {
                return pWebGLContext;
            }
            for(var i = 0; i < webgl.pSupportedExtensionList.length; ++i) {
                if (!loadExtension(pWebGLContext, webgl.pSupportedExtensionList[i])) {
                    webgl.pSupportedExtensionList.splice(i, 1);
                }
            }
            return pWebGLContext;
        }
        webgl.isEnabled = /** @inline */function () {
            return isSupported;
        };
        function createContext(pCanvas, pOptions) {
            if (typeof pCanvas === "undefined") { pCanvas = document.createElement("canvas"); }
            var pWebGLContext = null;
            try  {
                pWebGLContext = pCanvas.getContext("webgl", pOptions) || pCanvas.getContext("experimental-webgl", pOptions);
            } catch (e) {
                throw e;
            }
            if (((pWebGLContext) != null)) {
                return setupContext(pWebGLContext);
            }
 {
                akra.logger.setSourceLocation("webgl/WebGL.ts", 196);
                akra.logger.warning("cannot get 3d device");
            }
            ;
            return null;
        }
        webgl.createContext = createContext;
        (function (pWebGLContext) {
            if (!pWebGLContext) {
                return;
            }
            webgl.maxTextureSize = pWebGLContext.getParameter(0x0D33);
            webgl.maxCubeMapTextureSize = pWebGLContext.getParameter(0x851C);
            webgl.maxViewPortSize = pWebGLContext.getParameter(0x0D3A);
            webgl.maxTextureImageUnits = pWebGLContext.getParameter(0x8872);
            webgl.maxVertexAttributes = pWebGLContext.getParameter(0x8869);
            webgl.maxVertexTextureImageUnits = pWebGLContext.getParameter(0x8B4C);
            webgl.maxCombinedTextureImageUnits = pWebGLContext.getParameter(0x8B4D);
            webgl.stencilBits = pWebGLContext.getParameter(0x0D57);
            webgl.colorBits = [
                pWebGLContext.getParameter(0x0D52), 
                pWebGLContext.getParameter(0x0D53), 
                pWebGLContext.getParameter(0x0D54)
            ];
            webgl.alphaBits = pWebGLContext.getParameter(0x0D55);
            webgl.multisampleType = pWebGLContext.getParameter(0x80AA);
            webgl.pSupportedExtensionList = pWebGLContext.getSupportedExtensions();
            //pSupportedExtensionList.push(WEBGL_DEBUG_SHADERS, WEBGL_DEBUG_RENDERER_INFO);
            isSupported = true;
            webgl.isANGLE = checkIsAngle(pWebGLContext);
 {
                akra.logger.setSourceLocation("webgl/WebGL.ts", 237);
                akra.logger.log("WebGL running under " + (webgl.isANGLE ? "ANGLE/DirectX" : "Native GL"));
            }
            ;
        })(createContext());
        function hasExtension(sExtName) {
            for(var i = 0; i < webgl.pSupportedExtensionList.length; ++i) {
                if (webgl.pSupportedExtensionList[i].search(sExtName) != -1) {
                    return true;
                }
            }
            return false;
        }
        webgl.hasExtension = hasExtension;
        function getWebGLUsage(iFlags) {
            if ((((iFlags) & (akra.EHardwareBufferFlags.DYNAMIC)) != 0)) {
                return 0x88E8;
            } else if ((((iFlags) & (akra.EHardwareBufferFlags.STREAM)) != 0)) {
                return 0x88E0;
            }
            return 0x88E4;
        }
        webgl.getWebGLUsage = getWebGLUsage;
        function getWebGLFormat(eFormat) {
            switch(eFormat) {
                case akra.EPixelFormats.L8:
                case akra.EPixelFormats.L16:
                    return 0x1909;
                case akra.EPixelFormats.A8:
                    return 0x1906;
                case akra.EPixelFormats.A4L4:
                case akra.EPixelFormats.BYTE_LA:
                    return 0x190A;
                case akra.EPixelFormats.R5G6B5:
                    return 0;
                case akra.EPixelFormats.B5G6R5:
                    return 0x1907;
                case akra.EPixelFormats.R3G3B2:
                    return 0;
                case akra.EPixelFormats.A4R4G4B4:
                case akra.EPixelFormats.A1R5G5B5:
                    return 0x1908;
                case akra.EPixelFormats.R8G8B8:
                case akra.EPixelFormats.B8G8R8:
                    return 0x1907;
                case akra.EPixelFormats.A8R8G8B8:
                case akra.EPixelFormats.A8B8G8R8:
                    return 0x1908;
                case akra.EPixelFormats.B8G8R8A8:
                case akra.EPixelFormats.R8G8B8A8:
                case akra.EPixelFormats.X8R8G8B8:
                case akra.EPixelFormats.X8B8G8R8:
                    return 0x1908;
                case akra.EPixelFormats.A2R10G10B10:
                    return 0;
                case akra.EPixelFormats.A2B10G10R10:
                    return 0x1908;
                case akra.EPixelFormats.DXT1:
                    return 0x83F1;
                case akra.EPixelFormats.DXT2:
                    return 0;
                case akra.EPixelFormats.DXT3:
                    return 0x83F2;
                case akra.EPixelFormats.DXT4:
                    return 0;
                case akra.EPixelFormats.DXT5:
                    return 0x83F3;
                case akra.EPixelFormats.FLOAT16_R:
                    return 0;
                case akra.EPixelFormats.FLOAT16_RGB:
                    return 0x1907;
                case akra.EPixelFormats.FLOAT16_RGBA:
                    return 0x1908;
                case akra.EPixelFormats.FLOAT32_R:
                    return 0;
                case akra.EPixelFormats.FLOAT32_RGB:
                    return 0x1907;
                case akra.EPixelFormats.FLOAT32_RGBA:
                    return 0x1908;
                case akra.EPixelFormats.FLOAT16_GR:
                case akra.EPixelFormats.FLOAT32_GR:
                    return 0;
                case akra.EPixelFormats.FLOAT32_DEPTH:
                case akra.EPixelFormats.DEPTH32:
                case akra.EPixelFormats.DEPTH16:
                case akra.EPixelFormats.DEPTH8:
                    return 0x1902;
                case akra.EPixelFormats.DEPTH24STENCIL8:
                    return 0x84F9;
                case akra.EPixelFormats.SHORT_RGBA:
                    return 0x1908;
                case akra.EPixelFormats.SHORT_GR:
                    return 0;
                case akra.EPixelFormats.SHORT_RGB:
                    return 0x1907;
                case akra.EPixelFormats.PVRTC_RGB2:
                    return 0x8C01;
                case akra.EPixelFormats.PVRTC_RGBA2:
                    return 0x8C03;
                case akra.EPixelFormats.PVRTC_RGB4:
                    return 0x8C00;
                case akra.EPixelFormats.PVRTC_RGBA4:
                    return 0x8C02;
                case akra.EPixelFormats.R8:
                case akra.EPixelFormats.RG8:
                    return 0;
                default:
 {
                        akra.logger.setSourceLocation("webgl/WebGL.ts", 364);
                        akra.logger.warning("getWebGLFormat unknown format", eFormat);
                    }
                    ;
                    return 0;
            }
        }
        webgl.getWebGLFormat = getWebGLFormat;
        function isWebGLFormatSupport(eFormat) {
            switch(eFormat) {
                case akra.EPixelFormats.DXT1:
                case akra.EPixelFormats.DXT3:
                case akra.EPixelFormats.DXT5:
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc");
                case akra.EPixelFormats.PVRTC_RGB2:
                case akra.EPixelFormats.PVRTC_RGBA2:
                case akra.EPixelFormats.PVRTC_RGB4:
                case akra.EPixelFormats.PVRTC_RGBA4:
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc");
                case akra.EPixelFormats.DEPTH32:
                case akra.EPixelFormats.DEPTH16:
                case akra.EPixelFormats.DEPTH24STENCIL8:
                    return webgl.hasExtension("WEBGL_depth_texture");
                case akra.EPixelFormats.DEPTH32:
                case akra.EPixelFormats.DEPTH16:
                case akra.EPixelFormats.DEPTH24STENCIL8:
                    return webgl.hasExtension("WEBGL_depth_texture");
                case akra.EPixelFormats.FLOAT16_RGB:
                case akra.EPixelFormats.FLOAT16_RGBA:
                    return webgl.hasExtension("OES_texture_half_float");
                case akra.EPixelFormats.FLOAT32_RGB:
                case akra.EPixelFormats.FLOAT32_RGBA:
                    return webgl.hasExtension("OES_texture_float");
            }
            if (getWebGLFormat(eFormat) && getWebGLDataType(eFormat)) {
                // switch(eFormat)
                // {
                //     case EPixelFormats.FLOAT32_DEPTH:
                //     case EPixelFormats.L16:
                //         return false;
                // }
                return true;
            }
            return false;
        }
        webgl.isWebGLFormatSupport = isWebGLFormatSupport;
        function getWebGLDataType(eFormat) {
            switch(eFormat) {
                case akra.EPixelFormats.L8:
                    return 0x1401;
                case akra.EPixelFormats.L16:
                    //return GL_UNSIGNED_SHORT;
                    return 0x1401;
                case akra.EPixelFormats.A8:
                    return 0x1401;
                case akra.EPixelFormats.A4L4:
                    return 0;
                case akra.EPixelFormats.BYTE_LA:
                    return 0x1401;
                case akra.EPixelFormats.R5G6B5:
                case akra.EPixelFormats.B5G6R5:
                    return 0x8363;
                case akra.EPixelFormats.R3G3B2:
                    return 0;
                case akra.EPixelFormats.A4R4G4B4:
                    return 0x8033;
                case akra.EPixelFormats.A1R5G5B5:
                    return 0x8034;
                case akra.EPixelFormats.R8G8B8:
                case akra.EPixelFormats.B8G8R8:
                case akra.EPixelFormats.A8R8G8B8:
                case akra.EPixelFormats.A8B8G8R8:
                case akra.EPixelFormats.B8G8R8A8:
                case akra.EPixelFormats.R8G8B8A8:
                case akra.EPixelFormats.X8R8G8B8:
                case akra.EPixelFormats.X8B8G8R8:
                    return 0x1401;
                case akra.EPixelFormats.A2R10G10B10:
                    return 0;
                case akra.EPixelFormats.A2B10G10R10:
                    return 0;
                case akra.EPixelFormats.DXT1:
                case akra.EPixelFormats.DXT2:
                case akra.EPixelFormats.DXT3:
                case akra.EPixelFormats.DXT4:
                case akra.EPixelFormats.DXT5:
                    return 0;
                case akra.EPixelFormats.FLOAT16_R:
                case akra.EPixelFormats.FLOAT16_RGB:
                case akra.EPixelFormats.FLOAT16_RGBA:
                    return 0x8D61;
                case akra.EPixelFormats.FLOAT32_R:
                case akra.EPixelFormats.FLOAT32_RGB:
                case akra.EPixelFormats.FLOAT32_RGBA:
                case akra.EPixelFormats.FLOAT16_GR:
                case akra.EPixelFormats.FLOAT32_GR:
                    return 0x1406;
                case akra.EPixelFormats.FLOAT32_DEPTH:
                    return 0x1406;
                case akra.EPixelFormats.DEPTH8:
                    return 0x1401;
                case akra.EPixelFormats.DEPTH16:
                    return 0x1403;
                case akra.EPixelFormats.DEPTH32:
                    return 0x1405;
                case akra.EPixelFormats.DEPTH24STENCIL8:
                    return 0x8367;
                case akra.EPixelFormats.SHORT_RGBA:
                case akra.EPixelFormats.SHORT_GR:
                case akra.EPixelFormats.SHORT_RGB:
                    return 0x1403;
                case akra.EPixelFormats.PVRTC_RGB2:
                case akra.EPixelFormats.PVRTC_RGBA2:
                case akra.EPixelFormats.PVRTC_RGB4:
                case akra.EPixelFormats.PVRTC_RGBA4:
                    return 0;
                case akra.EPixelFormats.R8:
                case akra.EPixelFormats.RG8:
                    return 0x1401;
                default:
 {
                        akra.logger.setSourceLocation("webgl/WebGL.ts", 504);
                        akra.logger.criticalError("getWebGLFormat unknown format");
                    }
                    ;
                    return 0;
            }
        }
        webgl.getWebGLDataType = getWebGLDataType;
        function getWebGLInternalFormat(eFormat) {
            if (!(((/*not inlined, because supportes only single statement functions(cur. st. count: 5)*//*checked (origin: pixelUtil)>>*/akra.pixelUtil.getDescriptionFor(((eFormat))).flags) & /*checked (origin: akra)>>*/akra.EPixelFormatFlags.COMPRESSED) > 0)) {
                return getWebGLFormat(eFormat);
            } else {
                switch(eFormat) {
                    case akra.EPixelFormats.DXT1:
                        return 0x83F1;
                    case akra.EPixelFormats.DXT2:
                        return 0;
                    case akra.EPixelFormats.DXT3:
                        return 0x83F2;
                    case akra.EPixelFormats.DXT4:
                        return 0;
                    case akra.EPixelFormats.DXT5:
                        return 0x83F3;
                    case akra.EPixelFormats.PVRTC_RGB2:
                        return 0x8C01;
                    case akra.EPixelFormats.PVRTC_RGBA2:
                        return 0x8C03;
                    case akra.EPixelFormats.PVRTC_RGB4:
                        return 0x8C00;
                    case akra.EPixelFormats.PVRTC_RGBA4:
                        return 0x8C02;
                }
            }
        }
        webgl.getWebGLInternalFormat = getWebGLInternalFormat;
        function getWebGLPrimitiveType(eType) {
            switch(eType) {
                case akra.EPrimitiveTypes.POINTLIST:
                    return 0x0000;
                case akra.EPrimitiveTypes.LINELIST:
                    return 0x0001;
                case akra.EPrimitiveTypes.LINELOOP:
                    return 0x0002;
                case akra.EPrimitiveTypes.LINESTRIP:
                    return 0x0003;
                case akra.EPrimitiveTypes.TRIANGLELIST:
                    return 0x0004;
                case akra.EPrimitiveTypes.TRIANGLESTRIP:
                    return 0x0005;
                case akra.EPrimitiveTypes.TRIANGLEFAN:
                    return 0x0006;
            }
            return 0x0000;
        }
        webgl.getWebGLPrimitiveType = getWebGLPrimitiveType;
        //не знаю что делает эта функция
        function getClosestWebGLInternalFormat(eFormat, isHWGamma) {
            if (typeof isHWGamma === "undefined") { isHWGamma = false; }
            var iGLFormat = webgl.getWebGLInternalFormat(eFormat);
            if (iGLFormat === 0) {
                if (isHWGamma) {
                    // TODO not supported
                    return 0;
                } else {
                    return 0x1908;
                }
            } else {
                return iGLFormat;
            }
        }
        webgl.getClosestWebGLInternalFormat = getClosestWebGLInternalFormat;
        /**
        * Convert GL format to EPixelFormat.
        */
        function getClosestAkraFormat(iGLFormat, iGLDataType) {
            switch(iGLFormat) {
                case 0x8C01:
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? akra.EPixelFormats.PVRTC_RGB2 : akra.EPixelFormats.A8R8G8B8;
                case 0x8C03:
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? akra.EPixelFormats.PVRTC_RGBA2 : akra.EPixelFormats.A8R8G8B8;
                case 0x8C00:
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? akra.EPixelFormats.PVRTC_RGB4 : akra.EPixelFormats.A8R8G8B8;
                case 0x8C02:
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? akra.EPixelFormats.PVRTC_RGBA4 : akra.EPixelFormats.A8R8G8B8;
                case 0x1909:
                    return akra.EPixelFormats.L8;
                case 0x1906:
                    return akra.EPixelFormats.A8;
                case 0x190A:
                    return akra.EPixelFormats.BYTE_LA;
                case 0x1907:
                    switch(iGLDataType) {
                        case 0x8363:
                            return akra.EPixelFormats.B5G6R5;
                        default:
                            return akra.EPixelFormats.R8G8B8;
                    }
                case 0x1908:
                    switch(iGLDataType) {
                        case 0x8034:
                            return akra.EPixelFormats.A1R5G5B5;
                        case 0x8033:
                            return akra.EPixelFormats.A4R4G4B4;
                        case 0x1406:
                            return akra.EPixelFormats.FLOAT32_RGBA;
                        default:
                            return akra.EPixelFormats.R8G8B8A8;
                            // return EPixelFormats.A8B8G8R8;
                                                }
                case 0x80E1:
                    return akra.EPixelFormats.A8B8G8R8;
                case 0x83F0:
                case 0x83F1:
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? akra.EPixelFormats.DXT1 : akra.EPixelFormats.A8R8G8B8;
                case 0x83F2:
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? akra.EPixelFormats.DXT3 : akra.EPixelFormats.A8R8G8B8;
                case 0x83F3:
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? akra.EPixelFormats.DXT5 : akra.EPixelFormats.A8R8G8B8;
                case 0x8229:
                    return webgl.hasExtension("EXT_texture_rg") ? akra.EPixelFormats.R8 : akra.EPixelFormats.A8R8G8B8;
                case 0x822B:
                    return webgl.hasExtension("EXT_texture_rg") ? akra.EPixelFormats.RG8 : akra.EPixelFormats.A8R8G8B8;
                case 0x1902:
                    switch(iGLDataType) {
                        case 0x1406:
                            return akra.EPixelFormats.FLOAT32_DEPTH;
                        case 0x1405:
                            return akra.EPixelFormats.DEPTH32;
                        case 0x1403:
                            return akra.EPixelFormats.DEPTH16;
                        case 0x1401:
                            return akra.EPixelFormats.DEPTH8;
                    }
                case 0x84F9:
                    return akra.EPixelFormats.DEPTH24STENCIL8;
                default:
                    //TODO: not supported
                    return akra.EPixelFormats.A8R8G8B8;
            }
        }
        webgl.getClosestAkraFormat = getClosestAkraFormat;
        function optionalPO2(iValue) {
            if (webgl.hasNonPowerOf2Textures) {
                return iValue;
            } else {
                return akra.math.ceilingPowerOfTwo(iValue);
            }
        }
        webgl.optionalPO2 = optionalPO2;
        function convertToWebGLformat(pSource, pDest) {
            // Always need to convert PF_A4R4G4B4, GL expects the colors to be in the
            // reverse order
            if (pDest.format == akra.EPixelFormats.A4R4G4B4) {
                // Convert PF_A4R4G4B4 -> PF_B4G4R4A4
                // Reverse pixel order
                var iSrcPtr = (pSource.left + pSource.top * pSource.rowPitch + pSource.front * pSource.slicePitch);
                var iDstPtr = (pDest.left + pDest.top * pDest.rowPitch + pDest.front * pDest.slicePitch);
                var iSrcSliceSkip = pSource.getSliceSkip();
                var iDstSliceSkip = pDest.getSliceSkip();
                var k = pSource.right - pSource.left;
                var x = 0, y = 0, z = 0;
                for(z = pSource.front; z < pSource.back; z++) {
                    for(y = pSource.top; y < pSource.bottom; y++) {
                        for(x = 0; x < k; x++) {
                            /* B*/
                            pDest[iDstPtr + x] = ((pSource[iSrcPtr + x] & 0x000F) << 12) | /* G*/
                            ((pSource[iSrcPtr + x] & 0x00F0) << 4) | /* R*/
                            ((pSource[iSrcPtr + x] & 0x0F00) >> 4) | /* A*/
                            ((pSource[iSrcPtr + x] & 0xF000) >> 12);
                        }
                        iSrcPtr += pSource.rowPitch;
                        iDstPtr += pDest.rowPitch;
                    }
                    iSrcPtr += iSrcSliceSkip;
                    iDstPtr += iDstSliceSkip;
                }
            }
        }
        webgl.convertToWebGLformat = convertToWebGLformat;
        function checkFBOAttachmentFormat(eFormat) {
            if (eFormat === akra.EPixelFormats.R8G8B8A8 || eFormat === akra.EPixelFormats.R8G8B8) {
                return true;
            } else if (eFormat === akra.EPixelFormats.A8B8G8R8) {
                return true;
            } else if (eFormat === akra.EPixelFormats.FLOAT32_RGBA) {
                // return hasExtension(WEBGL_COLOR_BUFFER_FLOAT);
                return hasExtension("OES_texture_float");
            } else if (eFormat === akra.EPixelFormats.FLOAT16_RGBA) {
                // return hasExtension(EXT_COLOR_BUFFER_HALF_FLOAT);
                return hasExtension("OES_texture_half_float");
            } else if (eFormat === akra.EPixelFormats.DEPTH32) {
                return true;
            } else {
                return false;
            }
        }
        webgl.checkFBOAttachmentFormat = checkFBOAttachmentFormat;
        function checkReadPixelFormat(eFormat) {
            if (eFormat === akra.EPixelFormats.R8G8B8A8 || eFormat === akra.EPixelFormats.R8G8B8) {
                return true;
            } else // else if(eFormat === EPixelFormats.A8B8G8R8){
            //     return true;
            // }
            if (eFormat === akra.EPixelFormats.FLOAT32_RGBA) {
                //hasExtension(WEBGL_COLOR_BUFFER_FLOAT) || hasExtension(EXT_COLOR_BUFFER_HALF_FLOAT);
                return false;
            } else {
                return false;
            }
        }
        webgl.checkReadPixelFormat = checkReadPixelFormat;
        function checkCopyTexImage(eFormat) {
            switch(eFormat) {
                case akra.EPixelFormats.R8G8B8A8:
                case akra.EPixelFormats.R8G8B8:
                case akra.EPixelFormats.L8:
                case akra.EPixelFormats.L16:
                case akra.EPixelFormats.A8:
                    return true;
                default:
                    return false;
            }
        }
        webgl.checkCopyTexImage = checkCopyTexImage;
        function getSupportedAlternative(eFormat) {
            if (checkFBOAttachmentFormat(eFormat)) {
                return eFormat;
            }
            /// Find first alternative
            var pct = (/*not inlined, because supportes only single statement functions(cur. st. count: 5)*//*checked (origin: pixelUtil)>>*/akra.pixelUtil.getDescriptionFor((eFormat)).componentType);
            switch(pct) {
                case akra.EPixelComponentTypes.BYTE:
                    eFormat = akra.EPixelFormats.A8R8G8B8;
                    break;
                case akra.EPixelComponentTypes.SHORT:
                    eFormat = akra.EPixelFormats.SHORT_RGBA;
                    break;
                case akra.EPixelComponentTypes.FLOAT16:
                    eFormat = akra.EPixelFormats.FLOAT16_RGBA;
                    break;
                case akra.EPixelComponentTypes.FLOAT32:
                    eFormat = akra.EPixelFormats.FLOAT32_RGBA;
                    break;
                case akra.EPixelComponentTypes.COUNT:
                default:
                    break;
            }
            if (checkFBOAttachmentFormat(eFormat)) {
                return eFormat;
            }
            /// If none at all, return to default
            return akra.EPixelFormats.A8R8G8B8;
        }
        webgl.getSupportedAlternative = getSupportedAlternative;
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var ApiInfo = (function (_super) {
            __extends(ApiInfo, _super);
            function ApiInfo() {
                        _super.call(this);
                this.bWebGL = false;
                this.bWebAudio = false;
                this.bFile = false;
                this.bFileSystem = false;
                this.bWebWorker = false;
                this.bTransferableObjects = false;
                this.bLocalStorage = false;
                this.bWebSocket = false;
                this.bGamepad = false;
                var pApi = {};
                this.bWebAudio = ((window).AudioContext && (window).webkitAudioContext ? true : false);
                this.bFile = ((window).File && (window).FileReader && (window).FileList && (window).Blob ? true : false);
                this.bFileSystem = (this.bFile && (window).URL && (window).requestFileSystem ? true : false);
                this.bWebWorker = (((window).Worker) !== undefined);
                this.bLocalStorage = (((window).localStorage) !== undefined);
                this.bWebSocket = (((window).WebSocket) !== undefined);
                this.bGamepad = !!(navigator).webkitGetGamepads || !!(navigator).webkitGamepads || (navigator.userAgent.indexOf('Firefox/') != -1);
            }
            Object.defineProperty(ApiInfo.prototype, "webGL", {
                get: /** @inline */function () {
                    return (isSupported);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "transferableObjects", {
                get: function () {
                    if (!this.bTransferableObjects) {
                        this.bTransferableObjects = (this.bWebWorker && this.chechTransferableObjects() ? true : false);
                    }
                    return this.bTransferableObjects;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "file", {
                get: /** @inline */function () {
                    return this.bFile;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "fileSystem", {
                get: /** @inline */function () {
                    return this.bFileSystem;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "webAudio", {
                get: /** @inline */function () {
                    return this.bWebAudio;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "webWorker", {
                get: /** @inline */function () {
                    return this.bWebWorker;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "localStorage", {
                get: /** @inline */function () {
                    return this.bLocalStorage;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "webSocket", {
                get: /** @inline */function () {
                    return this.bWebSocket;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApiInfo.prototype, "gamepad", {
                get: /** @inline */function () {
                    return this.bGamepad;
                },
                enumerable: true,
                configurable: true
            });
            ApiInfo.prototype.chechTransferableObjects = function () {
                var pBlob = new Blob([
                    "onmessage = function(e) { postMessage(true); }"
                ], {
                    "type": "text\/javascript"
                });
                var sBlobURL = (window).URL.createObjectURL(pBlob);
                var pWorker = new Worker(sBlobURL);
                var pBuffer = new ArrayBuffer(1);
                try  {
                    pWorker.postMessage(pBuffer, [
                        pBuffer
                    ]);
                } catch (e) {
 {
                        util.logger.setSourceLocation("util/ApiInfo.ts", 85);
                        util.logger.log('transferable objects not supported in your browser...');
                    }
                    ;
                }
                pWorker.terminate();
                if (pBuffer.byteLength) {
                    return false;
                }
                return true;
            };
            return ApiInfo;
        })(util.Singleton);
        util.ApiInfo = ApiInfo;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (info) {
                        function canvas(id) {
            var pCanvas = (typeof (id) === "string") ? document.getElementById(id) : id;
            return {
                width: (typeof (pCanvas.width) === "number") ? pCanvas.width : parseInt(pCanvas.style.width),
                height: (typeof (pCanvas.height) === "number") ? pCanvas.height : parseInt(pCanvas.style.height),
                id: pCanvas.id
            };
        }
        info.canvas = canvas;
        info.browser = new akra.util.BrowserInfo();
        info.api = new akra.util.ApiInfo();
        info.screen = new akra.util.ScreenInfo();
        info.uri = (new /*checked (origin: akra)>>*/akra.util.URI((document.location.href)));
        var is;
        (function (is) {
            /**
            * show status - online or offline
            */
            is.online;
            /**
            * perform test on mobile device
            */
            is.mobile = (/mobile|iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i).test(navigator.userAgent.toLowerCase());
            is.linux = info.browser.os === 'Linux';
            is.windows = info.browser.os === 'Windows';
            is.mac = info.browser.os === 'Mac';
            is.iPhone = info.browser.os === 'iPhone';
        })(is || (is = {}));
        //TODO: move it to [akra.info.is] module, when typescript access this.
        Object.defineProperty(is, 'online', {
            get: function () {
                return navigator.onLine;
            }
        });
    })(akra.info || (akra.info = {}));
    var info = akra.info;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EFileDataTypes) {
        EFileDataTypes._map = [];
        EFileDataTypes._map[0] = "ARRAY_BUFFER";
        EFileDataTypes.ARRAY_BUFFER = 0;
        EFileDataTypes._map[1] = "DATA_URL";
        EFileDataTypes.DATA_URL = 1;
        EFileDataTypes._map[2] = "TEXT";
        EFileDataTypes.TEXT = 2;
    })(akra.EFileDataTypes || (akra.EFileDataTypes = {}));
    var EFileDataTypes = akra.EFileDataTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (io) {
        /**@const*/ io.FILE_DROP_OPTIONS = {
            format: //cls: "file-drag-over",
            akra.EFileDataTypes.TEXT
        };
                        function createFileDropArea(el, options) {
            // console.log("create file drop area !!!", __CALLSTACK__);
            if (!akra.info.api.file) {
 {
                    akra.logger.setSourceLocation("io/filedrop.ts", 67);
                    akra.logger.warning("File drop area has not been created, because File API unsupported.");
                }
                ;
                return false;
            }
            var pElement = el || document.body;
            var pOptions = null;
            if ((/*checked (origin: akra)>>*/akra.typeOf((arguments[1])) === "function")) {
                pOptions = io.FILE_DROP_OPTIONS;
                pOptions.drop = arguments[1];
            } else {
                pOptions = arguments[1];
                for(var i in io.FILE_DROP_OPTIONS) {
                    if (!((pOptions[i]) !== undefined)) {
                        pOptions[i] = io.FILE_DROP_OPTIONS[i];
                    }
                }
            }
            function dragenter(e) {
                e.stopPropagation();
                e.preventDefault();
                pOptions.dragenter && pOptions.dragenter(e);
            }
            function dragleave(e) {
                e.stopPropagation();
                e.preventDefault();
                // pOptions.cls && removeClass(pElement, pOptions.cls);
                pOptions.dragleave && pOptions.dragleave(e);
            }
            function dragover(e) {
                e.stopPropagation();
                e.preventDefault();
                e.dataTransfer.dropEffect = "copy";
                // pOptions.cls && addClass(pElement, pOptions.cls);
                pOptions.dragover && pOptions.dragover(e);
            }
            function drop(e) {
                e.stopPropagation();
                e.preventDefault();
                var files = e.dataTransfer.files;
                for(var i = 0, f; f = files[i]; i++) {
                    if ((/*checked (origin: akra)>>*/akra.typeOf((pOptions.verify)) === "function") && !pOptions.verify(files[i], e)) {
                        continue;
                    }
                    var reader = new FileReader();
                    reader.onload = (function (pFile) {
                        return /** @inline */function (evt) {
                            // console.log("content loaded for", pFile.name);
                            pOptions.drop && pOptions.drop(pFile, evt.target.result, pOptions.format, e);
                        };
                    })(f);
                    switch(pOptions.format) {
                        case akra.EFileDataTypes.TEXT:
                            reader.readAsText(f);
                            break;
                        case akra.EFileDataTypes.ARRAY_BUFFER:
                            reader.readAsArrayBuffer(f);
                            break;
                        case akra.EFileDataTypes.DATA_URL:
                            reader.readAsDataURL(f);
                            break;
                    }
                }
                // pOptions.cls && removeClass(pElement, pOptions.cls);
                            }
            pOptions.dragenter && pElement.addEventListener('dragenter', dragenter, false);
            pOptions.dragleave && pElement.addEventListener('dragleave', dragleave, false);
            pElement.addEventListener('dragover', dragover, false);
            pElement.addEventListener('drop', drop, false);
            (pElement).removeFileDrop = function () {
                pElement.removeEventListener('dragenter', dragenter, false);
                pElement.removeEventListener('dragleave', dragleave, false);
                pElement.removeEventListener('dragover', dragover, false);
                pElement.removeEventListener('drop', drop, false);
            };
            return true;
        }
        io.createFileDropArea = createFileDropArea;
        /** @inline */function removeFileDropArea(element) {
            ((element).removeFileDrop && (element).removeFileDrop());
        }
        io.removeFileDropArea = removeFileDropArea;
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    /// @: {data}/ui/3d-party/raphael/raphael-min.js|location()|script()|data_location({data},DATA)
    /// @: {data}/ui/3d-party/swig/swig.pack.min.js|location()|script()|data_location({data},DATA)
    /// @: {data}/ui/css/main.css|location()|css()|data_location({data},DATA)
    (function (ui) {
        swig.init({
            filters: {
                data: /** @inline */function (path) {
                    return akra.DATA + "/" + path;
                }
            }
        });
        // LOG(swig.compile("{% filter data %}ui/img/switch16.png{% endfilter %}", {filename: "*"})(null));
        function _template(pNode, sTemplate, sName, pData, bRenderAsNormal, iDepth) {
            if (typeof pData === "undefined") { pData = null; }
            if (typeof bRenderAsNormal === "undefined") { bRenderAsNormal = false; }
            if (typeof iDepth === "undefined") { iDepth = 0; }
            var fnTemplate = swig.compile(sTemplate, {
                filename: sName
            });
            var sTplData = fnTemplate(pData);
            var $target = pNode.el;
            if (!((pNode.layout) === null)) {
                $target = pNode.layout.renderTarget();
            }
            $target.append(sTplData);
            $target.find("component").each(function (i) {
                var $comp = $(this);
                var sType = $comp.attr("type");
                var sName = $comp.attr("name");
                if ($comp.parents("component").length > 0) {
                    return;
                }
                bRenderAsNormal = $target[0] == $comp.parent()[0];
                var pComponent = pNode.createComponent(sType, {
                    show: bRenderAsNormal,
                    name: sName
                });
                pComponent._createdFrom($comp);
                if ($comp.text().length > 0 && !$comp.attr("template")) {
                    _template(pComponent, $comp.html(), sName, pData, false, iDepth + 1);
                }
                if (!bRenderAsNormal) {
                    // WARNING(sTemplate);
                    var $span = $("<span/>");
                    $comp.before($span);
                    pComponent.render($span);
                    pComponent.el.unwrap();
                }
                $comp.remove();
            });
        }
        function template(pNode, sUrl, pData) {
            var sTemplate = akra.io.ajax(sUrl, {
                async: false
            }).data;
            _template(pNode, sTemplate, sUrl, pData);
        }
        ui.template = template;
        // var pFileEventListeners: any[] = [];
        // io.createFileDropArea(null, {
        // 	dragenter: (e: DragEvent): void => {
        // 		for (var i: int = 0; i < pFileEventListeners.length; ++ i) {
        // 			pFileEventListeners[i].fileDragStarted(e);
        // 		}
        // 	},
        // 	dragleave: (e: DragEvent): void => {
        // 		for (var i: int = 0; i < pFileEventListeners.length; ++ i) {
        // 			pFileEventListeners[i].fileDragEnded(e);
        // 		}
        // 	},
        // 	dragover: (e: DragEvent): void => {
        // 		for (var i: int = 0; i < pFileEventListeners.length; ++ i) {
        // 			pFileEventListeners[i].fileDragOver(e);
        // 		}
        // 	},
        // 	drop: (file: File, content, format?: EFileDataTypes, e?: DragEvent): void => {
        // 		for (var i: int = 0; i < pFileEventListeners.length; ++ i) {
        // 			pFileEventListeners[i].fileDroped(file, content, format, e);
        // 		}
        // 	},
        // 	format: EFileDataTypes.ARRAY_BUFFER
        // });
        ui.COMPONENTS = {};
        var Component = (function (_super) {
            __extends(Component, _super);
            function Component(parent, options, eType, $el) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.UNKNOWN; }
                        _super.call(this, ui.getUI(parent), $el, akra.EUINodeTypes.COMPONENT);
                /**@protected*/ this._sGenericType = null;
                /**@protected*/ this._pComponentOptions = null;
                var pOptions = mergeOptions(options, null);
                if (!ui.isUI(parent)) {
                    this.attachToParent(parent, (!((pOptions.show) !== undefined) || pOptions.show == true));
                }
                this._eComponentType = eType;
                this.applyOptions(pOptions);
            }
            Object.defineProperty(Component.prototype, "componentType", {
                get: /** @inline */function () {
                    return this._eComponentType;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Component.prototype, "genericType", {
                get: /** @inline */function () {
                    return this._sGenericType;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Component.prototype, "name", {
                get: /** @inline */function () {
                    return this._sName;
                },
                set: /** @inline */function (sName) {
                    this.$element.attr("name", sName);
                    this._sName = sName;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Component.prototype, "options", {
                get: /** @inline */function () {
                    return this._pComponentOptions;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Component.prototype, "layout", {
                get: function () {
                    return ((((((((this)._pChild)))) != null) && ((((this)._pChild))).type === /*checked (origin: akra)>>*/akra.EEntityTypes.UI_NODE) && ((((this)._pChild))).nodeType === /*checked (origin: akra)>>*/akra.EUINodeTypes.LAYOUT) ? ((this)._pChild) : null;
                },
                enumerable: true,
                configurable: true
            });
            Component.prototype.template = function (sTplName, pData) {
                template(this, akra.DATA + "/" + "ui/templates/" + sTplName, pData);
            };
            Component.prototype.fromStringTemplate = function (sTemplate, pData) {
                _template(this, sTemplate, sTemplate, pData);
            };
            Component.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                ((this).$element).addClass("component");
                ((this).$element.get()[0])["component"] = this;
            };
            Component.prototype.isGeneric = /** @inline */function () {
                return !((this._sGenericType) === null);
            };
            Component.prototype.fileDragStarted = // handleEvent(sEvent: string): bool {
            // 	var pEvents: string[] = sEvent.split(' ');
            // 	for (var i = 0; i < pEvents.length; ++ i) {
            // 		sEvent = pEvents[i].toLowerCase();
            // 		if (HTMLNode.EVENTS.indexOf(sEvent) == -1) {
            // 			// switch (sEvent) {
            // 			// 	case "dragenter":
            // 			// 	case "dragover":
            // 			// 	case "dragleave":
            // 			// 	case "drop":
            // 			// 		var pOptions = {};
            // 			// 		var pComponent: any = this;
            // 			// 		pOptions[sEvent] = () => {pComponent[sEvent].apply(pComponent, arguments);};
            // 			// 		io.fileDropArea(this.getHTMLElement(), pOptions);
            // 			// }
            // 			switch (sEvent) {
            // 				case "fileevent":
            // 					if (pFileEventListeners.indexOf(this) == -1) {
            // 						pFileEventListeners.push(this);
            // 					}
            // 			}
            // 		}
            // 		else {
            // 			super.handleEvent(sEvent);
            // 		}
            // 	}
            // 	return true;
            // }
            // inline disableEvent(sEvent: string): void {
            // 	super.disableEvent(sEvent);
            // }
            function (e) {
                // LOG("fileDragStarted(", e, ")");
                            };
            Component.prototype.fileDragEnded = function (e) {
                // LOG("fileDragEnded(", e, ")");
                            };
            Component.prototype.fileDragOver = function (e) {
                // LOG("fileDragOver(", e, ")");
                            };
            Component.prototype.fileDroped = function (file, content, format, e) {
                // LOG(arguments);
                            };
            Component.prototype.setLayout = function (type) {
                var eType = akra.EUILayouts.UNKNOWN;
                if ((typeof (type) === "string")) {
                    switch((type).toLowerCase()) {
                        case "horizontal":
                            eType = akra.EUILayouts.HORIZONTAL;
                            break;
                        case "vertical":
                            eType = akra.EUILayouts.VERTICAL;
                            break;
                    }
                } else {
                    eType = type;
                }
                var pLayout = ((this)._pUI).createLayout(eType);
                if (((((((((this)._pChild)))) != null) && ((((this)._pChild))).type === /*checked (origin: akra)>>*/akra.EEntityTypes.UI_NODE) && ((((this)._pChild))).nodeType === /*checked (origin: akra)>>*/akra.EUINodeTypes.LAYOUT)) {
                    var pLayoutPrev = ((this)._pChild);
                    pLayoutPrev.relocateChildren(pLayout);
                    pLayoutPrev.destroy();
                }
                this.relocateChildren(pLayout);
                return pLayout.render(this);
            };
            Component.prototype.attachToParent = function (pParent, bRender) {
                if (typeof bRender === "undefined") { bRender = true; }
                if (isComponent(pParent) && ((((((pParent.child))) != null) && ((pParent.child)).type === /*checked (origin: akra)>>*/akra.EEntityTypes.UI_NODE) && ((pParent.child)).nodeType === /*checked (origin: akra)>>*/akra.EUINodeTypes.LAYOUT) && !((((((pParent))) != null) && ((pParent)).type === /*checked (origin: akra)>>*/akra.EEntityTypes.UI_NODE) && ((pParent)).nodeType === /*checked (origin: akra)>>*/akra.EUINodeTypes.LAYOUT)) {
                    // console.log("redirected to layout ------>", pParent.toString(true));
                    pParent = pParent.child;
                }
                return _super.prototype.attachToParent.call(this, pParent, bRender);
            };
            Component.prototype.applyOptions = /**@protected*/ function (pOptions) {
                if (!((pOptions) != null)) {
                    return;
                }
                var $element = ((this).$element);
                /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/this.name = ((pOptions.name) !== undefined) ? pOptions.name : null;
                if (((pOptions.html) != null)) {
                    $element.html(pOptions.html);
                }
                if (((pOptions.css) != null)) {
 {
                        akra.logger.setSourceLocation("Component.ts", 261);
                        akra.logger.log(pOptions.css);
                    }
                    ;
                    $element.css(pOptions.css);
                }
                if (((pOptions.class) != null)) {
                    $element.addClass(pOptions.class);
                }
                if (((pOptions.width) != null)) {
                    $element.width(pOptions.width);
                }
                if (((pOptions.height) != null)) {
                    $element.height(pOptions.height);
                }
                if (((pOptions.draggable) != null)) {
                    this.setDraggable(pOptions.draggable);
                }
                if (((pOptions.layout) != null)) {
                    this.setLayout(pOptions.layout);
                }
                if ((typeof (pOptions.generic) === "string")) {
                    this._sGenericType = pOptions.generic;
                }
                if (((pOptions.dragZone) != null)) {
                    $element.draggable("option", "containment", pOptions.dragZone);
                }
                if (((pOptions.events) != null)) {
                    if (akra.isArray(pOptions.events)) {
                        pOptions.events = pOptions.events.join(' ');
                    }
                    this.handleEvent(pOptions.events);
                }
                if (((pOptions.parent) != null)) {
                    this.attachToParent(pOptions.parent, ((pOptions.show) != null) ? pOptions.show : true);
                }
                if (((pOptions.template) != null)) {
                    this.template(pOptions.template);
                }
                this._pComponentOptions = pOptions;
            };
            Component.prototype.createComponent = function (sType, pOptions) {
                var pComp = ((this)._pUI).createComponent(sType, pOptions);
                pComp.attachToParent(this, !((pOptions) != null) || pOptions.show !== false);
                return pComp;
            };
            Component.prototype._createdFrom = function ($comp) {
                this.$element.attr("style", $comp.attr("style"));
                this.$element.attr("class", $comp.attr("class"));
                var sLayout = $comp.attr("layout");
                var sTemplate = $comp.attr("template");
                if ((typeof (sTemplate) === "string")) {
                    this.template(sTemplate);
                }
                if ((typeof (sLayout) === "string")) {
                    this.setLayout(sLayout);
                }
                ((this).$element).attr("id", "cuid-" + ((this)._iGuid));
            };
            Component.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return ((!(((this)._sGenericType) === null)) ? "<generic-" + ((this)._sGenericType) : "<component-" + "*") + (((this)._sName) ? " " + ((this)._sName) : "") + ">";
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            return Component;
        })(ui.DNDNode);
        ui.Component = Component;        
        /** @inline */function register(sType, pComponent) {
            ui.COMPONENTS[sType] = pComponent;
        }
        ui.register = register;
        function isComponent(pEntity, eComponent) {
            if (!((((pEntity)) != null) && (pEntity).type === /*checked (origin: akra)>>*/akra.EEntityTypes.UI_NODE) || (pEntity).nodeType !== akra.EUINodeTypes.COMPONENT) {
                return false;
            }
            if (arguments.length > 1) {
                return (pEntity).componentType === eComponent;
            }
            return true;
        }
        ui.isComponent = isComponent;
        /** @inline */function isGeneric(pEntity) {
            return isComponent(pEntity) && (pEntity).isGeneric();
        }
        ui.isGeneric = isGeneric;
                                function mergeOptions(left, right) {
            var pOptionsLeft;
            var pOptionsRight;
            if ((typeof (left) === "string")) {
                pOptionsLeft = {
                    name: left
                };
            } else {
                pOptionsLeft = left || {};
            }
            if ((typeof (right) === "string")) {
                pOptionsRight = {
                    name: right
                };
            } else {
                pOptionsRight = right || {};
            }
            for(var sOpt in pOptionsRight) {
                pOptionsLeft[sOpt] = pOptionsRight[sOpt];
            }
            return pOptionsLeft;
        }
        ui.mergeOptions = mergeOptions;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Panel = (function (_super) {
            __extends(Panel, _super);
            function Panel(parent, options, eType) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.PANEL; }
                        _super.call(this, parent, ui.mergeOptions({
            layout: akra.EUILayouts.UNKNOWN
        }, options), eType, $("<div>						<div class='panel-title'>							<div class=\"controls\">								<input type=\"checkbox\" />							</div>							<span />						</div>					</div>"));
                this.index = -1;
                /**@protected*/ this.$controls = null;
                this.$title = ((this).$element).find("div.panel-title:first");
                this.$controls = ((this).$element).find("div.controls:first");
                if (((options) != null)) {
                    if ((typeof (options.title) === "string")) {
                        /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/this.title = options.title;
                    }
                }
            }
            Object.defineProperty(Panel.prototype, "collapsed", {
                get: /** @inline */function () {
                    return ((this).$element).hasClass("collapsed");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Panel.prototype, "title", {
                get: /** @inline */function () {
                    return this.$title.find("span:first").html();
                },
                set: /** @inline */function (sTitle) {
                    this.$title.find("span:first").html(sTitle || "");
                    this.titleUpdated(sTitle);
                },
                enumerable: true,
                configurable: true
            });
            Panel.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/this.title = $comp.attr('title');
                if ((($comp.attr("collapsible")) !== undefined)) {
                    this.setCollapsible($comp.attr("collapsible").toLowerCase() !== "false");
                }
                var sCollapsed = $comp.attr("collapsed");
                if ((typeof (sCollapsed) === "string") && sCollapsed.toLowerCase() !== "false") {
                    ((this).$element).addClass("collapsed");
                    this.layout.hide();
                }
            };
            Panel.prototype.collapse = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                if (bValue === ((((this)).$element).hasClass("collapsed"))) {
                    return;
                }
                ((((this)).$element).hasClass("collapsed")) ? ((this).$element).removeClass("collapsed") : ((this).$element).addClass("collapsed");
                var $element = this.layout.el;
                $element.animate({
                    height: 'toggle'
                }, 500);
            };
            Panel.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                ((this).$element).addClass("component-panel");
            };
            Panel.prototype.isCollapsible = /** @inline */function () {
                return ((this).$element).hasClass("collapsible");
            };
            Panel.prototype.setCollapsible = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                var _this = this;
                if (bValue === ((((this)).$element).hasClass("collapsible"))) {
                    return;
                }
                ((this).$element).addClass("collapsible");
                var pPanel = this;
                this.$controls.click(function (e) {
                    pPanel.collapse(!((((_this)).$element).hasClass("collapsed")));
                });
            };
            Panel.prototype.titleUpdated = function (sTitle) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).titleUpdated;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, sTitle) : _broadcast[i].listener(_recivier, sTitle);
                    }
                }
            };
            Panel.prototype.selected = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).selected;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                }
            };
            return Panel;
        })(ui.Component);
        ui.Panel = Panel;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Panel")] = (Panel));
        function isPanel(pEntity) {
            return ui.isComponent(pEntity, akra.EUIComponents.PANEL);
        }
        ui.isPanel = isPanel;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Popup = (function (_super) {
            __extends(Popup, _super);
            function Popup(parent, options, eType) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.POPUP; }
                        _super.call(this, parent, ui.mergeOptions({
            layout: akra.EUILayouts.UNKNOWN
        }, options), eType, $("<div class=\"component-popup\"><div class='header'><div class=\"title\"/><div class=\"controls\"/></div></div>"));
                /**@protected*/ this.$closeBtn = null;
                var pPopup = this;
                this.$header = ((this).$element).find("div.header:first");
                this.$title = this.$header.find("div.title");
                this.$footer = $("<div class=\"footer\"/>");
                this.$controls = this.$header.find("div.controls");
                ((this).$element).append(this.$footer);
                if (((options) != null)) {
                    if ((typeof (options.title) === "string")) {
                        ((this).$title.html((options.title) || ""));
                    }
                    if ((typeof (options.controls) === "string")) {
                        var pControls = options.controls.split(" ");
                        for(var i = 0; i < pControls.length; ++i) {
                            switch(pControls[i]) {
                                case "close":
                                    this.$closeBtn = $("<div class=\"close-btn\"/>");
                                    this.$controls.append(this.$closeBtn);
                                    break;
                            }
                        }
                    }
                }
                this.setDraggable(true, {
                    containment: "document",
                    handle: ".header"
                });
                ((this).$element).offset({
                    top: 0,
                    left: 0
                });
                if (this.$closeBtn) {
                    this.$closeBtn.click(function (e) {
                        pPopup.close();
                    });
                }
            }
            Object.defineProperty(Popup.prototype, "title", {
                get: /** @inline */function () {
                    return this.$title.html();
                },
                set: /** @inline */function (sTitle) {
                    this.$title.html(sTitle || "");
                },
                enumerable: true,
                configurable: true
            });
            Popup.prototype.move = function (e) {
                _super.prototype.move.call(this, e);
                ((this).$element).css("bottom", "auto");
            };
            Popup.prototype.close = function () {
                this.closed();
            };
            Popup.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                ((this).$title.html(($comp.attr("title")) || ""));
            };
            Popup.prototype.closed = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).closed;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                }
            };
            return Popup;
        })(ui.Component);
        ui.Popup = Popup;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Popup")] = (Popup));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Tabs = (function (_super) {
            __extends(Tabs, _super);
            function Tabs(parent, options, eType) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.TABS; }
                        _super.call(this, parent, options, eType, $("<div class=\"component-tabs\"><div class=\"bookmarks\"></div></div>"));
                /**@protected*/ this._pTabs = [];
                /**@protected*/ this._iActiveTab = -1;
                this.$bookmarks = ((this).$element).find(".bookmarks:first");
            }
            Object.defineProperty(Tabs.prototype, "active", {
                get: /** @inline */function () {
                    return this._pTabs[this._iActiveTab] || null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Tabs.prototype, "length", {
                get: /** @inline */function () {
                    return this._pTabs.length;
                },
                enumerable: true,
                configurable: true
            });
            Tabs.prototype.addChild = function (pEntity) {
 {
                    akra.logger.setSourceLocation("Tabs.ts", 30);
                    akra.logger.assert(ui.isPanel(pEntity), "only panels can be added to Tabs");
                }
                ;
                var pPanel = pEntity;
 {
                    akra.logger.setSourceLocation("Tabs.ts", 34);
                    akra.logger.assert(!pPanel.isCollapsible(), "panel cannot be collapsible!");
                }
                ;
                this.createBookmarkFor(pPanel);
                ((pPanel).getEventTable().addDestination(((((pPanel)))._iGuid), ("titleUpdated"), (this), ("_tabTitleUpdated"), (undefined)));
                pPanel.index = this._pTabs.length;
                this._pTabs.push(pPanel);
                if (this._pTabs.length > 1) {
                    pPanel.hide();
                } else {
                    this.select(0);
                }
                return _super.prototype.addChild.call(this, pEntity);
            };
            Tabs.prototype.tabIndex = function (pPanel) {
                for(var i = 0; i < this._pTabs.length; ++i) {
                    if (pPanel == this._pTabs[i]) {
                        return i;
                    }
                }
                return -1;
            };
            Tabs.prototype.findTabByTitle = function (sName) {
                for(var i = 0; i < this._pTabs.length; ++i) {
                    if (this._pTabs[i].title === sName) {
                        return i;
                    }
                }
                return -1;
            };
            Tabs.prototype.findTab = function (sName) {
                for(var i = 0; i < this._pTabs.length; ++i) {
                    if (this._pTabs[i].name === sName) {
                        return i;
                    }
                }
                return -1;
            };
            Tabs.prototype.tab = /** @inline */function (iTab) {
                return this._pTabs[iTab];
            };
            Tabs.prototype.select = function (panel) {
                var n = 0;
                if ((typeof (panel) === "number")) {
                    n = panel;
                } else {
                    n = this.tabIndex(panel);
                }
                if (n == this._iActiveTab || n < 0 || n > this._pTabs.length) {
                    return;
                }
                if (((this)._pTabs[(this)._iActiveTab] || null)) {
                    ((this)._pTabs[(this)._iActiveTab] || null).hide();
                    ((this).$bookmarks.find("#tab-" + (((this)._pTabs[(this)._iActiveTab] || null)).getGuid())).removeClass("active");
                }
                ((this).$bookmarks.find("#tab-" + (this._pTabs[n]).getGuid())).addClass("active");
                this._pTabs[n].show();
                this._pTabs[n].selected();
                this._iActiveTab = n;
            };
            Tabs.prototype._tabTitleUpdated = function (pPanel, sTitle) {
                ((this).$bookmarks.find("#tab-" + (pPanel).getGuid())).html(sTitle);
            };
            Tabs.prototype.bookmarkFor = /**@protected*/ /** @inline */function (pPanel) {
                return this.$bookmarks.find("#tab-" + pPanel.getGuid());
            };
            Tabs.prototype.createBookmarkFor = /**@protected*/ function (pPanel) {
                var $bookmark = $("<div class=\"bookmark\" id=\"tab-" + pPanel.getGuid() + "\">" + pPanel.title + "</div>");
                this.$bookmarks.append($bookmark);
                var pTabs = this;
                $bookmark.click(function (e) {
                    pTabs.select(pPanel.index);
                });
            };
            return Tabs;
        })(ui.Component);
        ui.Tabs = Tabs;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Tabs")] = (Tabs));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Button = (function (_super) {
            __extends(Button, _super);
            function Button(ui, options, eType) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.BUTTON; }
                        _super.call(this, ui, options, eType, $("<button class=\"component-button\"/>"));
                this.handleEvent("click");
            }
            Object.defineProperty(Button.prototype, "text", {
                get: /** @inline */function () {
                    return ((this).$element).html();
                },
                set: /** @inline */function (x) {
                    ((this).$element).html(x);
                },
                enumerable: true,
                configurable: true
            });
            Button.prototype.click = function (e) {
                e.stopPropagation();
                _super.prototype.click.call(this, e);
            };
            Button.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                var sImage = $comp.attr("img");
                var sClick = $comp.attr("onclick");
                if ((typeof (sImage) === "string")) {
                    ((((this)).$element).html((("<img src='" + sImage + "' />"))));
                } else {
                    ((((this)).$element).html(($comp.attr("text") || (sImage ? "" : "push"))));
                }
                ((this).$element).attr("onclick", sClick);
            };
            Button.prototype.applyOptions = /**@protected*/ function (pOptions) {
                _super.prototype.applyOptions.call(this, pOptions);
                ((((this)).$element).html((pOptions.text || "push")));
            };
            return Button;
        })(ui.Component);
        ui.Button = Button;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Button")] = (Button));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Menu = (function (_super) {
            __extends(Menu, _super);
            function Menu(parent, options, eType) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.MENU; }
                        _super.call(this, parent, ui.mergeOptions({
            layout: akra.EUILayouts.VERTICAL
        }, options), eType, $("<div class=\"component-menu\">					<div class=\"menu-title\"></div>				</div>"));
                this.$title = ((this).$element).find(".menu-title:first");
                this.handleEvent("mouseenter mouseleave");
            }
            Object.defineProperty(Menu.prototype, "text", {
                get: /** @inline */function () {
                    return this.$title.html();
                },
                set: /** @inline */function (s) {
                    this.$title.html(s);
                },
                enumerable: true,
                configurable: true
            });
            Menu.prototype.mouseleave = function (e) {
                _super.prototype.mouseenter.call(this, e);
                this.layout.hide();
            };
            Menu.prototype.mouseenter = function (e) {
                _super.prototype.mouseenter.call(this, e);
                this.layout.show();
            };
            Menu.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                var sText = $comp.attr("text");
                if ((typeof (sText) === "string")) {
                    ((this).$title.html((sText)));
                }
            };
            return Menu;
        })(ui.Component);
        ui.Menu = Menu;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Menu")] = (Menu));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Switch = (function (_super) {
            __extends(Switch, _super);
            function Switch(parent, options, eType) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.SWITCH; }
                var _this = this;
                        _super.call(this, parent, options, eType, $(("<div class=\"component-switch\">" + "<input type=\"checkbox\" id=\"slider-$1\" />" + "<label for=\"slider-$1\"></label>" + "</div>").replace(/\$1/g, akra.sid())));
                // this.handleEvent("click");
                this.$checkbox = ((this).$element).find("input[type=checkbox]");
                this.$checkbox.click(function (e) {
                    e.stopPropagation();
                    _this.changed(((((_this)).$checkbox.is(':checked'))));
                });
            }
            Object.defineProperty(Switch.prototype, "value", {
                get: /** @inline */function () {
                    return ((this).$checkbox.is(':checked'));
                },
                set: /** @inline */function (bValue) {
                    if (bValue != ((((this)).$checkbox.is(':checked')))) {
                        ((this).$checkbox.prop('checked', (bValue)));
                        this.changed(bValue);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Switch.prototype._setValue = /** @inline */function (bValue) {
                this.$checkbox.prop('checked', bValue);
            };
            Switch.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                /*not inlined, because first statement is not return/call/dot(cur st.: If)*/this.value = (($comp.attr("on")) !== undefined);
            };
            Switch.prototype.isOn = /** @inline */function () {
                return this.$checkbox.is(':checked');
            };
            Switch.prototype.changed = function (bValue) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).changed;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, bValue) : _broadcast[i].listener(_recivier, bValue);
                    }
                }
            };
            return Switch;
        })(ui.Component);
        ui.Switch = Switch;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Switch")] = (Switch));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Label = (function (_super) {
            __extends(Label, _super);
            function Label(ui, options, eType) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.LABEL; }
                        _super.call(this, ui, options, eType, $("<div>					<div class='label-text'></div>					<input 					onfocus=\"this.style.width = ((this.value.length + 1) * 6) + 'px';\" 					onkeyup=\"this.style.width = ((this.value.length + 1) * 6) + 'px';\" class='label-input' style='display:none;' type='text' value=''/>				</div>"));
                /**@protected*/ this._bEditable = false;
                /**@protected*/ this._sPostfix = null;
                this.$text = this.$element.find(".label-text");
                this.$input = this.$element.find(".label-input");
                ((this).$text.html((/*checked (origin: akra)>>*/akra.isObject(options) ? options.text || "" : "") + ((this)._sPostfix || "")));
                this.editable(akra.isObject(options) ? options.editable || false : false);
            }
            Object.defineProperty(Label.prototype, "text", {
                get: /** @inline */function () {
                    var s = this.$text.html();
                    return s.substr(0, s.length - (this._sPostfix || "").length);
                },
                set: /** @inline */function (x) {
                    this.$text.html(x + (this._sPostfix || ""));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Label.prototype, "postfix", {
                get: /** @inline */function () {
                    return this._sPostfix;
                },
                set: /** @inline */function (s) {
                    this._sPostfix = s;
                },
                enumerable: true,
                configurable: true
            });
            Label.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                ((this).$text.html(($comp.attr("text")) + ((this)._sPostfix || "")));
                this.editable((($comp.attr("editable")) !== undefined) || false);
                ((this)._sPostfix = ($comp.attr("postfix")));
            };
            Label.prototype.isEditable = /** @inline */function () {
                return this._bEditable;
            };
            Label.prototype.editable = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                this._bEditable = bValue;
                if (bValue) {
                    this.handleEvent("click keydown focusout");
                    ((this).$element).addClass("editable");
                } else {
                    ((this).$element).removeClass("editable");
                    this.disableEvent("click keydown focusout");
                }
            };
            Label.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                ((this).$element).addClass("component-label");
            };
            Label.prototype.click = function (e) {
                this.$text.css("display", "none");
                this.$input.val(this.text);
                this.$input.css("display", "inline-block").focus();
                _super.prototype.click.call(this, e);
            };
            Label.prototype.keydown = function (e) {
                if (this.$input.is(":focus")) {
                    if ((e).keyCode == akra.EKeyCodes.ENTER) {
                        this.focusout(e);
                    }
                }
                _super.prototype.keydown.call(this, e);
            };
            Label.prototype.focusout = function (e) {
                var sText = this.$input.val();
                var isChanged = (/*not inlined, because supportes only single statement functions(cur. st. count: 3)*/this.text !== sText);
                // LOG(this.text, sText);
                ((this).$text.html((sText) + ((this)._sPostfix || "")));
                this.$text.css("display", "inline-block");
                this.$input.css("display", "none");
                if (isChanged) {
                    this.changed(sText);
                }
                _super.prototype.focusout.call(this, e);
            };
            Label.prototype.changed = function (value) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).changed;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, value) : _broadcast[i].listener(_recivier, value);
                    }
                }
            };
            return Label;
        })(ui.Component);
        ui.Label = Label;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Label")] = (Label));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        function prettifyNumber(x) {
            if (x === akra.math.floor(x)) {
                return "" + x + ".";
            }
            return x.toFixed(2);
        }
        var Vector = (function (_super) {
            __extends(Vector, _super);
            function Vector(ui, options, eType) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.VECTOR; }
                        _super.call(this, ui, options, eType);
                this.totalComponents = 4;
                /**@protected*/ this._iFixed = 2;
                /**@protected*/ this._bEditable = false;
                this.template("Vector.tpl");
                this.x = this.findEntity('x');
                this.y = this.findEntity('y');
                this.z = this.findEntity('z');
                this.w = this.findEntity('w');
                ((this.x).getEventTable().addDestination(((((this.x)))._iGuid), ("changed"), (this), ("changed"), (undefined)));
                ((this.y).getEventTable().addDestination(((((this.y)))._iGuid), ("changed"), (this), ("changed"), (undefined)));
                ((this.z).getEventTable().addDestination(((((this.z)))._iGuid), ("changed"), (this), ("changed"), (undefined)));
                ((this.w).getEventTable().addDestination(((((this.w)))._iGuid), ("changed"), (this), ("changed"), (undefined)));
                this.$lock = ((this).$element).find("input[type=checkbox]:first");
                this.setVec4(akra.Vec4.stackCeil.set(0.));
            }
            Object.defineProperty(Vector.prototype, "value", {
                get: /** @inline */function () {
                    switch(this.totalComponents) {
                        case 2:
                            return this.toVec2();
                        case 3:
                            return this.toVec3();
                        case 4:
                            return this.toVec4();
                    }
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Vector.prototype._createdFrom = function ($comp) {
                var bValue = $comp.attr("editable") || false;
                var sPostfix = $comp.attr("postfix") || null;
                this.x.postfix = sPostfix;
                this.y.postfix = sPostfix;
                this.z.postfix = sPostfix;
                this.w.postfix = sPostfix;
                this.editable(bValue);
            };
            Vector.prototype.editable = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                if (bValue) {
                    ((this).$element).addClass("editable");
                    this.$lock.show();
                } else {
                    ((this).$element).removeClass("editable");
                    this.$lock.hide();
                }
                this.x.editable(bValue);
                this.y.editable(bValue);
                this.z.editable(bValue);
                this.w.editable(bValue);
                this._bEditable = bValue;
            };
            Vector.prototype.isEditable = /** @inline */function () {
                return this._bEditable;
            };
            Vector.prototype.changed = function (pLbl, sValue) {
                if (this.$lock.prop("checked")) {
                    this.x.text = this.y.text = this.z.text = this.w.text = sValue;
                }
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).changed;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/this.value) : _broadcast[i].listener(_recivier, /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/this.value);
                    }
                }
                ;
            };
            Vector.prototype.useComponents = /**@protected*/ function (n) {
                if (n === this.totalComponents) {
                    return;
                }
                var pSpanList = ((this).$element).find(">span");
                switch(n) {
                    case 2:
                        $(pSpanList[3]).css("display", "none");
                        $(pSpanList[2]).css("display", "none");
                        break;
                    case 3:
                        $(pSpanList[3]).css("display", "none");
                        $(pSpanList[2]).css("display", "inline-block");
                        break;
                    case 4:
                        $(pSpanList[3]).css("display", "inline-block");
                        $(pSpanList[2]).css("display", "inline-block");
                }
                this.totalComponents = n;
            };
            Vector.prototype.setVec2 = function (v) {
                var n = this._iFixed;
                this.x.text = prettifyNumber(v.x);
                this.y.text = prettifyNumber(v.y);
                this.useComponents(2);
            };
            Vector.prototype.setVec3 = function (v) {
                var n = this._iFixed;
                this.x.text = prettifyNumber(v.x);
                this.y.text = prettifyNumber(v.y);
                this.z.text = prettifyNumber(v.z);
                this.useComponents(3);
            };
            Vector.prototype.setVec4 = function (v) {
                var n = this._iFixed;
                this.x.text = prettifyNumber(v.x);
                this.y.text = prettifyNumber(v.y);
                this.z.text = prettifyNumber(v.z);
                this.w.text = prettifyNumber(v.w);
                this.useComponents(4);
            };
            Vector.prototype.setColor = function (c) {
                this.x.text = prettifyNumber(c.r);
                this.y.text = prettifyNumber(c.g);
                this.z.text = prettifyNumber(c.b);
                this.w.text = prettifyNumber(c.a);
                this.useComponents(4);
            };
            Vector.prototype.toVec2 = function () {
                return akra.Vec2.stackCeil.set(parseFloat(this.x.text), parseFloat(this.y.text));
            };
            Vector.prototype.toVec3 = function () {
                return akra.Vec3.stackCeil.set(parseFloat(this.x.text), parseFloat(this.y.text), parseFloat(this.z.text));
            };
            Vector.prototype.toVec4 = function () {
                return akra.Vec4.stackCeil.set(parseFloat(this.x.text), parseFloat(this.y.text), parseFloat(this.z.text), parseFloat(this.w.text));
            };
            Vector.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                ((this).$element).addClass("component-vector");
            };
            return Vector;
        })(ui.Component);
        ui.Vector = Vector;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Vector")] = (Vector));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Layout = (function (_super) {
            __extends(Layout, _super);
            function Layout(parent, element, eType) {
                if (typeof element === "undefined") { element = $("<div class=\"layout\"/>"); }
                if (typeof eType === "undefined") { eType = akra.EUILayouts.UNKNOWN; }
                        _super.call(this, parent, element, akra.EUINodeTypes.LAYOUT);
                /**@protected*/ this._pAttrs = null;
                this._eLayoutType = eType;
            }
            Object.defineProperty(Layout.prototype, "layoutType", {
                get: /** @inline */function () {
                    return this._eLayoutType;
                },
                enumerable: true,
                configurable: true
            });
            Layout.prototype.attachToParent = function (pParent) {
                //layout must be a first child
                if (((pParent) === null) || !((pParent.child) === null)) {
                    //return false;
                    //WARNING("Node: \n" + pParent.toString(true) + "\nalready has layout node as child.");
                                    }
                return _super.prototype.attachToParent.call(this, pParent);
            };
            Layout.prototype.attr = /** @inline */function (sAttr) {
                return ((this._pAttrs) === null) ? null : (this._pAttrs)[sAttr];
            };
            Layout.prototype.setAttributes = function (pAttrs) {
                if (((pAttrs) === null)) {
                    return;
                }
                this._pAttrs = pAttrs;
            };
            Layout.prototype.childAdded = function (pChild) {
                _super.prototype.childAdded.call(this, pChild);
            };
            Layout.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<layout' + (((this)._sName) ? " " + ((this)._sName) : "") + '>';
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            return Layout;
        })(ui.HTMLNode);
        ui.Layout = Layout;        
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Horizontal = (function (_super) {
            __extends(Horizontal, _super);
            function Horizontal(parent) {
                //style=\"margin: 0 auto;\"
                        _super.call(this, parent, $("<div class='layout horizontal'><table/></div>"), akra.EUILayouts.HORIZONTAL);
                this.$table = this.$element.find("table:first");
                this.$row = $("<tr />");
                this.$table.append(this.$row);
            }
            Horizontal.prototype.renderTarget = function () {
                var $td = $("<td />");
                this.$row.append($td);
                return $td;
            };
            Horizontal.prototype.removeChild = function (pChild) {
                if (((((((pChild))) != null) && ((pChild)).type === /*checked (origin: akra)>>*/akra.EEntityTypes.UI_NODE) && ((pChild)).nodeType >= /*checked (origin: akra)>>*/akra.EUINodeTypes.HTML)) {
                    (pChild).$element.parent().remove();
                }
                return _super.prototype.removeChild.call(this, pChild);
            };
            Horizontal.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<horizontal' + (((this)._sName) ? " " + ((this)._sName) : "") + '>';
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            return Horizontal;
        })(ui.Layout);
        ui.Horizontal = Horizontal;        
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Vertical = (function (_super) {
            __extends(Vertical, _super);
            function Vertical(parent) {
                        _super.call(this, parent, $("<div class='layout vertical'><table /></div>"), akra.EUILayouts.VERTICAL);
                this.$table = this.$element.find("table:first");
            }
            Vertical.prototype.renderTarget = function () {
                var $trtd = $("<tr><td /></tr>");
                this.$table.append($trtd);
                return $trtd.find("> td");
            };
            Vertical.prototype.removeChild = function (pChild) {
                if (((((((pChild))) != null) && ((pChild)).type === /*checked (origin: akra)>>*/akra.EEntityTypes.UI_NODE) && ((pChild)).nodeType >= /*checked (origin: akra)>>*/akra.EUINodeTypes.HTML)) {
                    var $el = (pChild).$element;
                    $el.parent().parent().remove();
                }
                return _super.prototype.removeChild.call(this, pChild);
            };
            Vertical.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<vertical' + (((this)._sName) ? " " + ((this)._sName) : "") + '>';
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            return Vertical;
        })(ui.Layout);
        ui.Vertical = Vertical;        
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Slider = (function (_super) {
            __extends(Slider, _super);
            function Slider(parent, options, eType) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.SLIDER; }
                        _super.call(this, parent, options, eType);
                /**@protected*/ this._fRange = 100.0;
                /**@protected*/ this._fValue = 0.0;
                ((this)._pUI).createComponent("pin", {
                    class: "component-pin"
                }).attachToParent(this);
                ((this).$element).append("<div class=\"slider-text\"></div>");
                //this.$progress = this.$element.find(".slider-progress");
                this.$text = this.$element.find(".slider-text");
                ((((this))._pChild)).setDraggable();
                ((((((this))._pChild))).getEventTable().addDestination(((((((((this))._pChild)))))._iGuid), ("move"), (this), ("_updated"), (undefined)));
            }
            Object.defineProperty(Slider.prototype, "pin", {
                get: /** @inline */function () {
                    return ((this)._pChild);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Slider.prototype, "value", {
                get: /** @inline */function () {
                    return this._fValue * this._fRange;
                },
                set: function (fValue) {
                    if (fValue == this._fValue) {
                        return;
                    }
                    fValue = (/*checked (origin: math)>>*/akra.math.max((0.), /*checked (origin: math)>>*/akra.math.min((fValue / this._fRange), (1.))));
                    var iElementOffset = this.$element.offset().left;
                    var iPixelTotal = this.$element.width() - ((((this))._pChild)).$element.width();
                    var iPixelCurrent = iPixelTotal * fValue;
                    var iPinOffset = iPixelCurrent + iElementOffset + 1;
                    ((((this))._pChild)).$element.offset({
                        left: iPinOffset
                    });
                    this._fValue = fValue;
                    this.updated(((this)._fValue * (this)._fRange));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Slider.prototype, "range", {
                get: /** @inline */function () {
                    return this._fRange;
                },
                set: /** @inline */function (fValue) {
                    this._fRange = fValue;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Slider.prototype, "text", {
                get: /** @inline */function () {
                    return this.$text.text();
                },
                set: /** @inline */function (s) {
                    this.$text.text(s);
                },
                enumerable: true,
                configurable: true
            });
            Slider.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                ((this).$element).addClass("component-slider");
            };
            Slider.prototype._updated = function (pPin, e) {
                var fValuePrev = this._fValue;
                var fValue;
                var iPinOffset = ((((this))._pChild)).$element.offset().left;
                var iElementOffset = this.$element.offset().left;
                var iPixelTotal = this.$element.width() - ((((this))._pChild)).$element.width();
                //FIXME: white offsets not equals????
                var iPixelCurrent = iPinOffset - iElementOffset - 1;
                fValue = this._fValue = (/*checked (origin: math)>>*/akra.math.max((0.), /*checked (origin: math)>>*/akra.math.min((iPixelCurrent / iPixelTotal), (1.))));
                if (fValue != fValuePrev) {
                    this.updated(((this)._fValue * (this)._fRange));
                    // console.log("updated", this.value);
                                    }
            };
            Slider.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                var sRange = $comp.attr("range");
                if ((typeof (sRange) === "string")) {
                    ((this)._fRange = (parseFloat(sRange)));
                }
                var sValue = $comp.attr("value");
                if ((typeof (sValue) === "string")) {
                    this.value = parseFloat(sValue);
                }
            };
            Slider.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<slider' + (((this)._sName) ? " " + ((this)._sName) : "") + '>';
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            Slider.prototype.updated = function (value) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).updated;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, value) : _broadcast[i].listener(_recivier, value);
                    }
                }
            };
            return Slider;
        })(ui.Component);
        ui.Slider = Slider;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Slider")] = (Slider));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Checkbox = (function (_super) {
            __extends(Checkbox, _super);
            function Checkbox(parent, options, eType) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.CHECKBOX; }
                        _super.call(this, ui.getUI(parent), options, eType, $("<div><span class=\"checkbox-item-text\"></span></div>"));
                /**@protected*/ this._bChecked = false;
                this.$text = this.$element.find(".checkbox-item-text:first");
                if (((options) != null) && (typeof (options.text) === "string")) {
                    ((this).$text.html((options.text)));
                }
                if (!ui.isUI(parent)) {
                    this.attachToParent(parent);
                }
                ((this).$text.html((/*checked (origin: akra)>>*/akra.isObject(options) ? options.text || "" : "")));
                this.handleEvent("click");
            }
            Object.defineProperty(Checkbox.prototype, "checked", {
                get: /** @inline */function () {
                    return ((this)._bChecked);
                },
                set: /** @inline */function (bValue) {
                    var bPrev = ((this)._bChecked);
                    this._setValue(bValue);
                    if (bValue != bPrev) {
                        this.changed(bValue);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Checkbox.prototype, "text", {
                get: /** @inline */function () {
                    return this.$text.html();
                },
                set: /** @inline */function (sValue) {
                    this.$text.html(sValue);
                },
                enumerable: true,
                configurable: true
            });
            Checkbox.prototype._setValue = function (bValue) {
                if (bValue) {
                    this.$element.addClass("active");
                } else {
                    this.$element.removeClass("active");
                }
                this._bChecked = bValue;
            };
            Checkbox.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                ((this).$text.html(($comp.attr("text"))));
                if ((($comp.attr("checked")) !== undefined)) {
                    /*not inlined, because supportes only single statement functions(cur. st. count: 4)*/this.checked = true;
                }
                var sImage = $comp.attr("img");
                if ((typeof (sImage) === "string")) {
                    this.$text.before("<img src='" + sImage + "' />");
                }
            };
            Checkbox.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                ((this).$element).addClass("component-checkbox");
            };
            Checkbox.prototype.isChecked = /** @inline */function () {
                return this._bChecked;
            };
            Checkbox.prototype.click = function (e) {
                /*not inlined, because supportes only single statement functions(cur. st. count: 4)*/this.checked = !((((this))._bChecked));
                e.stopPropagation();
                _super.prototype.click.call(this, e);
            };
            Checkbox.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<checkbox' + (((this)._sName) ? " " + ((this)._sName) : "") + '>';
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            Checkbox.prototype.changed = function (value) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).changed;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, value) : _broadcast[i].listener(_recivier, value);
                    }
                }
            };
            return Checkbox;
        })(ui.Component);
        ui.Checkbox = Checkbox;        
        /** @inline */function isCheckbox(pEntity) {
            return ui.isComponent(pEntity, akra.EUIComponents.CHECKBOX);
        }
        ui.isCheckbox = isCheckbox;
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Checkbox")] = (Checkbox));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var CheckboxList = (function (_super) {
            __extends(CheckboxList, _super);
            function CheckboxList(parent, options, eType) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.CHECKBOX_LIST; }
                        _super.call(this, parent, options, eType);
                this._nSize = 0;
                this._pItems = [];
                this._bMultiSelect = false;
                this._bLikeRadio = false;
                this.setLayout(akra.EUILayouts.HORIZONTAL);
                ((this.layout).getEventTable().addDestination(((((this.layout)))._iGuid), ("childAdded"), (this), ("_childAdded"), (/*checked (origin: akra)>>*/akra.EEventTypes.UNICAST)));
                ((this.layout).getEventTable().addDestination(((((this.layout)))._iGuid), ("childRemoved"), (this), ("_childRemoved"), (/*checked (origin: akra)>>*/akra.EEventTypes.UNICAST)));
                var pChild = this.layout.child;
                while(!((pChild) === null)) {
                    if ((/*checked (origin: ui)>>*/akra.ui.isComponent((pChild), /*checked (origin: akra)>>*/akra.EUIComponents.CHECKBOX))) {
                        this.addCheckbox(pChild);
                    }
                    pChild = pChild.sibling;
                }
            }
            Object.defineProperty(CheckboxList.prototype, "length", {
                get: /** @inline */function () {
                    return this._nSize;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CheckboxList.prototype, "radio", {
                get: /** @inline */function () {
                    return this._bLikeRadio;
                },
                set: /** @inline */function (b) {
                    this._bLikeRadio = b;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CheckboxList.prototype, "items", {
                get: /** @inline */function () {
                    return this._pItems;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CheckboxList.prototype, "checked", {
                get: /** @inline */function () {
                    for(var i = 0; i < ((this)._pItems).length; ++i) {
                        if (((this)._pItems)[i].checked) {
                            return ((this)._pItems)[i];
                        }
                    }
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            CheckboxList.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                ((this)._bLikeRadio = ((($comp.attr("radio")) !== undefined) && $comp.attr("radio").toLowerCase() !== "false"));
                this._bMultiSelect = (($comp.attr("multiselect")) !== undefined) && $comp.attr("multiselect").toLowerCase() !== "false";
            };
            CheckboxList.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                ((this).$element).addClass("component-checkboxlist");
            };
            CheckboxList.prototype.hasMultiSelect = /** @inline */function () {
                return this._bMultiSelect;
            };
            CheckboxList.prototype.update = //when checkbox added to childs
            function () {
                var pItems = this._pItems;
                if (pItems.length == 0) {
                    return;
                }
                pItems.first.$element.addClass("first");
                for(var i = 0; i < pItems.length - 1; ++i) {
                    pItems[i].$element.removeClass("last");
                }
                ;
                pItems.last.$element.addClass("last");
                return _super.prototype.update.call(this);
            };
            CheckboxList.prototype.addCheckbox = /**@protected*/ function (pCheckbox) {
                this._pItems.push(pCheckbox);
                ((pCheckbox).getEventTable().addDestination(((((pCheckbox)))._iGuid), ("changed"), (this), ("_changed"), (undefined)));
                this.update();
            };
            CheckboxList.prototype._childAdded = function (pLayout, pNode) {
                if ((/*checked (origin: ui)>>*/akra.ui.isComponent((pNode), /*checked (origin: akra)>>*/akra.EUIComponents.CHECKBOX))) {
                    this.addCheckbox(pNode);
                }
            };
            CheckboxList.prototype._childRemoved = function (pLayout, pNode) {
                if ((/*checked (origin: ui)>>*/akra.ui.isComponent((pNode), /*checked (origin: akra)>>*/akra.EUIComponents.CHECKBOX))) {
                    var i = this._pItems.indexOf(pNode);
                    if (i != -1) {
                        var pCheckbox = this._pItems[i];
                        ((pCheckbox).getEventTable().removeDestination(((((pCheckbox)))._iGuid), ("changed"), (this), ("_changed"), (undefined)));
                        this._pItems.splice(i, 1);
                        this.update();
                    }
                }
            };
            CheckboxList.prototype._changed = function (pCheckbox, bCheked) {
                if (((this)._bMultiSelect)) {
                    this.changed(pCheckbox);
                    return;
                } else {
                    if (!bCheked && this.radio) {
                        pCheckbox.checked = true;
                        return;
                    }
                    var pItems = this._pItems;
                    for(var i = 0; i < pItems.length; ++i) {
                        if (pItems[i] === pCheckbox) {
                            continue;
                        }
                        pItems[i]._setValue(false);
                    }
                    this.changed(pCheckbox);
                }
            };
            CheckboxList.prototype.changed = function (pCheckbox) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).changed;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pCheckbox) : _broadcast[i].listener(_recivier, pCheckbox);
                    }
                }
            };
            return CheckboxList;
        })(ui.Component);
        ui.CheckboxList = CheckboxList;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("CheckboxList")] = (CheckboxList));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Window = (function (_super) {
            __extends(Window, _super);
            function Window(pUI, options) {
                        _super.call(this, pUI, options, akra.EUIComponents.WINDOW);
                this._pWindow = window.open("", "", "height=480, width=640", false);
                this.$document = $(this._pWindow.document);
                this.$element = this.$document.find("body");
                this.$document.find("head").append(ui.$document.find("link"));
                //clear window content
                this.$element.html("");
            }
            return Window;
        })(ui.Component);
        ui.Window = Window;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Window")] = (Window));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    (function (ENodeInheritance) {
        ENodeInheritance._map = [];
        //inheritance only position
        ENodeInheritance.POSITION = 0;
        ENodeInheritance._map[1] = "ROTSCALE";
        //inheritance rotation and scale only
        ENodeInheritance.ROTSCALE = 1;
        ENodeInheritance._map[2] = "ALL";
        //inheritance all
        ENodeInheritance.ALL = 2;
    })(akra.ENodeInheritance || (akra.ENodeInheritance = {}));
    var ENodeInheritance = akra.ENodeInheritance;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    (function (ECameraParameters) {
        ECameraParameters._map = [];
        ECameraParameters.CONST_ASPECT = 1;
    })(akra.ECameraParameters || (akra.ECameraParameters = {}));
    var ECameraParameters = akra.ECameraParameters;
    (function (ECameraTypes) {
        ECameraTypes._map = [];
        ECameraTypes._map[0] = "PERSPECTIVE";
        ECameraTypes.PERSPECTIVE = 0;
        ECameraTypes._map[1] = "ORTHO";
        ECameraTypes.ORTHO = 1;
        ECameraTypes._map[2] = "OFFSET_ORTHO";
        ECameraTypes.OFFSET_ORTHO = 2;
    })(akra.ECameraTypes || (akra.ECameraTypes = {}));
    var ECameraTypes = akra.ECameraTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    (function (EFramebuffer) {
        EFramebuffer._map = [];
        EFramebuffer._map[0] = "FRONT";
        EFramebuffer.FRONT = 0;
        EFramebuffer._map[1] = "BACK";
        EFramebuffer.BACK = 1;
        EFramebuffer._map[2] = "AUTO";
        EFramebuffer.AUTO = 2;
    })(akra.EFramebuffer || (akra.EFramebuffer = {}));
    var EFramebuffer = akra.EFramebuffer;
    ;
    (function (EStatFlags) {
        EStatFlags._map = [];
        EStatFlags.NONE = 0;
        EStatFlags.FPS = 1;
        EStatFlags.AVG_FPS = 2;
        EStatFlags.BEST_FPS = 4;
        EStatFlags.WORST_FPS = 8;
        EStatFlags.TRIANGLE_COUNT = 16;
        EStatFlags.ALL = 0xFFFF;
    })(akra.EStatFlags || (akra.EStatFlags = {}));
    var EStatFlags = akra.EStatFlags;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var RenderTargetStats = (function (_super) {
            __extends(RenderTargetStats, _super);
            function RenderTargetStats(ui, options, pRenderTarget) {
                        _super.call(this, ui, options, akra.EUIComponents.VIEWPORT_STATS, $("<div class=\"component-fps\" ><div class=\"info\"></div><div class=\"graph\"></div></div>"));
                /**@protected*/ this._pRenderTarget = null;
                /**@protected*/ this._pUpdateInterval = -1;
                var $graph = ((this).$element).find(".graph");
                var pInfo = ((this).$element).find(".info").get()[0];
                var pTicks = [];
                var pValues = [];
                //FIXME: write float adaptive values
                var iTotal = 100;
                for(var i = 0; i < iTotal; ++i) {
                    var $tick = $("<span class=\"tick\"/>");
                    $graph.append($tick);
                    pTicks.push($tick.get()[0]);
                    pValues.push(0);
                }
                this._pInfoElement = pInfo;
                this._pValues = pValues;
                this._pTicks = pTicks;
                if (((pRenderTarget) != null)) {
                    this.target = pRenderTarget;
                }
            }
            Object.defineProperty(RenderTargetStats.prototype, "info", {
                get: /** @inline */function () {
                    return this._pInfoElement;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderTargetStats.prototype, "target", {
                get: /** @inline */function () {
                    return this._pRenderTarget;
                },
                set: function (pRenderTarget) {
                    var _this = this;
                    if (!((this._pRenderTarget) === null)) {
                        //this.disconnect(this._pRenderTarget, SIGNAL(postUpdate), SLOT(updateStats));
                        clearInterval(this._pUpdateInterval);
                    }
                    //this.connect(pRenderTarget, SIGNAL(postUpdate), SLOT(updateStats));
                    this._pRenderTarget = pRenderTarget;
                    this._pUpdateInterval = setInterval(/** @inline */function () {
                        _this.updateStats();
                    }, 1000);
                },
                enumerable: true,
                configurable: true
            });
            RenderTargetStats.prototype.updateStats = function () {
                var pTarget = ((this)._pRenderTarget);
                var pStat = pTarget.getStatistics();
                var fFPS = pStat.fps.last;
                var v = this._pValues;
                var iTotal = v.length;
                var iMaxHeight = 27;
                var sFps = fFPS.toFixed(2);
                for(var i = 0, n = iTotal - 1; i < n; ++i) {
                    v[i] = v[i + 1];
                }
                v[n] = fFPS;
                ((this)._pInfoElement).textContent = "FPS: " + (v[n] < 100 ? (v[n] < 10 ? "  " + sFps : " " + sFps) : sFps);
                var max = akra.math.max.apply(akra.math, v);
                var pTicks = this._pTicks;
                for(var i = 0; i < iTotal; ++i) {
                    pTicks[i].style.height = akra.math.floor(v[i] / max * iMaxHeight) + "px";
                    var fColor = akra.math.min(v[i], 60.) / 60.;
                    pTicks[i].style.backgroundColor = "rgb(" + (akra.math.floor((1 - fColor) * 125) + 125) + ", " + (akra.math.floor(fColor * 125) + 125) + ", 0)";
                }
            };
            RenderTargetStats.prototype.rendered = function () {
                ((this).$element).addClass("component-fps");
            };
            return RenderTargetStats;
        })(ui.Component);
        ui.RenderTargetStats = RenderTargetStats;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("RenderTargetStats")] = (RenderTargetStats));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var ObjectArray = (function () {
            // set length(n: uint) {
            // 	if (this._bLock) {
            // 		return;
            // 	}
            // 	this.extend(n);
            // 	this._iLength = n;
            // }
            function ObjectArray(pElements) {
                /**@protected*/ this._pData = [];
                /**@protected*/ this._bLock = false;
                /**@protected*/ this._iLength = 0;
                if (arguments.length) {
                    this.fromArray(pElements);
                }
            }
            Object.defineProperty(ObjectArray.prototype, "length", {
                get: /** @inline */function () {
                    return this._iLength;
                },
                enumerable: true,
                configurable: true
            });
            ObjectArray.prototype.lock = /** @inline */function () {
                this._bLock = true;
            };
            ObjectArray.prototype.unlock = /** @inline */function () {
                this._bLock = false;
            };
            ObjectArray.prototype.isLocked = /** @inline */function () {
                return this._bLock;
            };
            ObjectArray.prototype.clear = function (bRemoveLinks) {
                if (typeof bRemoveLinks === "undefined") { bRemoveLinks = false; }
 {
                    util.logger.setSourceLocation("util/ObjectArray.ts", 47);
                    util.logger.assert(!this._bLock, "cannot clear. array is locked.");
                }
                ;
                this._iLength = 0;
                if (bRemoveLinks) {
                    for(var i = 0; i < this._pData.length; ++i) {
                        this._pData[i] = null;
                    }
                }
                return this;
            };
            ObjectArray.prototype.release = function () {
                this.clear(true);
                this._pData.clear();
                return this;
            };
            ObjectArray.prototype.value = /** @inline */function (n) {
                return this._pData[n];
            };
            ObjectArray.prototype.extend = function (n) {
                if (this._pData.length < n) {
                    //LOG("extending object array to > " + n);
                    for(var i = this._pData.length; i < n; ++i) {
                        this._pData[i] = null;
                    }
                }
            };
            ObjectArray.prototype.set = function (n, pData) {
 {
                    util.logger.setSourceLocation("util/ObjectArray.ts", 80);
                    util.logger.assert(!this._bLock, "cannot clear. array is locked.");
                }
                ;
                var N = n + 1;
                this.extend(N);
                if (this._iLength < N) {
                    this._iLength = N;
                }
                this._pData[n] = pData;
                return this;
            };
            ObjectArray.prototype.fromArray = function (pElements, iOffset, iSize) {
                if (typeof iOffset === "undefined") { iOffset = 0; }
                if (typeof iSize === "undefined") { iSize = 0; }
 {
                    util.logger.setSourceLocation("util/ObjectArray.ts", 96);
                    util.logger.assert(!this._bLock, "cannot clear. array is locked.");
                }
                ;
                iSize = iSize > 0 ? iSize < pElements.length ? iSize : pElements.length : pElements.length;
                this.extend(iSize);
                for(var i = iOffset, j = 0; i < iSize; ++i, ++j) {
                    this._pData[i] = pElements[j];
                }
                this._iLength = i;
                return this;
            };
            ObjectArray.prototype.push = /** @inline */function (pElement) {
 {
                    util.logger.setSourceLocation("util/ObjectArray.ts", 113);
                    util.logger.assert(!this._bLock, "cannot clear. array is locked.");
                }
                ;
                return this.set(this._iLength, pElement);
            };
            ObjectArray.prototype.pop = /** @inline */function () {
 {
                    util.logger.setSourceLocation("util/ObjectArray.ts", 119);
                    util.logger.assert(!this._bLock, "cannot clear. array is locked.");
                }
                ;
                return this._iLength > 0 ? this._pData[--this._iLength] : null;
            };
            ObjectArray.prototype.swap = /** @inline */function (i, j) {
 {
                    util.logger.setSourceLocation("util/ObjectArray.ts", 124);
                    util.logger.assert(!this._bLock, "cannot clear. array is locked.");
                }
                ;
 {
                    util.logger.setSourceLocation("util/ObjectArray.ts", 125);
                    util.logger.assert(i < this._iLength && j < this._iLength, "invalid swap index.");
                }
                ;
                this._pData.swap(i, j);
                return this;
            };
            ObjectArray.prototype.takeAt = function (iPos) {
                var pValue = ((this)._pData[(iPos)]);
                for(var i = iPos + 1, j = iPos; i < ((this)._iLength); ++i, ++j) {
                    this._pData[j] = this._pData[i];
                }
                this._iLength--;
                return pValue;
            };
            ObjectArray.prototype.indexOf = function (pObject) {
                for(var i = 0; i < this._iLength; i++) {
                    if (pObject === this._pData[i]) {
                        return i;
                    }
                }
                return -1;
            };
            return ObjectArray;
        })();
        util.ObjectArray = ObjectArray;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.ObjectArray = akra.util.ObjectArray;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var TreeNode = (function () {
            function TreeNode(pTree, pSource) {
                this.el = null;
                this.parent = null;
                this.tree = null;
                this.source = null;
                this.expanded = false;
                /**@protected*/ this._pNodeMap = {};
                /**@protected*/ this.$childrenNode = null;
                this.tree = pTree;
                this.source = pSource;
 {
                    akra.logger.setSourceLocation("Tree.ts", 45);
                    akra.logger.assert(!((pSource) === null), "source entity can not be null");
                }
                ;
                var pNode = this;
                this.el = $("<li><label  for=\"" + this.getID() + "\">" + ((this).source.name ? (this).source.name : "<span class=\"unnamed\">[unnamed]</span>") + "</label></li>");
                this.el.find("label:first").click(function (e) {
                    e.stopPropagation();
                    pNode.select();
                });
                this.tree._link(this);
                this.sync();
            }
            Object.defineProperty(TreeNode.prototype, "totalChildren", {
                get: /** @inline */function () {
                    return Object.keys(this._pNodeMap).length;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TreeNode.prototype, "selected", {
                get: /** @inline */function () {
                    return this.tree.isSelected(this);
                },
                set: function (bValue) {
                    if (!((this).tree.isSelected((this))) && !bValue) {
                        this.el.find("label:first").removeClass("selected");
                    } else if (((this).tree.isSelected((this))) && bValue) {
                        this.el.find("label:first").addClass("selected");
                    }
                },
                enumerable: true,
                configurable: true
            });
            TreeNode.prototype.expand = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                if ((Object.keys((this)._pNodeMap).length)) {
                    this.el.find("input").attr("checked", bValue);
                }
                this.expanded = bValue;
            };
            TreeNode.prototype.select = function (isSelect) {
                if (typeof isSelect === "undefined") { isSelect = true; }
                return this.tree.select(this);
            };
            TreeNode.prototype.getID = /**@protected*/ function () {
                return "node-guid-" + this.source.getGuid();
            };
            TreeNode.prototype.sync = /**@protected*/ function (bRecursive) {
                if (typeof bRecursive === "undefined") { bRecursive = true; }
                this.el.find("label:first").html(((this).source.name ? (this).source.name : "<span class=\"unnamed\">[unnamed]</span>"));
                if (bRecursive) {
                    var pChildren = this.source.children();
                    var pChildMap = {};
                    for(var i = 0; i < pChildren.length; ++i) {
                        var pChild = pChildren[i];
                        pChildMap[pChild.getGuid()] = pChild;
                        if (!this.inChildren(pChild)) {
                            this.addChild(this.tree._createNode(pChild));
                        }
                    }
                    //remove non-existance nodes
                    for(var iGuid in this._pNodeMap) {
                        if (!((pChildMap[iGuid]) !== undefined)) {
                            this._pNodeMap[iGuid].destroy();
                        }
                    }
                }
            };
            TreeNode.prototype.synced = function () {
                this.el.find("label:first").removeClass("updating");
            };
            TreeNode.prototype.waitForSync = function () {
                this.el.find("label:first").addClass("updating");
            };
            TreeNode.prototype.removeChildren = /**@protected*/ function () {
                for(var i in this._pNodeMap) {
                    this._pNodeMap[i].destroy();
                    this._pNodeMap[i] = null;
                }
            };
            TreeNode.prototype.inChildren = /**@protected*/ function (pNode) {
                return ((this._pNodeMap[pNode.getGuid()]) != null);
            };
            TreeNode.prototype.sourceName = /**@protected*/ /** @inline */function () {
                return this.source.name ? this.source.name : "<span class=\"unnamed\">[unnamed]</span>";
            };
            TreeNode.prototype.addChild = /**@protected*/ function (pNode) {
                if (((this.$childrenNode) === null)) {
                    this.el.append("<input " + (this.expanded ? "checked" : "") + " type=\"checkbox\"  id=\"" + this.getID() + "\" />");
                    this.el.removeClass("file");
                    this.$childrenNode = $("<ol />");
                    this.el.append(this.$childrenNode);
                }
                this.$childrenNode.append(pNode.el);
                this._pNodeMap[pNode.source.getGuid()] = pNode;
            };
            TreeNode.prototype.destroy = function () {
                this.removeChildren();
                this.tree._unlink(this);
                this.tree = null;
                this.source = null;
                this.el.remove();
            };
            return TreeNode;
        })();
        ui.TreeNode = TreeNode;        
        var Tree = (function (_super) {
            __extends(Tree, _super);
            function Tree(ui, options, eType) {
                if (typeof eType === "undefined") { eType = akra.EUIComponents.TREE; }
                        _super.call(this, ui, options, eType, $("<ol class='tree'/>"));
                /**@protected*/ this._pNodeMap = {};
                /**@protected*/ this._pRootNode = null;
                /**@protected*/ this._pSelectedNode = null;
            }
            Tree.prototype.fromTree = function (pEntity) {
                if (!((this._pRootNode) === null)) {
 {
                        akra.logger.setSourceLocation("Tree.ts", 160);
                        akra.logger.criticalError("TODO: replace node");
                    }
                    ;
                }
                this._pRootNode = this._createNode(pEntity);
                this._pRootNode.sync();
                this._pRootNode.expand();
                ((this).$element).append(this._pRootNode.el);
                this._pRootNode.select();
            };
            Object.defineProperty(Tree.prototype, "rootNode", {
                get: /** @inline */function () {
                    return this._pRootNode;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Tree.prototype, "selectedNode", {
                get: /** @inline */function () {
                    return !((this._pSelectedNode) === null) ? this._pSelectedNode.source : null;
                },
                enumerable: true,
                configurable: true
            });
            Tree.prototype._select = function (pNode) {
                var pPrev = this._pSelectedNode;
                this._pSelectedNode = null;
                if (!((pPrev) === null)) {
                    pPrev.selected = false;
                }
                this._pSelectedNode = pNode;
                if (!((this._pSelectedNode) === null)) {
                    this._pSelectedNode.selected = true;
                }
                return true;
            };
            Tree.prototype.select = function (pNode) {
                return this._select(pNode);
            };
            Tree.prototype.selectByGuid = function (iGuid) {
                if (this._pSelectedNode && this._pSelectedNode.source.getGuid() === iGuid) {
                    return;
                }
                var pNode = this._pNodeMap[iGuid];
                if (pNode) {
                    this._select(pNode);
                }
            };
            Tree.prototype.isSelected = function (pNode) {
                return this._pSelectedNode === pNode;
            };
            Tree.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                ((this).$element).addClass("component-tree");
            };
            Tree.prototype._createNode = function (pEntity) {
                var pNode = new TreeNode(this, pEntity);
                return pNode;
            };
            Tree.prototype._link = function (pNode) {
                this._pNodeMap[pNode.source.getGuid()] = pNode;
            };
            Tree.prototype._unlink = function (pNode) {
                this._pNodeMap[pNode.source.getGuid()] = null;
            };
            Tree.prototype.sync = function (pEntity) {
                if (arguments.length && !((pEntity) === null)) {
                    this._pNodeMap[pEntity.getGuid()].sync(false);
                } else {
                    ((this)._pRootNode).sync();
                }
            };
            return Tree;
        })(ui.Component);
        ui.Tree = Tree;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Tree")] = (Tree));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    /// @: {data}/ui/3d-party/codemirror/lib/codemirror.css|location()|css()|data_location({data},DATA)
    /// @: {data}/ui/3d-party/codemirror/lib/codemirror.js|location()|script()|data_location({data},DATA)
    /// @: {data}/ui/3d-party/codemirror/addon/hint/show-hint.js|location()|script()|data_location({data},DATA)
    /// @: {data}/ui/3d-party/codemirror/addon/hint/show-hint.css|location()|css()|data_location({data},DATA)
    /// @: {data}/ui/3d-party/codemirror/addon/hint/javascript-hint.js|location()|script()|data_location({data},DATA)
    /// @: {data}/ui/3d-party/codemirror/mode/javascript/javascript.js|location()|script()|data_location({data},DATA)
    (function (ui) {
        var CodeEditor = (function (_super) {
            __extends(CodeEditor, _super);
            function CodeEditor(parent, options) {
                        _super.call(this, parent, options, akra.EUIComponents.CODE_EDITOR, $("<textarea />"));
                this.codemirror = null;
            }
            Object.defineProperty(CodeEditor.prototype, "value", {
                get: /** @inline */function () {
                    return this.codemirror.getValue();
                },
                set: /** @inline */function (sValue) {
                    this.codemirror.setValue(sValue);
                },
                enumerable: true,
                configurable: true
            });
            CodeEditor.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                CodeMirror.commands.autocomplete = function (cm) {
                    (CodeMirror).showHint(cm, (CodeMirror).javascriptHint, {
                        additionalContext: {
                            self: akra.ide._apiEntry
                        }
                    });
                };
                this.codemirror = CodeMirror.fromTextArea(((this).$element.get()[0]), {
                    lineNumbers: true,
                    extraKeys: {
                        "Ctrl-Space": "autocomplete"
                    },
                    value: (((this)._pComponentOptions)).code || ""
                });
            };
            return CodeEditor;
        })(ui.Component);
        ui.CodeEditor = CodeEditor;        
        (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("CodeEditor")] = (CodeEditor));
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    (function (EUIGraphDirections) {
        EUIGraphDirections._map = [];
        EUIGraphDirections.IN = 0x01;
        EUIGraphDirections.OUT = 0x02;
    })(akra.EUIGraphDirections || (akra.EUIGraphDirections = {}));
    var EUIGraphDirections = akra.EUIGraphDirections;
    (function (EUIGraphTypes) {
        EUIGraphTypes._map = [];
        EUIGraphTypes._map[0] = "UNKNOWN";
        EUIGraphTypes.UNKNOWN = 0;
        EUIGraphTypes._map[1] = "ANIMATION";
        EUIGraphTypes.ANIMATION = 1;
    })(akra.EUIGraphTypes || (akra.EUIGraphTypes = {}));
    var EUIGraphTypes = akra.EUIGraphTypes;
    (function (EUIGraphEvents) {
        EUIGraphEvents._map = [];
        EUIGraphEvents._map[0] = "UNKNOWN";
        EUIGraphEvents.UNKNOWN = 0;
        EUIGraphEvents._map[1] = "DELETE";
        EUIGraphEvents.DELETE = 1;
        EUIGraphEvents._map[2] = "SHOW_MAP";
        EUIGraphEvents.SHOW_MAP = 2;
        EUIGraphEvents._map[3] = "HIDE_MAP";
        EUIGraphEvents.HIDE_MAP = 3;
    })(akra.EUIGraphEvents || (akra.EUIGraphEvents = {}));
    var EUIGraphEvents = akra.EUIGraphEvents;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    (function (EUIGraphNodes) {
        EUIGraphNodes._map = [];
        EUIGraphNodes._map[0] = "UNKNOWN";
        EUIGraphNodes.UNKNOWN = 0;
        EUIGraphNodes._map[1] = "ANIMATION_DATA";
        EUIGraphNodes.ANIMATION_DATA = 1;
        EUIGraphNodes._map[2] = "ANIMATION_PLAYER";
        EUIGraphNodes.ANIMATION_PLAYER = 2;
        EUIGraphNodes._map[3] = "ANIMATION_BLENDER";
        EUIGraphNodes.ANIMATION_BLENDER = 3;
        EUIGraphNodes._map[4] = "ANIMATION_MASK";
        EUIGraphNodes.ANIMATION_MASK = 4;
    })(akra.EUIGraphNodes || (akra.EUIGraphNodes = {}));
    var EUIGraphNodes = akra.EUIGraphNodes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    (function (EGraphConnectorOrient) {
        EGraphConnectorOrient._map = [];
        EGraphConnectorOrient._map[0] = "UNKNOWN";
        EGraphConnectorOrient.UNKNOWN = 0;
        EGraphConnectorOrient._map[1] = "UP";
        EGraphConnectorOrient.UP = 1;
        EGraphConnectorOrient._map[2] = "DOWN";
        EGraphConnectorOrient.DOWN = 2;
        EGraphConnectorOrient._map[3] = "LEFT";
        EGraphConnectorOrient.LEFT = 3;
        EGraphConnectorOrient._map[4] = "RIGHT";
        EGraphConnectorOrient.RIGHT = 4;
    })(akra.EGraphConnectorOrient || (akra.EGraphConnectorOrient = {}));
    var EGraphConnectorOrient = akra.EGraphConnectorOrient;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var Route = (function () {
                function Route(pLeft, pRight) {
                    /** Route left address */
                    /**@protected*/ this._pLeft = null;
                    /** Route right address */
                    /**@protected*/ this._pRight = null;
                    /** Route status. */
                    /**@protected*/ this._bActive = false;
                    /**@protected*/ this._bHighlighted = false;
                    /**@protected*/ this._bEnabled = true;
                    /** Route domain */
                    /**@protected*/ this._pPath = null;
                    /**@protected*/ this._pArrow = null;
                    /**@protected*/ this._pInactiveColor = new akra.Color(.0, .0, .0, .75);
                    /**@protected*/ this._fWeight = 1.;
                    /**@protected*/ this._fMaxWeight = 1.;
                    this._pLeft = pLeft;
                    this._pRight = pRight;
                    this._pColor = akra.util.randomColor(true);
                    this._pColor.a = .5;
                    if (!((pLeft) === null)) {
                        pLeft.route = this;
                    }
                    if (!((pRight) === null)) {
                        pRight.route = this;
                    }
                }
                Object.defineProperty(Route.prototype, "inactiveColor", {
                    get: /** @inline */function () {
                        return this._pInactiveColor;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Route.prototype, "color", {
                    get: /** @inline */function () {
                        return this._pColor;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Route.prototype, "left", {
                    get: /** @inline */function () {
                        return this._pLeft;
                    },
                    set: function (pConnector) {
                        if (!((this._pLeft) === null)) {
                            this._pLeft.destroy();
                        }
                        this._pLeft = pConnector;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Route.prototype, "right", {
                    get: /** @inline */function () {
                        return this._pRight;
                    },
                    set: function (pConnector) {
                        if (!((this._pRight) === null)) {
                            this._pRight.destroy();
                        }
                        this._pRight = pConnector;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Route.prototype, "weight", {
                    get: /** @inline */function () {
                        return this._fWeight;
                    },
                    set: /** @inline */function (fWeight) {
 {
                            akra.logger.setSourceLocation("Route.ts", 66);
                            akra.logger.log(("\n" + (new Error()).stack.split("\n").slice(1).join("\n")));
                        }
                        this._fWeight = fWeight;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Route.prototype, "arrow", {
                    get: /** @inline */function () {
                        return this._pArrow;
                    },
                    set: /** @inline */function (pPath) {
                        var pRoute = this;
                        (pPath).click(function (e) {
                            e.stopPropagation();
                            pRoute.activate(!(pRoute._bActive));
                        });
                        this._pArrow = pPath;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Route.prototype, "path", {
                    get: /** @inline */function () {
                        return this._pPath;
                    },
                    set: /** @inline */function (pPath) {
                        var pRoute = this;
                        (pPath).click(function (e) {
                            e.stopPropagation();
                            pRoute.activate(!(pRoute._bActive));
                        });
                        this._pPath = pPath;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Route.prototype, "canvas", {
                    get: /** @inline */function () {
                        return ((this)._pLeft).graph.canvas;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Route.prototype, "enabled", {
                    get: /** @inline */function () {
                        return this._bEnabled;
                    },
                    set: /** @inline */function (b) {
                        if (b === this._bEnabled) {
                            return;
                        }
                        this._bEnabled = b;
                        this.routing();
                    },
                    enumerable: true,
                    configurable: true
                });
                Route.prototype.isConnectedWithNode = /** @inline */function (pNode) {
                    return ((this)._pLeft).node === pNode || ((this)._pRight).node === pNode;
                };
                Route.prototype.isConnectedWith = /** @inline */function (pConnector) {
                    return ((this)._pLeft) === pConnector || ((this)._pRight) === pConnector;
                };
                Route.prototype.isBridge = /** @inline */function () {
                    return !((((this)._pLeft)) === null) && !((((this)._pRight)) === null);
                };
                Route.prototype.isActive = /** @inline */function () {
                    return this._bActive;
                };
                Route.prototype.detach = function () {
                    this._pLeft = null;
                    this._pRight = null;
                };
                Route.prototype.remove = function (bRecirsive) {
                    if (typeof bRecirsive === "undefined") { bRecirsive = false; }
                    if (!((((this)._pLeft)) === null)) {
                        ((this)._pLeft).routeBreaked(this);
                        bRecirsive && ((this)._pLeft).destroy();
                    }
                    if (!((((this)._pRight)) === null)) {
                        ((this)._pLeft).routeBreaked(this);
                        bRecirsive && ((this)._pRight).destroy();
                    }
                    if (!((((this)._pPath)) === null)) {
                        (((this)._pPath)).remove();
                        (((this)._pArrow)).remove();
                    }
                };
                Route.prototype.sendEvent = function (e) {
                    if (!((this)._bEnabled)) {
                        return;
                    }
                    for(var i = 0; i < e.traversedRoutes.length; ++i) {
                        if (e.traversedRoutes[i] === this) {
                            return;
                        }
                    }
                    e.traversedRoutes.push(this);
                    if (!((((this)._pRight)) === null)) {
                        ((this)._pRight).sendEvent(e);
                    }
                    switch(e.type) {
                        case akra.EUIGraphEvents.SHOW_MAP:
                            this._bHighlighted = true;
                            ((this)._pLeft).el.css("backgroundColor", ((this)._pColor).html);
                            ((this)._pRight).el.css("backgroundColor", ((this)._pColor).html);
                            this.routing();
                            break;
                        case akra.EUIGraphEvents.HIDE_MAP:
                            this._bHighlighted = false;
                            ((this)._pLeft).el.css("backgroundColor", "");
                            ((this)._pRight).el.css("backgroundColor", "");
                            this.routing();
                            break;
                    }
                };
                Route.prototype.destroy = function () {
                    this.remove(false);
                };
                Route.prototype.activate = function (bValue) {
                    if (typeof bValue === "undefined") { bValue = true; }
                    if (((this)._bActive) === bValue) {
                        return;
                    }
                    // if (bValue === false && (this.left.isActive() || this.right.isActive())) {
                    // 	return;
                    // }
                    this._bActive = bValue;
                    if (!((((this)._pPath)) === null)) {
                        (((this)._pPath)).attr({
                            "stroke-width": bValue ? 3 : 1
                        });
                    }
                    ((this)._pLeft) && ((this)._pLeft).activate(bValue);
                    ((this)._pRight) && ((this)._pRight).activate(bValue);
                };
                Route.prototype.routing = function () {
                    var pLeft = Route.calcPosition(((this)._pLeft));
                    var pRight = Route.calcPosition(((this)._pRight));
                    this.drawRoute(pLeft, pRight, ((this)._pLeft).orient, ((this)._pRight).orient);
                };
                Route.prototype.drawRoute = /**@protected*/ function (pFrom, pTo, eFromOr, eToOr) {
                    if (typeof eFromOr === "undefined") { eFromOr = akra.EGraphConnectorOrient.UNKNOWN; }
                    if (typeof eToOr === "undefined") { eToOr = akra.EGraphConnectorOrient.UNKNOWN; }
                    var pFromAdd = {
                        x: 0,
                        y: 0
                    };
                    var pToAdd = {
                        x: 0,
                        y: 0
                    };
                    var dY = pTo.y - pFrom.y;
                    var dX = pTo.x - pFrom.x;
                    var isVertF = false;
                    var isVertT = false;
                    if (eFromOr == akra.EGraphConnectorOrient.UP || eFromOr == akra.EGraphConnectorOrient.DOWN) {
                        isVertF = true;
                    }
                    if (eToOr == akra.EGraphConnectorOrient.UP || eToOr == akra.EGraphConnectorOrient.DOWN) {
                        isVertT = true;
                    }
                    if (isVertT != isVertF) {
                        this.drawRoute(pFrom, pTo);
                        return;
                    }
                    if (dY > 0) {
                        if (eFromOr == akra.EGraphConnectorOrient.UP) {
                            pFromAdd.y = dY;
                        }
                        if (eToOr == akra.EGraphConnectorOrient.DOWN) {
                            pToAdd.y = -dY;
                        }
                    }
                    if (dY < 0) {
                        if (eFromOr == akra.EGraphConnectorOrient.DOWN) {
                            pFromAdd.y = -dY;
                        }
                        if (eToOr == akra.EGraphConnectorOrient.UP) {
                            pToAdd.y = dY;
                        }
                    }
                    if (dX > 0) {
                        if (eFromOr == akra.EGraphConnectorOrient.LEFT) {
                            pFromAdd.x = dX;
                        }
                        if (eToOr == akra.EGraphConnectorOrient.RIGHT) {
                            pToAdd.x = -dX;
                        }
                    }
                    if (dX < 0) {
                        if (eFromOr == akra.EGraphConnectorOrient.RIGHT) {
                            pFromAdd.x = -dX;
                        }
                        if (eToOr == akra.EGraphConnectorOrient.LEFT) {
                            pToAdd.x = dX;
                        }
                    }
                    var pPath = [
                        [
                            "M", 
                            pFrom.x, 
                            pFrom.y
                        ], 
                        [
                            "C", 
                            //output direction
                            pFrom.x, 
                            pFrom.y, 
                            isVertF ? pFrom.x : ((pFrom.x + pFromAdd.x) * 7 + pTo.x * 3) / 10, 
                            isVertF ? ((pFrom.y + pFromAdd.y) * 7 + pTo.y * 3) / 10 : pFrom.y, 
                            (pFrom.x + pTo.x) / 2, 
                            (pFrom.y + pTo.y) / 2, 
                            (pFrom.x + pTo.x) / 2, 
                            (pFrom.y + pTo.y) / 2, 
                            isVertT ? pTo.x : (pFrom.x * 3 + (pTo.x + pToAdd.x) * 7) / 10, 
                            isVertT ? (pFrom.y * 3 + (pTo.y + pToAdd.y) * 7) / 10 : pTo.y, 
                            //middle point
                            pTo.x, 
                            pTo.y, 
                            
                        ]
                    ];
                    var sColor = this._bHighlighted ? ((this)._pColor).htmlRgba : ((this)._pInactiveColor).htmlRgba;
                    var fWeight = this._bHighlighted ? 2. * this._fMaxWeight * this._fWeight : this._fMaxWeight * this._fWeight;
                    sColor = (!(((((this))._pLeft)) === null) && !(((((this))._pRight)) === null)) ? sColor : "rgba(255, 255, 255, 1.)";
                    if (!((this)._bEnabled)) {
                        sColor = "rgba(55, 55, 55, .5)";
                        fWeight = this._fMaxWeight * this._fWeight;
                    }
                    if (!((((this)._pPath)) === null)) {
                        (((this)._pPath)).attr({
                            path: pPath,
                            "stroke": sColor,
                            "stroke-width": fWeight
                        });
                    } else {
                        /*not inlined, because supportes only single statement functions(cur. st. count: 4)*/this.path = ((((((this))._pLeft).graph.canvas)).path(pPath)).attr({
                            "stroke": sColor,
                            "stroke-width": fWeight,
                            "stroke-linecap": "round"
                        });
                    }
                    var iLength = (((this)._pPath)).getTotalLength();
                    var iArrowHeight = 3;
                    var iArrowWidth = 10;
                    var pCenter = (((this)._pPath)).getPointAtLength(akra.math.max(iLength - iArrowWidth, 0));
                    var pArrowPos = (((this)._pPath)).getPointAtLength(akra.math.max((!(((((this))._pLeft)) === null) && !(((((this))._pRight)) === null)) ? iLength - 5 : iLength, 0));
                    var fAngle = akra.math.HALF_PI + akra.math.atan2(pCenter.x - pTo.x, pTo.y - pCenter.y);
                    // fAngle = (fAngle / (math.TWO_PI)) * 360;
                    var pA0 = {
                        x: (0 - iArrowWidth),
                        y: (0 - iArrowHeight)
                    };
                    var pA1 = {
                        x: (0 - iArrowWidth),
                        y: (0 + iArrowHeight)
                    };
                    var pA0n = {
                        x: pA0.x * akra.math.cos(fAngle) - pA0.y * akra.math.sin(fAngle),
                        y: pA0.x * akra.math.sin(fAngle) + pA0.y * akra.math.cos(fAngle)
                    };
                    var pA1n = {
                        x: pA1.x * akra.math.cos(fAngle) - pA1.y * akra.math.sin(fAngle),
                        y: pA1.x * akra.math.sin(fAngle) + pA1.y * akra.math.cos(fAngle)
                    };
                    var pArrow = [
                        [
                            "M", 
                            pArrowPos.x, 
                            pArrowPos.y
                        ], 
                        [
                            "L", 
                            pArrowPos.x + pA0n.x, 
                            pArrowPos.y + pA0n.y
                        ], 
                        [
                            "L", 
                            pArrowPos.x + pA1n.x, 
                            pArrowPos.y + pA1n.y
                        ], 
                        [
                            "L", 
                            (pArrowPos.x), 
                            (pArrowPos.y)
                        ]
                    ];
                    if (!((((this)._pArrow)) === null)) {
                        (((this)._pArrow)).attr({
                            path: pArrow,
                            "fill": sColor
                        });
                    } else {
                        /*not inlined, because supportes only single statement functions(cur. st. count: 4)*/this.arrow = (((((((this))._pLeft).graph.canvas)).path(pArrow)).attr({
                            "fill": sColor,
                            "stroke-width": //"stroke": "#FF0",
                            1
                        }));
                    }
                    // (<any>this.arrow).rotate(90 + fAngle, pTo.x, pTo.y);
                                    };
                Route.calcPosition = function calcPosition(pConnector) {
                    var pGraph = pConnector.graph;
                    var pGraphOffset = pGraph.$element.offset();
                    var pPosition = pConnector.$element.offset();
                    var pOut = {
                        x: pPosition.left - pGraphOffset.left,
                        y: pPosition.top - pGraphOffset.top
                    };
                    pOut.x += pConnector.$element.width() / 2.;
                    pOut.y += pConnector.$element.height() / 2.;
                    return pOut;
                };
                return Route;
            })();
            graph.Route = Route;            
            var TempRoute = (function (_super) {
                __extends(TempRoute, _super);
                function TempRoute(pLeft) {
                                _super.call(this, pLeft, null);
                }
                TempRoute.prototype.routing = function (pRight) {
                    if (typeof pRight === "undefined") { pRight = {
                        x: 0,
                        y: 0
                    }; }
                    var pLeft = Route.calcPosition(((this)._pLeft));
                    this.drawRoute(pLeft, pRight);
                };
                return TempRoute;
            })(Route);
            graph.TempRoute = TempRoute;            
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var Graph = (function (_super) {
                __extends(Graph, _super);
                function Graph(parent, options, eType) {
                    if (typeof eType === "undefined") { eType = akra.EUIGraphTypes.UNKNOWN; }
                                _super.call(this, parent, options, akra.EUIComponents.GRAPH);
                    /**@protected*/ this._pCanvas = null;
                    /**@protected*/ this._pTempRoute = null;
                    /**@protected*/ this.$svg = null;
                    this._eGraphType = eType;
                    //FIXME: unblock selection
                    // this.getHTMLElement().onselectstart = () => { return false };
                    ((this).$element).disableSelection();
                    this.handleEvent("mouseup mousemove keydown click");
                }
                Object.defineProperty(Graph.prototype, "nodes", {
                    get: /** @inline */function () {
                        var pNodes = [];
                        var pChild = ((this)._pChild);
                        while(!((pChild) === null)) {
                            pNodes.push(pChild);
                            pChild = pChild.sibling;
                        }
                        return pNodes;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Graph.prototype, "graphType", {
                    get: /** @inline */function () {
                        return this._eGraphType;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Graph.prototype, "canvas", {
                    get: /** @inline */function () {
                        return this._pCanvas;
                    },
                    enumerable: true,
                    configurable: true
                });
                Graph.prototype.createRouteFrom = function (pFrom) {
                    this._pTempRoute = new graph.TempRoute(pFrom);
                    this.connectionBegin(this._pTempRoute);
                };
                Graph.prototype.removeTempRoute = function () {
                    this._pTempRoute.destroy();
                    this._pTempRoute = null;
                    this.connectionEnd();
                };
                Graph.prototype.isReadyForConnect = function () {
                    return !((this._pTempRoute) === null);
                };
                Graph.prototype.connectTo = function (pTo) {
                    if (((this._pTempRoute) === null)) {
                        return;
                    }
                    var pFrom = this._pTempRoute.left;
                    if (pFrom.node === pTo.node) {
 {
                            akra.logger.setSourceLocation("graph/Graph.ts", 70);
                            akra.logger.log("connection to same node forbidden");
                        }
                        ;
                        this.removeTempRoute();
                        return;
                    }
                    var pRoute = new graph.Route(pFrom, pTo);
                    pRoute.routing();
                    this._pTempRoute.detach();
                    this.removeTempRoute();
                };
                Graph.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    this._pCanvas = Raphael(((this).$element.get()[0]), 0, 0);
                    var $svg = this.$svg = this.$element.children(":first");
                    $svg.css({
                        width: "100%",
                        height: "100%"
                    });
                    ((this).$element).addClass("component-graph");
                };
                Graph.prototype.mouseup = function (e) {
                    if (!((this._pTempRoute) === null)) {
                        // LOG("remove temp route!");
                        this.removeTempRoute();
                    }
                };
                Graph.prototype.mousemove = function (e) {
                    if (!((this._pTempRoute) === null)) {
                        var pOffset = ((this).$element).offset();
                        this._pTempRoute.routing({
                            x: e.pageX - pOffset.left,
                            y: e.pageY - pOffset.top
                        });
                    }
                };
                Graph.prototype.keydown = function (e) {
                    var pNodes = /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/this.nodes;
                    for(var i = 0; i < pNodes.length; ++i) {
                        var iKeyCode = (e).keyCode;
                        if (iKeyCode === akra.EKeyCodes.DELETE) {
                            pNodes[i].sendEvent(Graph.event(akra.EUIGraphEvents.DELETE));
                        }
                    }
                    _super.prototype.keydown.call(this, e);
                };
                Graph.prototype.click = function (e) {
                    _super.prototype.click.call(this, e);
                    var pNodes = /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/this.nodes;
                    for(var i = 0; i < pNodes.length; ++i) {
                        // LOG("deactivate node > ", pNodes[i]);
                        pNodes[i].activate(false);
                    }
                    _super.prototype.click.call(this, e);
                };
                Graph.prototype.connectionBegin = function (pRoute) {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                    var _broadcast = (this._pBroadcastSlotList).connectionBegin;
                    var _recivier = this;
                    if (((_broadcast) !== undefined)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pRoute) : _broadcast[i].listener(_recivier, pRoute);
                        }
                    }
                };
                Graph.prototype.connectionEnd = function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                    var _broadcast = (this._pBroadcastSlotList).connectionEnd;
                    var _recivier = this;
                    if (((_broadcast) !== undefined)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                        }
                    }
                };
                Graph.event = function event(eType) {
                    return {
                        type: eType,
                        traversedRoutes: []
                    };
                };
                return Graph;
            })(ui.Component);
            graph.Graph = Graph;            
            (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("Graph")] = (Graph));
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EKeyCodes) {
        EKeyCodes._map = [];
        EKeyCodes.BACKSPACE = 8;
        EKeyCodes.TAB = 9;
        EKeyCodes.ENTER = 13;
        EKeyCodes.SHIFT = 16;
        EKeyCodes._map[17] = "CTRL";
        EKeyCodes.CTRL = 17;
        EKeyCodes._map[18] = "ALT";
        EKeyCodes.ALT = 18;
        EKeyCodes.PAUSE = 19;
        EKeyCodes.BREAK = 19;
        EKeyCodes.CAPSLOCK = 20;
        EKeyCodes.ESCAPE = 27;
        EKeyCodes.SPACE = 32;
        EKeyCodes.PAGEUP = 33;
        EKeyCodes._map[34] = "PAGEDOWN";
        EKeyCodes.PAGEDOWN = 34;
        EKeyCodes.END = 35;
        EKeyCodes._map[36] = "HOME";
        EKeyCodes.HOME = 36;
        EKeyCodes.LEFT = 37;
        EKeyCodes._map[38] = "UP";
        EKeyCodes.UP = 38;
        EKeyCodes._map[39] = "RIGHT";
        EKeyCodes.RIGHT = 39;
        EKeyCodes._map[40] = "DOWN";
        EKeyCodes.DOWN = 40;
        EKeyCodes.INSERT = 45;
        EKeyCodes._map[46] = "DELETE";
        EKeyCodes.DELETE = 46;
        EKeyCodes.N0 = 48;
        EKeyCodes._map[49] = "N1";
        EKeyCodes.N1 = 49;
        EKeyCodes._map[50] = "N2";
        EKeyCodes.N2 = 50;
        EKeyCodes._map[51] = "N3";
        EKeyCodes.N3 = 51;
        EKeyCodes._map[52] = "N4";
        EKeyCodes.N4 = 52;
        EKeyCodes._map[53] = "N5";
        EKeyCodes.N5 = 53;
        EKeyCodes._map[54] = "N6";
        EKeyCodes.N6 = 54;
        EKeyCodes._map[55] = "N7";
        EKeyCodes.N7 = 55;
        EKeyCodes._map[56] = "N8";
        EKeyCodes.N8 = 56;
        EKeyCodes._map[57] = "N9";
        EKeyCodes.N9 = 57;
        EKeyCodes.A = 65;
        EKeyCodes._map[66] = "B";
        EKeyCodes.B = 66;
        EKeyCodes._map[67] = "C";
        EKeyCodes.C = 67;
        EKeyCodes._map[68] = "D";
        EKeyCodes.D = 68;
        EKeyCodes._map[69] = "E";
        EKeyCodes.E = 69;
        EKeyCodes._map[70] = "F";
        EKeyCodes.F = 70;
        EKeyCodes._map[71] = "G";
        EKeyCodes.G = 71;
        EKeyCodes._map[72] = "H";
        EKeyCodes.H = 72;
        EKeyCodes._map[73] = "I";
        EKeyCodes.I = 73;
        EKeyCodes._map[74] = "J";
        EKeyCodes.J = 74;
        EKeyCodes._map[75] = "K";
        EKeyCodes.K = 75;
        EKeyCodes._map[76] = "L";
        EKeyCodes.L = 76;
        EKeyCodes._map[77] = "M";
        EKeyCodes.M = 77;
        EKeyCodes._map[78] = "N";
        EKeyCodes.N = 78;
        EKeyCodes._map[79] = "O";
        EKeyCodes.O = 79;
        EKeyCodes._map[80] = "P";
        EKeyCodes.P = 80;
        EKeyCodes._map[81] = "Q";
        EKeyCodes.Q = 81;
        EKeyCodes._map[82] = "R";
        EKeyCodes.R = 82;
        EKeyCodes._map[83] = "S";
        EKeyCodes.S = 83;
        EKeyCodes._map[84] = "T";
        EKeyCodes.T = 84;
        EKeyCodes._map[85] = "U";
        EKeyCodes.U = 85;
        EKeyCodes._map[86] = "V";
        EKeyCodes.V = 86;
        EKeyCodes._map[87] = "W";
        EKeyCodes.W = 87;
        EKeyCodes._map[88] = "X";
        EKeyCodes.X = 88;
        EKeyCodes._map[89] = "Y";
        EKeyCodes.Y = 89;
        EKeyCodes._map[90] = "Z";
        EKeyCodes.Z = 90;
        EKeyCodes.LEFTWINDOWKEY = 91;
        EKeyCodes._map[92] = "RIGHTWINDOWKEY";
        EKeyCodes.RIGHTWINDOWKEY = 92;
        EKeyCodes._map[93] = "SELECTKEY";
        EKeyCodes.SELECTKEY = 93;
        EKeyCodes.NUMPAD0 = 96;
        EKeyCodes._map[97] = "NUMPAD1";
        EKeyCodes.NUMPAD1 = 97;
        EKeyCodes._map[98] = "NUMPAD2";
        EKeyCodes.NUMPAD2 = 98;
        EKeyCodes._map[99] = "NUMPAD3";
        EKeyCodes.NUMPAD3 = 99;
        EKeyCodes._map[100] = "NUMPAD4";
        EKeyCodes.NUMPAD4 = 100;
        EKeyCodes._map[101] = "NUMPAD5";
        EKeyCodes.NUMPAD5 = 101;
        EKeyCodes._map[102] = "NUMPAD6";
        EKeyCodes.NUMPAD6 = 102;
        EKeyCodes._map[103] = "NUMPAD7";
        EKeyCodes.NUMPAD7 = 103;
        EKeyCodes._map[104] = "NUMPAD8";
        EKeyCodes.NUMPAD8 = 104;
        EKeyCodes._map[105] = "NUMPAD9";
        EKeyCodes.NUMPAD9 = 105;
        EKeyCodes.MULTIPLY = 106;
        EKeyCodes._map[107] = "ADD";
        EKeyCodes.ADD = 107;
        EKeyCodes.SUBTRACT = 109;
        EKeyCodes._map[110] = "DECIMALPOINT";
        EKeyCodes.DECIMALPOINT = 110;
        EKeyCodes._map[111] = "DIVIDE";
        EKeyCodes.DIVIDE = 111;
        EKeyCodes.F1 = 112;
        EKeyCodes._map[113] = "F2";
        EKeyCodes.F2 = 113;
        EKeyCodes._map[114] = "F3";
        EKeyCodes.F3 = 114;
        EKeyCodes._map[115] = "F4";
        EKeyCodes.F4 = 115;
        EKeyCodes._map[116] = "F5";
        EKeyCodes.F5 = 116;
        EKeyCodes._map[117] = "F6";
        EKeyCodes.F6 = 117;
        EKeyCodes._map[118] = "F7";
        EKeyCodes.F7 = 118;
        EKeyCodes._map[119] = "F8";
        EKeyCodes.F8 = 119;
        EKeyCodes._map[120] = "F9";
        EKeyCodes.F9 = 120;
        EKeyCodes._map[121] = "F10";
        EKeyCodes.F10 = 121;
        EKeyCodes._map[122] = "F11";
        EKeyCodes.F11 = 122;
        EKeyCodes._map[123] = "F12";
        EKeyCodes.F12 = 123;
        EKeyCodes.NUMLOCK = 144;
        EKeyCodes._map[145] = "SCROLLLOCK";
        EKeyCodes.SCROLLLOCK = 145;
        EKeyCodes.SEMICOLON = 186;
        EKeyCodes._map[187] = "EQUALSIGN";
        EKeyCodes.EQUALSIGN = 187;
        EKeyCodes._map[188] = "COMMA";
        EKeyCodes.COMMA = 188;
        EKeyCodes._map[189] = "DASH";
        EKeyCodes.DASH = 189;
        EKeyCodes._map[190] = "PERIOD";
        EKeyCodes.PERIOD = 190;
        EKeyCodes._map[191] = "FORWARDSLASH";
        EKeyCodes.FORWARDSLASH = 191;
        EKeyCodes._map[192] = "GRAVEACCENT";
        EKeyCodes.GRAVEACCENT = 192;
        EKeyCodes.OPENBRACKET = 219;
        EKeyCodes._map[220] = "BACKSLASH";
        EKeyCodes.BACKSLASH = 220;
        EKeyCodes._map[221] = "CLOSEBRACKET";
        EKeyCodes.CLOSEBRACKET = 221;
        EKeyCodes._map[222] = "SINGLEQUOTE";
        EKeyCodes.SINGLEQUOTE = 222;
        EKeyCodes.TOTAL = 256;
    })(akra.EKeyCodes || (akra.EKeyCodes = {}));
    var EKeyCodes = akra.EKeyCodes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var Connector = (function (_super) {
                __extends(Connector, _super);
                function Connector(parent, options) {
                                _super.call(this, parent, options, akra.EUIComponents.GRAPH_CONNECTOR);
                    /**@protected*/ this._eOrient = akra.EGraphConnectorOrient.UNKNOWN;
                    /**@protected*/ this._eDirect = akra.EUIGraphDirections.IN;
                    /**@protected*/ this._bActive = false;
                    /**@protected*/ this._pRoute = null;
                    this.handleEvent("mousedown mouseup");
                    ((this).$element).disableSelection();
                }
                Object.defineProperty(Connector.prototype, "orient", {
                    get: /** @inline */function () {
                        return this._eOrient;
                    },
                    set: /** @inline */function (e) {
                        this._eOrient = e;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Connector.prototype, "area", {
                    get: /** @inline */function () {
                        return (((this)._pParent).parent);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Connector.prototype, "node", {
                    get: /** @inline */function () {
                        return (((((this))._pParent).parent)).node;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Connector.prototype, "graph", {
                    get: /** @inline */function () {
                        return (((((((this)))._pParent).parent)).node).graph;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Connector.prototype, "route", {
                    get: /** @inline */function () {
                        return this._pRoute;
                    },
                    set: /** @inline */function (pRoute) {
                        this._pRoute = pRoute;
                        if (pRoute.isBridge()) {
                            if (this === pRoute.left) {
                                this.output();
                                this.connected(pRoute.right);
                            } else {
                                this.input();
                                this.connected(pRoute.left);
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Connector.prototype, "direction", {
                    get: /** @inline */function () {
                        return this._eDirect;
                    },
                    enumerable: true,
                    configurable: true
                });
                Connector.prototype.mousedown = function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    if (!((((this)._pRoute)) === null)) {
                        return;
                    }
                    (((((((((this))))._pParent).parent)).node).graph).createRouteFrom(this);
                };
                Connector.prototype.mouseup = function (e) {
                    if (((this)._eDirect) === akra.EUIGraphDirections.IN && !(!(((((this))._pRoute)) === null) && (((this))._pRoute).isBridge()) && (((((((this)))._pParent).parent)).node).isSuitable()) {
                        e.stopPropagation();
                        (((((((((this))))._pParent).parent)).node).graph).connectTo(this);
                    }
                };
                Connector.prototype.hasRoute = function () {
                    return !((((this)._pRoute)) === null);
                };
                Connector.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    ((this).$element).addClass("component-graphconnector");
                };
                Connector.prototype.isConnected = /** @inline */function () {
                    return !((((this)._pRoute)) === null) && ((this)._pRoute).isBridge();
                };
                Connector.prototype.isActive = /** @inline */function () {
                    return this._bActive;
                };
                Connector.prototype.activate = function (bValue) {
                    if (typeof bValue === "undefined") { bValue = true; }
                    if (((this)._bActive) === bValue) {
                        return;
                    }
                    this._bActive = bValue;
                    this.activated(bValue);
                    this.highlight(bValue);
                    ((this)._pRoute).activate(bValue);
                };
                Connector.prototype.sendEvent = function (e) {
                    (((((((this)))._pParent).parent)).node).sendEvent(e);
                };
                Connector.prototype.input = function () {
                    ((this).$element).addClass("in");
                    this._eDirect = akra.EUIGraphDirections.IN;
                    return true;
                };
                Connector.prototype.output = function () {
                    ((this).$element).addClass("out");
                    this._eDirect = akra.EUIGraphDirections.OUT;
                    return true;
                };
                Connector.prototype.highlight = // setDirection(eDirect: EUIGraphDirections): bool {
                // 	return (eDirect === EUIGraphDirections.IN? this.input(): this.output());
                // }
                function (bToggle) {
                    if (typeof bToggle === "undefined") { bToggle = false; }
                    bToggle ? this.$element.addClass("highlight") : this.$element.removeClass("highlight");
                };
                Connector.prototype.routing = /** @inline */function () {
                    // LOG("routing");
                    ((this)._pRoute).routing();
                };
                Connector.prototype.connected = function (pTarget) {
                    ((this).$element).addClass("connected");
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                    var _broadcast = (this._pBroadcastSlotList).connected;
                    var _recivier = this;
                    if (((_broadcast) !== undefined)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pTarget) : _broadcast[i].listener(_recivier, pTarget);
                        }
                    }
                    ;
                };
                Connector.prototype.activated = function (value) {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                    var _broadcast = (this._pBroadcastSlotList).activated;
                    var _recivier = this;
                    if (((_broadcast) !== undefined)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, value) : _broadcast[i].listener(_recivier, value);
                        }
                    }
                };
                Connector.prototype.routeBreaked = /*when route is destroyd(called from route)*/
                function (pRoute) {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                    var _broadcast = (this._pBroadcastSlotList).routeBreaked;
                    var _recivier = this;
                    if (((_broadcast) !== undefined)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pRoute) : _broadcast[i].listener(_recivier, pRoute);
                        }
                    }
                };
                return Connector;
            })(ui.Component);
            graph.Connector = Connector;            
            (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("GraphConnector")] = (Connector));
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var MouseConnector = (function (_super) {
                __extends(MouseConnector, _super);
                function MouseConnector(pGraph, options) {
                                _super.call(this, pGraph, options);
                    ((pGraph).getEventTable().addDestination(((((pGraph)))._iGuid), ("\"mousemove\""), (this), ("_onMouseMove"), (undefined)));
                    this.setDraggable();
                    ((this).$element).css({
                        "background": "red"
                    });
                }
                MouseConnector.prototype.mousedown = function (e) {
                };
                MouseConnector.prototype._onMouseMove = function (pGraph, e) {
                    var pOffset = this.$element.offset();
                    this.$element.offset({
                        left: e.pageX - pOffset.left,
                        top: e.pageY - pOffset.top
                    });
                };
                return MouseConnector;
            })(graph.Connector);
            graph.MouseConnector = MouseConnector;            
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var ConnectionArea = (function (_super) {
                __extends(ConnectionArea, _super);
                function ConnectionArea(parent, options, eType) {
                    if (typeof eType === "undefined") { eType = akra.EUIComponents.GRAPH_CONNECTIONAREA; }
                                _super.call(this, parent, options, eType);
                    /**@protected*/ this._iMode = akra.EUIGraphDirections.IN | akra.EUIGraphDirections.OUT;
                    /**@protected*/ this._pConnectors = new Array();
                    /**@protected*/ this._pTempConnect = null;
                    /**@protected*/ this._iConnectionLimit = -1;
                    /**@protected*/ this._iInConnectionLimit = akra.MAX_INT8;
                    /**@protected*/ this._iOutConnectionLimit = akra.MAX_INT8;
                    /**@protected*/ this._eConectorOrient = akra.EGraphConnectorOrient.UNKNOWN;
                    if (!((options) === null)) {
                        this._iConnectionLimit = (typeof ((options).maxConnections) === "number") ? options.maxConnections : -1;
                        this._iInConnectionLimit = (typeof ((options).maxInConnections) === "number") ? options.maxInConnections : akra.MAX_INT8;
                        this._iOutConnectionLimit = (typeof ((options).maxOutConnections) === "number") ? options.maxOutConnections : akra.MAX_INT8;
                    }
                    if (this._iConnectionLimit == -1) {
                        this._iConnectionLimit = this._iInConnectionLimit + this._iOutConnectionLimit;
                    }
                    ((this).$element).disableSelection();
                }
                Object.defineProperty(ConnectionArea.prototype, "connectors", {
                    get: /** @inline */function () {
                        return this._pConnectors;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ConnectionArea.prototype, "node", {
                    get: /** @inline */function () {
                        return ((this)._pParent);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ConnectionArea.prototype, "graph", {
                    get: /** @inline */function () {
                        return ((((this))._pParent)).graph;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ConnectionArea.prototype, "maxInConnections", {
                    set: /** @inline */function (n) {
                        this._iInConnectionLimit = n;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ConnectionArea.prototype, "maxOutConnections", {
                    set: /** @inline */function (n) {
                        this._iOutConnectionLimit = n;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ConnectionArea.prototype, "maxConnections", {
                    set: /** @inline */function (n) {
                        this._iConnectionLimit = n;
                    },
                    enumerable: true,
                    configurable: true
                });
                ConnectionArea.prototype.attachToParent = function (pParent) {
 {
                        akra.logger.setSourceLocation("ConnectionArea.ts", 53);
                        akra.logger.assert(ui.isComponent(pParent, akra.EUIComponents.GRAPH_NODE), "only graph node can be parent!!");
                    }
                    ;
                    if (_super.prototype.attachToParent.call(this, pParent)) {
                        ((((((this))._pParent))).getEventTable().addDestination(((((((((this))._pParent)))))._iGuid), ("mouseenter"), (this), ("_onNodeMouseover"), (undefined)));
                        ((((((this))._pParent))).getEventTable().addDestination(((((((((this))._pParent)))))._iGuid), ("mouseleave"), (this), ("_onNodeMouseout"), (undefined)));
                    }
                    return false;
                };
                ConnectionArea.prototype._createdFrom = function ($comp) {
                    _super.prototype._createdFrom.call(this, $comp);
                    var sMode = $comp.attr("mode");
                    var sMaxConnections = $comp.attr("connections-limit");
                    var sMaxInConnections = $comp.attr("connections-in-limit");
                    var sMaxOutConnections = $comp.attr("connections-out-limit");
                    var sOrient = $comp.attr("orientation");
                    if ((typeof (sMode) === "string")) {
                        if (sMode === "out") {
                            ((this)._iMode = (/*checked (origin: akra)>>*/akra.EUIGraphDirections.OUT));
                        } else if (sMode === "in") {
                            ((this)._iMode = (/*checked (origin: akra)>>*/akra.EUIGraphDirections.IN));
                        } else if (sMode === "inout") {
                            ((this)._iMode = (/*checked (origin: akra)>>*/akra.EUIGraphDirections.IN | /*checked (origin: akra)>>*/akra.EUIGraphDirections.OUT));
                        }
                    }
                    if ((typeof (sMaxConnections) === "string")) {
                        ((this)._iConnectionLimit = (parseInt(sMaxConnections)));
                    }
                    if ((typeof (sMaxInConnections) === "string")) {
                        ((this)._iConnectionLimit = (parseInt(sMaxInConnections)));
                    }
                    if ((typeof (sMaxOutConnections) === "string")) {
                        ((this)._iConnectionLimit = (parseInt(sMaxOutConnections)));
                    }
                    if ((typeof (sOrient) === "string")) {
                        switch(sOrient.toLowerCase()) {
                            case "up":
                                this._eConectorOrient = akra.EGraphConnectorOrient.UP;
                                break;
                            case "down":
                                this._eConectorOrient = akra.EGraphConnectorOrient.DOWN;
                                break;
                            case "left":
                                this._eConectorOrient = akra.EGraphConnectorOrient.LEFT;
                                break;
                            case "right":
                                this._eConectorOrient = akra.EGraphConnectorOrient.RIGHT;
                                break;
                        }
                    }
                };
                ConnectionArea.prototype.findRoute = function (pNode) {
                    for(var i = 0; i < this._pConnectors.length; ++i) {
                        var pRoute = this._pConnectors[i].route;
                        if (pRoute.isConnectedWithNode(pNode)) {
                            return pRoute;
                        }
                    }
                    return null;
                };
                ConnectionArea.prototype.connectorsCount = function (eDir) {
                    if (arguments.length === 0) {
                        return this._pConnectors.length;
                    }
                    var n = 0;
                    for(var i = 0; i < this._pConnectors.length; ++i) {
                        if (this._pConnectors[i].direction === eDir) {
                            n++;
                        }
                    }
                    return n;
                };
                ConnectionArea.prototype.setMode = /** @inline */function (iMode) {
                    this._iMode = iMode;
                };
                ConnectionArea.prototype.isSupportsIncoming = /** @inline */function () {
                    return this.connectorsCount(akra.EUIGraphDirections.IN) < this._iInConnectionLimit && (((this._iMode) & (akra.EUIGraphDirections.IN)) != 0) && !((this)._pConnectors.length >= (this)._iConnectionLimit);
                };
                ConnectionArea.prototype.isSupportsOutgoing = /** @inline */function () {
                    return this.connectorsCount(akra.EUIGraphDirections.OUT) < this._iOutConnectionLimit && (((this._iMode) & (akra.EUIGraphDirections.OUT)) != 0) && !((this)._pConnectors.length >= (this)._iConnectionLimit);
                };
                ConnectionArea.prototype.isLimitReached = /** @inline */function () {
                    return this._pConnectors.length >= this._iConnectionLimit;
                };
                ConnectionArea.prototype.hasConnections = function () {
                    return !(((this)._pConnectors).length == 0 || ((((this)._pConnectors)[0]) === null));
                };
                ConnectionArea.prototype.isActive = function () {
                    return ((((this))._pParent)).isActive();
                };
                ConnectionArea.prototype.activate = function (bValue) {
                    if (typeof bValue === "undefined") { bValue = true; }
                    for(var i = 0; i < this._pConnectors.length; ++i) {
                        this._pConnectors[i].activate(bValue);
                    }
                };
                ConnectionArea.prototype.sendEvent = function (e) {
                    for(var i = 0; i < this._pConnectors.length; ++i) {
                        if (this._pConnectors[i].direction === akra.EUIGraphDirections.OUT) {
                            this._pConnectors[i].route.sendEvent(e);
                        }
                    }
                    if (e.type === akra.EUIGraphEvents.DELETE) {
                        if (this.isActive()) {
                            this.destroy();
                        }
                    }
                };
                ConnectionArea.prototype.prepareForConnect = function () {
                    var pConnector = this._pTempConnect = new graph.Connector(this);
                    pConnector.orient = this._eConectorOrient;
                    //this.graph.isReadyForConnect()? pConnector.input(): pConnector.output();
                    ((pConnector).getEventTable().addDestination(((((pConnector)))._iGuid), ("routeBreaked"), (this), ("destroyTempConnect"), (undefined)));
                    ((pConnector).getEventTable().addDestination(((((pConnector)))._iGuid), ("connected"), (this), ("onConnection"), (undefined)));
                    return pConnector;
                };
                ConnectionArea.prototype._onNodeMouseover = function (pNode, e) {
                    //FIXME
                    var pArea = this;
                    setTimeout(/** @inline */function () {
                        /*not inlined, because first statement is not return/call/dot(cur st.: For)*/pArea.routing();
                    }, 10);
                    if ((!((this).connectorsCount(/*checked (origin: akra)>>*/akra.EUIGraphDirections.IN) < (this)._iInConnectionLimit && ((((this)._iMode) & (/*checked (origin: akra)>>*/akra.EUIGraphDirections.IN)) != 0) && !(((this))._pConnectors.length >= ((this))._iConnectionLimit)) && ((((((this)))._pParent)).graph).isReadyForConnect()) || (!((this).connectorsCount(/*checked (origin: akra)>>*/akra.EUIGraphDirections.OUT) < (this)._iOutConnectionLimit && ((((this)._iMode) & (/*checked (origin: akra)>>*/akra.EUIGraphDirections.OUT)) != 0) && !(((this))._pConnectors.length >= ((this))._iConnectionLimit)) && !((((((this)))._pParent)).graph).isReadyForConnect())) {
                        return;
                    }
                    if (!((this._pTempConnect) === null)) {
                        return;
                    }
                    this.prepareForConnect();
                };
                ConnectionArea.prototype.onConnection = function (pConnector, pTarget) {
 {
                        akra.logger.setSourceLocation("ConnectionArea.ts", 213);
                        akra.logger.assert(pConnector === this._pTempConnect, "oO!!");
                    }
                    ;
                    // LOG("connected!! node(" + this.node.getGuid() + ") connector(" + pConnector.getGuid() + ")");
                    ((pConnector).getEventTable().removeDestination(((((pConnector)))._iGuid), ("connected"), (this), ("onConnection"), (undefined)));
                    this._pTempConnect = null;
                    this._pConnectors.push(pConnector);
                    this.connected(pConnector, pTarget);
                };
                ConnectionArea.prototype.destroyTempConnect = function () {
                    this._pTempConnect.destroy();
                    this._pTempConnect = null;
                };
                ConnectionArea.prototype._onNodeMouseout = function (pNode, e) {
                    //FIXME
                    var pArea = this;
                    setTimeout(/** @inline */function () {
                        /*not inlined, because first statement is not return/call/dot(cur st.: For)*/pArea.routing();
                    }, 10);
                    if (((this._pTempConnect) === null) || this._pTempConnect.hasRoute()) {
                        return;
                    }
                    this.destroyTempConnect();
                };
                ConnectionArea.prototype.routing = /** @inline */function () {
                    for(var i = 0; i < this._pConnectors.length; ++i) {
                        this._pConnectors[i].routing();
                    }
                };
                ConnectionArea.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    ((this).$element).addClass("component-connectionarea");
                };
                ConnectionArea.prototype.connected = function (pFrom, pTo) {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                    var _broadcast = (this._pBroadcastSlotList).connected;
                    var _recivier = this;
                    if (((_broadcast) !== undefined)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pFrom, pTo) : _broadcast[i].listener(_recivier, pFrom, pTo);
                        }
                    }
                };
                return ConnectionArea;
            })(ui.Panel);
            graph.ConnectionArea = ConnectionArea;            
            /** @inline */function isConnectionArea(pEntity) {
                return ui.isComponent(pEntity, akra.EUIComponents.GRAPH_CONNECTIONAREA);
            }
            graph.isConnectionArea = isConnectionArea;
            (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("GraphConnectionArea")] = (ConnectionArea));
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var Node = (function (_super) {
                __extends(Node, _super);
                function Node(pGraph, options, eType, $el) {
                    if (typeof eType === "undefined") { eType = akra.EUIGraphNodes.UNKNOWN; }
                                _super.call(this, ui.getUI(pGraph), options, akra.EUIComponents.GRAPH_NODE, $el);
                    /**@protected*/ this._isActive = false;
                    /**@protected*/ this._pAreas = {};
                    /**@protected*/ this._isSuitable = true;
                    this._eGraphNodeType = eType;
 {
                        akra.logger.setSourceLocation("graph/Node.ts", 37);
                        akra.logger.assert(ui.isComponent(pGraph, akra.EUIComponents.GRAPH), "only graph may be as parent", pGraph);
                    }
                    ;
                    this.attachToParent(pGraph);
                    if (!((options) !== undefined) || options.init !== false) {
                        this.template("graph.Node.tpl");
                        this.init();
                    }
                    this.handleEvent("mouseenter mouseleave dblclick click");
                    this.setDraggable();
                    var node = this;
                    //FIXME: without timeout must be all OK!
                    setTimeout(/** @inline */function () {
                        (node.$element).css("position", "absolute");
                        (node.$element).offset((((node)._pParent)).el.offset());
                    }, 5);
                    ((pGraph).getEventTable().addDestination(((((pGraph)))._iGuid), ("connectionBegin"), (this), ("onConnectionBegin"), (undefined)));
                    ((pGraph).getEventTable().addDestination(((((pGraph)))._iGuid), ("connectionEnd"), (this), ("onConnectionEnd"), (undefined)));
                    ((this).$element).disableSelection();
                }
                Object.defineProperty(Node.prototype, "graphNodeType", {
                    get: /** @inline */function () {
                        return this._eGraphNodeType;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Node.prototype, "graph", {
                    get: /** @inline */function () {
                        return ((this)._pParent);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Node.prototype, "areas", {
                    get: /** @inline */function () {
                        return this._pAreas;
                    },
                    enumerable: true,
                    configurable: true
                });
                Node.prototype.getOutputConnector = function () {
                    for(var i in ((this)._pAreas)) {
                        if (((this)._pAreas)[i].isSupportsOutgoing()) {
                            return ((this)._pAreas)[i].prepareForConnect();
                        }
                    }
                    return null;
                };
                Node.prototype.getInputConnector = function () {
                    for(var i in ((this)._pAreas)) {
                        if (((this)._pAreas)[i].isSupportsIncoming()) {
                            return ((this)._pAreas)[i].prepareForConnect();
                        }
                    }
                };
                Node.prototype.onConnectionEnd = /**@protected*/ function (pGraph) {
                    this._isSuitable = false;
                    ((this).$element).removeClass("open blocked");
                    this.routing();
                };
                Node.prototype.onConnectionBegin = /**@protected*/ function (pGraph, pRoute) {
                    if (pRoute.left.node === this) {
                        return;
                    }
                    if (!this.canAcceptConnect()) {
                        ((this).$element).addClass("blocked");
                        return;
                    }
                    this._isSuitable = true;
                    ((this).$element).addClass("open");
                };
                Node.prototype.linkAreas = //finding areas in direct childrens
                /**@protected*/ function () {
                    var pChildren = this.children();
                    for(var i = 0; i < pChildren.length; ++i) {
                        if ((/*checked (origin: ui)>>*/akra.ui.isComponent((pChildren[i]), /*checked (origin: akra)>>*/akra.EUIComponents.GRAPH_CONNECTIONAREA))) {
                            /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/this.addConnectionArea(pChildren[i].name, pChildren[i]);
                        }
                    }
                };
                Node.prototype.isSuitable = /** @inline */function () {
                    return this._isSuitable;
                };
                Node.prototype.findRoute = function (pNode) {
                    var pRoute = null;
                    for(var i in ((this)._pAreas)) {
                        pRoute = ((this)._pAreas)[i].findRoute(pNode);
                        if (!((pRoute) === null)) {
                            return pRoute;
                        }
                    }
                    return null;
                };
                Node.prototype.isConnectedWith = /** @inline */function (pNode) {
                    return !((this.findRoute(pNode)) === null);
                };
                Node.prototype.canAcceptConnect = function () {
                    for(var i in ((this)._pAreas)) {
                        if (((this)._pAreas)[i].isSupportsIncoming()) {
                            return true;
                        }
                    }
                    return false;
                };
                Node.prototype.mouseenter = function (e) {
                    _super.prototype.mouseenter.call(this, e);
                    // this.routing();
                    this.sendEvent(graph.Graph.event(akra.EUIGraphEvents.SHOW_MAP));
                };
                Node.prototype.mouseleave = function (e) {
                    _super.prototype.mouseleave.call(this, e);
                    // this.routing();
                    this.sendEvent(graph.Graph.event(akra.EUIGraphEvents.HIDE_MAP));
                };
                Node.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    ((this).$element).addClass("component-graphnode");
                };
                Node.prototype.move = function (e) {
                    this.routing();
                };
                Node.prototype.dblclick = function (e) {
                    this.activate(!((this)._isActive));
                };
                Node.prototype.activate = function (bValue) {
                    if (typeof bValue === "undefined") { bValue = true; }
                    this._isActive = bValue;
                    this.highlight(bValue);
                    for(var sArea in this._pAreas) {
                        this._pAreas[sArea].activate(bValue);
                    }
                };
                Node.prototype.click = function (e) {
                    e.stopPropagation();
                    _super.prototype.click.call(this, e);
                    this.selected(false);
                };
                Node.prototype.isActive = /** @inline */function () {
                    return this._isActive;
                };
                Node.prototype.init = /**@protected*/ function () {
                    var pSidesLR = [
                        "left", 
                        "right"
                    ];
                    var pSidesTB = [
                        "top", 
                        "bottom"
                    ];
                    var pSidePanels = [];
                    for(var i = 0; i < pSidesTB.length; ++i) {
                        var sSide = pSidesTB[i];
                        pSidePanels[i] = new graph.ConnectionArea(this, {
                            show: false
                        });
                        pSidePanels[i].setLayout(akra.EUILayouts.HORIZONTAL);
                        pSidePanels[i].render(((this).$element).find(".graph-node-" + sSide + ":first"));
                        this._pAreas[sSide] = pSidePanels[i];
                    }
                    for(var i = 0; i < pSidesLR.length; ++i) {
                        var sSide = pSidesLR[i];
                        pSidePanels[i] = new graph.ConnectionArea(this, {
                            show: false
                        });
                        pSidePanels[i].render(((this).$element).find(".graph-node-" + sSide + ":first"));
                        /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/this.addConnectionArea(sSide, pSidePanels[i]);
                    }
                };
                Node.prototype.addConnectionArea = /**@protected*/ /** @inline */function (sName, pArea) {
                    ((pArea).getEventTable().addDestination(((((pArea)))._iGuid), ("connected"), (this), ("connected"), (undefined)));
                    this._pAreas[sName] = pArea;
                };
                Node.prototype.connected = /**@protected*/ function (pArea, pFrom, pTo) {
                };
                Node.prototype.sendEvent = function (e) {
                    for(var i in this._pAreas) {
                        this._pAreas[i].sendEvent(e);
                    }
                    if (e.type === akra.EUIGraphEvents.DELETE) {
                        if (((this)._isActive)) {
                            this.beforeDestroy();
                            this.destroy();
                        }
                    }
                };
                Node.prototype.highlight = function (bValue) {
                    if (typeof bValue === "undefined") { bValue = true; }
                    if (bValue) {
                        this.$element.addClass('highlight');
                    } else {
                        this.$element.removeClass('highlight');
                    }
                };
                Node.prototype.routing = function () {
                    for(var i in this._pAreas) {
                        this._pAreas[i].routing();
                    }
                };
                Node.prototype.beforeDestroy = //BROADCAST(routeBreaked, CALL(route, connection, dir));
                function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                    var _broadcast = (this._pBroadcastSlotList).beforeDestroy;
                    var _recivier = this;
                    if (((_broadcast) !== undefined)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                        }
                    }
                };
                Node.prototype.selected = function (bModified) {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                    var _broadcast = (this._pBroadcastSlotList).selected;
                    var _recivier = this;
                    if (((_broadcast) !== undefined)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, bModified) : _broadcast[i].listener(_recivier, bModified);
                        }
                    }
                };
                return Node;
            })(ui.Component);
            graph.Node = Node;            
            (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("graph.Node")] = (Node));
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var Controls = (function (_super) {
                __extends(Controls, _super);
                function Controls(parent, options, pGraph) {
                    if (typeof pGraph === "undefined") { pGraph = null; }
                    /*EUIComponents.GRAPH_CONTROLS*/
                                _super.call(this, parent, options);
                    this.controls = ((this)._pUI).createComponent("Controls");
                    this.graph = pGraph || ((this)._pUI).createComponent("Graph");
                    this.controls.attachToParent(this);
                    this.graph.attachToParent(this);
                    var pControlPanel = this.controls;
                    // var pNodeBtn: IUIButton = new Button(pControlPanel, {text: "Create graph node"});
                    // this.connect(pNodeBtn, SIGNAL(click), SLOT(createNode));
                                    }
                Controls.prototype.createNode = function () {
                    return new ui.graph.Node(this.graph);
                };
                Controls.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    ((this).$element).addClass("component-graphcontrols");
                };
                return Controls;
            })(ui.Panel);
            graph.Controls = Controls;            
            (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("graph.Controls")] = (Controls));
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    (function (EAnimationTypes) {
        EAnimationTypes._map = [];
        EAnimationTypes._map[0] = "ANIMATION";
        EAnimationTypes.ANIMATION = 0;
        EAnimationTypes._map[1] = "LIST";
        EAnimationTypes.LIST = 1;
        EAnimationTypes._map[2] = "CLIP";
        EAnimationTypes.CLIP = 2;
        EAnimationTypes._map[3] = "CONTAINER";
        EAnimationTypes.CONTAINER = 3;
        EAnimationTypes._map[4] = "BLEND";
        EAnimationTypes.BLEND = 4;
    })(akra.EAnimationTypes || (akra.EAnimationTypes = {}));
    var EAnimationTypes = akra.EAnimationTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Node = (function (_super) {
                __extends(Node, _super);
                function Node(parent, options, eType) {
                    if (typeof eType === "undefined") { eType = akra.EUIGraphNodes.UNKNOWN; }
                                _super.call(this, parent, options, eType);
                }
                Node.prototype.attachToParent = function (pParent) {
                    if (_super.prototype.attachToParent.call(this, pParent)) {
                        ((pParent).getEventTable().addDestination(((((pParent)))._iGuid), ("nodeSelected"), (this), ("_selected"), (undefined)));
                    }
                    return false;
                };
                Node.prototype._selected = function (pGraph, pNode, bPlay) {
                    if (this === pNode) {
                        ((this).$element).addClass("selected");
                    } else {
                        ((this).$element).removeClass("selected");
                    }
                };
                Object.defineProperty(Node.prototype, "animation", {
                    get: /** @inline */function () {
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Node.prototype, "graph", {
                    get: /** @inline */function () {
                        return ((this)._pParent);
                    },
                    enumerable: true,
                    configurable: true
                });
                Node.prototype.connected = /**@protected*/ function (pArea, pFrom, pTo) {
                    if (pFrom.direction === akra.EUIGraphDirections.IN) {
                        this.animation = (pTo.node).animation;
                    }
                };
                return Node;
            })(ui.graph.Node);
            animation.Node = Node;            
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Data = (function (_super) {
                __extends(Data, _super);
                function Data(pGraph, pAnim) {
                    if (typeof pAnim === "undefined") { pAnim = null; }
                                _super.call(this, pGraph, {
                init: false
            }, akra.EUIGraphNodes.ANIMATION_DATA);
                    this._pAnimation = null;
                    this.template("animation.Data.tpl");
                    if (!((pAnim) === null)) {
                        /*not inlined, because supportes only single statement functions(cur. st. count: 3)*/this.animation = pAnim;
                    }
                    this.linkAreas();
                }
                Object.defineProperty(Data.prototype, "animation", {
                    get: /** @inline */function () {
                        return this._pAnimation;
                    },
                    set: /** @inline */function (pAnim) {
                        this._pAnimation = pAnim;
                        (((this)._pChild)).text = pAnim.name;
                    },
                    enumerable: true,
                    configurable: true
                });
                Data.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    ((this).$element).addClass("component-animationdata");
                };
                return Data;
            })(animation.Node);
            animation.Data = Data;            
            (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("animation.Data")] = (Data));
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    (function (EAnimationInterpolations) {
        EAnimationInterpolations._map = [];
        EAnimationInterpolations._map[0] = "MATRIX_LINEAR";
        EAnimationInterpolations.MATRIX_LINEAR = 0;
        EAnimationInterpolations._map[1] = "LINEAR";
        EAnimationInterpolations.LINEAR = 1;
    })(akra.EAnimationInterpolations || (akra.EAnimationInterpolations = {}));
    var EAnimationInterpolations = akra.EAnimationInterpolations;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    //default parameters
    // ambient: IColor;
    // diffuse: IColor;
    // specular: IColor;
    // attenuation: IVec3;
    (function (ELightTypes) {
        ELightTypes._map = [];
        ELightTypes._map[0] = "UNKNOWN";
        ELightTypes.UNKNOWN = 0;
        ELightTypes._map[1] = "PROJECT";
        ELightTypes.PROJECT = 1;
        ELightTypes._map[2] = "OMNI";
        ELightTypes.OMNI = 2;
        ELightTypes._map[3] = "SUN";
        ELightTypes.SUN = 3;
    })(akra.ELightTypes || (akra.ELightTypes = {}));
    var ELightTypes = akra.ELightTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        (function (ENodeUpdateFlags) {
            ENodeUpdateFlags._map = [];
            ENodeUpdateFlags.k_SetForDestruction = 0;
            ENodeUpdateFlags._map[1] = "k_NewOrientation";
            //if changed scale, otation or position
            ENodeUpdateFlags.k_NewOrientation = 1;
            ENodeUpdateFlags._map[2] = "k_NewWorldMatrix";
            // k_NewTranslation,
            // k_NewScale,
            ENodeUpdateFlags.k_NewWorldMatrix = 2;
            ENodeUpdateFlags._map[3] = "k_NewLocalMatrix";
            ENodeUpdateFlags.k_NewLocalMatrix = 3;
            ENodeUpdateFlags._map[4] = "k_RebuildInverseWorldMatrix";
            ENodeUpdateFlags.k_RebuildInverseWorldMatrix = 4;
            ENodeUpdateFlags._map[5] = "k_RebuildNormalMatrix";
            ENodeUpdateFlags.k_RebuildNormalMatrix = 5;
        })(scene.ENodeUpdateFlags || (scene.ENodeUpdateFlags = {}));
        var ENodeUpdateFlags = scene.ENodeUpdateFlags;
        ;
        var Node = (function (_super) {
            __extends(Node, _super);
            function Node() {
                _super.apply(this, arguments);

                /**@protected*/ this._m4fLocalMatrix = null;
                /**@protected*/ this._m4fWorldMatrix = null;
                /**@protected*/ this._m4fInverseWorldMatrix = null;
                /**@protected*/ this._m3fNormalMatrix = null;
                /**@protected*/ this._v3fWorldPosition = null;
                /**@protected*/ this._qRotation = null;
                /**@protected*/ this._v3fTranslation = null;
                /**@protected*/ this._v3fScale = null;
                /**@protected*/ this._iUpdateFlags = 0;
                /**@protected*/ this._eInheritance = akra.ENodeInheritance.POSITION;
            }
            Node.prototype.create = function () {
                return true;
            };
            Object.defineProperty(Node.prototype, "localOrientation", {
                get: /** @inline */function () {
                    return this._qRotation;
                },
                set: /** @inline */function (qOrient) {
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
                    this._qRotation.set(qOrient);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "localPosition", {
                get: /** @inline */function () {
                    return this._v3fTranslation;
                },
                set: /** @inline */function (v3fPosition) {
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
                    this._v3fTranslation.set(v3fPosition);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "localScale", {
                get: /** @inline */function () {
                    return this._v3fScale;
                },
                set: /** @inline */function (v3fScale) {
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
                    this._v3fScale.set(v3fScale);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "localMatrix", {
                get: /** @inline */function () {
                    return this._m4fLocalMatrix;
                },
                set: /** @inline */function (m4fLocalMatrix) {
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewLocalMatrix)));
                    this._m4fLocalMatrix.set(m4fLocalMatrix);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "worldMatrix", {
                get: /** @inline */function () {
                    return this._m4fWorldMatrix;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "worldPosition", {
                get: /** @inline */function () {
                    return this._v3fWorldPosition;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "inverseWorldMatrix", {
                get: function () {
                    if (((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_RebuildInverseWorldMatrix))) != 0)) {
                        this._m4fWorldMatrix.inverse(this._m4fInverseWorldMatrix);
                        ((this._iUpdateFlags) &= ~(1 << (ENodeUpdateFlags.k_RebuildInverseWorldMatrix)));
                    }
                    return this._m4fInverseWorldMatrix;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "normalMatrix", {
                get: function () {
                    if (((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_RebuildNormalMatrix))) != 0)) {
                        this._m4fWorldMatrix.toMat3(this._m3fNormalMatrix).inverse().transpose();
                        ((this._iUpdateFlags) &= ~(1 << (ENodeUpdateFlags.k_RebuildNormalMatrix)));
                    }
                    return this._m3fNormalMatrix;
                },
                enumerable: true,
                configurable: true
            });
            Node.prototype.update = function () {
                // derived classes update the local matrix
                // then call this base function to complete
                // the update
                return this.recalcWorldMatrix();
            };
            Node.prototype.prepareForUpdate = function () {
                _super.prototype.prepareForUpdate.call(this);
                // clear the temporary flags
                ((this._iUpdateFlags) &= ~((1 << (ENodeUpdateFlags.k_NewLocalMatrix)) | (1 << (ENodeUpdateFlags.k_NewOrientation)) | (1 << (ENodeUpdateFlags.k_NewWorldMatrix))));
            };
            Node.prototype.setInheritance = /** @inline */function (eInheritance) {
                this._eInheritance = eInheritance;
            };
            Node.prototype.getInheritance = /** @inline */function () {
                return this._eInheritance;
            };
            Node.prototype.isWorldMatrixNew = /** @inline */function () {
                return ((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewWorldMatrix))) != 0);
            };
            Node.prototype.isLocalMatrixNew = /** @inline */function () {
                return ((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewLocalMatrix))) != 0);
            };
            Node.prototype.recalcWorldMatrix = function () {
                var isParentMoved = this._pParent && (((((this._pParent))._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewWorldMatrix))) != 0));
                var isOrientModified = ((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewOrientation))) != 0);
                var isLocalModified = ((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewLocalMatrix))) != 0);
                if (isOrientModified || isParentMoved || isLocalModified) {
                    var m4fLocal = this._m4fLocalMatrix;
                    var m4fWorld = this._m4fWorldMatrix;
                    var m4fOrient = Node._m4fTemp;
                    var v3fTemp = Node._v3fTemp;
                    var pWorldData = m4fWorld.data;
                    var pOrientData = m4fOrient.data;
                    this._qRotation.toMat4(m4fOrient);
                    m4fOrient.setTranslation(this._v3fTranslation);
                    m4fOrient.scaleRight(this._v3fScale);
                    m4fOrient.multiply(m4fLocal);
                    //console.error(m4fOrient.toString());
                    if (this._pParent) {
                        var m4fParent = (((this._pParent))._m4fWorldMatrix);
                        var pParentData = m4fParent.data;
                        if (this._eInheritance === akra.ENodeInheritance.ALL) {
                            m4fParent.multiply(m4fOrient, m4fWorld);
                        } else if (this._eInheritance === akra.ENodeInheritance.POSITION) {
                            m4fWorld.set(m4fOrient);
                            pWorldData[12] = pParentData[12] + pOrientData[12];
                            pWorldData[13] = pParentData[13] + pOrientData[13];
                            pWorldData[14] = pParentData[14] + pOrientData[14];
                        } else if (this._eInheritance === akra.ENodeInheritance.ROTSCALE) {
                            var p11 = pParentData[0], p12 = pParentData[4], p13 = pParentData[8];
                            var p21 = pParentData[1], p22 = pParentData[5], p23 = pParentData[9];
                            var p31 = pParentData[2], p32 = pParentData[6], p33 = pParentData[10];
                            var l11 = pOrientData[0], l12 = pOrientData[4], l13 = pOrientData[8];
                            var l21 = pOrientData[1], l22 = pOrientData[5], l23 = pOrientData[9];
                            var l31 = pOrientData[2], l32 = pOrientData[6], l33 = pOrientData[10];
                            pWorldData[0] = p11 * l11 + p12 * l21 + p13 * l31;
                            pWorldData[4] = p11 * l12 + p12 * l22 + p13 * l32;
                            pWorldData[8] = p11 * l13 + p12 * l23 + p13 * l33;
                            pWorldData[12] = pOrientData[12];
                            pWorldData[1] = p21 * l11 + p22 * l21 + p23 * l31;
                            pWorldData[5] = p21 * l12 + p22 * l22 + p23 * l32;
                            pWorldData[9] = p21 * l13 + p22 * l23 + p23 * l33;
                            pWorldData[13] = pOrientData[13];
                            pWorldData[2] = p31 * l11 + p32 * l21 + p33 * l31;
                            pWorldData[6] = p31 * l12 + p32 * l22 + p33 * l32;
                            pWorldData[10] = p31 * l13 + p32 * l23 + p33 * l33;
                            pWorldData[14] = pOrientData[14];
                            pWorldData[3] = pOrientData[3];
                            pWorldData[7] = pOrientData[7];
                            pWorldData[11] = pOrientData[11];
                            pWorldData[15] = pOrientData[15];
                        }
                    } else {
                        m4fWorld.set(m4fOrient);
                    }
                    this._v3fWorldPosition.x = pWorldData[12];
                    this._v3fWorldPosition.y = pWorldData[13];
                    this._v3fWorldPosition.z = pWorldData[14];
                    // set the flag that our world matrix has changed
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewWorldMatrix)));
                    // and it's inverse & vectors are out of date
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_RebuildInverseWorldMatrix)));
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_RebuildNormalMatrix)));
                    return true;
                }
                return false;
            };
            Node.prototype.setPosition = function (fX, fY, fZ) {
                var pPos = arguments.length === 1 ? arguments[0] : akra.Vec3.stackCeil.set(fX, fY, fZ);
                var v3fTranslation = this._v3fTranslation;
                v3fTranslation.set(pPos);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRelPosition = function (fX, fY, fZ) {
                var pPos = arguments.length === 1 ? arguments[0] : akra.Vec3.stackCeil.set(fX, fY, fZ);
                var v3fTranslation = this._v3fTranslation;
                this._qRotation.multiplyVec3(pPos);
                v3fTranslation.set(pPos);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.addPosition = function (fX, fY, fZ) {
                var pPos = arguments.length === 1 ? arguments[0] : akra.Vec3.stackCeil.set(fX, fY, fZ);
                var v3fTranslation = this._v3fTranslation;
                v3fTranslation.add(pPos);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.addRelPosition = function (fX, fY, fZ) {
                var pPos = arguments.length === 1 ? arguments[0] : akra.Vec3.stackCeil.set(fX, fY, fZ);
                var v3fTranslation = this._v3fTranslation;
                this._qRotation.multiplyVec3(pPos);
                v3fTranslation.add(pPos);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRotationByMatrix = function (matrix) {
                matrix.toQuat4(this._qRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRotationByAxisAngle = function (v3fAxis, fAngle) {
                akra.Quat4.fromAxisAngle(v3fAxis, fAngle, this._qRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRotationByForwardUp = function (v3fForward, v3fUp) {
                akra.Quat4.fromForwardUp(v3fForward, v3fUp, this._qRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRotationByEulerAngles = function (fYaw, fPitch, fRoll) {
                akra.Quat4.fromYawPitchRoll(fYaw, fPitch, fRoll, this._qRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRotationByXYZAxis = function (fX, fY, fZ) {
                akra.Quat4.fromYawPitchRoll(fY, fX, fZ, this._qRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.setRotation = function (q4fRotation) {
                this._qRotation.set(q4fRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.addRelRotationByMatrix = function (matrix) {
                this.addRelRotation(arguments[0].toQuat4(Node._q4fTemp));
            };
            Node.prototype.addRelRotationByAxisAngle = /** @inline */function (v3fAxis, fAngle) {
                this.addRelRotation(akra.Quat4.fromAxisAngle(v3fAxis, fAngle, Node._q4fTemp));
            };
            Node.prototype.addRelRotationByForwardUp = /** @inline */function (v3fForward, v3fUp) {
                this.addRelRotation(akra.Quat4.fromForwardUp(v3fForward, v3fUp, Node._q4fTemp));
            };
            Node.prototype.addRelRotationByEulerAngles = /** @inline */function (fYaw, fPitch, fRoll) {
                this.addRelRotation(akra.Quat4.fromYawPitchRoll(fYaw, fPitch, fRoll, Node._q4fTemp));
            };
            Node.prototype.addRelRotationByXYZAxis = /** @inline */function (fX, fY, fZ) {
                this.addRelRotation(akra.Quat4.fromYawPitchRoll(fY, fX, fZ, Node._q4fTemp));
            };
            Node.prototype.addRelRotation = function (q4fRotation) {
                this._qRotation.multiply(q4fRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.addRotationByMatrix = /** @inline */function (matrix) {
                this.addRotation(arguments[0].toQuat4(Node._q4fTemp));
            };
            Node.prototype.addRotationByAxisAngle = /** @inline */function (v3fAxis, fAngle) {
                this.addRotation(akra.Quat4.fromAxisAngle(v3fAxis, fAngle, Node._q4fTemp));
            };
            Node.prototype.addRotationByForwardUp = /** @inline */function (v3fForward, v3fUp) {
                this.addRotation(akra.Quat4.fromForwardUp(v3fForward, v3fUp, Node._q4fTemp));
            };
            Node.prototype.addRotationByEulerAngles = /** @inline */function (fYaw, fPitch, fRoll) {
                this.addRotation(akra.Quat4.fromYawPitchRoll(fYaw, fPitch, fRoll, Node._q4fTemp));
            };
            Node.prototype.addRotationByXYZAxis = /** @inline */function (fX, fY, fZ) {
                this.addRotation(akra.Quat4.fromYawPitchRoll(fY, fX, fZ, Node._q4fTemp));
            };
            Node.prototype.addRotation = function (q4fRotation) {
                q4fRotation.multiplyVec3(this._v3fTranslation);
                q4fRotation.multiply(this._qRotation, this._qRotation);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.scale = function (fX, fY, fZ) {
                var pScale = arguments.length === 1 ? ((typeof (arguments[0]) === "number") ? akra.Vec3.stackCeil.set(fX) : arguments[0]) : akra.Vec3.stackCeil.set(fX, fY, fZ);
                var v3fScale = this._v3fScale;
                v3fScale.scale(pScale);
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
            };
            Node.prototype.lookAt = function (v3f) {
                var v3fFrom, v3fCenter, v3fUp;
                this.update();
                if (arguments.length < 3) {
                    v3fFrom = ((this)._v3fWorldPosition);
                    v3fCenter = arguments[0];
                    v3fUp = arguments[1];
                } else {
                    v3fFrom = arguments[0];
                    v3fCenter = arguments[1];
                    v3fUp = arguments[2];
                }
                v3fUp = v3fUp || akra.Vec3.stackCeil.set(0., 1., 0.);
                var v3fParentPos = (((((this)._pParent)))._v3fWorldPosition);
                var m4fTemp = akra.Mat4.lookAt(v3fFrom, v3fCenter, v3fUp, akra.Mat4.stackCeil.set()).inverse();
                var pData = m4fTemp.data;
                switch(this._eInheritance) {
                    case akra.ENodeInheritance.ALL:
                        (this._pParent).inverseWorldMatrix.multiply(m4fTemp, m4fTemp);
                        m4fTemp.toQuat4(this._qRotation);
                        this.setPosition(pData[12], pData[13], pData[14]);
                        break;
                    case akra.ENodeInheritance.ROTSCALE:
                        var m3fTemp = m4fTemp.toMat3();
                        m3fTemp = (this._pParent).inverseWorldMatrix.toMat3().multiply(m3fTemp, akra.Mat3.stackCeil.set());
                        m3fTemp.toQuat4(this._qRotation);
                        this.setPosition(pData[12], pData[13], pData[14]);
                        break;
                    default:
                        m4fTemp.toQuat4(this._qRotation);
                        this.setPosition(pData[12] - v3fParentPos.x, pData[13] - v3fParentPos.y, pData[14] - v3fParentPos.z);
                }
                this.update();
            };
            Node.prototype.attachToParent = function (pParent) {
                if (_super.prototype.attachToParent.call(this, pParent)) {
                    // adjust my local matrix to be relative to this new parent
                    var m4fInvertedParentMatrix = akra.Mat4.stackCeil.set();
                    (this._pParent)._m4fWorldMatrix.inverse(m4fInvertedParentMatrix);
                    ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewWorldMatrix)));
                    return true;
                }
                return false;
            };
            Node.prototype.detachFromParent = function () {
                if (_super.prototype.detachFromParent.call(this)) {
                    this._m4fWorldMatrix.identity();
                    return true;
                }
                return false;
            };
            Node.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<node' + (((this)._sName) ? " " + ((this)._sName) : "") + '>';
                }
                var pSibling = this.sibling;
                var pChild = ((this)._pChild);
                var s = "";
                for(var i = 0; i < iDepth; ++i) {
                    s += ':  ';
                }
                s += '+----[depth: ' + this.depth + ']' + this.toString() + '\n';
                /*"[updated: " + this.isUpdated() + ", childs updated: " + this.hasUpdatedSubNodes() + ", new wm: " + this.isWorldMatrixNew() + "]" +*/
                if (pChild) {
                    s += pChild.toString(true, iDepth + 1);
                }
                if (pSibling) {
                    s += pSibling.toString(true, iDepth);
                }
                return s;
            };
            Node._v3fTemp = new akra.Vec3();
            Node._v4fTemp = new akra.Vec4();
            Node._m3fTemp = new akra.Mat3();
            Node._m4fTemp = new akra.Mat4();
            Node._q4fTemp = new akra.Quat4();
            return Node;
        })(akra.util.Entity);
        scene.Node = Node;        
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        var SceneNode = (function (_super) {
            __extends(SceneNode, _super);
            function SceneNode(pScene, eType) {
                if (typeof eType === "undefined") { eType = akra.EEntityTypes.SCENE_NODE; }
                        _super.call(this, eType);
                /**@protected*/ this._pScene = null;
                /**@protected*/ this._pAnimationControllers = null;
                ((this)._pScene = (pScene));
            }
            Object.defineProperty(SceneNode.prototype, "scene", {
                get: /** @inline */function () {
                    return this._pScene;
                },
                set: /** @inline */function (pScene) {
                    this._pScene = pScene;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SceneNode.prototype, "totalControllers", {
                get: /** @inline */function () {
                    return this._pAnimationControllers ? this._pAnimationControllers.length : 0;
                },
                enumerable: true,
                configurable: true
            });
            SceneNode.prototype.getController = /** @inline */function (i) {
                if (typeof i === "undefined") { i = 0; }
                return ((this._pAnimationControllers) === null) || this._pAnimationControllers.length <= i ? null : this._pAnimationControllers[i];
            };
            SceneNode.prototype.addController = /** @inline */function (pController) {
                if (((this._pAnimationControllers) === null)) {
                    this._pAnimationControllers = [];
                }
                if (this._pAnimationControllers.indexOf(pController) != -1) {
                    return;
                }
                pController.attach(this);
                this._pAnimationControllers.push(pController);
            };
            SceneNode.prototype.create = function () {
                _super.prototype.create.call(this);
                this._m4fLocalMatrix = new akra.Mat4(1);
                this._m4fWorldMatrix = new akra.Mat4(1);
                this._m4fInverseWorldMatrix = new akra.Mat4(1);
                this._m3fNormalMatrix = new akra.Mat3(1);
                this._v3fWorldPosition = new akra.Vec3();
                this._v3fTranslation = new akra.Vec3(0);
                this._v3fScale = new akra.Vec3(1);
                this._qRotation = new akra.Quat4(0, 1);
                return true;
            };
            SceneNode.prototype.update = function () {
                var isOk = _super.prototype.update.call(this);
                if (!((this._pAnimationControllers) === null)) {
                    for(var i = 0; i < this._pAnimationControllers.length; ++i) {
                        this._pAnimationControllers[i].update();
                    }
                }
                return isOk;
            };
            SceneNode.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
            };
            SceneNode.prototype.attachToParent = function (pParent) {
                if ((pParent).scene !== this._pScene) {
 {
                        akra.logger.setSourceLocation("SceneNode.ts", 81);
                        akra.logger.warning("transfer of the scene node between trees scene - forbidden");
                    }
                    ;
                    return false;
                }
                return _super.prototype.attachToParent.call(this, pParent);
            };
            SceneNode.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return "<scene_node" + (((this)._sName) ? " " + ((this)._sName) : "") + ">";
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            return SceneNode;
        })(scene.Node);
        scene.SceneNode = SceneNode;        
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        var Joint = (function (_super) {
            __extends(Joint, _super);
            // private _iUpdated: int = 0;
            // private _pEngine: IEngine = null;
            function Joint(pScene) {
                        _super.call(this, pScene, akra.EEntityTypes.JOINT);
                this._sBone = null;
            }
            Object.defineProperty(Joint.prototype, "boneName", {
                get: /** @inline */function () {
                    return this._sBone;
                },
                set: /** @inline */function (sBone) {
                    this._sBone = sBone;
                },
                enumerable: true,
                configurable: true
            });
            Joint.prototype.create = // getEngine(): IEngine {
            // 	return this._pEngine;
            // }
            function () {
                this._m4fLocalMatrix = new akra.Mat4(1);
                this._m4fWorldMatrix = new akra.Mat4(1);
                this._v3fWorldPosition = new akra.Vec3();
                this._v3fTranslation = new akra.Vec3(0, 0, 0);
                this._v3fScale = new akra.Vec3(1);
                this._qRotation = new akra.Quat4(0, 1);
                //maybe custom
                ((this)._eInheritance = (/*checked (origin: akra)>>*/akra.ENodeInheritance.ALL));
                return true;
            };
            Joint.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                isRecursive = isRecursive || false;
                if (!isRecursive) {
                    return "<joint" + (this._sName ? (' ' + this._sName) : "") + ">";
                }
                return scene.Node.prototype.toString.call(this, isRecursive, iDepth);
            };
            return Joint;
        })(scene.SceneNode);
        scene.Joint = Joint;        
        /** @inline */function isJoint(pEntity) {
            return pEntity.type == akra.EEntityTypes.JOINT;
        }
        scene.isJoint = isJoint;
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (animation) {
        var Base = (function () {
            function Base(eType, sName) {
                if (typeof sName === "undefined") { sName = null; }
                /**@protected*/ this._pTargetMap = {};
                /**@protected*/ this._pTargetList = [];
                /**@protected*/ this._fDuration = 0.0;
                //first ever frame time of all targets
                /**@protected*/ this._fFirst = akra.MAX_UINT32;
                this.extra = null;
                /**@protected*/ this._iGuid = akra.sid();
                /**@protected*/ this._pUnicastSlotMap = null;
                /**@protected*/ this._pBroadcastSlotList = null;
                this._sName = sName || ("animation-" + "-" + ((this)._iGuid));
                this._eType = eType;
            }
            Object.defineProperty(Base.prototype, "type", {
                get: /** @inline */function () {
                    return this._eType;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Base.prototype, "duration", {
                get: /** @inline */function () {
                    return this._fDuration;
                },
                set: /** @inline */function (fValue) {
                    // LOG("new duration(", this.name, ") > " + fValue);
                    this._fDuration = fValue;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Base.prototype, "first", {
                get: /** @inline */function () {
                    return this._fFirst;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Base.prototype, "name", {
                get: /** @inline */function () {
                    return this._sName;
                },
                set: /** @inline */function (sName) {
                    if (sName == this._sName) {
                        return;
                    }
                    this._sName = sName;
                    this.renamed(sName);
                },
                enumerable: true,
                configurable: true
            });
            Base.prototype.play = /** @inline */function (fRealTime) {
                this.played(fRealTime);
            };
            Base.prototype.stop = /** @inline */function (fRealTime) {
                this.stoped(fRealTime);
            };
            Base.prototype.isAttached = /** @inline */function () {
                if (this._pTargetList.length) {
                    return ((this._pTargetList[0].target) != null);
                }
                return false;
            };
            Base.prototype.attach = function (pTarget) {
 {
                    akra.logger.setSourceLocation("Base.ts", 83);
                    akra.logger.error("method AnimationBase::attach() must be overwritten.");
                }
                ;
            };
            Base.prototype.frame = function (sName, fRealTime) {
                return null;
            };
            Base.prototype.apply = function (fRealTime) {
                var pTargetList = this._pTargetList;
                var pTarget = null;
                var pFrame = null;
                var pTransform = null;
                var bAffected = false;
                for(var i = 0; i < pTargetList.length; ++i) {
                    pFrame = this.frame(pTargetList[i].name, fRealTime);
                    pTarget = pTargetList[i].target;
                    if (!pFrame || !pTarget) {
                        continue;
                    }
                    pTransform = pFrame.toMatrix();
                    pTarget.localMatrix = pTransform;
                    bAffected = true;
                }
                // console.log(bAffected);
                return bAffected;
            };
            Base.prototype.addTarget = function (sName, pTarget) {
                if (typeof pTarget === "undefined") { pTarget = null; }
                //pTarget = pTarget || null;
                var pPointer = this._pTargetMap[sName];
                if (pPointer) {
                    pPointer.target = pTarget || pPointer.target || null;
                    return pPointer;
                }
                pPointer = {
                    target: pTarget,
                    index: this._pTargetList.length,
                    name: sName
                };
                this._pTargetList.push(pPointer);
                this._pTargetMap[sName] = pPointer;
                return pPointer;
            };
            Base.prototype.setTarget = function (sName, pTarget) {
                var pPointer = this._pTargetMap[sName];
                pPointer.target = pTarget;
                return pPointer;
            };
            Base.prototype.getTarget = function (sTargetName) {
                return this._pTargetMap[sTargetName];
            };
            Base.prototype.getTargetList = /** @inline */function () {
                return this._pTargetList;
            };
            Base.prototype.getTargetByName = /** @inline */function (sName) {
                return this._pTargetMap[sName];
            };
            Base.prototype.targetNames = function () {
                var pTargets = this._pTargetList;
                var pTargetNames = [];
                for(var i = 0; i < pTargets.length; ++i) {
                    pTargetNames.push(pTargets[i].name);
                }
                return pTargetNames;
            };
            Base.prototype.targetList = function () {
                var pTargets = this._pTargetList;
                var pTargetList = [];
                for(var i = 0; i < pTargets.length; ++i) {
                    pTargetList.push(pTargets[i].target);
                }
                return pTargetList;
            };
            Base.prototype.jointList = function () {
                var pTargets = this._pTargetList;
                var pJointList = [];
                for(var i = 0; i < pTargets.length; ++i) {
                    if (((pTargets[i].target).type == /*checked (origin: akra)>>*/akra.EEntityTypes.JOINT)) {
                        pJointList.push(pTargets[i].target);
                    }
                }
                return pJointList;
            };
            Base.prototype.grab = function (pAnimationBase, bRewrite) {
                if (typeof bRewrite === "undefined") { bRewrite = true; }
                var pAdoptTargets = pAnimationBase.getTargetList();
                for(var i = 0; i < pAdoptTargets.length; ++i) {
                    if (!pAdoptTargets[i].target) {
                        //warning('cannot grab target <' + pAdoptTargets[i].name + '>, becaus "target" is null');
                        continue;
                    }
                    if (bRewrite || !this.getTarget(pAdoptTargets[i].name)) {
                        this.addTarget(pAdoptTargets[i].name, pAdoptTargets[i].target);
                    }
                }
                this._fFirst = akra.math.min(((this)._fFirst), pAnimationBase.first);
            };
            Base.prototype.createAnimationMask = function () {
                var pTargets = this.targetNames();
                var pMask = {};
                for(var i = 0; i < pTargets.length; ++i) {
                    pMask[pTargets[i]] = 1.0;
                }
                return pMask;
            };
            Base.prototype.toString = function () {
                var s = "\n";
                s += "name         : " + ((this)._sName) + "\n";
                s += "duration     : " + ((this)._fDuration) + " sec\n";
                s += "total targets: " + this.targetList().length.toString() + "\n";
                return s;
            };
            Base.prototype.getGuid = /** @inline */function () {
                return this._iGuid;
            };
            Base._pEventTable = new akra.events.EventTable();
            Base.prototype.getEventTable = /** @inline */function () {
                return Base._pEventTable;
            };
            Base.prototype.connect = /** @inline */function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().addDestination((((pSender))._iGuid), sSignal, this, sSlot, eType);
            };
            Base.prototype.disconnect = /** @inline */function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().removeDestination((((pSender))._iGuid), sSignal, this, sSlot, eType);
            };
            Base.prototype.bind = /** @inline */function (sSignal, fnListener, eType) {
                return (Base._pEventTable).addListener(((this)._iGuid), sSignal, fnListener, eType);
            };
            Base.prototype.unbind = /** @inline */function (sSignal, fnListener, eType) {
                return (Base._pEventTable).removeListener(((this)._iGuid), sSignal, fnListener, eType);
            };
            Base.prototype._syncTable = /** @inline */function (pFrom) {
                (Base._pEventTable)._sync(this, pFrom);
            };
            Base.prototype.played = function (fRealTime) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((Base._pEventTable))).broadcast[(this._iGuid)] = (((Base._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).played;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, fRealTime) : _broadcast[i].listener(_recivier, fRealTime);
                    }
                }
            };
            Base.prototype.stoped = function (fRealTime) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((Base._pEventTable))).broadcast[(this._iGuid)] = (((Base._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).stoped;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, fRealTime) : _broadcast[i].listener(_recivier, fRealTime);
                    }
                }
            };
            Base.prototype.renamed = function (sName) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((Base._pEventTable))).broadcast[(this._iGuid)] = (((Base._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).renamed;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, sName) : _broadcast[i].listener(_recivier, sName);
                    }
                }
            };
            return Base;
        })();
        animation.Base = Base;        
    })(akra.animation || (akra.animation = {}));
    var animation = akra.animation;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (animation) {
        var Container = (function (_super) {
            __extends(Container, _super);
            function Container(pAnimation, sName) {
                        _super.call(this, akra.EAnimationTypes.CONTAINER, sName);
                this._bEnable = true;
                this._fStartTime = 0;
                this._fSpeed = 1.0;
                this._bLoop = false;
                this._pAnimation = null;
                this._bReverse = false;
                //Время учитывающее циклы и прочее.
                this._fTrueTime = 0;
                //реальное время на сцене
                this._fRealTime = 0;
                //время с учетом ускорений
                this._fTime = 0;
                this._bPause = false;
                //определена ли анимация до первого и после последнего кадров
                this._bLeftInfinity = true;
                this._bRightInfinity = true;
                if (pAnimation) {
                    this.setAnimation(pAnimation);
                }
            }
            Object.defineProperty(Container.prototype, "animationName", {
                get: /** @inline */function () {
                    return this._pAnimation.name;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Container.prototype, "speed", {
                get: /** @inline */function () {
                    return this._fSpeed;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Container.prototype, "animationTime", {
                get: /** @inline */function () {
                    return this._fTrueTime;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Container.prototype, "time", {
                get: /** @inline */function () {
                    return this._fTime;
                },
                enumerable: true,
                configurable: true
            });
            Container.prototype.play = function (fRealTime) {
                this._fRealTime = fRealTime;
                this._fTime = 0;
                this.played(this._fTime);
            };
            Container.prototype.stop = /** @inline */function () {
                this.stoped(this._fTime);
            };
            Container.prototype.attach = function (pTarget) {
                if (!((this._pAnimation) === null)) {
                    this._pAnimation.attach(pTarget);
                    this.grab(this._pAnimation, true);
                }
            };
            Container.prototype.setAnimation = function (pAnimation) {
 {
                    akra.logger.setSourceLocation("animation/Container.ts", 75);
                    akra.logger.assert(!this._pAnimation, "anim. already exists");
                }
                ;
                this._pAnimation = pAnimation;
                this.setSpeed(((this)._fSpeed));
                ((pAnimation).getEventTable().addDestination(((((pAnimation)))._iGuid), ("durationUpdated"), (this), ("_onDurationUpdate"), (undefined)));
                this.grab(pAnimation);
            };
            Container.prototype._onDurationUpdate = function (pAnimation, fDuration) {
                this.setSpeed(((this)._fSpeed));
            };
            Container.prototype.getAnimation = function () {
                return this._pAnimation;
            };
            Container.prototype.enable = /** @inline */function () {
                this._bEnable = true;
            };
            Container.prototype.disable = /** @inline */function () {
                this._bEnable = false;
            };
            Container.prototype.isEnabled = /** @inline */function () {
                return this._bEnable;
            };
            Container.prototype.leftInfinity = /** @inline */function (bValue) {
                this._bLeftInfinity = bValue;
            };
            Container.prototype.inLeftInfinity = /** @inline */function () {
                return this._bLeftInfinity;
            };
            Container.prototype.inRightInfinity = /** @inline */function () {
                return this._bRightInfinity;
            };
            Container.prototype.rightInfinity = /** @inline */function (bValue) {
                this._bRightInfinity = bValue;
            };
            Container.prototype.setStartTime = /** @inline */function (fRealTime) {
                this._fStartTime = fRealTime;
            };
            Container.prototype.getStartTime = /** @inline */function () {
                return this._fStartTime;
            };
            Container.prototype.setSpeed = function (fSpeed) {
                this._fSpeed = fSpeed;
                (// LOG("new duration(", this.name, ") > " + fValue);
(this)._fDuration = (this._pAnimation.duration / fSpeed));
                this.durationUpdated(this.duration);
            };
            Container.prototype.getSpeed = /** @inline */function () {
                return this._fSpeed;
            };
            Container.prototype.useLoop = /** @inline */function (bValue) {
                this._bLoop = bValue;
            };
            Container.prototype.inLoop = /** @inline */function () {
                return this._bLoop;
            };
            Container.prototype.reverse = /** @inline */function (bValue) {
                this._bReverse = bValue;
            };
            Container.prototype.isReversed = /** @inline */function () {
                return this._bReverse;
            };
            Container.prototype.pause = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                this._fRealTime = -1;
                this._bPause = bValue;
            };
            Container.prototype.rewind = /** @inline */function (fRealTime) {
                this._fTime = fRealTime;
            };
            Container.prototype.isPaused = /** @inline */function () {
                return this._bPause;
            };
            Container.prototype.calcTime = /**@protected*/ function (fRealTime) {
                if (this._bPause) {
                    return;
                }
                if (this._fRealTime < 0) {
                    this._fRealTime = fRealTime;
                }
                this._fTime = this._fTime + (fRealTime - this._fRealTime) * this._fSpeed;
                this._fRealTime = fRealTime;
                var fTime = this._fTime;
                if (this._bLoop) {
                    fTime = (((fTime) - /*checked (origin: math)>>*/akra.math.floor((fTime) / ((this._pAnimation.duration))) * ((this._pAnimation.duration))));
                    if (this._bReverse) {
                        fTime = this._pAnimation.duration - fTime;
                    }
                }
                this._fTrueTime = fTime;
            };
            Container.prototype.frame = function (sName, fRealTime) {
                if (!this._bEnable) {
                    return null;
                }
                if (this._fRealTime !== fRealTime) {
                    //only for first bone in list
                    this.calcTime(fRealTime);
                    this.enterFrame(fRealTime, this._fTrueTime);
                }
                if (!this._bLeftInfinity && this._fTrueTime < ((this)._fFirst)) {
                    return null;
                }
                if (!this._bRightInfinity && this._fTrueTime > this.duration) {
                    return null;
                }
                return this._pAnimation.frame(sName, this._fTrueTime);
            };
            Container.prototype.durationUpdated = function (fDuration) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: animation)>>*/akra.animation.Base._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: animation)>>*/akra.animation.Base._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).durationUpdated;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, fDuration) : _broadcast[i].listener(_recivier, fDuration);
                    }
                }
            };
            Container.prototype.enterFrame = function (fRealTime, fTime) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: animation)>>*/akra.animation.Base._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: animation)>>*/akra.animation.Base._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).enterFrame;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, fRealTime, fTime) : _broadcast[i].listener(_recivier, fRealTime, fTime);
                    }
                }
            };
            return Container;
        })(animation.Base);
        animation.Container = Container;        
        /** @inline */function isContainer(pAnimation) {
            return pAnimation.type === akra.EAnimationTypes.CONTAINER;
        }
        animation.isContainer = isContainer;
        function createContainer(pAnimation, sName) {
            return new Container(pAnimation, sName);
        }
        animation.createContainer = createContainer;
    })(akra.animation || (akra.animation = {}));
    var animation = akra.animation;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Player = (function (_super) {
                __extends(Player, _super);
                function Player(pGraph, pContainer) {
                    if (typeof pContainer === "undefined") { pContainer = null; }
                                _super.call(this, pGraph, {
                init: false
            }, akra.EUIGraphNodes.ANIMATION_PLAYER);
                    this._pAnimation = null;
                    this.template("animation.Player.tpl");
                    this.linkAreas();
                    this._pSpeedLabel = this.findEntity("speed");
                    this._pSlider = this.findEntity("state");
                    this._pPlayBtn = this.findEntity("play");
                    this._pLoopBtn = this.findEntity("loop");
                    this._pReverseBtn = this.findEntity("reverse");
                    this._pLeftInf = this.findEntity("left-inf");
                    this._pRightInf = this.findEntity("right-inf");
                    this._pNameLabel = this.findEntity("name");
                    this._pEnableBtn = this.findEntity("enabled");
                    this._pAnimation = pContainer = pContainer || akra.animation.createContainer();
                    ((((this))._pParent)).addAnimation(pContainer);
                    ((pContainer).getEventTable().addDestination(((((pContainer)))._iGuid), ("enterFrame"), (this), ("_enterFrame"), (undefined)));
                    ((pContainer).getEventTable().addDestination(((((pContainer)))._iGuid), ("durationUpdated"), (this), ("_durationUpdated"), (undefined)));
                    ((this._pEnableBtn).getEventTable().addDestination(((((this._pEnableBtn)))._iGuid), ("changed"), (this), ("_enabled"), (undefined)));
                    ((this._pLoopBtn).getEventTable().addDestination(((((this._pLoopBtn)))._iGuid), ("changed"), (this), ("_useLoop"), (undefined)));
                    ((this._pReverseBtn).getEventTable().addDestination(((((this._pReverseBtn)))._iGuid), ("changed"), (this), ("_reverse"), (undefined)));
                    ((this._pPlayBtn).getEventTable().addDestination(((((this._pPlayBtn)))._iGuid), ("changed"), (this), ("_play"), (undefined)));
                    ((this._pSpeedLabel).getEventTable().addDestination(((((this._pSpeedLabel)))._iGuid), ("changed"), (this), ("_setSpeed"), (undefined)));
                    ((this._pNameLabel).getEventTable().addDestination(((((this._pNameLabel)))._iGuid), ("changed"), (this), ("_setName"), (undefined)));
                    ((this._pLeftInf).getEventTable().addDestination(((((this._pLeftInf)))._iGuid), ("changed"), (this), ("_setLeftInf"), (undefined)));
                    ((this._pRightInf).getEventTable().addDestination(((((this._pRightInf)))._iGuid), ("changed"), (this), ("_setRightInf"), (undefined)));
                    this.$time = ((this).$element).find(".time:first");
                    this.setup();
                }
                Object.defineProperty(Player.prototype, "animation", {
                    get: /** @inline */function () {
                        return this._pAnimation;
                    },
                    set: function (pAnim) {
                        //ASSERT(isNull(this.animation), "animation container already setuped in player");
                        if (this._pAnimation.getAnimation() === pAnim) {
                            return;
                        }
                        this._pAnimation.setAnimation(pAnim);
                        this.setup();
                    },
                    enumerable: true,
                    configurable: true
                });
                Player.prototype.connected = /**@protected*/ function (pArea, pFrom, pTo) {
                    _super.prototype.connected.call(this, pArea, pFrom, pTo);
                    this.notifyDisabled(!this._pEnableBtn.value);
                };
                Player.prototype.onConnectionBegin = /**@protected*/ function (pGraph, pRoute) {
                    if (!((this._pAnimation.getAnimation()) === null)) {
                        ((this).$element).addClass("blocked");
                    } else {
                        _super.prototype.onConnectionBegin.call(this, pGraph, pRoute);
                    }
                };
                Player.prototype.setup = /**@protected*/ function () {
                    var pAnimation = this._pAnimation;
                    this._pSlider.range = pAnimation.duration;
                    this._pPlayBtn.checked = !pAnimation.isPaused();
                    this._pLoopBtn.checked = pAnimation.inLoop();
                    this._pReverseBtn.checked = pAnimation.isReversed();
                    this._pNameLabel.text = pAnimation.name;
                    this._pSpeedLabel.text = pAnimation.speed.toString();
                    this._pLeftInf.checked = pAnimation.inLeftInfinity();
                    this._pRightInf.checked = pAnimation.inRightInfinity();
                    this._pEnableBtn.value = pAnimation.isEnabled();
                };
                Player.prototype._enabled = function (pSwc, bValue) {
                    this.notifyDisabled(!bValue);
                };
                Player.prototype.notifyDisabled = function (bValue) {
                    !bValue ? this._pAnimation.enable() : this._pAnimation.disable();
                    if (!bValue) {
                        ((this).$element).removeClass("disabled");
                    } else {
                        ((this).$element).addClass("disabled");
                    }
                    for(var i in this._pAreas) {
                        var pConnectors = this._pAreas[i].connectors;
                        for(var j = 0; j < pConnectors.length; ++j) {
                            pConnectors[j].route.enabled = !bValue;
                        }
                    }
                };
                Player.prototype._setLeftInf = function (pCheckbox, bValue) {
                    this._pAnimation.leftInfinity(bValue);
                };
                Player.prototype._setRightInf = function (pCheckbox, bValue) {
                    this._pAnimation.rightInfinity(bValue);
                };
                Player.prototype._reverse = function (pCheckbox, bValue) {
                    this._pAnimation.reverse(bValue);
                };
                Player.prototype._useLoop = function (pCheckbox, bValue) {
                    // LOG(this._pAnimation.isEnabled())
                    this._pAnimation.useLoop(bValue);
                };
                Player.prototype._pause = function (pCheckbox, bValue) {
                    this._pAnimation.pause(bValue);
                };
                Player.prototype._play = function (pCheckbox, bValue) {
                    this._pAnimation.pause(!bValue);
                    if (!bValue) {
                        ((this._pSlider).getEventTable().addDestination(((((this._pSlider)))._iGuid), ("updated"), (this), ("_setTime"), (undefined)));
                        ((this._pAnimation).getEventTable().removeDestination(((((this._pAnimation)))._iGuid), ("enterFrame"), (this), ("_enterFrame"), (undefined)));
                    } else {
                        ((this._pSlider).getEventTable().removeDestination(((((this._pSlider)))._iGuid), ("updated"), (this), ("_setTime"), (undefined)));
                        ((this._pAnimation).getEventTable().addDestination(((((this._pAnimation)))._iGuid), ("enterFrame"), (this), ("_enterFrame"), (undefined)));
                    }
                };
                Player.prototype._setTime = function (pSlider, fValue) {
                    this._pAnimation.pause(false);
                    this._pAnimation.play(0);
                    this._pAnimation.apply(fValue);
                    this._pAnimation.pause(true);
                };
                Player.prototype._setName = function (pLabel, sName) {
                    this._pAnimation.name = sName;
                };
                Player.prototype._setSpeed = function (pLabel, x) {
                    this._pAnimation.setSpeed(parseFloat(x));
                };
                Player.prototype._durationUpdated = function (pContainer, fDuration) {
                    this._pSlider.range = fDuration;
                };
                Player.prototype._enterFrame = function (pContainer, fRealTime, fTime) {
                    if (this._pAnimation.isPaused()) {
                        //this._pAnimation.rewind(this._pSlider.value);
                                            } else {
                        if (this._pAnimation.inLoop()) {
                            this._pSlider.value = ((((fRealTime - this._pAnimation.getStartTime())) - /*checked (origin: math)>>*/akra.math.floor(((fRealTime - this._pAnimation.getStartTime())) / (this._pAnimation.duration)) * (this._pAnimation.duration)));
                        } else if (fRealTime >= this._pAnimation.getStartTime()) {
                            this._pSlider.value = akra.math.min(fTime, this._pAnimation.duration);
                        }
                        this.$time.text(fTime.toFixed(1) + "/" + this._pAnimation.duration.toFixed(1) + "s");
                    }
                };
                Player.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    ((this).$element).addClass("component-animationplayer");
                };
                return Player;
            })(animation.Node);
            animation.Player = Player;            
            (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("animation.Player")] = (Player));
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    (function (ECMD) {
        ECMD._map = [];
        ECMD._map[0] = "SET_PREVIEW_RESOLUTION";
        ECMD.SET_PREVIEW_RESOLUTION = 0;
        ECMD._map[1] = "SET_PREVIEW_FULLSCREEN";
        ECMD.SET_PREVIEW_FULLSCREEN = 1;
        ECMD._map[2] = "INSPECT_SCENE_NODE";
        ECMD.INSPECT_SCENE_NODE = 2;
        ECMD._map[3] = "INSPECT_ANIMATION_NODE";
        ECMD.INSPECT_ANIMATION_NODE = 3;
        ECMD._map[4] = "INSPECT_ANIMATION_CONTROLLER";
        ECMD.INSPECT_ANIMATION_CONTROLLER = 4;
        ECMD._map[5] = "EDIT_ANIMATION_CONTROLLER";
        ECMD.EDIT_ANIMATION_CONTROLLER = 5;
        ECMD._map[6] = "CHANGE_AA";
        //меняем антиалисинг
        ECMD.CHANGE_AA = 6;
        ECMD._map[7] = "EDIT_EVENT";
        //редактируем код происходящие на событие eventprovider'a
        ECMD.EDIT_EVENT = 7;
        ECMD._map[8] = "EDIT_MAIN_SCRIPT";
        //редактируем основной код демо
        ECMD.EDIT_MAIN_SCRIPT = 8;
        ECMD._map[9] = "LOAD_COLLADA";
        ECMD.LOAD_COLLADA = 9;
        ECMD._map[10] = "CHANGE_CAMERA";
        ECMD.CHANGE_CAMERA = 10;
        ECMD._map[11] = "SCREENSHOT";
        ECMD.SCREENSHOT = 11;
    })(akra.ECMD || (akra.ECMD = {}));
    var ECMD = akra.ECMD;
    akra.ide = null;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Mask = (function (_super) {
                __extends(Mask, _super);
                function Mask(pGraph, pMask) {
                    if (typeof pMask === "undefined") { pMask = null; }
                                _super.call(this, pGraph, {
                init: false
            }, akra.EUIGraphNodes.ANIMATION_MASK);
                    this._pAnimation = null;
                    this._pMask = null;
                    this._pSliders = [];
                    this._pEditBtn = null;
                    this._pEditPanel = null;
                    this.template("animation.Mask.tpl");
                    this.linkAreas();
                    this._pEditBtn = this.findEntity("edit");
                    this._pMask = pMask;
                }
                Object.defineProperty(Mask.prototype, "animation", {
                    get: /** @inline */function () {
                        return this._pAnimation;
                    },
                    set: /** @inline */function (pAnim) {
                        this._pAnimation = pAnim;
                        this._pMask = this._pMask || pAnim.createAnimationMask();
                        this.selected(true);
                    },
                    enumerable: true,
                    configurable: true
                });
                Mask.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    ((this).$element).addClass("component-animationmask");
                };
                Mask.prototype.getMask = /** @inline */function () {
                    return this._pMask;
                };
                return Mask;
            })(animation.Node);
            animation.Mask = Mask;            
            /** @inline */function isMaskNode(pNode) {
                return pNode.graphNodeType === akra.EUIGraphNodes.ANIMATION_MASK;
            }
            animation.isMaskNode = isMaskNode;
            (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("animation.Mask")] = (Mask));
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (animation) {
        var Frame = (function () {
            function Frame(fTime, pMatrix, fWeight) {
                this.time = 0.0;
                this.weight = 1.0;
                this.matrix = null;
                this.rotation = new akra.Quat4();
                this.scale = new akra.Vec3();
                this.translation = new akra.Vec3();
                switch(arguments.length) {
                    case 0:
                        this.matrix = new akra.Mat4();
                        return;
                    case 3:
                        this.weight = fWeight;
                    case 2:
                        this.matrix = pMatrix;
                    case 1:
                        this.time = fTime;
                }
                ;
                this.matrix.decompose(this.rotation, this.scale, this.translation);
            }
            Frame.prototype.toMatrix = function () {
                return this.rotation.toMat4(this.matrix).setTranslation(this.translation).scaleRight(this.scale);
            };
            Frame.prototype.toMatrixFromMatrix = function () {
                return this.matrix;
            };
            Frame.prototype.reset = function () {
                this.weight = 0.0;
                this.time = 0.0;
                var pData = this.matrix.data;
                pData[0] = pData[4] = pData[8] = pData[12] = pData[1] = pData[5] = pData[9] = pData[13] = pData[2] = pData[6] = pData[10] = pData[14] = pData[3] = pData[7] = pData[11] = pData[15] = 0;
                this.rotation.x = this.rotation.y = this.rotation.z = 0;
                this.rotation.w = 1.0;
                this.translation.x = this.translation.y = this.translation.z = 0;
                this.scale.x = this.scale.y = this.scale.z = 0;
                return this;
            };
            Frame.prototype.set = function (pFrame) {
                //FIXME: расписать побыстрее
                this.matrix.set(pFrame.matrix);
                this.rotation.set(pFrame.rotation);
                this.scale.set(pFrame.scale);
                this.translation.set(pFrame.translation);
                this.time = pFrame.time;
                this.weight = pFrame.weight;
            };
            Frame.prototype.add = /**
            * Добавить данные к фрейму с их весом.
            * После данного метода фрейму потребуется нормализация!!!!
            */
            function (pFrame, isFirst) {
                var fWeight = pFrame.weight;
                this.scale.x += pFrame.scale.x * fWeight;
                this.scale.y += pFrame.scale.y * fWeight;
                this.scale.z += pFrame.scale.z * fWeight;
                this.translation.x += pFrame.translation.x * fWeight;
                this.translation.y += pFrame.translation.y * fWeight;
                this.translation.z += pFrame.translation.z * fWeight;
                this.weight += fWeight;
                if (!isFirst) {
                    this.rotation.smix(pFrame.rotation, fWeight / this.weight);
                } else {
                    this.rotation.set(pFrame.rotation);
                }
                return this;
            };
            Frame.prototype.addMatrix = function (pFrame) {
                var pMatData = pFrame.matrix.data;
                var fWeight = pFrame.weight;
                var pResData = this.matrix.data;
                for(var i = 0; i < 16; ++i) {
                    pResData[i] += pMatData[i] * fWeight;
                }
                this.weight += fWeight;
                return this;
            };
            Frame.prototype.mult = function (fScalar) {
                this.weight *= fScalar;
                return this;
            };
            Frame.prototype.normilize = function () {
                var fScalar = 1.0 / this.weight;
                this.scale.x *= fScalar;
                this.scale.y *= fScalar;
                this.scale.z *= fScalar;
                this.translation.x *= fScalar;
                this.translation.y *= fScalar;
                this.translation.z *= fScalar;
                return this;
            };
            Frame.prototype.normilizeMatrix = function () {
                var fScalar = 1.0 / this.weight;
                var pData = this.matrix.data;
                pData[0] *= fScalar;
                pData[4] *= fScalar;
                pData[8] *= fScalar;
                pData[12] *= fScalar;
                pData[1] *= fScalar;
                pData[5] *= fScalar;
                pData[9] *= fScalar;
                pData[13] *= fScalar;
                pData[2] *= fScalar;
                pData[6] *= fScalar;
                pData[10] *= fScalar;
                pData[14] *= fScalar;
                pData[3] *= fScalar;
                pData[7] *= fScalar;
                pData[11] *= fScalar;
                pData[15] *= fScalar;
                return this;
            };
            Frame.prototype.interpolate = function (pStartFrame, pEndFrame, fBlend) {
                // var pResultData = this.matrix.data;
                // var pStartData = pStartFrame.matrix.data;
                // var pEndData = pEndFrame.matrix.data;
                // var fBlendInv = 1. - fBlend;
                // for (var i = 0; i < 16; i++) {
                // 	pResultData[i] = pEndData[i] * fBlend + pStartData[i] * fBlendInv;
                // };
                pStartFrame.translation.mix(pEndFrame.translation, fBlend, this.translation);
                pStartFrame.scale.mix(pEndFrame.scale, fBlend, this.scale);
                pStartFrame.rotation.smix(pEndFrame.rotation, fBlend, this.rotation);
            };
            Frame.prototype.interpolateMatrix = function (pStartFrame, pEndFrame, fBlend) {
                var pResultData = this.matrix.data;
                var pStartData = pStartFrame.matrix.data;
                var pEndData = pEndFrame.matrix.data;
                var fBlendInv = 1. - fBlend;
                for(var i = 0; i < 16; i++) {
                    pResultData[i] = pEndData[i] * fBlend + pStartData[i] * fBlendInv;
                }
                ;
            };
            Object.defineProperty(Frame, "stackCeil", {
                get: function () {
                    Frame.stackPosition = Frame.stackPosition === Frame.stackSize - 1 ? 0 : Frame.stackPosition;
                    return Frame.stack[Frame.stackPosition++];
                },
                enumerable: true,
                configurable: true
            });
            Frame.stackSize = 4 * 4096;
            Frame.stackPosition = 0;
            Frame.stack = (function () {
                var pStack = new Array(Frame.stackSize);
                for(var i = 0; i < Frame.stackSize; i++) {
                    pStack[i] = new Frame();
                }
                return pStack;
            })();
            return Frame;
        })();
        animation.Frame = Frame;        
        /** @inline */function animationFrame() {
            return Frame.stackCeil;
        }
        animation.animationFrame = animationFrame;
        function createFrame(fTime, pMatrix, fWeight) {
            if (typeof fTime === "undefined") { fTime = 0.0; }
            if (typeof pMatrix === "undefined") { pMatrix = null; }
            if (typeof fWeight === "undefined") { fWeight = 1.0; }
            return new Frame(fTime, pMatrix, fWeight);
        }
        animation.createFrame = createFrame;
    })(akra.animation || (akra.animation = {}));
    var animation = akra.animation;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (animation) {
        var Blend = (function (_super) {
            __extends(Blend, _super);
            function Blend(sName) {
                        _super.call(this, akra.EAnimationTypes.BLEND, sName);
                this.duration = 0;
                this._pAnimationList = [];
            }
            Object.defineProperty(Blend.prototype, "totalAnimations", {
                get: /** @inline */function () {
                    return this._pAnimationList.length;
                },
                enumerable: true,
                configurable: true
            });
            Blend.prototype.play = function (fRealTime) {
                var pAnimationList = this._pAnimationList;
                var n = pAnimationList.length;
                for(var i = 0; i < n; ++i) {
                    pAnimationList[i].realTime = fRealTime;
                    pAnimationList[i].time = fRealTime * pAnimationList[i].acceleration;
                }
                this.played(fRealTime);
            };
            Blend.prototype.stop = function () {
                this.stoped(0.);
            };
            Blend.prototype.attach = function (pTarget) {
                var pAnimationList = this._pAnimationList;
                for(var i = 0; i < pAnimationList.length; ++i) {
                    var pAnim = pAnimationList[i].animation;
                    pAnim.attach(pTarget);
                    this.grab(pAnim, true);
                }
            };
            Blend.prototype.addAnimation = function (pAnimation, fWeight, pMask) {
 {
                    akra.logger.setSourceLocation("animation/Blend.ts", 51);
                    akra.logger.assert(((pAnimation) !== undefined), 'animation must be setted.');
                }
                ;
                this._pAnimationList.push(null);
                return this.setAnimation(this._pAnimationList.length - 1, pAnimation, fWeight, pMask);
            };
            Blend.prototype.setAnimation = function (iAnimation, pAnimation, fWeight, pMask) {
                if (typeof fWeight === "undefined") { fWeight = 1.0; }
                if (typeof pMask === "undefined") { pMask = null; }
 {
                    akra.logger.setSourceLocation("animation/Blend.ts", 59);
                    akra.logger.assert(iAnimation <= this._pAnimationList.length, 'invalid animation slot: ' + iAnimation + '/' + this._pAnimationList.length);
                }
                ;
                var pPointer = this._pAnimationList[iAnimation];
                var pAnimationList = this._pAnimationList;
                if (!pAnimation) {
                    pAnimationList[iAnimation] = null;
                    return iAnimation;
                }
                if (!pPointer) {
                    pPointer = {
                        animation: pAnimation,
                        weight: fWeight,
                        mask: pMask,
                        acceleration: 1.0,
                        time: 0.0,
                        realTime: 0.0
                    };
                    ((pAnimation).getEventTable().addDestination(((((pAnimation)))._iGuid), ("durationUpdated"), (this), ("_onDurationUpdate"), (undefined)));
                    if (iAnimation == this._pAnimationList.length) {
                        pAnimationList.push(pPointer);
                    } else {
                        pAnimationList[iAnimation] = pPointer;
                    }
                }
                this.grab(pAnimation);
                this.updateDuration();
                return iAnimation;
            };
            Blend.prototype._onDurationUpdate = function (pAnimation, fDuration) {
                this.updateDuration();
            };
            Blend.prototype.updateDuration = /**@protected*/ function () {
                var fWeight = 0;
                var fSumm = 0;
                var pAnimationList = this._pAnimationList;
                var n = pAnimationList.length;
                for(var i = 0; i < n; ++i) {
                    if (pAnimationList[i] === null) {
                        continue;
                    }
                    fSumm += pAnimationList[i].weight * pAnimationList[i].animation.duration;
                    fWeight += pAnimationList[i].weight;
                }
                if (fWeight === 0) {
                    this.duration = 0;
                } else {
                    this.duration = fSumm / fWeight;
                    for(var i = 0; i < n; ++i) {
                        if (pAnimationList[i] === null) {
                            continue;
                        }
                        pAnimationList[i].acceleration = pAnimationList[i].animation.duration / this.duration;
                        //trace(pAnimationList[i].animation.name, '> acceleration > ', pAnimationList[i].acceleration);
                                            }
                }
                this.durationUpdated(this.duration);
            };
            Blend.prototype.getAnimationIndex = function (sName) {
                var pAnimationList = this._pAnimationList;
                for(var i = 0; i < pAnimationList.length; i++) {
                    if (pAnimationList[i].animation.name === sName) {
                        return i;
                    }
                }
                ;
                return -1;
            };
            Blend.prototype.getAnimation = function (animation) {
                var iAnimation = (typeof (animation) === "string") ? this.getAnimationIndex(animation) : animation;
                return this._pAnimationList[iAnimation].animation;
            };
            Blend.prototype.getAnimationWeight = function (animation) {
                var iAnimation = animation;
                if ((typeof (animation) === "string")) {
                    iAnimation = this.getAnimationIndex(animation);
                }
                return this._pAnimationList[iAnimation].weight;
            };
            Blend.prototype.setWeights = function () {
                var pWeight = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    pWeight[_i] = arguments[_i + 0];
                }
                var fWeight;
                var isModified = false;
                var pAnimationList = this._pAnimationList;
                for(var i = 0; i < arguments.length; ++i) {
                    fWeight = arguments[i];
                    if (fWeight < 0 || fWeight === null || !pAnimationList[i]) {
                        continue;
                    }
                    if (pAnimationList[i].weight !== fWeight) {
                        pAnimationList[i].weight = fWeight;
                        isModified = true;
                    }
                }
                if (isModified) {
                    this.updateDuration();
                }
                return true;
            };
            Blend.prototype.setWeightSwitching = function (fWeight, iAnimationFrom, iAnimationTo) {
                var pAnimationList = this._pAnimationList;
                var isModified = false;
                var fWeightInv = 1. - fWeight;
                if (!pAnimationList[iAnimationFrom] || !pAnimationList[iAnimationTo]) {
                    return false;
                }
                if (pAnimationList[iAnimationFrom].weight !== fWeightInv) {
                    pAnimationList[iAnimationFrom].weight = fWeightInv;
                    isModified = true;
                }
                if (pAnimationList[iAnimationTo].weight !== fWeight) {
                    pAnimationList[iAnimationTo].weight = fWeight;
                    isModified = true;
                }
                if (isModified) {
                    this.updateDuration();
                }
                return true;
            };
            Blend.prototype.setAnimationWeight = function (animation, fWeight) {
                var pAnimationList = this._pAnimationList;
                if (arguments.length === 1) {
                    fWeight = arguments[0];
                    for(var i = 0; i < pAnimationList.length; i++) {
                        pAnimationList[i].weight = fWeight;
                        this.weightUpdated(i, fWeight);
                    }
                    this.updateDuration();
                } else {
                    var iAnimation = (typeof (animation) === "string") ? this.getAnimationIndex(animation) : animation;
                    //trace('set weight for animation: ', iAnimation, 'to ', fWeight);
                    if (pAnimationList[iAnimation].weight !== fWeight) {
                        pAnimationList[iAnimation].weight = fWeight;
                        this.updateDuration();
                        this.weightUpdated(iAnimation, fWeight);
                    }
                }
                return true;
            };
            Blend.prototype.setAnimationMask = function (animation, pMask) {
                var iAnimation = (typeof (animation) === "string") ? this.getAnimationIndex(animation) : animation;
                this._pAnimationList[iAnimation].mask = pMask;
                return true;
            };
            Blend.prototype.getAnimationMask = function (animation) {
                var iAnimation = (typeof (animation) === "string") ? this.getAnimationIndex(animation) : animation;
                return this._pAnimationList[iAnimation].mask;
            };
            Blend.prototype.getAnimationAcceleration = function (animation) {
                var iAnimation = (typeof (animation) === "string") ? this.getAnimationIndex(animation) : animation;
                return this._pAnimationList[iAnimation].acceleration;
            };
            Blend.prototype.createAnimationMask = function (iAnimation) {
                if (arguments.length === 0) {
                    return _super.prototype.createAnimationMask.call(this);
                }
                if (typeof arguments[0] === 'string') {
                    iAnimation = this.getAnimationIndex(arguments[0]);
                }
                var pAnimation = this._pAnimationList[iAnimation].animation;
                return pAnimation.createAnimationMask();
            };
            Blend.prototype.frame = function (sName, fRealTime) {
                var pAnimationList = this._pAnimationList;
                var pResultFrame = (/*checked (origin: animation)>>*/akra.animation.Frame.stackCeil).reset();
                var pFrame;
                var pMask;
                var pPointer;
                var fAcceleration;
                var fBoneWeight;
                var fWeight;
                var iAnim = 0;
                for(var i = 0; i < pAnimationList.length; i++) {
                    pPointer = pAnimationList[i];
                    if (!pPointer) {
                        continue;
                    }
                    fAcceleration = pPointer.acceleration;
                    pMask = pPointer.mask;
                    fBoneWeight = 1.0;
                    pPointer.time = pPointer.time + (fRealTime - pPointer.realTime) * fAcceleration;
                    pPointer.realTime = fRealTime;
                    if (pMask) {
                        fBoneWeight = ((pMask[sName]) !== undefined) ? pMask[sName] : 1.0;
                    }
                    fWeight = fBoneWeight * pPointer.weight;
                    if (fWeight > 0.0) {
                        pFrame = pPointer.animation.frame(sName, pPointer.time);
                        if (pFrame) {
                            iAnim++;
                            //first, if 1
                            pResultFrame.add(pFrame.mult(fWeight), iAnim === 1);
                            // if (iAnim === 1) {
                            // 	console.log((<any>pPointer.animation).name);
                            // }
                                                    }
                    }
                }
                if (pResultFrame.weight === 0.0) {
                    return null;
                }
                return pResultFrame.normilize();
            };
            Blend.prototype.weightUpdated = function (iAnim, fWeight) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: animation)>>*/akra.animation.Base._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: animation)>>*/akra.animation.Base._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).weightUpdated;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, iAnim, fWeight) : _broadcast[i].listener(_recivier, iAnim, fWeight);
                    }
                }
            };
            Blend.prototype.durationUpdated = function (fDuration) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: animation)>>*/akra.animation.Base._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: animation)>>*/akra.animation.Base._pEventTable))).broadcast[(this._iGuid)] || {}));
                var _broadcast = (this._pBroadcastSlotList).durationUpdated;
                var _recivier = this;
                if (((_broadcast) !== undefined)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, fDuration) : _broadcast[i].listener(_recivier, fDuration);
                    }
                }
            };
            return Blend;
        })(animation.Base);        
        /** @inline */function isBlend(pAnimation) {
            return pAnimation.type === akra.EAnimationTypes.BLEND;
        }
        animation.isBlend = isBlend;
        function createBlend(sName) {
            return new Blend(sName);
        }
        animation.createBlend = createBlend;
    })(akra.animation || (akra.animation = {}));
    var animation = akra.animation;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Blender = (function (_super) {
                __extends(Blender, _super);
                function Blender(pGraph, pBlender) {
                    if (typeof pBlender === "undefined") { pBlender = null; }
                                _super.call(this, pGraph, {
                init: false
            }, akra.EUIGraphNodes.ANIMATION_BLENDER);
                    this._pBlend = null;
                    this._pSliders = [];
                    this._pMaskNodes = [];
                    this.template("animation.Blender.tpl");
                    this.linkAreas();
                    this._pNameLabel = this.findEntity("name");
                    ((this._pNameLabel).getEventTable().addDestination(((((this._pNameLabel)))._iGuid), ("changed"), (this), ("_textChanged"), (undefined)));
                    this._pBlend = pBlender = pBlender || akra.animation.createBlend();
                    ((this._pBlend).getEventTable().addDestination(((((this._pBlend)))._iGuid), ("weightUpdated"), (this), ("_weightUpdated"), (undefined)));
                    ((this._pBlend).getEventTable().addDestination(((((this._pBlend)))._iGuid), ("durationUpdated"), (this), ("_durationUpdated"), (undefined)));
                    ((((this))._pParent)).addAnimation(pBlender);
                    this._pNameLabel.text = pBlender.name;
                    this.$time = ((this).$element).find(".time:first");
                }
                Object.defineProperty(Blender.prototype, "animation", {
                    get: /** @inline */function () {
                        return this._pBlend;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Blender.prototype, "totalMasks", {
                    get: /** @inline */function () {
                        return this._pMaskNodes.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                Blender.prototype.onConnectionBegin = /**@protected*/ function (pGraph, pRoute) {
                    if (pRoute.left.node === this) {
                        return;
                    }
                    if (!(!(((this).findRoute((pRoute.left.node))) === null))) {
                        _super.prototype.onConnectionBegin.call(this, pGraph, pRoute);
                        return;
                    }
                    ((this).$element).addClass("blocked");
                };
                Blender.prototype._textChanged = function (pLabel, sValue) {
                    this._pBlend.name = sValue;
                };
                Blender.prototype.destroy = function () {
                    (((((this))._pParent))).removeAnimation(this._pBlend);
                    _super.prototype.destroy.call(this);
                };
                Blender.prototype.getMaskNode = function (iAnimation) {
                    return this._pMaskNodes[iAnimation] || null;
                };
                Blender.prototype.setMaskNode = function (iAnimation, pNode) {
                    this._pMaskNodes[iAnimation] = pNode;
                };
                Blender.prototype.setup = function () {
                    var pBlend = this._pBlend;
                    for(var i = 0; i < pBlend.totalAnimations; i++) {
                        for(var j = 0; j < this._pSliders.length; ++j) {
                            if (this._pSliders[j].animation === pBlend.getAnimation(i)) {
                                this._pSliders[j].slider.value = pBlend.getAnimationWeight(i);
                            }
                        }
                    }
                    this._pNameLabel.text = pBlend.name;
                };
                Blender.prototype._weightUpdated = function (pBlend, iAnim, fWeight) {
                    var pSlider = this._pSliders[iAnim].slider;
                    var pRoute = ((this)._pAreas)["in"].connectors[iAnim].route;
                    pRoute.enabled = fWeight !== 0;
                    pSlider.text = fWeight.toFixed(2);
                };
                Blender.prototype._durationUpdated = function (pBlend, fDuration) {
                    this.$time.text(pBlend.duration.toFixed(1) + "s");
                };
                Blender.prototype.connected = /**@protected*/ function (pArea, pFrom, pTo) {
                    if (pFrom.direction === akra.EUIGraphDirections.IN) {
                        var pTarget = (pTo.node);
                        var pAnimation = pTarget.animation;
                        var pBlend = this._pBlend;
                        var pSlider = null;
                        var pMask;
                        var iAnim = pBlend.getAnimationIndex(pAnimation.name);
                        pSlider = this.createComponent("Slider", {
                            show: false
                        });
                        pSlider.render(((this).$element).find("td.graph-node-center > div.controls:first"));
                        pSlider.range = 100;
                        if (iAnim == -1) {
                            iAnim = pBlend.addAnimation(pAnimation);
                            this._pSliders[iAnim] = {
                                slider: pSlider,
                                animation: pAnimation
                            };
                        } else {
                            this._pSliders[iAnim] = {
                                slider: pSlider,
                                animation: pAnimation
                            };
                            //animation already exists, and all parameters already setuped right
                            pSlider.value = pBlend.getAnimationWeight(iAnim);
                            this._weightUpdated(pBlend, iAnim, pBlend.getAnimationWeight(iAnim));
                        }
                        pSlider.bind("updated", function (pSlider, fWeight) {
                            pBlend.setAnimationWeight(iAnim, fWeight);
                        });
                        pSlider.updated(pSlider.value);
                        if (pTarget.graphNodeType === akra.EUIGraphNodes.ANIMATION_MASK) {
                            pMask = (pTarget).getMask();
                            pBlend.setAnimationMask(iAnim, pMask);
                            this.setMaskNode(iAnim, pTarget);
                        }
                    }
                };
                Blender.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    ((this).$element).addClass("component-animationblender");
                };
                return Blender;
            })(animation.Node);
            animation.Blender = Blender;            
            (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("animation.Blender")] = (Blender));
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EDocumentEntry) {
        EDocumentEntry._map = [];
        EDocumentEntry._map[0] = "k_Unknown";
        EDocumentEntry.k_Unknown = 0;
        EDocumentEntry._map[1] = "k_Instance";
        EDocumentEntry.k_Instance = 1;
        EDocumentEntry._map[2] = "k_Controller";
        EDocumentEntry.k_Controller = 2;
        EDocumentEntry._map[3] = "k_Animation";
        EDocumentEntry.k_Animation = 3;
        EDocumentEntry._map[4] = "k_AnimationBlend";
        EDocumentEntry.k_AnimationBlend = 4;
        EDocumentEntry._map[5] = "k_AnimationContainer";
        EDocumentEntry.k_AnimationContainer = 5;
        EDocumentEntry._map[6] = "k_SceneNode";
        EDocumentEntry.k_SceneNode = 6;
    })(akra.EDocumentEntry || (akra.EDocumentEntry = {}));
    var EDocumentEntry = akra.EDocumentEntry;
    (function (EDocumentFormat) {
        EDocumentFormat._map = [];
        EDocumentFormat._map[0] = "JSON";
        EDocumentFormat.JSON = 0;
        EDocumentFormat._map[1] = "BINARY_JSON";
        EDocumentFormat.BINARY_JSON = 1;
    })(akra.EDocumentFormat || (akra.EDocumentFormat = {}));
    var EDocumentFormat = akra.EDocumentFormat;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (io) {
        var pCommonTemplate = null;
        function getPackerTemplate() {
            return pCommonTemplate;
        }
        io.getPackerTemplate = getPackerTemplate;
        var PackerTemplate = (function () {
            function PackerTemplate(pData) {
                /**@protected*/ this._pData = {};
                /**@protected*/ this._nTypes = 0;
                /**@protected*/ this._pNum2Tpl = {};
                /**@protected*/ this._pTpl2Num = {};
                if (((pData) !== undefined)) {
                    this.set(pData);
                }
            }
            PackerTemplate.prototype.getType = function (iType) {
 {
                    akra.logger.setSourceLocation("PackerFormat.ts", 26);
                    akra.logger.assert(((this._pNum2Tpl[iType]) !== undefined), "unknown type detected: " + iType);
                }
                ;
                return this._pNum2Tpl[iType];
            };
            PackerTemplate.prototype.getTypeId = function (sType) {
 {
                    akra.logger.setSourceLocation("PackerFormat.ts", 31);
                    akra.logger.assert(((this._pTpl2Num[sType]) !== undefined), "unknown type detected: " + sType);
                }
                ;
                return this._pTpl2Num[sType];
            };
            PackerTemplate.prototype.set = function (pFormat) {
                var iType;
                for(var i in pFormat) {
                    this._pData[i] = pFormat[i];
                    iType = this._nTypes++;
                    this._pNum2Tpl[iType] = i;
                    this._pTpl2Num[i] = iType;
                }
            };
            PackerTemplate.prototype.detectType = function (pObject) {
                return PackerTemplate.getClass(pObject);
            };
            PackerTemplate.prototype.resolveType = function (sType) {
                var pTemplates = this._pData;
                var pProperties;
                var sProperties;
                while((typeof (sProperties = pTemplates[sType]) === "string")) {
                    sType = sProperties;
                }
 {
                    akra.logger.setSourceLocation("PackerFormat.ts", 62);
                    akra.logger.assert(!(typeof (sProperties) === "string"), "cannot resolve type: " + sType);
                }
                ;
                return sType;
            };
            PackerTemplate.prototype.properties = function (sType) {
                var pProperties = this._pData[sType];
                if ((typeof (pProperties) === "string")) {
                    return this.properties(this.resolveType(sType));
                }
                return pProperties;
            };
            PackerTemplate.prototype.data = function () {
                return this._pData;
            };
            PackerTemplate.getClass = function getClass(pObj) {
                if (pObj && akra.isObject(pObj) && Object.prototype.toString.call(pObj) !== "[object Array]" && ((pObj.constructor) != null) && pObj != this.window) {
                    var arr = pObj.constructor.toString().match(/function\s*(\w+)/);
                    if (!((arr) === null) && arr.length == 2) {
                        return arr[1];
                    }
                }
                var sType = typeof pObj;
                return sType[0].toUpperCase() + sType.substr(1);
            };
            return PackerTemplate;
        })();
        io.PackerTemplate = PackerTemplate;        
        pCommonTemplate = new PackerTemplate();
        pCommonTemplate.set({
            "Float32Array": {
                write: function (pData) {
                    this.float32Array(pData);
                },
                read: function () {
                    return this.float32Array();
                }
            },
            "Float64Array": {
                write: function (pData) {
                    this.float64Array(pData);
                },
                read: function () {
                    return this.float64Array();
                }
            },
            "Int32Array": {
                write: function (pData) {
                    this.int32Array(pData);
                },
                read: function () {
                    return this.int32Array();
                }
            },
            "Int16Array": {
                write: function (pData) {
                    this.int16Array(pData);
                },
                read: function () {
                    return this.int16Array();
                }
            },
            "Int8Array": {
                write: function (pData) {
                    this.int8Array(pData);
                },
                read: function () {
                    return this.int8Array();
                }
            },
            "Uint32Array": {
                write: function (pData) {
                    this.uint32Array(pData);
                },
                read: function () {
                    return this.uint32Array();
                }
            },
            "Uint16Array": {
                write: function (pData) {
                    this.uint16Array(pData);
                },
                read: function () {
                    return this.uint16Array();
                }
            },
            "Uint8Array": {
                write: function (pData) {
                    this.uint8Array(pData);
                },
                read: function () {
                    return this.uint8Array();
                }
            },
            "String": {
                write: function (str) {
                    this.string(str);
                },
                read: function () {
                    return this.string();
                }
            },
            "Float64": //float
            {
                write: function (val) {
                    this.float64(val);
                },
                read: function () {
                    return this.float64();
                }
            },
            "Float32": {
                write: function (val) {
                    this.float32(val);
                },
                read: function () {
                    return this.float32();
                }
            },
            "Int32": //int
            {
                write: function (val) {
                    this.int32(val);
                },
                read: function () {
                    return this.int32();
                }
            },
            "Int16": {
                write: function (val) {
                    this.int16(val);
                },
                read: function () {
                    return this.int16();
                }
            },
            "Int8": {
                write: function (val) {
                    this.int8(val);
                },
                read: function () {
                    return this.int8();
                }
            },
            "Uint32": //uint
            {
                write: function (val) {
                    this.uint32(val);
                },
                read: function () {
                    return this.uint32();
                }
            },
            "Uint16": {
                write: function (val) {
                    this.uint16(val);
                },
                read: function () {
                    return this.uint16();
                }
            },
            "Uint8": {
                write: function (val) {
                    this.uint8(val);
                },
                read: function () {
                    return this.uint8();
                }
            },
            "Boolean": {
                write: function (b) {
                    this.bool(b);
                },
                read: function () {
                    return this.bool();
                }
            },
            "Object": {
                write: function (object) {
                    if (akra.isArray(object)) {
                        /*is array*/
                        this.bool(true);
                        this.uint32((object).length);
                        for(var i = 0; i < (object).length; ++i) {
                            this.write((object)[i]);
                        }
                    } else {
                        /*is not array*/
                        this.bool(false);
                        this.stringArray(Object.keys(object));
                        for(var key in object) {
                            this.write(object[key]);
                        }
                    }
                },
                read: function (object) {
                    var isArray = this.bool();
                    var keys;
                    var n;
                    if (isArray) {
                        n = this.uint32();
                        object = object || new Array(n);
                        for(var i = 0; i < n; ++i) {
                            object[i] = this.read();
                        }
                    } else {
                        object = object || {};
                        keys = this.stringArray();
                        for(var i = 0; i < keys.length; ++i) {
                            object[keys[i]] = this.read();
                        }
                    }
                    return object;
                }
            },
            "Function": {
                write: function (fn) {
                    var sFunc = String(fn.valueOf());
                    var sBody = sFunc.substr(sFunc.indexOf("{") + 1, sFunc.lastIndexOf("}") - sFunc.indexOf("{") - 1);
                    var pArgs = sFunc.substr(sFunc.indexOf("(") + 1, sFunc.indexOf(")") - sFunc.indexOf("(") - 1).match(/[$A-Z_][0-9A-Z_$]*/gi);
                    //var sName: string = null;
                    //var pMatches: string[] = sFunc.match(/(function\s+)([_$a-zA-Z][_$a-zA-Z0-9]*)(?=\s*\()/gi);
                    // if (isDefAndNotNull(pMatches) && pMatches.length > 2) {
                    // 	sName = pMatches[2];
                    // }
                    //this.string(sName);
                    this.stringArray(pArgs);
                    this.string(sBody);
                },
                read: function () {
                    return new Function(this.stringArray(), this.string());
                }
            },
            "Number": "Float32",
            "Float": "Float32",
            "Int": "Int32",
            "Uint": "Uint32",
            "Array": "Object"
        });
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    /**
    * Как исполльзовать:
    * var bw = new BinWriter();      //создаем экземпляр класса
    *                        STRING
    * bw.string("abc");              //запигшет строку
    * bw.stringArray(["abc", "abc"]) //запишет массив строк
    *                        UINT
    * bw.uint8(1)             //варовняет до 4 байт uint и запишет
    * bw.uint16(1)            //варовняет до 4 байт uint и запишет
    * bw.uint32(1)            //запишет uint32
    * bw.uint8Array([1, 2])   //запишет массив uint8 где каждое число будет занимать
    *                         //1 байт и выровняет общую длинну массива до 4
    * bw.uint16Array([1, 2])  //запишет массив uint16 где каждое число будет занимать
    *                         //2 байта и выровняет общую длинну массива до 4
    * bw.uint32Array([1, 2])  //запишет массив uint32 где каждое число будет занимать
    *                         //4 байта
    *                        INT
    * bw.int8(1)              //варовняет до 4 байт int и запишет
    * bw.int16(1)             //варовняет до 4 байт int и запишет
    * bw.int32(1)             //запишет int32
    * bw.int8Array([1, 2])    //запишет массив int8 где каждое число будет занимать
    *                         //1 байт и выровняет общую длинну массива до 4
    * bw.int16Array([1, 2])   //запишет массив int16 где каждое число будет занимать
    *                         //2 байта и выровняет общую длинну массива до 4
    * bw.int32Array([1, 2])   //запишет массив int32 где каждое число будет занимать
    *                         //4 байта
    *                         FLOAT
    * bw.float64(1.1)             //запишет float64
    * bw.float32(1.1)             //запишет float32
    * bw.float32Array([1.2, 2.3]) //запишет массив float32
    * bw.float64Array([1.2, 2.3]) //запишет массив float64
    *
    * bw.data()             //возвратит массив типа ArrayBuffer где бедет лежать все записанные данные
    * bw.dataAsString()     //соберет все данные в строку и вернет
    * bw.dataAsUint8Array() //соберет все данные в массив Uint8 и вернет
    */
    (function (io) {
        var BinWriter = (function () {
            function BinWriter() {
                /**
                * Двумерный массив куда заносятся данные.
                * @private
                * @type Uint8Array[]
                */
                /**@protected*/ this._pArrData = [];
                /**
                * Счетчик общего количества байт.
                * @private
                * @type int
                */
                /**@protected*/ this._iCountData = 0;
            }
            Object.defineProperty(BinWriter.prototype, "byteLength", {
                get: /** @inline */function () {
                    return this._iCountData;
                },
                enumerable: true,
                configurable: true
            });
            BinWriter.prototype.string = /******************************************************************************/
            /*                                 string                                     */
            /******************************************************************************/
            /**
            * @property string(str)
            * Запись строки. Перед строкой записывается длинна строки в тип uint32. Если
            * передано null или undefined то длинна строки записывается как 0xffffffff.
            * Это сделано для того что при дальнейшем считывании такая строка будет
            * возвращена как null.
            * @memberof BinWriter
            * @tparam String str строка. Все не строковые типы преобразуются к строке.
            */
            function (str) {
                if (!((str) != null)) {
                    ((this).uintX((/*checked (origin: akra)>>*/akra.MAX_UINT32), 32));
                    return;
                }
                str = String(str);
                // LOG("string: ", str);
                var sUTF8String = str.toUTF8();
                var iStrLen = sUTF8String.length;
                var arrUTF8string = BinWriter.rawStringToBuffer(sUTF8String);
 {
                    akra.logger.setSourceLocation("BinWriter.ts", 92);
                    akra.logger.assert(iStrLen <= Math.pow(2, 32) - 1, "Это значение не влезет в тип string");
                }
                ;
                ((this).uintX((iStrLen), 32));
                var iBitesToAdd = (4 - (iStrLen % 4) == 4) ? 0 : (4 - (iStrLen % 4));
                this._pArrData[this._pArrData.length] = arrUTF8string;
                this._iCountData += (iStrLen + iBitesToAdd);
                //trace('string', str);
                            };
            BinWriter.prototype.uintX = /******************************************************************************/
            /*                                   uintX                                    */
            /******************************************************************************/
            /**
            * @property uintX(iValue, iX)
            * Запись числа типа uint(8, 16, 32). Если число занимает меньше 4 байт то оно
            * выравнивается до 4 байт. Если передан null то число принимается равным 0.
            * Если передано любое другое не числовое значение то выводится ошибка.
            * @memberof BinWriter
            * @tparam uint iValue число.
            * @tparam int iX - 8, 16, 32 количество бит.
            */
            function (iValue, iX) {
                if (((iValue) === null)) {
                    iValue = 0;
                }
                // LOG("uint" + iX + ": ", iValue);
                 {
                    akra.logger.setSourceLocation("BinWriter.ts", 124);
                    akra.logger.assert((typeof (iValue) === "number"), "Не является числом: " + iValue);
                }
                ;
                ;
 {
                    akra.logger.setSourceLocation("BinWriter.ts", 126);
                    akra.logger.assert(0 <= iValue && iValue <= Math.pow(2, iX), "Это значение не влезет в тип uint" + iX);
                }
                ;
                var arrTmpBuf = null;
                switch(iX) {
                    case 8:
                        arrTmpBuf = new Uint8Array(4);
                        arrTmpBuf[0] = iValue;
                        break;
                    case 16:
                        arrTmpBuf = new Uint16Array(2);
                        arrTmpBuf[0] = iValue;
                        break;
                    case 32:
                        arrTmpBuf = new Uint32Array(1);
                        arrTmpBuf[0] = iValue;
                        break;
                    default:
 {
                            akra.logger.setSourceLocation("BinWriter.ts", 143);
                            akra.logger.error("Передано недопустимое значение длинны. Допустимые значения 8, 16, 32.");
                        }
                        ;
                        break;
                }
                //trace('uint' + iX, iValue);
                //if(iX == 8)
                //  this._pArrData[this._pArrData.length] = arrTmpBuf;
                //else
                this._pArrData[this._pArrData.length] = new Uint8Array(arrTmpBuf.buffer);
                this._iCountData += 4;
            };
            BinWriter.prototype.uint8 = /**
            * @property uint8(iValue)
            * Запись числа типа uint8. Оно выравнивается до 4 байт. Если передан null то
            * число принимается равным 0. Если передано любое другое не числовое значение
            * то выводится ошибка.
            * Сокращенная запись функции uintX(iValue, 8).
            * @memberof BinWriter
            * @tparam uint iValue число.
            */
            /** @inline */function (iValue) {
                this.uintX(iValue, 8);
            };
            BinWriter.prototype.uint16 = /**
            * @property uint16(iValue)
            * Запись числа типа uint16. Оно выравнивается до 4 байт. Если передан null то
            * число принимается равным 0. Если передано любое другое не числовое значение
            * то выводится ошибка.
            * Сокращенная запись функции uintX(iValue, 16).
            * @memberof BinWriter
            * @tparam uint iValue число.
            */
            /** @inline */function (iValue) {
                this.uintX(iValue, 16);
            };
            BinWriter.prototype.uint32 = /**
            * @property uint32(iValue)
            * Запись числа типа uint8. Если передан null то число принимается равным 0.
            * Если передано любое другое не числовое значение то выводится ошибка.
            * Сокращенная запись функции uintX(iValue, 32).
            * @memberof BinWriter
            * @tparam uint iValue число.
            */
            /** @inline */function (iValue) {
                this.uintX(iValue, 32);
            };
            BinWriter.prototype.bool = /**
            * @property bool(bValue)
            * Запись числа типа bool. В зависимости от bValue записывается либо 1 либо ноль.
            * Если передано любое другое не числовое значение то выводится ошибка.
            * Сокращенная запись функции uintX(bValue? 1: 0, 8).
            * @memberof BinWriter
            * @tparam bool bValue число.
            */
            /** @inline */function (bValue) {
                // LOG(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> BOOL >>> ");
                this.uintX(bValue ? 1 : 0, 8);
            };
            BinWriter.prototype.writeArrayElementUintX = /******************************************************************************/
            /*                       writeArrayElementUintX                               */
            /******************************************************************************/
            /**
            * @property writeArrayElementUintX(iValue, iX)
            * Запись числа типа uint(8, 16, 32). Используется для записи элементов массивов.
            * В отличии от uintX число не выравнивается до 4 байт, а записывается ровно
            * столько байт сколько передано во втором параметре в функцию. Вторым
            * параметром передается колчиество бит а не байт. Если передан null то число
            * принимается равным 0. Если передано любое другое не числовое значение то
            * выводится ошибка.
            * @memberof BinWriter
            * @tparam uint iValue число.
            * @tparam int iX - 8, 16, 32 количество бит.
            */
            function (iValue, iX) {
                if (((iValue) === null)) {
                    iValue = 0;
                }
                // LOG("array uint", iX, ": ", iValue);
                 {
                    akra.logger.setSourceLocation("BinWriter.ts", 229);
                    akra.logger.assert((typeof (iValue) === "number"), "Не является числом: " + iValue);
                }
                ;
 {
                    akra.logger.setSourceLocation("BinWriter.ts", 230);
                    akra.logger.assert(0 <= iValue && iValue <= Math.pow(2, iX), "Это значение не влезет в тип uint" + iX);
                }
                ;
                var arrTmpBuf = null;
                switch(iX) {
                    case /* WARNING Только private и записи масивов. Нет выравнивания на 4, оно ложится на функцию записи массива.*/
                    8:
                        arrTmpBuf = new Uint8Array(1);
                        arrTmpBuf[0] = iValue;
                        break;
                        /* WARNING Только private и записи масивов. Нет выравнивания на 4, оно ложится на функцию записи массива.*/
                                            case 16:
                        arrTmpBuf = new Uint16Array(1);
                        arrTmpBuf[0] = iValue;
                        break;
                    case 32:
                        arrTmpBuf = new Uint32Array(1);
                        arrTmpBuf[0] = iValue;
                        break;
                    default:
 {
                            akra.logger.setSourceLocation("BinWriter.ts", 248);
                            akra.logger.error("Передано недопустимое значение длинны. Допустимые значения 8, 16, 32.");
                        }
                        ;
                        break;
                }
                if (iX == 8) {
                    this._pArrData[this._pArrData.length] = arrTmpBuf;
                } else {
                    this._pArrData[this._pArrData.length] = new Uint8Array(arrTmpBuf.buffer);
                }
                this._iCountData += (iX / 8);
            };
            BinWriter.prototype.intX = /******************************************************************************/
            /*                                    intX                                    */
            /******************************************************************************/
            /**
            * @property intX(iValue, iX)
            * Запись числа типа int(8, 16, 32). Если число занимает меньше 4 байт то оно
            * выравнивается до 4 байт. Если передан null то число принимается равным 0.
            * Если передано любое другое не числовое значение то выводится ошибка.
            * @memberof BinWriter
            * @tparam int iValue число.
            * @tparam int iX - 8, 16, 32 количество бит.
            */
            function (iValue, iX) {
                if (((iValue) === null)) {
                    iValue = 0;
                }
                // LOG("int", iX, ": ", iValue);
                 {
                    akra.logger.setSourceLocation("BinWriter.ts", 282);
                    akra.logger.assert((typeof (iValue) === "number"), "Не является числом: " + iValue);
                }
                ;
 {
                    akra.logger.setSourceLocation("BinWriter.ts", 284);
                    akra.logger.assert(-Math.pow(2, iX - 1) <= iValue && iValue <= Math.pow(2, iX - 1) - 1, "Это значение не влезет в тип int" + iX);
                }
                ;
                var arrTmpBuf = null;
                switch(iX) {
                    case 8:
                        arrTmpBuf = new Int8Array(4);
                        arrTmpBuf[0] = iValue;
                        break;
                    case 16:
                        arrTmpBuf = new Int16Array(2);
                        arrTmpBuf[0] = iValue;
                        break;
                    case 32:
                        arrTmpBuf = new Int32Array(1);
                        arrTmpBuf[0] = iValue;
                        break;
                    default:
 {
                            akra.logger.setSourceLocation("BinWriter.ts", 302);
                            akra.logger.error("Передано недопустимое значение длинны. Допустимые значения 8, 16, 32.");
                        }
                        ;
                        break;
                }
                //trace('int' + iX, iValue);
                this._pArrData[this._pArrData.length] = new Uint8Array(arrTmpBuf.buffer);
                this._iCountData += 4;
            };
            BinWriter.prototype.int8 = /**
            * @property int8(iValue)
            * Запись числа типа int8. Оно выравнивается до 4 байт. Если передан null то
            * число принимается равным 0. Если передано любое другое не числовое значение
            * то выводится ошибка.
            * Сокращенная запись функции intX(iValue, 8).
            * @memberof BinWriter
            * @tparam uint iValue число.
            */
            /** @inline */function (iValue) {
                this.intX(iValue, 8);
            };
            BinWriter.prototype.int16 = /**
            * @property int16(iValue)
            * Запись числа типа uint16. Оно выравнивается до 4 байт. Если передан null то
            * число принимается равным 0. Если передано любое другое не числовое значение
            * то выводится ошибка.
            * Сокращенная запись функции intX(iValue, 16).
            * @memberof BinWriter
            * @tparam int iValue число.
            */
            /** @inline */function (iValue) {
                this.intX(iValue, 16);
            };
            BinWriter.prototype.int32 = /**
            * @property uint32(iValue)
            * Запись числа типа uint8. Если передан null то число принимается равным 0.
            * Если передано любое другое не числовое значение то выводится ошибка.
            * Сокращенная запись функции intX(iValue, 32).
            * @memberof BinWriter
            * @tparam int iValue число.
            */
            /** @inline */function (iValue) {
                this.intX(iValue, 32);
            };
            BinWriter.prototype.writeArrayElementIntX = /******************************************************************************/
            /*                          writeArrayElementIntX                            */
            /******************************************************************************/
            /**
            * @property writeArrayElementIntX(iValue, iX)
            * Запись числа типа int(8, 16, 32). Используется для записи элементов массивов.
            * В отличии от intX число не выравнивается до 4 байт, а записывается ровно
            * столько байт сколько передано во втором параметре в функцию. Вторым
            * параметром передается колчиество бит а не байт. Если передан null то число
            * принимается равным 0. Если передано любое другое не числовое значение то
            * выводится ошибка.
            * @memberof BinWriter
            * @tparam int iValue число.
            * @tparam int iX - 8, 16, 32 количество бит.
            */
            function (iValue, iX) {
                if (((iValue) === null)) {
                    iValue = 0;
                }
                // LOG("array int", iX, ": ", iValue);
                 {
                    akra.logger.setSourceLocation("BinWriter.ts", 371);
                    akra.logger.assert((typeof (iValue) === "number"), "Не является числом: " + iValue);
                }
                ;
 {
                    akra.logger.setSourceLocation("BinWriter.ts", 373);
                    akra.logger.assert(-Math.pow(2, iX - 1) <= iValue && iValue <= Math.pow(2, iX - 1) - 1, "Это значение не влезет в тип int" + iX);
                }
                ;
                var arrTmpBuf = null;
                switch(iX) {
                    case /* WARNING Только private и записи масивов. Нет выравнивания на 4, оно ложится на функцию записи массива.*/
                    8:
                        arrTmpBuf = new Int8Array(1);
                        arrTmpBuf[0] = iValue;
                        break;
                        /* WARNING Только private и записи масивов. Нет выравнивания на 4, оно ложится на функцию записи массива.*/
                                            case 16:
                        arrTmpBuf = new Int16Array(1);
                        arrTmpBuf[0] = iValue;
                        break;
                    case 32:
                        arrTmpBuf = new Int32Array(1);
                        arrTmpBuf[0] = iValue;
                        break;
                    default:
 {
                            akra.logger.setSourceLocation("BinWriter.ts", 391);
                            akra.logger.error("Передано недопустимое значение длинны. Допустимые значения 8, 16, 32.");
                        }
                        ;
                        break;
                }
                this._pArrData[this._pArrData.length] = new Uint8Array(arrTmpBuf.buffer);
                this._iCountData += (iX / 8);
            };
            BinWriter.prototype.floatX = /******************************************************************************/
            /*                                  floatX                                    */
            /******************************************************************************/
            /**
            * @property floatX(fValue, iX)
            * Запись числа типа float(32, 64). выравнивания не происходит т.к. они уже
            * выравнены до 4. Если передан null то число принимается равным 0.
            * Если передано любое другое не числовое значение то выводится ошибка.
            * @memberof BinWriter
            * @tparam float fValue число.
            * @tparam int iX - 32, 64 количество бит.
            */
            function (fValue, iX) {
                if (((fValue) === null)) {
                    fValue = 0;
                }
 {
                    akra.logger.setSourceLocation("BinWriter.ts", 416);
                    akra.logger.assert((typeof (fValue) === "number"), "Не является числом: " + fValue);
                }
                ;
                //debug_assert(typeof(fValue) == 'number', "Не является числом");
                // LOG("float", iX, ": ", fValue);
                var arrTmpBuf = null;
                switch(iX) {
                    case 32:
                        arrTmpBuf = new Float32Array(1);
                        arrTmpBuf[0] = fValue;
                        break;
                    case 64:
                        arrTmpBuf = new Float64Array(1);
                        arrTmpBuf[0] = fValue;
                        break;
                    default:
 {
                            akra.logger.setSourceLocation("BinWriter.ts", 433);
                            akra.logger.error("Передано недопустимое значение длинны. Допустимые значения 32, 64.");
                        }
                        ;
                        break;
                }
                //trace('float' + iX, fValue);
                this._pArrData[this._pArrData.length] = new Uint8Array(arrTmpBuf.buffer);
                this._iCountData += (iX / 8);
            };
            BinWriter.prototype.float32 = /**
            * @property float32(fValue)
            * Запись числа типа float32. Если передан null то число принимается равным 0.
            * Если передано любое другое не числовое значение то выводится ошибка.
            * Сокращенная запись функции floatX(fValue, 32).
            * @memberof BinWriter
            * @tparam float fValue число.
            */
            /** @inline */function (fValue) {
                this.floatX(fValue, 32);
            };
            BinWriter.prototype.float64 = /**
            * @property float64(fValue)
            * Запись числа типа float64. Если передан null то число принимается равным 0.
            * Если передано любое другое не числовое значение то выводится ошибка.
            * Сокращенная запись функции floatX(fValue, 64).
            * @memberof BinWriter
            * @tparam float fValue число.
            */
            /** @inline */function (fValue) {
                this.floatX(fValue, 64);
            };
            BinWriter.prototype.stringArray = /******************************************************************************/
            /*                             stringArray                                    */
            /******************************************************************************/
            /**
            * @property stringArray(arrString)
            * Записывает массив строк использую дял каждого элемента функцию this.string
            * Да начала записи элементов записывает общее количество элементов как число
            * uint32. Если в качестве параметра функции передано null или undefined
            * то количество элементов записывается равным 0xffffffff.
            * @memberof BinWriter
            * @tparam Array arrString массив строк.
            */
            function (arrString) {
                if (!((arrString) != null)) {
                    ((this).uintX((0xffffffff), 32));
                    return;
                }
                ((this).uintX((arrString.length), 32));
                for(var i = 0; i < arrString.length; i++) {
                    this.string(arrString[i]);
                }
            };
            BinWriter.prototype.uintXArray = /******************************************************************************/
            /*                             uintXArray                                     */
            /******************************************************************************/
            /**
            * @property uintXArray(arrUint, iX)
            * Записывает массив чисел uint(8, 16, 32) использую для каждого элемента функцию
            *  writeArrayElementUintX. До начала записи элементов записывает общее
            *  количество элементов как число uint32. Если в качестве параметра функции
            * передано null или undefined то количество элементов записывается
            * равным 0xffffffff. Общее количество байт в массиве выравнивается к 4.
            * Все массивы приводятся к нужному типу Uint(iX)Array.
            * @memberof BinWriter
            * @tparam Uint(iX)Array arrUint массив uint(iX).
            * @tparam int iX размер элемента в битах (8, 16, 32).
            */
            function (arrUint, iX) {
                if (!((arrUint) != null)) {
                    ((this).uintX((0xffffffff), 32));
                    return;
                }
                var iUintArrLength = arrUint.byteLength;
                var iBitesToAdd;
                var arrTmpUint = null;
                switch(iX) {
                    case 8:
                        iBitesToAdd = (4 - (iUintArrLength % 4) == 4) ? 0 : (4 - (iUintArrLength % 4));
                        if (iBitesToAdd > 0 || !(arrUint instanceof Uint8Array)) {
                            arrTmpUint = new Uint8Array(iUintArrLength + iBitesToAdd);
                            (arrTmpUint).set(arrUint);
                        } else {
                            arrTmpUint = arrUint;
                        }
                        break;
                    case 16:
                        iUintArrLength /= 2;
                        iBitesToAdd = (2 - (iUintArrLength % 2) == 2) ? 0 : (2 - (iUintArrLength % 2));
                        if (iBitesToAdd > 0 || !(arrUint instanceof Uint16Array)) {
                            arrTmpUint = new Uint16Array(iUintArrLength + iBitesToAdd);
                            (arrTmpUint).set(arrUint);
                        } else {
                            arrTmpUint = arrUint;
                        }
                        break;
                    case 32:
                        iUintArrLength /= 4;
                        if (!(arrUint instanceof Uint32Array)) {
                            arrTmpUint = new Uint32Array(arrUint);
                        } else {
                            arrTmpUint = arrUint;
                        }
                        break;
                }
                ((this).uintX((iUintArrLength), 32));
                for(var i = 0, n = arrTmpUint.byteLength / (iX / 8); i < n; i++) {
                    this.writeArrayElementUintX(arrTmpUint[i], iX);
                }
            };
            BinWriter.prototype.uint8Array = /**
            * @property uint8Array(arrUint)
            * Запись массива типа Uint8Array. До начала записи элементов записывает общее
            * количество элементов как число uint32. Если в качестве параметра функции
            * передано null или undefined то количество элементов записывается
            * равным 0xffffffff. Общее количество байт в массиве выравнивается до 4.
            * Сокращенная запись функции uintXArray(arrUint, 8).
            * @memberof BinWriter
            * @tparam Uint8Array arrUint массив uint8.
            */
            /** @inline */function (arrUint) {
                this.uintXArray(arrUint, 8);
            };
            BinWriter.prototype.uint16Array = /**
            * @property uint16Array(arrUint)
            * Запись массива типа Uint16Array. До начала записи элементов записывает общее
            * количество элементов как число uint32. Если в качестве параметра функции
            * передано null или undefined то количество элементов записывается
            * равным 0xffffffff. Общее количество байт в массиве выравнивается до 4.
            * Сокращенная запись функции uintXArray(arrUint, 16).
            * @memberof BinWriter
            * @tparam Uint16Array arrUint массив uint16.
            */
            /** @inline */function (arrUint) {
                this.uintXArray(arrUint, 16);
            };
            BinWriter.prototype.uint32Array = /**
            * @property uint32Array(arrUint)
            * Запись массива типа Uint32Array. До начала записи элементов записывает общее
            * количество элементов как число uint32. Если в качестве параметра функции
            * передано null или undefined то количество элементов записывается
            * равным 0xffffffff.
            * Сокращенная запись функции uintXArray(arrUint, 32).
            * @memberof BinWriter
            * @tparam Uint32Array arrUint массив uint32.
            */
            /** @inline */function (arrUint) {
                this.uintXArray(arrUint, 32);
            };
            BinWriter.prototype.intXArray = /******************************************************************************/
            /*                               intXArray                                    */
            /******************************************************************************/
            /**
            * @property intXArray(arrInt, iX)
            * Записывает массив чисел int(8, 16, 32) использую для каждого элемента функцию
            *  writeArrayElementIntX. До начала записи элементов записывает общее
            *  количество элементов как число int32. Если в качестве параметра функции
            * передано null или undefined то количество элементов записывается
            * равным 0xffffffff. Общее количество байт в массиве выравнивается к 4.
            * Все массивы приводятся к нужному типу Int(iX)Array.
            * @memberof BinWriter
            * @tparam Int(iX)Array arrUint массив int(iX).
            * @tparam int iX размер элемента в битах (8, 16, 32).
            */
            function (arrInt, iX) {
                if (!((arrInt) != null)) {
                    ((this).uintX((0xffffffff), 32));
                    return;
                }
                var iIntArrLength = 0;
                var iBitesToAdd = 0;
                var arrTmpInt = null;
                switch(iX) {
                    case 8:
                        iIntArrLength = (arrInt).length;
                        iBitesToAdd = (4 - (iIntArrLength % 4) == 4) ? 0 : (4 - (iIntArrLength % 4));
                        if (iBitesToAdd > 0 || !(arrInt instanceof Int8Array)) {
                            arrTmpInt = new Int8Array(iIntArrLength + iBitesToAdd);
                            (arrTmpInt).set(arrInt);
                        } else {
                            arrTmpInt = arrInt;
                        }
                        break;
                    case 16:
                        iIntArrLength = (arrInt).length;
                        iBitesToAdd = (2 - (iIntArrLength % 2) == 2) ? 0 : (2 - (iIntArrLength % 2));
                        if (iBitesToAdd > 0 || !(arrInt instanceof Int16Array)) {
                            arrTmpInt = new Int16Array(iIntArrLength + iBitesToAdd);
                            (arrTmpInt).set(arrInt);
                        } else {
                            arrTmpInt = arrInt;
                        }
                        break;
                    case 32:
                        iIntArrLength = (arrInt).length;
                        if (!(arrInt instanceof Int32Array)) {
                            arrTmpInt = new Int32Array(arrInt);
                        } else {
                            arrTmpInt = arrInt;
                        }
                        break;
                }
                ((this).uintX((iIntArrLength), 32));
                for(var i = 0, n = arrTmpInt.byteLength / (iX / 8); i < n; i++) {
                    this.writeArrayElementIntX(arrTmpInt[i], iX);
                }
            };
            BinWriter.prototype.int8Array = /**
            * @property int8Array(arrInt)
            * Запись массива типа Int8Array. До начала записи элементов записывает общее
            * количество элементов как число uint32. Если в качестве параметра функции
            * передано null или undefined то количество элементов записывается
            * равным 0xffffffff. Общее количество байт в массиве выравнивается до 4.
            * Сокращенная запись функции intXArray(arrInt, 8).
            * @memberof BinWriter
            * @tparam Int8Array arrInt массив int8.
            */
            /** @inline */function (arrInt) {
                this.intXArray(arrInt, 8);
            };
            BinWriter.prototype.int16Array = /**
            * @property int16Array(arrInt)
            * Запись массива типа Int16Array. До начала записи элементов записывает общее
            * количество элементов как число uint32. Если в качестве параметра функции
            * передано null или undefined то количество элементов записывается
            * равным 0xffffffff. Общее количество байт в массиве выравнивается до 4.
            * Сокращенная запись функции intXArray(arrInt, 16).
            * @memberof BinWriter
            * @tparam Int16Array arrInt массив int16.
            */
            /** @inline */function (arrInt) {
                this.intXArray(arrInt, 16);
            };
            BinWriter.prototype.int32Array = /**
            * @property int32Array(arrInt)
            * Запись массива типа Int32Array. До начала записи элементов записывает общее
            * количество элементов как число uint32. Если в качестве параметра функции
            * передано null или undefined то количество элементов записывается
            * равным 0xffffffff.
            * Сокращенная запись функции intXArray(arrInt, 32).
            * @memberof BinWriter
            * @tparam Int32Array arrInt массив int32.
            */
            /** @inline */function (arrInt) {
                this.intXArray(arrInt, 32);
            };
            BinWriter.prototype.floatXArray = /******************************************************************************/
            /*                              floatXArray                                   */
            /******************************************************************************/
            /**
            * @property floatXArray(arrFloat, iX)
            * Записывает массив чисел float(32, 64) использую для каждого элемента функцию
            *  floatX. До начала записи элементов записывает общее
            *  количество элементов как число int32. Если в качестве параметра функции
            * передано null или undefined то количество элементов записывается
            * равным 0xffffffff.
            * Все массивы приводятся к нужному типу Float(iX)Array.
            * @memberof BinWriter
            * @tparam Float(iX)Array arrFloat массив float(iX).
            * @tparam int iX размер элемента в битах (32, 64).
            */
            function (arrFloat, iX) {
                if (!((arrFloat) != null)) {
                    ((this).uintX((0xffffffff), 32));
                    return;
                }
                switch(iX) {
                    case 32:
                        if (!(arrFloat instanceof Float32Array)) {
                            arrFloat = new Float32Array(arrFloat);
                        }
                        break;
                    case 64:
                        if (!(arrFloat instanceof Float64Array)) {
                            arrFloat = new Float64Array(arrFloat);
                        }
                        break;
                }
                var iFloatArrLength = arrFloat.byteLength / (iX / 8);
                ((this).uintX((iFloatArrLength), 32));
                //Поэлементно записываем массив
                for(var i = 0, n = iFloatArrLength; i < n; i++) {
                    this.floatX(arrFloat[i], iX);
                }
            };
            BinWriter.prototype.float32Array = /**
            * @property float32Array(arrFloat)
            * Запись массива типа Float32Array. До начала записи элементов записывает общее
            * количество элементов как число uint32. Если в качестве параметра функции
            * передано null или undefined то количество элементов записывается
            * равным 0xffffffff.
            * Все переданные массивы приводятся к типу Float32Array.
            * Сокращенная запись функции floatXArray(arrFloat, 32).
            * @memberof BinWriter
            * @tparam Float32Array arrFloat массив float32.
            */
            /** @inline */function (arrFloat) {
                this.floatXArray(arrFloat, 32);
            };
            BinWriter.prototype.float64Array = /**
            * @property float64Array(arrFloat)
            * Запись массива типа Float64Array. До начала записи элементов записывает общее
            * количество элементов как число uint32. Если в качестве параметра функции
            * передано null или undefined то количество элементов записывается
            * равным 0xffffffff.
            * Все переданные массивы приводятся к типу Float64Array.
            * Сокращенная запись функции floatXArray(arrFloat, 64).
            * @memberof BinWriter
            * @tparam Float64Array arrFloat массив float64.
            */
            /** @inline */function (arrFloat) {
                this.floatXArray(arrFloat, 64);
            };
            BinWriter.prototype.data = /**
            * @property data()
            * Берет все данные из массива _pArrData и записывает их в массив
            * типа ArrayBuffer.
            * @memberof BinWriter
            * @treturn ArrayBuffer.
            */
            /** @inline */function () {
                return this.dataAsUint8Array().buffer;
            };
            BinWriter.prototype.dataAsString = /**
            * @property data()
            * Берет все данные из массива _pArrData и записывает их в строку.
            * @memberof BinWriter
            * @treturn String.
            */
            function () {
                var tmpArrBuffer = this.dataAsUint8Array();
                var sString = "";
                for(var n = 0; n < tmpArrBuffer.length; ++n) {
                    var charCode = String.fromCharCode(tmpArrBuffer[n]);
                    sString = sString + charCode;
                }
                return sString;
            };
            BinWriter.prototype.dataAsUint8Array = /**
            * @property toUint8Array()
            * Берет все данные из массива _pArrData и вернет Uint8Array.
            * @memberof BinWriter
            * @treturn Uint8Array.
            */
            function () {
                var arrUint8 = new Uint8Array(this._iCountData);
                for(var i = 0, k = 0; i < this._pArrData.length; i++) {
                    for(var n = 0; n < this._pArrData[i].length; n++) {
                        arrUint8[k++] = this._pArrData[i][n];
                    }
                }
                return arrUint8;
            };
            BinWriter.rawStringToBuffer = /**
            * @property rawStringToBuffer()
            * Берет строку и преобразует ее в массив Uint8Array.
            * @memberof BinWriter
            * @treturn Uint8Array.
            */
            function rawStringToBuffer(str) {
                var idx;
                var len = str.length;
                var iBitesToAdd = (4 - (len % 4) == 4) ? 0 : (4 - (len % 4));
                var arr = new Array(len + iBitesToAdd);
                for(idx = 0; idx < len; ++idx) {
                    /* & 0xFF;*/
                    arr[idx] = str.charCodeAt(idx);
                }
                return new Uint8Array(arr);
            };
            return BinWriter;
        })();
        io.BinWriter = BinWriter;        
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (io) {
        var Packer = (function (_super) {
            __extends(Packer, _super);
            function Packer() {
                _super.apply(this, arguments);

                /**@protected*/ this._pHashTable = {};
                /**@protected*/ this._pTemplate = io.getPackerTemplate();
            }
            Object.defineProperty(Packer.prototype, "template", {
                get: /** @inline */function () {
                    return this._pTemplate;
                },
                enumerable: true,
                configurable: true
            });
            Packer.prototype.memof = function (pObject, iAddr, sType) {
                var pTable = this._pHashTable;
                var pCell = pTable[sType];
                if (!((pCell) !== undefined)) {
                    pCell = pTable[sType] = [];
                }
                pCell.push(pObject, iAddr);
            };
            Packer.prototype.addr = function (pObject, sType) {
                var pTable = this._pHashTable;
                var iAddr;
                var pCell = pTable[sType];
                if (((pCell) !== undefined)) {
                    for(var i = 0, n = pCell.length / 2; i < n; ++i) {
                        var j = 2 * i;
                        if (pCell[j] === pObject) {
                            return pCell[j + 1];
                        }
                    }
                }
                return -1;
            };
            Packer.prototype.nullPtr = /** @inline */function () {
                return ((this).uintX((/*checked (origin: akra)>>*/akra.MAX_UINT32), 32));
            };
            Packer.prototype.rollback = function (n) {
                if (typeof n === "undefined") { n = 1; }
                if (n === -1) {
                    n = this._pArrData.length;
                }
                var pRollback = new Array(n);
                var iRollbackLength = 0;
                for(var i = 0; i < n; ++i) {
                    pRollback[i] = this._pArrData.pop();
                    iRollbackLength += pRollback[i].byteLength;
                }
                this._iCountData -= iRollbackLength;
                return pRollback;
            };
            Packer.prototype.append = function (pData) {
                if (akra.isArray(pData)) {
                    for(var i = 0; i < (pData).length; ++i) {
                        this._pArrData.push((pData)[i]);
                        this._iCountData += (pData)[i].byteLength;
                    }
                } else {
                    if (((pData) instanceof ArrayBuffer)) {
                        pData = new Uint8Array(pData);
                    }
                    this._pArrData.push(pData);
                    this._iCountData += (pData).byteLength;
                }
            };
            Packer.prototype.writeData = function (pObject, sType) {
                var pTemplate = ((this)._pTemplate);
                var pProperties = pTemplate.properties(sType);
                var fnWriter = null;
                fnWriter = pProperties.write;
                if (!((fnWriter) === null)) {
                    if (fnWriter.call(this, pObject) === false) {
 {
                            akra.logger.setSourceLocation("io/Packer.ts", 112);
                            akra.logger.error("cannot write type: " + sType);
                        }
                        ;
                    }
                    return true;
                }
 {
                    akra.logger.setSourceLocation("io/Packer.ts", 118);
                    akra.logger.assert(((pProperties) != null), "unknown object <" + sType + "> type cannot be writed");
                }
                ;
                return true;
            };
            Packer.prototype.write = function (pObject, sType) {
                if (typeof sType === "undefined") { sType = null; }
                var pProperties;
                var iAddr, iType;
                var pTemplate = ((this)._pTemplate);
                if (((sType) === null)) {
                    sType = pTemplate.detectType(pObject);
                }
                pProperties = pTemplate.properties(sType);
                iType = pTemplate.getTypeId(sType);
                if (((pObject) === null) || !((pObject) !== undefined) || !((iType) !== undefined)) {
                    this.nullPtr();
                    return false;
                }
                iAddr = this.addr(pObject, sType);
                if (iAddr < 0) {
                    iAddr = ((this)._iCountData) + 4 + 4;
                    ((this).uintX((iAddr), 32));
                    ((this).uintX((iType), 32));
                    if (this.writeData(pObject, sType)) {
                        this.memof(pObject, iAddr, sType);
                    } else {
                        this.rollback(2);
                        this.nullPtr();
                    }
                } else {
                    ((this).uintX((iAddr), 32));
                    ((this).uintX((iType), 32));
                }
                return true;
            };
            return Packer;
        })(io.BinWriter);        
        function dump(pObject) {
            var pPacker = new Packer();
            pPacker.write(pObject);
            return pPacker.data();
        }
        io.dump = dump;
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    /// @: {data}/3d-party/FileSaver/FileSaver.min.js|location()|script()|data_location({data},DATA)
    (function (io) {
        var Exporter = (function () {
            function Exporter() {
                /**@protected*/ this._pLibrary = {};
                /**@protected*/ this._pDocument = null;
                //записаны ли сцены в документе?
                /**@protected*/ this._bScenesWrited = false;
                //assset
                /**@protected*/ this._sTitle = null;
                /**@protected*/ this._sSubject = null;
                /**@protected*/ this._pKeywords = null;
                //contributor
                /**@protected*/ this._sAuthor = null;
                /**@protected*/ this._sComments = null;
                /**@protected*/ this._sCopyright = null;
                /**@protected*/ this._sSourceData = null;
            }
            Exporter.VERSION = "0.0.1";
            Exporter.UP_AXIS = "Y_UP";
            Exporter.TOOL = "Akra Engine exporter";
            Exporter.prototype.writeAnimation = /** @inline */function (pAnimation) {
                switch(pAnimation.type) {
                    case akra.EAnimationTypes.ANIMATION:
                        this.makeEntry(akra.EDocumentEntry.k_Animation, pAnimation);
                        break;
                    case akra.EAnimationTypes.BLEND:
                        this.makeEntry(akra.EDocumentEntry.k_AnimationBlend, pAnimation);
                        break;
                    case akra.EAnimationTypes.CONTAINER:
                        this.makeEntry(akra.EDocumentEntry.k_AnimationContainer, pAnimation);
                        break;
                    default:
 {
                            akra.logger.setSourceLocation("io/Exporter.ts", 56);
                            akra.logger.criticalError("unknown animation detected!");
                        }
                        ;
                }
            };
            Exporter.prototype.writeController = /** @inline */function (pController) {
                this.makeEntry(akra.EDocumentEntry.k_Controller, pController);
            };
            Exporter.prototype.clear = function () {
                this._bScenesWrited = false;
                this._pLibrary = {};
            };
            Exporter.prototype.findLibraryEntry = /** @inline */function (iGuid) {
                return this._pLibrary[iGuid];
            };
            Exporter.prototype.findEntry = /** @inline */function (iGuid) {
                return ((this)._pLibrary[(iGuid)]).entry;
            };
            Exporter.prototype.findEntryData = /** @inline */function (iGuid) {
                return ((this)._pLibrary[(iGuid)]).data;
            };
            Exporter.prototype.isSceneWrited = /**@protected*/ /** @inline */function () {
                return this._bScenesWrited;
            };
            Exporter.prototype.isEntryExists = /**@protected*/ /** @inline */function (iGuid) {
                return ((this._pLibrary[iGuid]) != null);
            };
            Exporter.prototype.makeEntry = /**@protected*/ function (eType, pData) {
                if (!((((this)._pLibrary[(pData.getGuid())]) != null))) {
                    this.writeEntry(eType, {
                        guid: pData.getGuid(),
                        data: pData,
                        entry: null
                    });
                }
            };
            Exporter.prototype.writeEntry = /**@protected*/ function (eType, pEntry) {
                if (((pEntry.entry) != null)) {
                    return;
                }
 {
                    akra.logger.setSourceLocation("io/Exporter.ts", 100);
                    akra.logger.assert(this.encodeEntry(eType, pEntry), "cannot encode entry with type: " + eType);
                }
                ;
                this._pLibrary[pEntry.guid] = pEntry;
                pEntry.entry.guid = pEntry.guid;
            };
            Exporter.prototype.encodeEntry = /**@protected*/ function (eType, pEntry) {
                switch(eType) {
                    case akra.EDocumentEntry.k_Controller:
                        pEntry.entry = this.encodeControllerEntry(pEntry.data);
                        break;
                    case akra.EDocumentEntry.k_Animation:
                        pEntry.entry = this.encodeAnimationEntry(pEntry.data);
                        break;
                    case akra.EDocumentEntry.k_AnimationBlend:
                        pEntry.entry = this.encodeAnimationBlendEntry(pEntry.data);
                        break;
                    case akra.EDocumentEntry.k_AnimationContainer:
                        pEntry.entry = this.encodeAnimationContainerEntry(pEntry.data);
                        break;
                    default:
 {
                            akra.logger.setSourceLocation("io/Exporter.ts", 120);
                            akra.logger.warning("unknown entry type detected: " + eType);
                        }
                        ;
                }
                return ((pEntry.entry) != null);
            };
            Exporter.prototype.encodeAnimationBaseEntry = /**@protected*/ function (pAnimation) {
                var pEntry = {
                    name: pAnimation.name,
                    targets: [],
                    type: akra.EDocumentEntry.k_Unknown,
                    extra: null
                };
                var pTargets = pAnimation.getTargetList();
                for(var i = 0; i < pTargets.length; ++i) {
                    if (((this)._bScenesWrited)) {
 {
                            akra.logger.setSourceLocation("io/Exporter.ts", 138);
                            akra.logger.criticalError("TODO: scene writed");
                        }
                        ;
                    }
                    pEntry.targets.push({
                        name: pTargets[i].name,
                        target: null
                    });
                }
                return pEntry;
            };
            Exporter.prototype.encodeAnimationFrameEntry = /**@protected*/ function (pFrame) {
                var pEntry = {
                    time: pFrame.time,
                    weight: pFrame.weight,
                    matrix: []
                };
                for(var i = 0; i < pFrame.matrix.data.length; ++i) {
                    pEntry.matrix.push(pFrame.matrix.data[i]);
                }
                return pEntry;
            };
            Exporter.prototype.encodeAnimationTrack = /**@protected*/ function (pTrack) {
                var pEntry = {
                    interpolation: /*TODO: real interpolation mode*/
                    0,
                    keyframes: [],
                    targetName: pTrack.targetName,
                    target: null
                };
                if (((this)._bScenesWrited)) {
 {
                        akra.logger.setSourceLocation("io/Exporter.ts", 170);
                        akra.logger.criticalError("TODO: write track target");
                    }
                    ;
                }
                for(var i = 0; i < pTrack.totalFrames; ++i) {
                    var pFrame = this.encodeAnimationFrameEntry(pTrack.getKeyFrame(i));
                    pEntry.keyframes.push(pFrame);
                }
                ;
                return pEntry;
            };
            Exporter.prototype.encodeAnimationEntry = /**@protected*/ function (pAnimation) {
                var pEntry = this.encodeAnimationBaseEntry(pAnimation);
                pEntry.tracks = [];
                pEntry.type = akra.EDocumentEntry.k_Animation;
                for(var i = 0; i < pAnimation.totalTracks; ++i) {
                    var pTrack = this.encodeAnimationTrack(pAnimation.getTrack(i));
                    pEntry.tracks.push(pTrack);
                }
                ;
                return pEntry;
            };
            Exporter.prototype.encodeAnimationContainerEntry = /**@protected*/ function (pContainer) {
                var pAnimation = pContainer.getAnimation();
                var pEntry = this.encodeAnimationBaseEntry(pContainer);
                pEntry.enable = pContainer.isEnabled();
                pEntry.startTime = pContainer.getStartTime();
                pEntry.speed = pContainer.getSpeed();
                pEntry.loop = pContainer.inLoop();
                pEntry.reverse = pContainer.isReversed();
                pEntry.pause = pContainer.isPaused();
                pEntry.leftInfinity = pContainer.inLeftInfinity();
                pEntry.rightInfinity = pContainer.inRightInfinity();
                pEntry.animation = pAnimation.getGuid();
                pEntry.type = akra.EDocumentEntry.k_AnimationContainer;
                /*not inlined, because first statement is not return/call/dot(cur st.: Switch)*/this.writeAnimation(pAnimation);
                return pEntry;
            };
            Exporter.prototype.encodeAnimationBlendEntry = /**@protected*/ function (pBlend) {
                var pEntry = this.encodeAnimationBaseEntry(pBlend);
                pEntry.animations = [];
                pEntry.type = akra.EDocumentEntry.k_AnimationBlend;
                for(var i = 0, n = pBlend.totalAnimations; i < n; ++i) {
                    var pAnimation = pBlend.getAnimation(i);
                    var pBlendElement = {
                        animation: pAnimation.getGuid(),
                        weight: pBlend.getAnimationWeight(i),
                        mask: // acceleration: pBlend.getAnimationAcceleration(i),
                        pBlend.getAnimationMask(i)
                    };
                    /*not inlined, because first statement is not return/call/dot(cur st.: Switch)*/this.writeAnimation(pAnimation);
                    pEntry.animations.push(pBlendElement);
                }
                return pEntry;
            };
            Exporter.prototype.encodeControllerEntry = /**@protected*/ function (pController) {
                var pEntry = {
                    type: akra.EDocumentEntry.k_Controller,
                    animations: [],
                    options: 0,
                    name: pController.name
                };
                for(var i = 0, n = pController.totalAnimations; i < n; ++i) {
                    var pAnimation = pController.getAnimation(i);
                    /*not inlined, because first statement is not return/call/dot(cur st.: Switch)*/this.writeAnimation(pAnimation);
                    pEntry.animations.push(pAnimation.getGuid());
                }
                return pEntry;
            };
            Exporter.prototype.toolInfo = /**@protected*/ function () {
                return [
                    Exporter.TOOL, 
                    "Version " + Exporter.VERSION, 
                    "Browser " + akra.info.browser.name + ", " + akra.info.browser.version + " (" + akra.info.browser.os + ")"
                ].join(";");
            };
            Exporter.prototype.createUnit = /**@protected*/ function () {
                return {
                    name: "meter",
                    meter: 1.
                };
            };
            Exporter.prototype.createContributor = /**@protected*/ function () {
                return {
                    author: this._sAuthor,
                    authoringTool: this.toolInfo(),
                    comments: this._sComments,
                    copyright: this._sCopyright,
                    sourceData: this._sSourceData
                };
            };
            Exporter.prototype.createAsset = /**@protected*/ function () {
                return {
                    unit: this.createUnit(),
                    upAxis: Exporter.UP_AXIS,
                    title: this._sTitle,
                    subject: this._sSubject,
                    created: ((new Date()).toString()),
                    modified: ((new Date()).toString()),
                    contributor: this.createContributor(),
                    keywords: this._pKeywords
                };
            };
            Exporter.prototype.createDocument = function () {
                var pDocument = {
                    asset: this.createAsset(),
                    library: [],
                    scenes: null
                };
                var pLibrary = this._pLibrary;
                for(var iGuid in pLibrary) {
                    var pLibEntry = pLibrary[iGuid];
                    pDocument.library.push(pLibEntry.entry);
                }
                return pDocument;
            };
            Exporter.prototype.export = function (eFormat) {
                if (typeof eFormat === "undefined") { eFormat = akra.EDocumentFormat.JSON; }
                var pDocument = this.createDocument();
                if (eFormat === akra.EDocumentFormat.JSON) {
                    return Exporter.exportAsJSON(pDocument);
                } else if (eFormat === akra.EDocumentFormat.BINARY_JSON) {
                    return Exporter.exportAsJSONBinary(pDocument);
                }
                return null;
            };
            Exporter.prototype.saveAs = function (sName, eFormat) {
                saveAs(this.export(eFormat), sName);
            };
            Exporter.exportAsJSON = function exportAsJSON(pDocument) {
                /*, null, "\t"*/
                return new Blob([
                    JSON.stringify(pDocument)
                ], {
                    type: "application/json;charset=utf-8"
                });
            };
            Exporter.exportAsJSONBinary = function exportAsJSONBinary(pDocument) {
                return new Blob([
                    akra.io.dump(pDocument)
                ], {
                    type: "application/octet-stream"
                });
            };
            Exporter.getDate = /**@protected*/ /** @inline */function getDate() {
                return (new Date()).toString();
            };
            return Exporter;
        })();
        io.Exporter = Exporter;        
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Controls = (function (_super) {
                __extends(Controls, _super);
                function Controls(parent, options) {
                                _super.call(this, parent, options, ui.getUI(parent).createComponent("animation.Graph"));
                    var pControlPanel = this.controls;
                    //var pDataBtn: IUIButton = new Button(pControlPanel, {text: "Create data"});
                    var pPlayerBtn = new ui.Button(pControlPanel, {
                        text: "Create player"
                    });
                    var pBlenderBtn = new ui.Button(pControlPanel, {
                        text: "Create blender"
                    });
                    var pMaskBtn = new ui.Button(pControlPanel, {
                        text: "Create mask"
                    });
                    var pExportBtn = new ui.Button(pControlPanel, {
                        text: "{ save controller }"
                    });
                    //this.connect(pDataBtn, SIGNAL(click), SLOT(createData));
                    ((pPlayerBtn).getEventTable().addDestination(((((pPlayerBtn)))._iGuid), ("click"), (this), ("createPlayer"), (undefined)));
                    ((pBlenderBtn).getEventTable().addDestination(((((pBlenderBtn)))._iGuid), ("click"), (this), ("createBlender"), (undefined)));
                    ((pMaskBtn).getEventTable().addDestination(((((pMaskBtn)))._iGuid), ("click"), (this), ("createMask"), (undefined)));
                    ((pExportBtn).getEventTable().addDestination(((((pExportBtn)))._iGuid), ("click"), (this), ("exportController"), (undefined)));
                }
                Controls.prototype.createData = function () {
                    return new animation.Data(this.graph);
                };
                Controls.prototype.createPlayer = function () {
                    return new animation.Player(this.graph);
                };
                Controls.prototype.createBlender = function () {
                    return new animation.Blender(this.graph);
                };
                Controls.prototype.createMask = function () {
                    return new animation.Mask(this.graph);
                };
                Controls.prototype.exportController = function () {
                    var pExporter = new akra.io.Exporter();
                    var pController = this.graph.getController();
                    var pGraphOffset = this.graph.el.offset();
                    (pExporter.makeEntry(/*checked (origin: akra)>>*/akra.EDocumentEntry.k_Controller, (pController)));
                    for(var i = 0; i < pController.totalAnimations; ++i) {
                        var pAnimation = pController.getAnimation(i);
                        var pEntry = (((pExporter)._pLibrary[((pAnimation.getGuid()))]).entry);
                        var pGraphNode = this.graph.findNodeByAnimation(pAnimation);
                        var pOffset = pGraphNode.el.offset();
                        if (!pEntry.extra) {
                            pEntry.extra = {};
                        }
                        pEntry.extra.graph = {
                            x: pOffset.left - pGraphOffset.left,
                            y: pOffset.top - pGraphOffset.top
                        };
                    }
                    pExporter.saveAs((pController.name || "untitled") + ".json");
                };
                Controls.prototype.selected = function () {
                    _super.prototype.selected.call(this);
                    // ide.cmd(ECMD.INSPECT_ANIMATION_CONTROLLER, this.graph.getController());
                                    };
                return Controls;
            })(ui.graph.Controls);
            animation.Controls = Controls;            
            (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("animation.Controls")] = (Controls));
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EUtilTimerCommands) {
        EUtilTimerCommands._map = [];
        EUtilTimerCommands._map[0] = "TIMER_RESET";
        //! <to reset the timer
        EUtilTimerCommands.TIMER_RESET = 0;
        EUtilTimerCommands._map[1] = "TIMER_START";
        //! <to start the timer
        EUtilTimerCommands.TIMER_START = 1;
        EUtilTimerCommands._map[2] = "TIMER_STOP";
        //! <to stop (or pause) the timer
        EUtilTimerCommands.TIMER_STOP = 2;
        EUtilTimerCommands._map[3] = "TIMER_ADVANCE";
        //! <to advance the timer by 0.1 seconds
        EUtilTimerCommands.TIMER_ADVANCE = 3;
        EUtilTimerCommands._map[4] = "TIMER_GET_ABSOLUTE_TIME";
        //! <to get the absolute system time
        EUtilTimerCommands.TIMER_GET_ABSOLUTE_TIME = 4;
        EUtilTimerCommands._map[5] = "TIMER_GET_APP_TIME";
        //! <to get the current time
        EUtilTimerCommands.TIMER_GET_APP_TIME = 5;
        EUtilTimerCommands._map[6] = "TIMER_GET_ELAPSED_TIME";
        EUtilTimerCommands.TIMER_GET_ELAPSED_TIME = 6;//! to get the time that elapsed between TIMER_GETELAPSEDTIME calls
        
    })(akra.EUtilTimerCommands || (akra.EUtilTimerCommands = {}));
    var EUtilTimerCommands = akra.EUtilTimerCommands;
    //static start(): IUtilTimer;
    })(akra || (akra = {}));
var akra;
(function (akra) {
    (function (animation) {
        var Animation = (function (_super) {
            __extends(Animation, _super);
            function Animation(sName) {
                        _super.call(this, akra.EAnimationTypes.ANIMATION, sName);
                this._pTracks = [];
            }
            Object.defineProperty(Animation.prototype, "totalTracks", {
                get: /** @inline */function () {
                    return this._pTracks.length;
                },
                enumerable: true,
                configurable: true
            });
            Animation.prototype.push = function (pTrack) {
                this._pTracks.push(pTrack);
                this._fDuration = akra.math.max(this._fDuration, pTrack.duration);
                this._fFirst = akra.math.min(((this)._fFirst), pTrack.first);
                this.addTarget(pTrack.targetName);
            };
            Animation.prototype.attach = function (pTarget) {
                var pPointer;
                var pTracks = this._pTracks;
                for(var i = 0; i < pTracks.length; ++i) {
                    if (!pTracks[i].bind(pTarget)) {
 {
                            akra.logger.setSourceLocation("animation/Animation.ts", 36);
                            akra.logger.log("cannot bind animation track [", i, "] to joint <", pTracks[i].target, ">");
                        }
                        ;
                    } else {
                        pPointer = this.setTarget(pTracks[i].targetName, pTracks[i].target);
                        pPointer.track = pTracks[i];
                    }
                }
            };
            Animation.prototype.getTracks = /** @inline */function () {
                return this._pTracks;
            };
            Animation.prototype.getTrack = /** @inline */function (i) {
                return this._pTracks[i];
            };
            Animation.prototype.frame = function (sName, fTime) {
                var pPointer = ((this)._pTargetMap[(sName)]);
                if (!pPointer || !pPointer.track) {
                    return null;
                }
                return pPointer.track.frame((/*checked (origin: math)>>*/akra.math.max((0), /*checked (origin: math)>>*/akra.math.min((fTime), (this._fDuration)))));
            };
            Animation.prototype.extend = function (pAnimation) {
                var pTracks = pAnimation.getTracks();
                for(var i = 0; i < pTracks.length; ++i) {
                    if (!this.getTarget(pTracks[i].targetName)) {
                        this.push(pTracks[i]);
                    }
                }
            };
            Animation.prototype.toString = function () {
                var s = _super.prototype.toString.call(this);
                s += "total tracks : " + ((this)._pTracks.length) + "\n";
                for(var i = 0; i < ((this)._pTracks.length); ++i) {
                    s += "\t" + i + ". " + ((this)._pTracks[(i)]) + "\n";
                }
                return s;
            };
            return Animation;
        })(animation.Base);        
        /** @inline */function isAnimation(pAnimation) {
            return pAnimation.type === akra.EAnimationTypes.ANIMATION;
        }
        animation.isAnimation = isAnimation;
        function createAnimation(sName) {
            return new Animation(sName);
        }
        animation.createAnimation = createAnimation;
    })(akra.animation || (akra.animation = {}));
    var animation = akra.animation;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (io) {
        var Importer = (function () {
            function Importer(_pEngine) {
                this._pEngine = _pEngine;
                this._pDocument = null;
                this._pLibrary = {};
            }
            Importer.prototype.getEngine = /** @inline */function () {
                return this._pEngine;
            };
            Importer.prototype.getDocument = /** @inline */function () {
                return this._pDocument;
            };
            Importer.prototype.getLibrary = /** @inline */function () {
                return this._pLibrary;
            };
            Importer.prototype.import = function (pData, eFormat) {
                if (typeof eFormat === "undefined") { eFormat = akra.EDocumentFormat.JSON; }
                if (eFormat !== akra.EDocumentFormat.JSON) {
 {
                        akra.logger.setSourceLocation("io/Importer.ts", 47);
                        akra.logger.criticalError("TODO: Add support for all formats");
                    }
                    ;
                }
                this.loadDocument(this.importFromJSON(pData));
                return this;
            };
            Importer.prototype.loadDocument = function (pDocument) {
                this._pDocument = pDocument;
                this.updateLibrary();
                return this;
            };
            Importer.prototype.importFromJSON = /**@protected*/ function (pData) {
                var sData = null;
                if (((pData) instanceof ArrayBuffer)) {
                    sData = akra.util.abtos(pData);
                } else if ((typeof (pData) === "string")) {
                    sData = pData;
                } else if (((pData) instanceof Blob)) {
 {
                        akra.logger.setSourceLocation("io/Importer.ts", 70);
                        akra.logger.criticalError("TODO: Blob support!");
                    }
                    ;
                } else {
                    return pData;
                }
                return akra.util.parseJSON(sData);
            };
            Importer.prototype.updateLibrary = /**@protected*/ function () {
                var pDocument = ((this)._pDocument);
                var pLibrary = ((this)._pLibrary);
                for(var i = 0; i < pDocument.library.length; ++i) {
                    var pEntry = pDocument.library[i];
                    var iGuid = pEntry.guid;
                    pLibrary[iGuid] = {
                        guid: iGuid,
                        data: null,
                        entry: pEntry
                    };
                }
                ;
            };
            Importer.prototype.findEntries = /**@protected*/ function (eType, fnCallback) {
                var pLibrary = ((this)._pLibrary);
                var i = 0;
                for(var iGuid in pLibrary) {
                    var pEntry = pLibrary[iGuid];
                    if (!((pEntry.entry) === null) && pEntry.entry.type === eType) {
                        if (fnCallback.call(this, pEntry, i++) === false) {
                            return;
                        }
                    }
                }
            };
            Importer.prototype.findEntryByIndex = /**@protected*/ function (eType, i) {
                var pEntry = null;
                this.findEntries(eType, function (pLibEntry, n) {
                    pEntry = pLibEntry;
                    if (i === n) {
                        return false;
                    }
                });
                return pEntry;
            };
            Importer.prototype.find = /**@protected*/ function (eType, fnCallback) {
                var _this = this;
                this.findEntries(eType, function (pEntry, n) {
                    if (fnCallback.call(_this, pEntry.data, n) === false) {
                        return;
                    }
                });
            };
            Importer.prototype.findByIndex = /**@protected*/ /** @inline */function (eType, i) {
                if (typeof i === "undefined") { i = 0; }
                return this.findEntryByIndex(eType, i).data;
            };
            Importer.prototype.findFirst = /**@protected*/ /** @inline */function (eType) {
                return ((this).findEntryByIndex((eType), (0)).data);
            };
            Importer.prototype.getController = function (iContrller) {
                if (typeof iContrller === "undefined") { iContrller = 0; }
                return this.decodeEntry(this.findEntryByIndex(akra.EDocumentEntry.k_Controller, iContrller).entry);
            };
            Importer.prototype.decodeEntry = /**@protected*/ function (pEntry) {
                if (((pEntry) === null)) {
                    return null;
                }
                var pData = ((this)._pLibrary)[pEntry.guid].data;
                if (!((pData) === null)) {
                    return pData;
                }
                switch(pEntry.type) {
                    case akra.EDocumentEntry.k_Controller:
                        pData = this.decodeControllerEntry(pEntry);
                        break;
                    case akra.EDocumentEntry.k_Animation:
                        pData = this.decodeAnimationEntry(pEntry);
                        break;
                    case akra.EDocumentEntry.k_AnimationBlend:
                        pData = this.decodeAnimationBlendEntry(pEntry);
                        break;
                    case akra.EDocumentEntry.k_AnimationContainer:
                        pData = this.decodeAnimationContainerEntry(pEntry);
                        break;
                }
                if (!((pData) === null)) {
                    this.registerData(pEntry.guid, pData);
                    return pData;
                }
 {
                    akra.logger.setSourceLocation("io/Importer.ts", 170);
                    akra.logger.warning("USED UNKNOWN TYPE FOR DECODING!!", pEntry.type);
                }
                ;
                return null;
            };
            Importer.prototype.registerData = /**@protected*/ function (iGuid, pData) {
                var pLibEntry = ((this)._pLibrary)[iGuid];
                pLibEntry.data = pData;
            };
            Importer.prototype.decodeInstance = /**@protected*/ function (iGuid) {
                var pLibEntry = ((this)._pLibrary)[iGuid];
                if (!((pLibEntry.data) === null)) {
                    return pLibEntry.data;
                }
                return this.decodeEntry(pLibEntry.entry);
            };
            Importer.prototype.decodeEntryList = /**@protected*/ function (pEntryList, fnCallback) {
                if (((pEntryList) === null)) {
                    return;
                }
                for(var i = 0; i < pEntryList.length; ++i) {
                    fnCallback.call(this, this.decodeEntry(pEntryList[i]));
                }
            };
            Importer.prototype.decodeInstanceList = /**@protected*/ function (pInstances, fnCallback) {
                for(var i = 0; i < pInstances.length; ++i) {
                    fnCallback.call(this, this.decodeInstance(pInstances[i]), i);
                }
            };
            Importer.prototype.decodeAnimationFrame = /**@protected*/ function (pEntry) {
                var pFrame = akra.animation.createFrame(pEntry.time, new akra.Mat4(pEntry.matrix), pEntry.weight);
                return pFrame;
            };
            Importer.prototype.decodeAnimationTrack = /**@protected*/ function (pEntry) {
                var pTrack = akra.animation.createTrack(pEntry.targetName);
                //TODO: decode base entry
                //TODO: set interpolation mode
                //TODO: set target
                for(var i = 0; i < pEntry.keyframes.length; ++i) {
                    pTrack.keyFrame(this.decodeAnimationFrame(pEntry.keyframes[i]));
                }
                ;
                return pTrack;
            };
            Importer.prototype.decodeAnimationEntry = /**@protected*/ function (pEntry) {
                var pAnimation = akra.animation.createAnimation(pEntry.name);
                pAnimation.extra = pEntry.extra;
                //TODO: load read targets!!
                for(var i = 0; i < pEntry.tracks.length; ++i) {
                    pAnimation.push(this.decodeAnimationTrack(pEntry.tracks[i]));
                }
                ;
                return pAnimation;
            };
            Importer.prototype.decodeAnimationBlendEntry = /**@protected*/ function (pEntry) {
                var pBlend = akra.animation.createBlend(pEntry.name);
                pBlend.extra = pEntry.extra;
                //TODO: decode base entry!
                //TODO: set targets
                for(var i = 0; i < pEntry.animations.length; ++i) {
                    var pElement = pEntry.animations[i];
                    var pAnimation = this.decodeInstance(pElement.animation);
                    var fWeight = pElement.weight;
                    var pMask = pElement.mask;
                    // var fAcceleration: float = pEntry.acceleration;
                    pBlend.setAnimation(i, pAnimation);
                    pBlend.setAnimationWeight(i, fWeight);
                    pBlend.setAnimationMask(i, pMask);
                }
                ;
                return pBlend;
            };
            Importer.prototype.decodeAnimationContainerEntry = /**@protected*/ function (pEntry) {
                var pAnimation = this.decodeInstance(pEntry.animation);
                var pContainer = akra.animation.createContainer(pAnimation, pEntry.name);
                pContainer.extra = pEntry.extra;
                //TODO: decode base entry!
                //TODO: set targets
                if (!pEntry.enable) {
                    pContainer.disable();
                }
                pContainer.setStartTime(pEntry.startTime);
                pContainer.setSpeed(pEntry.speed);
                pContainer.useLoop(pEntry.loop);
                pContainer.reverse(pEntry.reverse);
                pContainer.pause(pEntry.pause);
                pContainer.leftInfinity(pEntry.leftInfinity);
                pContainer.rightInfinity(pEntry.rightInfinity);
                return pContainer;
            };
            Importer.prototype.decodeControllerEntry = /**@protected*/ function (pEntry) {
                var pController = ((this)._pEngine).createAnimationController(pEntry.name, pEntry.options);
                pController.name = pEntry.name;
                this.decodeInstanceList(pEntry.animations, function (pAnimation) {
                    pController.addAnimation(pAnimation);
                });
                return pController;
            };
            return Importer;
        })();
        io.Importer = Importer;        
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Graph = (function (_super) {
                __extends(Graph, _super);
                function Graph(parent, options) {
                                _super.call(this, parent, options, akra.EUIGraphTypes.ANIMATION);
                    this._pSelectedNode = null;
                    this._pAnimationController = null;
                    this.setupFileDropping();
                    this.setDroppable();
                }
                Graph.prototype.drop = function (e, comp, info) {
                    _super.prototype.drop.call(this, e, comp, info);
                    if (ui.isComponent(comp, akra.EUIComponents.COLLADA_ANIMATION)) {
                        var pColladaAnimation = comp;
                        var pAnimation = pColladaAnimation.collada.extractAnimation(pColladaAnimation.index);
                        // this.addAnimation(pAnimation);
                        this.createNodeByAnimation(pAnimation);
                    }
                };
                Graph.prototype.setupFileDropping = function () {
                    var _this = this;
                    var pGraph = this;
                    var pRmgr = akra.ide.getResourceManager();
                    akra.io.createFileDropArea(null, {
                        drop: function (file, content, format, e) {
                            (pGraph.$element).removeClass("file-drag-over");
                            var pName = akra.pathinfo(file.name);
                            var sExt = pName.ext.toUpperCase();
                            if (sExt == "DAE") {
                                console.log("before resource creation...");
                                var pModelResource = pRmgr.colladaPool.createResource(pName.toString());
                                console.log("before model parsing...");
                                pModelResource.parse(content, {
                                    scene: false,
                                    name: pName.toString()
                                });
                                var pAnimations = pModelResource.extractAnimations();
                                for(var j = 0; j < pAnimations.length; ++j) {
                                    pGraph.addAnimation(pAnimations[j]);
                                    pGraph.createNodeByAnimation(pAnimations[j]);
                                }
                            }
                            if (sExt == "JSON") {
                                var pImporter = new akra.io.Importer(akra.ide.getEngine());
                                pImporter.import(content);
                                _this.createNodeByController(pImporter.getController());
                            }
                        },
                        verify: function (file, e) {
                            if (e.target !== (pGraph).$svg[0]) {
                                return false;
                            }
                            return true;
                        },
                        dragover: // dragenter: (e) => {
                        // 	pGraph.el.addClass("file-drag-over");
                        // },
                        /** @inline */function (e) {
                            (pGraph.$element).addClass("file-drag-over");
                        },
                        dragleave: /** @inline */function (e) {
                            (pGraph.$element).removeClass("file-drag-over");
                        },
                        format: akra.EFileDataTypes.TEXT
                    });
                };
                Graph.prototype.getController = function () {
                    return this._pAnimationController;
                };
                Graph.prototype.selectNode = function (pNode, bModified) {
                    if (typeof bModified === "undefined") { bModified = false; }
                    var bPlay = true;
                    if (this._pSelectedNode === pNode) {
                        if (bModified) {
                            akra.ide.cmd(akra.ECMD.INSPECT_ANIMATION_NODE, pNode);
                        }
                        return;
                    }
                    akra.ide.cmd(akra.ECMD.INSPECT_ANIMATION_NODE, pNode);
                    this._pSelectedNode = pNode;
                    if (bPlay) {
                        this._pAnimationController.play(pNode.animation);
                    }
                    this.nodeSelected(pNode, bPlay);
                };
                Graph.prototype.nodeSelected = function (pNode, bPlay) {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (((((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] = (((/*checked (origin: util)>>*/akra.util.Entity._pEventTable))).broadcast[(this._iGuid)] || {}));
                    var _broadcast = (this._pBroadcastSlotList).nodeSelected;
                    var _recivier = this;
                    if (((_broadcast) !== undefined)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pNode, bPlay) : _broadcast[i].listener(_recivier, pNode, bPlay);
                        }
                    }
                };
                Graph.prototype.addAnimation = function (pAnimation) {
                    this._pAnimationController.addAnimation(pAnimation);
                };
                Graph.prototype.removeAnimation = function (animation) {
                    this._pAnimationController.removeAnimation(animation);
                };
                Graph.prototype.findNodeByAnimation = function (animation) {
                    var sName = !(typeof (animation) === "string") ? (animation).name : animation;
                    var pNodes = /*not inlined, because supportes only single statement functions(cur. st. count: 5)*/this.nodes;
                    for(var i = 0; i < pNodes.length; i++) {
                        var pAnim = pNodes[i].animation;
                        if (!((pAnim) === null) && pAnim.name === sName) {
                            return pNodes[i];
                        }
                    }
                    return null;
                };
                Graph.prototype.createNodeByController = function (pController) {
                    var pNode = null;
                    // LOG("createNodeByController(", pController ,")")
                    for(var i = 0; i < pController.totalAnimations; ++i) {
                        var pAnimation = pController.getAnimation(i);
                        pNode = this.createNodeByAnimation(pAnimation);
                    }
                    return;
                };
                Graph.prototype.createNodeByAnimation = function (pAnimation) {
                    var pNode = this.findNodeByAnimation(pAnimation.name);
                    var pSubAnim = null;
                    var pSubNode = null;
                    var pBlend = null;
                    var pBlender = null;
                    var pPlayer = null;
                    var pMaskNode = null;
                    var pMask = null;
                    var pGraph = this;
                    function connect(pGraph, pFrom, pTo) {
                        pGraph.createRouteFrom(pFrom.getOutputConnector());
                        pGraph.connectTo(pTo.getInputConnector());
                    }
                    if (!((pNode) === null)) {
                        return pNode;
                    }
                    if (((pAnimation).type === /*checked (origin: akra)>>*/akra.EAnimationTypes.ANIMATION)) {
                        pNode = new animation.Data(this, pAnimation);
                        this.addAnimation(pAnimation);
                    } else if (((pAnimation).type === /*checked (origin: akra)>>*/akra.EAnimationTypes.BLEND)) {
                        pBlender = pNode = new animation.Blender(this, pAnimation);
                        pBlend = pAnimation;
                        // pBlender.animation = pBlend;
                        for(var i = 0; i < pBlend.totalAnimations; i++) {
                            pSubAnim = pBlend.getAnimation(i);
                            pSubNode = this.createNodeByAnimation(pSubAnim);
                            pMask = pBlend.getAnimationMask(i);
                            if (((pMask) != null)) {
                                pMaskNode = pBlender.getMaskNode(i);
                                if (!pMaskNode) {
                                    pMaskNode = new animation.Mask(this, pMask);
                                    // pMaskNode.animation = pSubAnim;
                                                                    }
                                connect(this, pSubNode, pMaskNode);
                                connect(this, pMaskNode, pBlender);
                                // if (pSubAnim.extra && pSubAnim.extra.mask) {
                                //     if (pSubAnim.extra.mask.position) {
                                //         pMaskNode.position(pSubAnim.extra.mask.position.x, pSubAnim.extra.mask.position.y);
                                //     }
                                // }
                                pMaskNode.routing();
                            } else {
                                connect(this, pSubNode, pBlender);
                            }
                            pSubNode.routing();
                        }
                        ;
                        pBlender.setup();
                    } else if (((pAnimation).type === /*checked (origin: akra)>>*/akra.EAnimationTypes.CONTAINER)) {
                        pPlayer = pNode = new animation.Player(this, pAnimation);
                        // pPlayer.animation = pAnimation;
                        pSubAnim = (pAnimation).getAnimation();
                        // console.log(pSubAnim);
                        pSubNode = this.createNodeByAnimation(pSubAnim);
                        // console.log(this, pSubNode, pPlayer);
                        connect(this, pSubNode, pPlayer);
                    } else {
 {
                            akra.logger.setSourceLocation("animation/Graph.ts", 246);
                            akra.logger.error("unsupported type of animation detected >> ", pAnimation);
                        }
                        ;
                    }
                    if (pAnimation.extra) {
                        if (pAnimation.extra.graph) {
                            setTimeout(/** @inline */function () {
                                var o = pGraph.el.offset();
                                pNode.el.offset({
                                    left: o.left + pAnimation.extra.graph.x,
                                    top: o.top + pAnimation.extra.graph.y
                                });
                                if (pBlender) {
                                    var o = pBlender.el.offset();
                                    for(var i = 0; i < pBlender.totalMasks; ++i) {
                                        var pMaskNode = pBlender.getMaskNode(i);
                                        pMaskNode.el.offset({
                                            left: o.left - 60 - pMaskNode.el.width() + i * 30,
                                            top: o.top - 30 + i * 30
                                        });
                                        pMaskNode.routing();
                                    }
                                }
                                pNode.routing();
                            }, 15);
                        }
                    }
                    pNode.routing();
                    if (pAnimation === this.getController().active) {
                        this.selectNode(pNode);
                    }
                    return pNode;
                };
                Graph.prototype.capture = function (pController) {
 {
                        akra.logger.setSourceLocation("animation/Graph.ts", 279);
                        akra.logger.assert(((this._pAnimationController) === null), "\"controller exists!!!\"");
                    }
                    ;
                    this._pAnimationController = pController;
                    ((pController).getEventTable().addDestination(((((pController)))._iGuid), ("play"), (this), ("onControllerPlay"), (undefined)));
                    ((pController).getEventTable().addDestination(((((pController)))._iGuid), ("animationAdded"), (this), ("animationAdded"), (undefined)));
                    this.createNodeByController(pController);
                    return true;
                };
                Graph.prototype.animationAdded = function (pController, pAnimation) {
                };
                Graph.prototype.onControllerPlay = function (pController, pAnimation) {
                    // var pNode: IUIAnimationNode = this.findNodeByAnimation(pAnimation.name);
                    // this.selectNode(pNode);
                                    };
                Graph.prototype.addChild = function (pChild) {
                    pChild = _super.prototype.addChild.call(this, pChild);
                    if (ui.isComponent(pChild, akra.EUIComponents.GRAPH_NODE)) {
                        var pNode = pChild;
                        ((pNode).getEventTable().addDestination(((((pNode)))._iGuid), ("selected"), (this), ("selectNode"), (undefined)));
                    }
                    return pChild;
                };
                Graph.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    ((this).$element).addClass("component-animationgraph");
                };
                return Graph;
            })(ui.graph.Graph);
            animation.Graph = Graph;            
            (/*checked (origin: ui)>>*/akra.ui.COMPONENTS[("animation.Graph")] = (Graph));
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var UI = (function () {
            function UI(pManager) {
                if (typeof pManager === "undefined") { pManager = null; }
                /**@protected*/ this._iGuid = akra.sid();
                /**@protected*/ this._pUnicastSlotMap = null;
                /**@protected*/ this._pBroadcastSlotList = null;
                this._pManager = pManager;
            }
            Object.defineProperty(UI.prototype, "type", {
                get: /** @inline */function () {
                    return akra.ESceneTypes.TYPE_2D;
                },
                enumerable: true,
                configurable: true
            });
            UI.prototype.getManager = /** @inline */function () {
                return this._pManager;
            };
            UI.prototype.createHTMLNode = function (pElement) {
                return new ui.HTMLNode(this, pElement);
            };
            UI.prototype.createDNDNode = function (pElement) {
                return new ui.DNDNode(this, pElement);
            };
            UI.prototype.createComponent = function (sType, pOptions) {
                if (((/*checked (origin: ui)>>*/akra.ui.COMPONENTS[sType]) != null)) {
                    //console.log("Founded non-generic type: " + sType);
                    return new ui.COMPONENTS[sType](this, pOptions);
                }
                return new ui.Component(this, ui.mergeOptions(pOptions, {
                    generic: sType
                }));
            };
            UI.prototype.createLayout = function (type, pAttrs) {
                if (typeof type === "undefined") { type = null; }
                if (typeof pAttrs === "undefined") { pAttrs = null; }
                var pLayout = null;
                if ((typeof (type) === "string")) {
                    type = type.toLowerCase();
                }
                switch(type) {
                    case "horizontal":
                    case akra.EUILayouts.HORIZONTAL:
                        pLayout = new ui.Horizontal(this);
                        break;
                    case "vertical":
                    case akra.EUILayouts.VERTICAL:
                        pLayout = new ui.Vertical(this);
                        break;
                    default:
                        pLayout = new ui.Layout(this);
                }
                if (!((pLayout) === null) && !((pAttrs) === null)) {
                    pLayout.setAttributes(pAttrs);
                }
                return pLayout;
            };
            UI.prototype.getGuid = /** @inline */function () {
                return this._iGuid;
            };
            UI._pEventTable = new akra.events.EventTable();
            UI.prototype.getEventTable = /** @inline */function () {
                return UI._pEventTable;
            };
            UI.prototype.connect = /** @inline */function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().addDestination((((pSender))._iGuid), sSignal, this, sSlot, eType);
            };
            UI.prototype.disconnect = /** @inline */function (pSender, sSignal, sSlot, eType) {
                return pSender.getEventTable().removeDestination((((pSender))._iGuid), sSignal, this, sSlot, eType);
            };
            UI.prototype.bind = /** @inline */function (sSignal, fnListener, eType) {
                return (UI._pEventTable).addListener(((this)._iGuid), sSignal, fnListener, eType);
            };
            UI.prototype.unbind = /** @inline */function (sSignal, fnListener, eType) {
                return (UI._pEventTable).removeListener(((this)._iGuid), sSignal, fnListener, eType);
            };
            UI.prototype._syncTable = /** @inline */function (pFrom) {
                (UI._pEventTable)._sync(this, pFrom);
            };
            return UI;
        })();
        ui.UI = UI;        
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        window.prompt = function (message, defaul) {
            console.warn("prompt > " + message);
            return null;
        };
        /*window.alert = function(message?: string): void {
        console.warn("alert > " + message);
        }*/
        window.confirm = function (message) {
            console.warn("confirm > " + message);
            return false;
        };
        var pTestCondList = [];
        var pTestList = [];
        var isPassed;
        var pTest = null;
        var iBegin;
        function addCond(pCond) {
            pTestCondList.unshift(pCond);
        }
        var TestCond = (function () {
            function TestCond(sDescription) {
                this.sDescription = sDescription;
            }
            TestCond.prototype.toString = function () {
                return this.sDescription;
            };
            TestCond.prototype.verify = function (pArgv) {
                return false;
            };
            Object.defineProperty(TestCond.prototype, "description", {
                get: function () {
                    return this.sDescription;
                },
                enumerable: true,
                configurable: true
            });
            return TestCond;
        })();        
        var ArrayCond = (function (_super) {
            __extends(ArrayCond, _super);
            function ArrayCond(sDescription, pArr) {
                        _super.call(this, sDescription);
                this._pArr = pArr;
            }
            ArrayCond.prototype.verify = function (pArgv) {
                var pArr = pArgv[0];
                if (pArr.length != this._pArr.length) {
                    return false;
                }
                for(var i = 0; i < pArr.length; ++i) {
                    if (pArr[i] != this._pArr[i]) {
                        return false;
                    }
                }
                ;
                return true;
            };
            return ArrayCond;
        })(TestCond);        
        var ValueCond = (function (_super) {
            __extends(ValueCond, _super);
            function ValueCond(sDescription, pValue, isNegate) {
                if (typeof isNegate === "undefined") { isNegate = false; }
                        _super.call(this, sDescription);
                this._pValue = pValue;
                this._isNegate = isNegate;
            }
            ValueCond.prototype.verify = function (pArgv) {
                var bResult = pArgv[0] === this._pValue;
                // console.warn(">", pArgv[0], "!==", this._pValue);
                return this._isNegate ? !bResult : bResult;
            };
            return ValueCond;
        })(TestCond);        
        // function output(sText: string): void {
        // 	document.body.innerHTML += sText;
        // }
        function output(sText) {
            var pElement = document.createElement("div");
            pElement.innerHTML = sText;
            document.body.appendChild(pElement);
        }
        function check() {
            var pArgv = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                pArgv[_i] = arguments[_i + 0];
            }
            var pTest = pTestCondList.pop();
            var bResult;
            if (!pTest) {
                console.log(((new Error())).stack);
                console.warn("chech() without condition...");
                return;
            }
            bResult = pTest.verify(pArgv);
            isPassed = isPassed && bResult;
            if (bResult) {
                output("<pre style=\"margin: 0; margin-left: 20px;\"><span style=\"color: green;\"><b>[ PASSED ]</b></span> " + pTest.toString() + "</pre>");
            } else {
                output("<pre style=\"margin: 0; margin-left: 20px;\"><span style=\"color: red;\"><b>[ FAILED ]</b></span> " + pTest.toString() + "</pre>");
            }
        }
        util.check = check;
        function failed(e) {
            if (((e) !== undefined)) {
                printError(e.message, (e).stack);
            }
            var iTotal = pTestCondList.length;
            for(var i = 0; i < iTotal; ++i) {
                check(false);
            }
            isPassed = false;
            pTest = null;
            printResults();
            run();
        }
        util.failed = failed;
        function shouldBeTrue(sDescription) {
            addCond(new ValueCond(sDescription, true));
        }
        util.shouldBeTrue = shouldBeTrue;
        function shouldBeFalse(sDescription) {
            addCond(new ValueCond(sDescription, false));
        }
        util.shouldBeFalse = shouldBeFalse;
        function shouldBeArray(sDescription, pArr) {
            addCond(new ArrayCond(sDescription, pArr));
        }
        util.shouldBeArray = shouldBeArray;
        function shouldBe(sDescription, pValue) {
            addCond(new ValueCond(sDescription, pValue));
        }
        util.shouldBe = shouldBe;
        function shouldBeNotNull(sDescription) {
            addCond(new ValueCond(sDescription, null, true));
        }
        util.shouldBeNotNull = shouldBeNotNull;
                        function test(manifest, fnWrapper, isAsync) {
            if (typeof isAsync === "undefined") { isAsync = false; }
            var pManifest;
            if ((typeof (manifest) === "string")) {
                pManifest = {
                    name: arguments[0],
                    description: null,
                    entry: fnWrapper
                };
            } else {
                pManifest = arguments[0];
                pManifest.entry = fnWrapper;
            }
            pManifest.async = isAsync;
            pTestList.unshift(pManifest);
        }
        util.test = test;
        function printInfo() {
            output("<h4 style=\"font-family: monospace;\">" + pTest.name || "" + "</h4>");
        }
        function printResults() {
            output("<pre style=\"margin-left: 20px;\">" + "<hr align=\"left\" style=\"border: 0; background-color: gray; height: 1px; width: 500px;\"/><span style=\"color: gray;\">total time: " + ((Date.now()) - iBegin) + " msec" + "</span>" + "<br /><b>" + (isPassed ? "<span style=\"color: green\">TEST PASSED</span>" : "<span style=\"color: red\">TEST FAILED</span>") + "</b>" + "</pre>");
        }
        function printError(message, stack) {
            message = "<b>" + message + "</b>";
            if (((stack) !== undefined)) {
                message += "\n" + stack;
            }
            output("<pre style=\"margin-left: 20px;\">" + "<span style=\"color: red; background-color: rgba(255, 0, 0, .1);\">" + message + "</span>" + "</pre>");
        }
        function asyncTest(manifest, fnWrapper) {
            test(manifest, fnWrapper, true);
        }
        util.asyncTest = asyncTest;
        function run() {
            //если вдруг остались тесты.
            if (pTestCondList.length) {
                failed();
            }
            //если предыдущий тест был асинхронным, значит он кончился и надо распечатать результаты
            if (!((pTest) === null) && pTest.async == true) {
                printResults();
            }
            while(pTestList.length) {
                //начинаем новый тест
                pTest = pTestList.pop();
                iBegin = (Date.now());
                isPassed = true;
                printInfo();
                //start test
                try  {
                    pTest.entry();
                } catch (e) {
                    failed(e);
                    return;
                }
                if (!pTest.async) {
                    printResults();
                    pTest = null;
                } else {
                    return;
                }
            }
            ;
        }
        util.run = run;
        window.onload = function () {
            run();
        };
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var test = akra.util.test;
var asyncTest = akra.util.asyncTest;
var failed = akra.util.failed;
var run = akra.util.run;
var shouldBe = akra.util.shouldBe;
var shouldBeArray = akra.util.shouldBeArray;
var shouldBeTrue = akra.util.shouldBeTrue;
var shouldBeFalse = akra.util.shouldBeFalse;
var shouldBeNotNull = akra.util.shouldBeNotNull;
var check = akra.util.check;
var ok = check;
var ui = akra.ui;
var pUI = new ui.UI();
var pNode = new ui.Component(pUI, {
    draggable: true,
    name: "root"
});
var pButton = new ui.Button(pNode);
var pLabel = new ui.Label(pNode);
var pSlider = new ui.Slider(pNode);
var pCheckbox = new ui.Checkbox(pNode, {
    text: "on"
});
var pCheckboxList = new ui.CheckboxList(pNode);
for(var i = 0; i < 5; ++i) {
    new ui.Checkbox(pCheckboxList, {
        text: "ch " + i,
        name: "checkbox-item-" + i
    });
}
(((pButton).$element).html(("Button")));
(pLabel.$text.html(("Label") + (pLabel._sPostfix || "")));
test("ui basics", /** @inline */function () {
    shouldBeNotNull("UI creation");
    shouldBeNotNull("HTML node creation");
    shouldBeTrue("button parent is div node");
    shouldBeTrue("layout for node");
    ok(pUI);
    ok(pNode);
    pNode.$element.css({
        width: 250,
        minHeight: 100,
        background: "#ccc"
    });
    pNode.render();
    ok((pButton._pParent) === pNode);
    ok(pNode.setLayout("vertical"));
    console.log(pNode.toString(true));
});
