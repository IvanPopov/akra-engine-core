provide akra.system;

float2 screenTextureRatio : INPUT_TEXTURE_RATIO;
float2 aspectRatio : SCREEN_ASPECT_RATIO = float2(1.,1.);
texture tex0 : INPUT_TEXTURE;
//texture tex1 : DEFERRED_TEXTURE;
texture tex2 : DEPTH_TEXTURE;

sampler screenSampler : INPUT_SAMPLER = sampler_state
{
	Texture = <tex0>;
};

//sampler sunshaftInfoSampler : SUNSHAFT_SAMPLER = sampler_state
//{
//	Texture = <tex1>;
//};

sampler depthSampler : DEPTH_TEXTURE = sampler_state
{
	Texture = <tex2>;
};

struct VS_OUT{
	float4 position : POSITION;
	float2 screenPosition : SCREEN_POSITION;
	float2 textureCoords : TEXCOORD0;
};

VS_OUT vs_sunshaft_shading(float2 pos: POSITION){
	VS_OUT Out;

	Out.position = float4(pos,0.,1.);
	Out.screenPosition = pos;
	//Out.textureCoords = float2(texCoodrX,texCoordY);
	Out.textureCoords = (pos + 1.)/2. * screenTextureRatio;
	
	return Out;
};

int samples : SUNSHAFT_SAMPLES = 120;
int skyDomeId : SUNSHAFT_SKYDOME_ID = 0;
float sunshaftAngle : SUNSHAFT_ANGLE = 1.;
float sunshaftIntensity : SUNSHAFT_INTENSITY = 0.3;
float2 sunshaftPos : SUNSHAFT_POSITION = float2(0.5,0.5);
float3 sunshaftColor : SUNSHAFT_COLOR = float3(1.);
float sunshaftDepth : SUNSHAFT_DEPTH = 0.;
float sunshaftSunSize : SUNSHAFT_SUN_SIZE = 0.1;
float sunshaftDecay : SUNSHAFT_DECAY = 0.25;
float sunshaftSharpness : SUNSHAFT_SHARPNESS = 1.;
float sunshaftExposure: SUNSHAFT_EXPOSURE = .9;

float4 fs_sunshaft_shading(VS_OUT IN) : COLOR {

	if(sunshaftAngle < 0.) {
		return tex2D(screenSampler, IN.textureCoords);
	}

	float baseDepth = tex2D(depthSampler, IN.textureCoords).r;

	float2 sunShaftPosInTexture = sunshaftPos * screenTextureRatio;
	float2 fromSunToPixel = (IN.textureCoords - sunShaftPosInTexture) * aspectRatio;

	float fromSunToPixelDist = length(fromSunToPixel) / screenTextureRatio.y;

	float4 baseImage = tex2D(screenSampler, IN.textureCoords);
	
	// if(fromSunToPixelDist<sunshaftSunSize && baseDepth >= sunshaftDepth) {
	// 	float balance = pow(fromSunToPixelDist/sunshaftSunSize,3.);
	//	baseImage = (1.-balance)*float4(sunshaftColor,1.) + baseImage*balance;
	//	return baseImage;
	// }

	int samp = int(max(min(float(samples), 2000.),3.));
	float sunshaftStep = 1. / float(samp);

	float3 sunshaft_result = float3(0.);
	float j = 0.;

	for(int i = 0;i < 500; i++) {
		if(i > samp) {
			break;
		}
		else {
			float approach = float(i) * sunshaftStep;
			float2 tPos = sunShaftPosInTexture + (IN.textureCoords - sunShaftPosInTexture) * approach; //*pow(float(i)*sunshaftStep,sunshaftDecay);
			//float4 deferredData = tex2D(sunshaftInfoSampler,tPos);
			
			if (tex2D(depthSampler, tPos).r >= sunshaftDepth + (baseDepth - sunshaftDepth) * approach) {
				j++;
			}
		}
	}

	sunshaft_result = sunshaftColor * j * sunshaftStep * sunshaftAngle * sunshaftIntensity * exp(-fromSunToPixelDist * sunshaftDecay) * pow(j * sunshaftStep, sunshaftSharpness);
	// sunshaft_result = sunshaftColor*j*sunshaftStep*sunshaftAngle*sunshaftIntensity * exp(-length(fromSunToPixel)*sunshaftDecay);
	// baseImage += float4(0.6);
	return float4((baseImage.xyz + sunshaft_result) * sunshaftExposure, 1.);
};	

technique sunshaft : POST_EFFECT {
	pass pass1{
		VertexShader = compile vs_sunshaft_shading();
		PixelShader = compile fs_sunshaft_shading();
	};
};


