var grammarSource = "S : Program\nProgram : --AN\nProgram : Decls\n\nDecls : Decl --NN\nDecls : Decls Decl\nDecl : \';\'\nDecl : TypeDecl\nDecl : VariableDecl\nDecl : VarStructDecl\nDecl : FunctionDecl\nDecl : TechniqueDecl\nDecl : UseDecl\nDecl : ImportDecl\nDecl : ProvideDecl\nDecl : IncludeDecl\n\nIncludeDecl : T_KW_INCLUDE String --AN --F includeCode\n\nImportDecl : T_KW_IMPORT ComplexNameOpt ShiftOpt ExtOpt\nShiftOpt :\nShiftOpt : T_KW_SHIFT Uint\nShiftOpt : T_KW_SHIFT \'-\' Uint\n\nExtOpt :\nExtOpt : T_KW_TO T_KW_ALL_PASSES\n\nProvideDecl : T_KW_PROVIDE ComplexNameOpt\nProvideDecl : T_KW_PROVIDE ComplexNameOpt T_KW_AS ComplexNameOpt\n\nUseDecl : T_KW_USE Mode\nMode : T_KW_STRICT\n\nUsages : Usage --NN\nUsages : Usages Usage\nUsage : T_KW_STATIC --AN\nUsage : T_KW_UNIFORM\nUsage : T_KW_EXTERN\nUsage : T_KW_VOLATILE\nUsage : T_KW_INLINE\nUsage : T_KW_SHARED\nUsage : T_KW_GLOBAL\nUsage : T_KW_FOREIGN\nUsage : ConstUsage\n\nConstUsages : ConstUsage --NN\nConstUsages : ConstUsages ConstUsage\nConstUsage : T_KW_CONST\nConstUsage : T_KW_ROW_MAJOR\nConstUsage : T_KW_COLUMN_MAJOR\n\nUsageType : Type --AN\nUsageType : Usages Type\n\nUsageStructDecl : StructDecl --AN\nUsageStructDecl : Usages StructDecl\n\nTypeDecl : T_KW_TYPEDEF ConstType TypeDefs \';\' --AN\nTypeDecl : T_KW_TYPEDEF ConstStructDecl TypeDefs \';\'\nTypeDecl : StructDecl --F addType \';\'\nTypeDefs : VariableDim\nTypeDefs : VariableDim \',\' TypeDefs\n\nType : BaseType --AN\nType : Struct\nType : TypeId\nType : T_KW_STRUCT TypeId\n\nConstType : Type --AN\nConstType : ConstUsages Type\nConstTypeDim : ConstType --NN\nConstTypeDim : ConstTypeDim \'[\' ConstantExpr \']\'\n\nBaseType : T_KW_VOID --AN\nBaseType : ScalarType\nBaseType : VectorType\nBaseType : MatrixType\nBaseType : ObjectType\n\nScalarType : T_KW_BOOL --AN\nScalarType : T_KW_INT\nScalarType : T_KW_HALF\nScalarType : T_KW_FLOAT\nScalarType : T_KW_DOUBLE\n\nVectorType : T_KW_VECTOR --AN\nVectorType : T_KW_VECTOR \'<\' ScalarType \',\' AddExpr \'>\'\n\nMatrixType : T_KW_MATRIX --AN\nMatrixType : T_KW_MATRIX \'<\' ScalarType \',\' ConstantExpr \',\' AddExpr \'>\'\n\nObjectType : T_KW_STRING --AN\nObjectType : T_KW_TEXTURE\nObjectType : T_KW_TEXTURE1D\nObjectType : T_KW_TEXTURE2D\nObjectType : T_KW_TEXTURE3D\nObjectType : T_KW_TEXTURECUBE\nObjectType : T_KW_SAMPLER\nObjectType : T_KW_SAMPLER1D\nObjectType : T_KW_SAMPLER2D\nObjectType : T_KW_SAMPLER3D\nObjectType : T_KW_SAMPLERCUBE\nObjectType : T_KW_PIXELSHADER\nObjectType : T_KW_VERTEXSHADER\nObjectType : T_KW_PIXELFRAGMENT\nObjectType : T_KW_VERTEXFRAGMENT\nObjectType : T_KW_STATEBLOCK\nObjectType : T_KW_VIDEOBUFFER\nObjectType : T_KW_PTR\n\nStruct : T_KW_STRUCT StructBegin StructEnd --AN\nStruct : T_KW_STRUCT StructBegin StructDecls StructEnd\nStructDecl : T_KW_STRUCT Id StructBegin StructEnd --AN\nStructDecl : T_KW_STRUCT Id StructBegin UseDecl StructDecls StructEnd\nStructDecl : T_KW_STRUCT Id StructBegin StructDecls StructEnd\n\nConstStructDecl : StructDecl\nConstStructDecl : ConstUsages StructDecl\n\nStructBegin : \'{\'\nStructDecls : VariableDecl --NN\nStructDecls : VariableDecl StructDecls\nStructEnd : \'}\'\n\nSemantic : \':\' Id --AN\nSemantic : \':\' T_KW_REGISTER \'(\' Register \')\'\nSemantics : Semantic\nSemantics : Semantics Semantic\nSemanticsOpt :\nSemanticsOpt : Semantics\n\nRegister : Id\nRegister : Target \',\' Id\n\nAnnotation : AnnotationBegin AnnotationEnd  --AN\nAnnotation : AnnotationBegin AnnotationDecls AnnotationEnd\nAnnotationOpt :\nAnnotationOpt : Annotation\nAnnotationBegin : \'<\'\nAnnotationDecls : VariableDecl\nAnnotationDecls : VariableDecl AnnotationDecls\nAnnotationEnd : \'>\'\n\nInitializer : \'=\' AssignmentExpr --AN\nInitializer : \'=\' \'{\' InitExprs \'}\'\nInitializer : \'=\' \'{\' InitExprs \',\' \'}\'\nInitializerOpt :\nInitializerOpt : Initializer\n\nAddressOpt :\nAddressOpt : FromExpr\n\nVariableDecl : UsageType Variables \';\' --AN\nVarStructDecl : UsageStructDecl Variables \';\' --AN\nVariables : Variable --NN\nVariables : Variables \',\' Variable\nVariable : VariableDim SemanticsOpt AnnotationOpt InitializerOpt --AN\nVariableDim : Id --AN\nVariableDim : VariableDim \'[\' ConstantExpr \']\'\nVariableDim : VariableDim \'[\' \']\' AddressOpt\n\nFunctionDecl : FunctionDef \';\' --AN\nFunctionDecl : FunctionDef AnnotationOpt StmtBlock\nFunctionDef : UsageType Id ParamList SemanticsOpt\n\nParamList : ParamListBegin ParamListEnd\nParamList : ParamListBegin T_KW_VOID ParamListEnd\nParamList : ParamListBegin ParameterDecls ParamListEnd\nParamListBegin : \'(\'\nParamListEnd : \')\'\n\nParameterDecls : ParameterDecl --NN\nParameterDecls : ParameterDecls \',\' ParameterDecl\nParameterDecl : ParamUsageType Variable\n\nParamUsageType : Type --AN\nParamUsageType : ParamUsages Type\n\nParamUsages : ParamUsage --NN\nParamUsages : ParamUsages ParamUsage\nParamUsage : T_KW_IN --AN\nParamUsage : T_KW_OUT\nParamUsage : T_KW_INOUT\nParamUsage : T_KW_UNIFORM\nParamUsage : ConstUsage\n\n\nTechniqueDecl : T_KW_TECHNIQUE ComplexNameOpt SemanticsOpt AnnotationOpt TechniqueBody --AN\nTechniqueBody : TechniqueBegin TechniqueEnd  --AN\nTechniqueBody : TechniqueBegin PassDecls TechniqueEnd\nTechniqueBegin : \'{\'\nTechniqueEnd : \'}\'\n\nComplexNameOpt : ComplexName --AN\nComplexName : Id --NN\nComplexName : ComplexName \'.\' Id\n\nPassDecls : PassDecl --NN\nPassDecls : PassDecls PassDecl\nPassDecl : T_KW_PASS IdOpt AnnotationOpt PassStateBlock --AN\nPassDecl : ImportDecl\nPassDecl : \';\'\n\nPassStateBlock : \'{\' \'}\' --AN\nPassStateBlock : \'{\' PassStates \'}\'\nPassStates : PassState --NN\nPassStates : PassStates PassState\n\nPassState : Id StateIndex StateExprBegin StateExpr StateExprEnd --AN\nPassState : StateIf\nPassState : StateSwitch\n\nStateIf : T_KW_IF \'(\' Expr \')\' PassStateBlock\nStateIf : T_KW_IF \'(\' Expr \')\' PassStateBlock T_KW_ELSE PassStateBlock\nStateIf : T_KW_IF \'(\' Expr \')\' PassStateBlock T_KW_ELSE StateIf\nStateSwitch : T_KW_SWITCH \'(\' Expr \')\' CaseBlock\n\nCaseBlock : \'{\' CaseStates DefaultState \'}\'\nCaseStates : CaseState --NN\nCaseStates : CaseStates CaseState\n\nCaseState : T_KW_CASE AssignmentExpr \':\' PassStates BreakOpt\nDefaultState : T_KW_DEFAULT \':\' PassStates BreakOpt\n\nBreakOpt :  --NN\nBreakOpt : \';\'\nBreakOpt : T_KW_BREAK \';\'\n\nStateBlock : StateBlockBegin StateBlockEnd --AN\nStateBlock : StateBlockBegin States StateBlockEnd\nStateBlockBegin : \'{\'\nStateBlockEnd : \'}\'\n\nStates : State --NN\nStates : States State\nState : Id StateIndex StateExprBegin StateExpr StateExprEnd --AN\n\nStateIndex :\nStateIndex : \'[\' Uint \']\'\nStateExprBegin : \'=\'\nStateExprEnd : \';\'\n\nStmtBlock : StmtBlockBegin StmtBlockEnd --AN\nStmtBlock : StmtBlockBegin Stmts StmtBlockEnd\nStmtBlockBegin : \'{\'\nStmtBlockEnd : \'}\'\nStmts : Stmt --NN\nStmts : Stmts Stmt\nSimpleStmt : \';\' --AN\nSimpleStmt : Expr \';\'\nSimpleStmt : T_KW_RETURN \';\'\nSimpleStmt : T_KW_RETURN Expr \';\'\nSimpleStmt : T_KW_DO Stmt T_KW_WHILE \'(\' Expr \')\' \';\'\nSimpleStmt : StmtBlock\nSimpleStmt : T_KW_DISCARD \';\'\nSimpleStmt : TypeDecl\nSimpleStmt : VariableDecl\nSimpleStmt : VarStructDecl\nSimpleStmt : T_KW_BREAK \';\'\nSimpleStmt : T_KW_CONTINUE \';\'\n\nNonIfStmt : SimpleStmt --AN\nNonIfStmt : T_KW_WHILE \'(\' Expr \')\' NonIfStmt\nNonIfStmt : For \'(\' ForInit ForCond ForStep \')\' NonIfStmt\n\nStmt : SimpleStmt --AN\nStmt : UseDecl\nStmt : T_KW_WHILE \'(\' Expr \')\' Stmt\nStmt : For \'(\' ForInit ForCond ForStep \')\' Stmt\nStmt : T_KW_IF \'(\' Expr \')\' Stmt\nStmt : T_KW_IF \'(\' Expr \')\' NonIfStmt T_KW_ELSE Stmt\n\n\nFor : T_KW_FOR\nForInit : \';\' --AN\nForInit : Expr \';\'\nForInit : VariableDecl\nForCond : \';\' --AN\nForCond : Expr \';\'\nForStep : --AN\nForStep : Expr\n\nDwordExpr : Dword\nDwordExpr : Dword \'|\' DwordExpr\n\nStateExpr : DwordExpr --AN\nStateExpr : ComplexExpr\nStateExpr : \'{\' InitExprs \'}\'\nStateExpr : \'{\' InitExprs \',\' \'}\'\nStateExpr : \'<\' RelationalExpr \'>\'\n\nSimpleExpr : T_KW_TRUE\nSimpleExpr : T_KW_FALSE\nSimpleExpr : Uint\nSimpleExpr : Float\nSimpleExpr : String\nSimpleExpr : NonTypeId\n\nComplexExpr : \'(\' Expr \')\'\nComplexExpr : TypeId \'(\' ArgumentsOpt \')\'\nComplexExpr : BaseType \'(\' ArgumentsOpt \')\'\nComplexExpr : NonTypeId \'(\' ArgumentsOpt \')\'\nComplexExpr : ObjectExpr\n\nObjectExpr : T_KW_COMPILE NonTypeId \'(\' ArgumentsOpt \')\'\nObjectExpr : T_KW_SAMPLER_STATE StateBlock\nObjectExpr : T_KW_COMPILE_FRAGMENT Target NonTypeId \'(\' ArgumentsOpt \')\'\nObjectExpr : T_KW_STATEBLOCK_STATE StateBlock\n\nPrimaryExpr : ComplexExpr\nPrimaryExpr : SimpleExpr\nPrimaryExpr : \'@\' PrimaryExpr\nPostfixExpr : PrimaryExpr\nPostfixExpr : PostfixExpr \'[\' Expr \']\'\nPostfixExpr : PostfixExpr \'.\' Id AddressOpt\nPostfixExpr : PostfixExpr T_OP_INC\nPostfixExpr : PostfixExpr T_OP_DEC\n\nUnaryExpr : PostfixExpr\nUnaryExpr : T_OP_INC UnaryExpr\nUnaryExpr : T_OP_DEC UnaryExpr\nUnaryExpr : \'!\' CastExpr\nUnaryExpr : \'-\' CastExpr\nUnaryExpr : \'+\' CastExpr\n\nCastExpr : UnaryExpr\nCastExpr : \'(\' ConstTypeDim \')\' CastExpr\n\nMulExpr : CastExpr\nMulExpr : MulExpr \'*\' CastExpr\nMulExpr : MulExpr \'/\' CastExpr\nMulExpr : MulExpr \'%\' CastExpr\n\nAddExpr : MulExpr\nAddExpr : AddExpr \'+\' MulExpr\nAddExpr : AddExpr \'-\' MulExpr\n\nRelationalExpr : AddExpr\nRelationalExpr : RelationalExpr \'<\' AddExpr\nRelationalExpr : RelationalExpr \'>\' AddExpr\nRelationalExpr : RelationalExpr T_OP_LE AddExpr\nRelationalExpr : RelationalExpr T_OP_GE AddExpr\n\nEqualityExpr : RelationalExpr\nEqualityExpr : EqualityExpr T_OP_EQ RelationalExpr\nEqualityExpr : EqualityExpr T_OP_NE RelationalExpr\n\nAndExpr : EqualityExpr\nAndExpr : AndExpr T_OP_AND EqualityExpr\nOrExpr : AndExpr\nOrExpr : OrExpr T_OP_OR AndExpr\nConditionalExpr : OrExpr\nConditionalExpr : OrExpr \'?\' AssignmentExpr \':\' ConditionalExpr\n\nAssignmentExpr : ConditionalExpr\nAssignmentExpr : MemExpr\nAssignmentExpr : CastExpr \'=\' AssignmentExpr\nAssignmentExpr : CastExpr T_OP_ME AssignmentExpr\nAssignmentExpr : CastExpr T_OP_DE AssignmentExpr\nAssignmentExpr : CastExpr T_OP_RE AssignmentExpr\nAssignmentExpr : CastExpr T_OP_AE AssignmentExpr\nAssignmentExpr : CastExpr T_OP_SE AssignmentExpr\n\nMemExpr : T_KW_MEMOF PostfixExpr\nFromExpr : \'(\' MemExpr \')\'\nFromExpr : \'(\' NonTypeId \')\'\n\nArguments : AssignmentExpr --NN\nArguments : Arguments \',\' AssignmentExpr\nArgumentsOpt : --NN\nArgumentsOpt : Arguments\n\nInitExpr : AssignmentExpr --AN\nInitExpr : \'{\' InitExprs \'}\'\nInitExpr : \'{\' InitExprs \',\' \'}\'\nInitExprs : InitExpr --NN\nInitExprs : InitExprs \',\' InitExpr\n\nConstantExpr : AssignmentExpr\nExpr : AssignmentExpr\nExpr : Expr \',\' AssignmentExpr\n\nDword : Uint\nDword : \'-\' Uint\nDword : Float\nDword : \'-\' Float\nDword : DwordId\nDword : Uint DwordId\nDwordId : Id\nDwordId : T_KW_TRUE\nDwordId : T_KW_FALSE\nDwordId : T_KW_TEXTURE\n\nId : TypeId\nId : NonTypeId\nIdOpt :\nIdOpt : Id\n\nTarget : NonTypeId\n\nUint : T_UINT\nUint : T_INT32\nUint : T_UINT32\n\nFloat : T_FLOAT\nFloat : T_FLOAT16\nFloat : T_FLOAT32\nFloat : T_FLOAT64\n\nStrings : String\nStrings : Strings String\nString : T_STRING\n\nTypeId : T_TYPE_ID\nNonTypeId : T_NON_TYPE_ID\n\nAsmDecl : T_KW_DECL \'{\'\nAsm : T_KW_ASM \'{\'\nAsmFragment : T_KW_ASM_FRAGMENT \'{\'\n\n--LEXER--\n\nT_KW_STATIC : \"static\"\nT_KW_UNIFORM : \"uniform\"\nT_KW_EXTERN : \"extern\"\nT_KW_VOLATILE : \"volatile\"\nT_KW_INLINE : \"inline\"\nT_KW_SHARED : \"shared\"\nT_KW_GLOBAL : \"global\"\nT_KW_FOREIGN : \"foreign\"\nT_KW_CONST : \"const\"\nT_KW_ROW_MAJOR : \"row_major\"\nT_KW_COLUMN_MAJOR : \"column_major\"\nT_KW_TYPEDEF : \"typedef\"\nT_KW_STRUCT : \"struct\"\nT_KW_VOID : \"void\"\nT_KW_BOOL : \"bool\"\nT_KW_INT : \"int\"\nT_KW_HALF : \"half\"\nT_KW_FLOAT : \"float\"\nT_KW_DOUBLE : \"double\"\nT_KW_VECTOR : \"vector\"\nT_KW_MATRIX : \"matrix\"\nT_KW_STRING : \"string\"\nT_KW_TEXTURE : \"texture\"\nT_KW_TEXTURE1D : \"texture1D\"\nT_KW_TEXTURE2D : \"texture2D\"\nT_KW_TEXTURE3D : \"texture3D\"\nT_KW_TEXTURECUBE : \"texturecube\"\nT_KW_SAMPLER : \"sampler\"\nT_KW_SAMPLER1D : \"sampler1D\"\nT_KW_SAMPLER2D : \"sampler2D\"\nT_KW_SAMPLER3D : \"sampler3D\"\nT_KW_SAMPLERCUBE : \"samplerCUBE\"\nT_KW_PIXELSHADER : \"pixelshader\"\nT_KW_VERTEXSHADER : \"vertexshader\"\nT_KW_PIXELFRAGMENT : \"pixelfragment\"\nT_KW_VERTEXFRAGMENT : \"vertexfragment\"\nT_KW_STATEBLOCK : \"stateblock\"\nT_KW_REGISTER : \"register\"\nT_KW_IN : \"in\"\nT_KW_OUT : \"out\"\nT_KW_INOUT : \"inout\"\nT_KW_TECHNIQUE : \"technique\"\nT_KW_PASS : \"pass\"\nT_KW_RETURN : \"return\"\nT_KW_DO : \"do\"\nT_KW_DISCARD : \"discard\"\nT_KW_WHILE : \"while\"\nT_KW_IF : \"if\"\nT_KW_ELSE : \"else\"\nT_KW_FOR : \"for\"\nT_KW_TRUE : \"true\"\nT_KW_FALSE : \"false\"\nT_KW_COMPILE : \"compile\"\nT_KW_SAMPLER_STATE : \"sampler_state\"\nT_KW_COMPILE_FRAGMENT : \"compile_fragment\"\nT_KW_STATEBLOCK_STATE : \"stateblock_state\"\nT_KW_DECL : \"decl\"\nT_KW_ASM : \"asm\"\nT_KW_ASM_FRAGMENT : \"asm_fragment\"\nT_KW_MEMOF : \"memof\"\nT_KW_VIDEOBUFFER : \"video_buffer\"\nT_KW_USE : \"use\"\nT_KW_STRICT : \"strict\"\nT_KW_IMPORT : \"import\"\nT_KW_PROVIDE : \"provide\"\nT_KW_SWITCH : \"switch\"\nT_KW_CASE : \"case\"\nT_KW_DEFAULT : \"default\"\nT_KW_BREAK : \"break\"\nT_KW_CONTINUE : \"continue\"\nT_KW_AS : \"as\"\nT_KW_PTR : \"ptr\"\nT_KW_SHIFT : \"shift\"\nT_KW_INCLUDE : \"include\"\nT_KW_TO : \"to\"\nT_KW_ALL_PASSES : \"ALL_PASSES\"\nT_OP_INC : \"++\"\nT_OP_DEC : \"--\"\nT_OP_LE : \">=\"\nT_OP_GE : \"<=\"\nT_OP_EQ : \"==\"\nT_OP_NE : \"!=\"\nT_OP_AND : \"&&\"\nT_OP_OR : \"||\"\nT_OP_ME : \"*=\"\nT_OP_DE : \"/=\"\nT_OP_RE : \"%=\"\nT_OP_AE : \"+=\"\nT_OP_SE : \"-=\"";
var testParseFileSource = "provide akra.system;\n\ntexture tex0 : INPUT_TEXTURE;\n\nsampler screenSampler : INPUT_SAMPLER = sampler_state\n{\n\tTexture = <tex0>;\n};\n\nstruct VS_OUT{\n\tfloat4 position : POSITION;\n\tfloat2 screenPosition : SCREEN_POSITION;\n\tfloat2 textureCoords : TEXCOORD0;\n};;\n\n\nfloat2 screenTextureRatio : INPUT_TEXTURE_RATIO;\n\nVS_OUT vs_fxaa_shading(float2 pos: POSITION){\n\tVS_OUT Out;\n\n\tOut.position = float4(pos,0.,1.);\n    Out.screenPosition = pos;\n\t//Out.textureCoords = float2(texCoodrX,texCoordY);\n    Out.textureCoords = (pos + 1.)/2. * screenTextureRatio;\n\t\n\treturn Out;\n};\n\nfloat2 screenSize : INPUT_TEXTURE_SIZE;\nfloat FXAA_SPAN_MAX = 4.0;\nfloat FXAA_REDUCE_MUL = 1.0/8.0;\nfloat FXAA_REDUCE_MIN = 1.0/128.0;\n\nfloat4 fs_fxaa_shading(VS_OUT IN) : COLOR{\n\n\tfloat4 color;\n\tcolor.w = 1.0;\n\n\tfloat2 texCoords = IN.textureCoords;\n\tfloat2 invScreenSize = float2(1./screenSize.x, 1./screenSize.y);\n\t\n//\tfloat FXAA_SPAN_MAX = 4.0;\n//\tfloat FXAA_REDUCE_MUL = 1.0/8.0;\n//\tfloat FXAA_REDUCE_MIN = 1.0/128.0;\n\n\tfloat3 rgbNW=tex2D(screenSampler,texCoords+(float2(-1.0,-1.0) * invScreenSize)).xyz;\n\tfloat3 rgbNE=tex2D(screenSampler,texCoords+(float2(1.0,-1.0) * invScreenSize)).xyz;\n\tfloat3 rgbSW=tex2D(screenSampler,texCoords+(float2(-1.0,1.0) * invScreenSize)).xyz;\n\tfloat3 rgbSE=tex2D(screenSampler,texCoords+(float2(1.0,1.0) * invScreenSize)).xyz;\n\tfloat3 rgbM=tex2D(screenSampler,texCoords).xyz;\n\n\tcolor.w = tex2D(screenSampler,texCoords).w;\n\n\tfloat3 luma=float3(0.299, 0.587, 0.114);\n\tfloat lumaNW = dot(rgbNW, luma);\n\tfloat lumaNE = dot(rgbNE, luma);\n\tfloat lumaSW = dot(rgbSW, luma);\n\tfloat lumaSE = dot(rgbSE, luma);\n\tfloat lumaM  = dot(rgbM,  luma);\n\t\n\tfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n\tfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\t\n\tfloat2 dir;\n\tdir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n\tdir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\t\n\tfloat dirReduce = max(\n\t\t(lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),\n\t\tFXAA_REDUCE_MIN);\n\t  \n\tfloat rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);\n\t\n\tdir = min(float2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n\t\t  max(float2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n\t\t  dir * rcpDirMin)) / screenSize;\n\t\t\n\tfloat3 rgbA = (1.0/2.0) * (\n\t\ttex2D(screenSampler, texCoords.xy + dir * (1.0/3.0 - 0.5)).xyz +\n\t\ttex2D(screenSampler, texCoords.xy + dir * (2.0/3.0 - 0.5)).xyz);\n\tfloat3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n\t\ttex2D(screenSampler, texCoords.xy + dir * (0.0/3.0 - 0.5)).xyz +\n\t\ttex2D(screenSampler, texCoords.xy + dir * (3.0/3.0 - 0.5)).xyz);\n\tfloat lumaB = dot(rgbB, luma);\n\n\tif((lumaB < lumaMin) || (lumaB > lumaMax)){\n\t\tcolor.xyz=rgbA;\n\t}\n\telse {\n\t\tcolor.xyz=rgbB;\n\t}\n\n\treturn color;\n};\t\n\ntechnique fxaa : POST_EFFECT {\n\tpass applyFXAA{\n\t\t/*\t\t\n\t\tZENABLE = false;\n\t\tBLENDENABLE = TRUE;\n\t\tSRCBLEND = ONE;\n\t\tDESTBLEND = INVSRCALPHA;\n\t\t*/\n\t\tVertexShader = compile vs_fxaa_shading();\n\t\tPixelShader = compile fs_fxaa_shading();\n\t};\n};\n\n\n";