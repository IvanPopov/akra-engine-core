provide akra.system;

struct VS_IN_1{
    float4 pos:POSITION;
    float4 skinnedPosition:SKINNED_POSITION;
};

struct VS_IN_2{
    float4 pos:POSITION;
    float4 norm:NORMAL;
    float4 skinnedNormal:SKINNED_NORMAL;
};

struct VS_OUT{
    float4 pos:POSITION;
    float4 data: DATA;
};

///////////////////////////

float2 framebufferSize: FRAMEBUFFER_SIZE;

float4x4 bind_matrix:BIND_SHAPE_MATRIX;

VS_OUT vs_mesh_vertices_skinned(VS_IN_1 IN) {
    VS_OUT Out;

    float4 pos = float4(IN.pos.xyz, 1.);
    float4 vertex;

    float2 meta_data[](memof IN.pos);

    float2 bone_inf[](memof IN.pos);
    float4x4 bone_matrix[](memof IN.pos);
    float weight;

    float4x4 result_mat = float4x4(0.0);

    @(meta_data) = IN.pos.w;

    float number_matrix = meta_data.x;
    float bone_inf_ptr = meta_data.y;


    float i = 0.;
    while(number_matrix >= i + 1.) {
        //get data about matrix and weight
        @bone_inf = bone_inf_ptr + i * 2.;

        @bone_matrix = bone_inf.x;
        weight = bone_inf.y;

        result_mat += bone_matrix * weight;

        i ++;
    }

    result_mat = result_mat * bind_matrix;

    Out.data = result_mat * pos;

    float fSPIndex = @IN.skinnedPosition;

    float2 position = float2((mod(fSPIndex,framebufferSize.x) + 0.5)/framebufferSize.x, 
                             (floor(fSPIndex/framebufferSize.x) + 0.5)/framebufferSize.y)

    Out.pos = float4(position * 2. - 1., 0., 1.);

    return Out;

};

VS_OUT vs_mesh_normal_skinned(VS_IN_2 IN) {
    VS_OUT Out;

    float4 pos = float4(IN.pos.xyz, 1.);

    float2 meta_data[](memof IN.pos);

    float2 bone_inf[](memof IN.pos);
    float4x4 bone_matrix[](memof IN.pos);
    float weight;

    float4x4 result_mat = float4x4(0.0);

    @(meta_data) = IN.pos.w;

    float number_matrix = meta_data.x;
    float bone_inf_ptr = meta_data.y;


    float i = 0.;
    while(number_matrix >= i + 1.) {
        //get data about matrix and weight
        @bone_inf = bone_inf_ptr + i * 2.;

        @bone_matrix = bone_inf.x;
        weight = bone_inf.y;

        result_mat += bone_matrix * weight;

        i ++;
    }

    result_mat = result_mat * bind_matrix;

    Out.data = result_mat * float4(IN.norm.xyz, 0.);
    Out.data.w = IN.norm.w;

    float fSNIndex = @IN.skinnedNormal;

    float2 position = float2((mod(fSNIndex,framebufferSize.x) + 0.5)/framebufferSize.x, 
                             (floor(fSNIndex/framebufferSize.x) + 0.5)/framebufferSize.y)

    Out.pos = float4(position * 2. - 1., 0., 1.);

    return Out;
}

float4 fs_write_skinned_data(VS_OUT IN) : COLOR{
    return VS_OUT.data;
}


technique mesh_skinning_position{
    pass p0 {
        VertexShader = compile vs_mesh_vertices_skinned();
        PixelShader = compile fs_write_skinned_data();
    }
}

technique mesh_skinning_normal{
    pass p0 {
        VertexShader = compile vs_mesh_normal_skinned();
        PixelShader = compile fs_write_skinned_data();
    }
}
