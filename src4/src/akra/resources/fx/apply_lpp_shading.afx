provide akra.system;

struct base_material{
    float4 diffuse:DIFFUSE;
    float4 ambient:AMBIENT;
    float4 emissive:EMISSIVE;
    float4 specular:SPECULAR;
    float shininess:SHININESS;
};

struct pixel_data{
    float4 diffuse  : DIFFUSE;
    float4 ambient  : AMBIENT;
    float4 specular : SPECULAR;
    float3 position : POSITION; //in camera space
    float3 normal   : NORMAL;
    float shininess : SHININESS;
    float  depth    : DEPTH;
    int    id       : RENDER_OBJECT_ID;
};

shared float3 Normal;
shared base_material Fragment_material;
shared pixel_data pixelData;

texture tex0:LPP_LIGHT_BUFFER_A;
texture tex1:LPP_LIGHT_BUFFER_B;

sampler sampler_lpp_dif_spec:LPP_LIGHT_SAMPLER_A  = sampler_state
{
    Texture = <tex0>;
    MinFilter = NEAREST;
	MagFilter = NEAREST;
};

sampler sampler_lpp_amb_shad:LPP_LIGHT_SAMPLER_B  = sampler_state
{
    Texture = <tex1>;
    MinFilter = NEAREST;
	MagFilter = NEAREST;
};

float2 screenTextureRatio : SCREEN_TEXTURE_RATIO;
float2 screenSize: SCREEN_SIZE;

foreign bool isUsedBlinnPhong = false;
foreign bool isUsedPhong = true;
foreign bool isUsedPBSSimple = false;

float4 fs_apply_lpp_shading(float3 vert: VERTEX) : COLOR {
	float2 texcoords = fragCoord.xy / screenSize * screenTextureRatio;
	float4 lightsDataA = tex2D(sampler_lpp_dif_spec, texcoords);
	float4 lightsDataB = tex2D(sampler_lpp_amb_shad, texcoords);

	float4 color = Fragment_material.emissive;

    if(isUsedPBSSimple){
        float3 lightDif = lightsDataA.xyz;
        float k1 = lightsDataA.w;
        float k1_k2 = lightsDataB.x;

        float3 F0 = Fragment_material.specular.xyz;
        float3 specular = F0 * k1 + ( float3(1.)-F0 ) * k1_k2;
        float visibilityFunction = 1.;

        lightDif *= (float3(1.) - specular);
        color += Fragment_material.diffuse * float4(lightDif + specular, 1.) * visibilityFunction;
        
        pixelData.position = vert;
        pixelData.normal = Normal;
        pixelData.shininess = Fragment_material.shininess;
        pixelData.specular = Fragment_material.specular;
    }
    else {
    	if(isUsedPhong){
    		color += Fragment_material.ambient * float4(lightsDataB.xyz, 1.);
    	}
    	
    	color += Fragment_material.diffuse * float4(lightsDataA.xyz, 1.);
    	color += Fragment_material.specular * float4(lightsDataA.www, 1.);
    }

	return float4(color.xyz, 1.);
}

technique apply_lpp_shading{
	pass p1 {
		PixelShader = compile fs_apply_lpp_shading();
	}
}