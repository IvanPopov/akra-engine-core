provide akra.system;

struct VS_OUT{
	float4 position : POSITION;
	float2 textureCoords : TEXCOORD0;
};

float2 screenTextureRatio : SCREEN_TEXTURE_RATIO;

struct VS_IN{
	float2 position : POSITION;
};

VS_OUT vs_compose(VS_IN IN){
	VS_OUT Out;

	Out.position = float4(IN.position,0.,1.);
	Out.textureCoords = (IN.position + 1.)/2. * screenTextureRatio;
	
	return Out;
};


texture tex0: TRANSPARENT_TEXTURE;
sampler sampler0 = sampler_state {
	Texture = <tex0>;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
};

float4 fs_compose(float2 textureCoords: TEXCOORD0): COLOR {
	return tex2D(sampler0, textureCoords);
}

technique applyTransparency {
	pass {
		BLENDEQUATIONSEPARATE = {FUNCADD, FUNCADD};
		BLENDFUNCSEPARATE = {SRCALPHA, INVSRCALPHA, SRCALPHA, INVSRCALPHA};

		BLENDENABLE = TRUE;
		ZWRITEENABLE = FALSE;
		
		VertexShader = compile vs_compose();
		PixelShader = compile fs_compose();
	}
}