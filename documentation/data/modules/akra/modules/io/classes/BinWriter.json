{ "location" : "akra.io",
"variables" : { "protected" : { "_pArrData" : { "location" : "akra.io.BinWriter",
"type" : "Uint8Array"},
"_iCountData" : { "location" : "akra.io.BinWriter",
"type" : "int"}}},
"getters" : { "byteLength" : { "type" : "uint",
"isInline" : true,
"location" : "akra.io.BinWriter"}},
"functions" : { "string" : { "comments" : [ [ "/**",
"* @property string(str)",
"* Запись строки. Перед строкой записывается длинна строки в тип uint32. Если",
"* передано null или undefined то длинна строки записывается как 0xffffffff.",
"* Это сделано для того что при дальнейшем считывании такая строка будет",
"* возвращена как null.",
"* @memberof BinWriter",
"* @tparam String str строка. Все не строковые типы преобразуются к строке.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "str",
"isOptional" : false,
"type" : "string"} ],
"type" : "void",
"isInline" : false},
"uintX" : { "comments" : [ [ "/**",
"* @property uintX(iValue,
 iX)",
"* Запись числа типа uint(8,
 16,
 32). Если число занимает меньше 4 байт то оно",
"* выравнивается до 4 байт. Если передан null то число принимается равным 0.",
"* Если передано любое другое не числовое значение то выводится ошибка.",
"* @memberof BinWriter",
"* @tparam uint iValue число.",
"* @tparam int iX - 8,
 16,
 32 количество бит.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "iValue",
"isOptional" : false,
"type" : "uint"},
{ "name" : "iX",
"isOptional" : false,
"type" : "uint"} ],
"type" : "void",
"isInline" : false},
"uint8" : { "comments" : [ [ "/**",
"* @property uint8(iValue)",
"* Запись числа типа uint8. Оно выравнивается до 4 байт. Если передан null то",
"* число принимается равным 0. Если передано любое другое не числовое значение",
"* то выводится ошибка.",
"* Сокращенная запись функции uintX(iValue,
 8).",
"* @memberof BinWriter",
"* @tparam uint iValue число.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "iValue",
"isOptional" : false,
"type" : "uint"} ],
"type" : "void",
"isInline" : true},
"uint16" : { "comments" : [ [ "/**",
"* @property uint16(iValue)",
"* Запись числа типа uint16. Оно выравнивается до 4 байт. Если передан null то",
"* число принимается равным 0. Если передано любое другое не числовое значение",
"* то выводится ошибка.",
"* Сокращенная запись функции uintX(iValue,
 16).",
"* @memberof BinWriter",
"* @tparam uint iValue число.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "iValue",
"isOptional" : false,
"type" : "uint"} ],
"type" : "void",
"isInline" : true},
"uint32" : { "comments" : [ [ "/**",
"* @property uint32(iValue)",
"* Запись числа типа uint8. Если передан null то число принимается равным 0.",
"* Если передано любое другое не числовое значение то выводится ошибка.",
"* Сокращенная запись функции uintX(iValue,
 32).",
"* @memberof BinWriter",
"* @tparam uint iValue число.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "iValue",
"isOptional" : false,
"type" : "uint"} ],
"type" : "void",
"isInline" : true},
"bool" : { "comments" : [ [ "/**",
"* @property bool(bValue)",
"* Запись числа типа bool. В зависимости от bValue записывается либо 1 либо ноль.",
"* Если передано любое другое не числовое значение то выводится ошибка.",
"* Сокращенная запись функции uintX(bValue? 1 :  0,
 8).",
"* @memberof BinWriter",
"* @tparam bool bValue число.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "bValue",
"isOptional" : false,
"type" : "bool"} ],
"type" : "void",
"isInline" : true},
"writeArrayElementUintX" : { "comments" : [ [ "/**",
"* @property writeArrayElementUintX(iValue,
 iX)",
"* Запись числа типа uint(8,
 16,
 32). Используется для записи элементов массивов.",
"* В отличии от uintX число не выравнивается до 4 байт,
 а записывается ровно",
"* столько байт сколько передано во втором параметре в функцию. Вторым",
"* параметром передается колчиество бит а не байт. Если передан null то число",
"* принимается равным 0. Если передано любое другое не числовое значение то",
"* выводится ошибка.",
"* @memberof BinWriter",
"* @tparam uint iValue число.",
"* @tparam int iX - 8,
 16,
 32 количество бит.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "iValue",
"isOptional" : false,
"type" : "uint"},
{ "name" : "iX",
"isOptional" : false,
"type" : "uint"} ],
"type" : "void",
"isInline" : false},
"intX" : { "comments" : [ [ "/**",
"* @property intX(iValue,
 iX)",
"* Запись числа типа int(8,
 16,
 32). Если число занимает меньше 4 байт то оно",
"* выравнивается до 4 байт. Если передан null то число принимается равным 0.",
"* Если передано любое другое не числовое значение то выводится ошибка.",
"* @memberof BinWriter",
"* @tparam int iValue число.",
"* @tparam int iX - 8,
 16,
 32 количество бит.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "iValue",
"isOptional" : false,
"type" : "int"},
{ "name" : "iX",
"isOptional" : false,
"type" : "uint"} ],
"type" : "void",
"isInline" : false},
"int8" : { "comments" : [ [ "/**",
"* @property int8(iValue)",
"* Запись числа типа int8. Оно выравнивается до 4 байт. Если передан null то",
"* число принимается равным 0. Если передано любое другое не числовое значение",
"* то выводится ошибка.",
"* Сокращенная запись функции intX(iValue,
 8).",
"* @memberof BinWriter",
"* @tparam uint iValue число.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "iValue",
"isOptional" : false,
"type" : "int"} ],
"type" : "void",
"isInline" : true},
"int16" : { "comments" : [ [ "/**",
"* @property int16(iValue)",
"* Запись числа типа uint16. Оно выравнивается до 4 байт. Если передан null то",
"* число принимается равным 0. Если передано любое другое не числовое значение",
"* то выводится ошибка.",
"* Сокращенная запись функции intX(iValue,
 16).",
"* @memberof BinWriter",
"* @tparam int iValue число.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "iValue",
"isOptional" : false,
"type" : "int"} ],
"type" : "void",
"isInline" : true},
"int32" : { "comments" : [ [ "/**",
"* @property uint32(iValue)",
"* Запись числа типа uint8. Если передан null то число принимается равным 0.",
"* Если передано любое другое не числовое значение то выводится ошибка.",
"* Сокращенная запись функции intX(iValue,
 32).",
"* @memberof BinWriter",
"* @tparam int iValue число.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "iValue",
"isOptional" : false,
"type" : "int"} ],
"type" : "void",
"isInline" : true},
"writeArrayElementIntX" : { "comments" : [ [ "/**",
"* @property writeArrayElementIntX(iValue,
 iX)",
"* Запись числа типа int(8,
 16,
 32). Используется для записи элементов массивов.",
"* В отличии от intX число не выравнивается до 4 байт,
 а записывается ровно",
"* столько байт сколько передано во втором параметре в функцию. Вторым",
"* параметром передается колчиество бит а не байт. Если передан null то число",
"* принимается равным 0. Если передано любое другое не числовое значение то",
"* выводится ошибка.",
"* @memberof BinWriter",
"* @tparam int iValue число.",
"* @tparam int iX - 8,
 16,
 32 количество бит.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "iValue",
"isOptional" : false,
"type" : "int"},
{ "name" : "iX",
"isOptional" : false,
"type" : "uint"} ],
"type" : "void",
"isInline" : false},
"floatX" : { "comments" : [ [ "/**",
"* @property floatX(fValue,
 iX)",
"* Запись числа типа float(32,
 64). выравнивания не происходит т.к. они уже",
"* выравнены до 4. Если передан null то число принимается равным 0.",
"* Если передано любое другое не числовое значение то выводится ошибка.",
"* @memberof BinWriter",
"* @tparam float fValue число.",
"* @tparam int iX - 32,
 64 количество бит.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "fValue",
"isOptional" : false,
"type" : "float"},
{ "name" : "iX",
"isOptional" : false,
"type" : "uint"} ],
"type" : "void",
"isInline" : false},
"float32" : { "comments" : [ [ "/**",
"* @property float32(fValue)",
"* Запись числа типа float32. Если передан null то число принимается равным 0.",
"* Если передано любое другое не числовое значение то выводится ошибка.",
"* Сокращенная запись функции floatX(fValue,
 32).",
"* @memberof BinWriter",
"* @tparam float fValue число.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "fValue",
"isOptional" : false,
"type" : "any"} ],
"type" : "void",
"isInline" : true},
"float64" : { "comments" : [ [ "/**",
"* @property float64(fValue)",
"* Запись числа типа float64. Если передан null то число принимается равным 0.",
"* Если передано любое другое не числовое значение то выводится ошибка.",
"* Сокращенная запись функции floatX(fValue,
 64).",
"* @memberof BinWriter",
"* @tparam float fValue число.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "fValue",
"isOptional" : false,
"type" : "any"} ],
"type" : "void",
"isInline" : true},
"stringArray" : { "comments" : [ [ "/**",
"* @property stringArray(arrString)",
"* Записывает массив строк использую дял каждого элемента функцию this.string",
"* Да начала записи элементов записывает общее количество элементов как число",
"* uint32. Если в качестве параметра функции передано null или undefined",
"* то количество элементов записывается равным 0xffffffff.",
"* @memberof BinWriter",
"* @tparam Array arrString массив строк.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "arrString",
"isOptional" : false,
"type" : "string"} ],
"type" : "void",
"isInline" : false},
"uintXArray" : { "comments" : [ [ "/**",
"* @property uintXArray(arrUint,
 iX)",
"* Записывает массив чисел uint(8,
 16,
 32) использую для каждого элемента функцию",
"*  writeArrayElementUintX. До начала записи элементов записывает общее",
"*  количество элементов как число uint32. Если в качестве параметра функции",
"* передано null или undefined то количество элементов записывается",
"* равным 0xffffffff. Общее количество байт в массиве выравнивается к 4.",
"* Все массивы приводятся к нужному типу Uint(iX)Array.",
"* @memberof BinWriter",
"* @tparam Uint(iX)Array arrUint массив uint(iX).",
"* @tparam int iX размер элемента в битах (8,
 16,
 32).",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "arrUint",
"isOptional" : false,
"type" : "ArrayBufferView"},
{ "name" : "iX",
"isOptional" : false,
"type" : "uint"} ],
"type" : "void",
"isInline" : false},
"uint8Array" : { "comments" : [ [ "/**",
"* @property uint8Array(arrUint)",
"* Запись массива типа Uint8Array. До начала записи элементов записывает общее",
"* количество элементов как число uint32. Если в качестве параметра функции",
"* передано null или undefined то количество элементов записывается",
"* равным 0xffffffff. Общее количество байт в массиве выравнивается до 4.",
"* Сокращенная запись функции uintXArray(arrUint,
 8).",
"* @memberof BinWriter",
"* @tparam Uint8Array arrUint массив uint8.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "arrUint",
"isOptional" : false,
"type" : "Uint8Array"} ],
"type" : "void",
"isInline" : true},
"uint16Array" : { "comments" : [ [ "/**",
"* @property uint16Array(arrUint)",
"* Запись массива типа Uint16Array. До начала записи элементов записывает общее",
"* количество элементов как число uint32. Если в качестве параметра функции",
"* передано null или undefined то количество элементов записывается",
"* равным 0xffffffff. Общее количество байт в массиве выравнивается до 4.",
"* Сокращенная запись функции uintXArray(arrUint,
 16).",
"* @memberof BinWriter",
"* @tparam Uint16Array arrUint массив uint16.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "arrUint",
"isOptional" : false,
"type" : "Uint16Array"} ],
"type" : "void",
"isInline" : true},
"uint32Array" : { "comments" : [ [ "/**",
"* @property uint32Array(arrUint)",
"* Запись массива типа Uint32Array. До начала записи элементов записывает общее",
"* количество элементов как число uint32. Если в качестве параметра функции",
"* передано null или undefined то количество элементов записывается",
"* равным 0xffffffff.",
"* Сокращенная запись функции uintXArray(arrUint,
 32).",
"* @memberof BinWriter",
"* @tparam Uint32Array arrUint массив uint32.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "arrUint",
"isOptional" : false,
"type" : "Uint32Array"} ],
"type" : "void",
"isInline" : true},
"intXArray" : { "comments" : [ [ "/**",
"* @property intXArray(arrInt,
 iX)",
"* Записывает массив чисел int(8,
 16,
 32) использую для каждого элемента функцию",
"*  writeArrayElementIntX. До начала записи элементов записывает общее",
"*  количество элементов как число int32. Если в качестве параметра функции",
"* передано null или undefined то количество элементов записывается",
"* равным 0xffffffff. Общее количество байт в массиве выравнивается к 4.",
"* Все массивы приводятся к нужному типу Int(iX)Array.",
"* @memberof BinWriter",
"* @tparam Int(iX)Array arrUint массив int(iX).",
"* @tparam int iX размер элемента в битах (8,
 16,
 32).",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "arrInt",
"isOptional" : false,
"type" : "ArrayBufferView"},
{ "name" : "iX",
"isOptional" : false,
"type" : "uint"} ],
"type" : "void",
"isInline" : false},
"int8Array" : { "comments" : [ [ "/**",
"* @property int8Array(arrInt)",
"* Запись массива типа Int8Array. До начала записи элементов записывает общее",
"* количество элементов как число uint32. Если в качестве параметра функции",
"* передано null или undefined то количество элементов записывается",
"* равным 0xffffffff. Общее количество байт в массиве выравнивается до 4.",
"* Сокращенная запись функции intXArray(arrInt,
 8).",
"* @memberof BinWriter",
"* @tparam Int8Array arrInt массив int8.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "arrInt",
"isOptional" : false,
"type" : "Int8Array"} ],
"type" : "void",
"isInline" : true},
"int16Array" : { "comments" : [ [ "/**",
"* @property int16Array(arrInt)",
"* Запись массива типа Int16Array. До начала записи элементов записывает общее",
"* количество элементов как число uint32. Если в качестве параметра функции",
"* передано null или undefined то количество элементов записывается",
"* равным 0xffffffff. Общее количество байт в массиве выравнивается до 4.",
"* Сокращенная запись функции intXArray(arrInt,
 16).",
"* @memberof BinWriter",
"* @tparam Int16Array arrInt массив int16.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "arrInt",
"isOptional" : false,
"type" : "Int16Array"} ],
"type" : "void",
"isInline" : true},
"int32Array" : { "comments" : [ [ "/**",
"* @property int32Array(arrInt)",
"* Запись массива типа Int32Array. До начала записи элементов записывает общее",
"* количество элементов как число uint32. Если в качестве параметра функции",
"* передано null или undefined то количество элементов записывается",
"* равным 0xffffffff.",
"* Сокращенная запись функции intXArray(arrInt,
 32).",
"* @memberof BinWriter",
"* @tparam Int32Array arrInt массив int32.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "arrInt",
"isOptional" : false,
"type" : "Int32Array"} ],
"type" : "void",
"isInline" : true},
"floatXArray" : { "comments" : [ [ "/**",
"* @property floatXArray(arrFloat,
 iX)",
"* Записывает массив чисел float(32,
 64) использую для каждого элемента функцию",
"*  floatX. До начала записи элементов записывает общее",
"*  количество элементов как число int32. Если в качестве параметра функции",
"* передано null или undefined то количество элементов записывается",
"* равным 0xffffffff.",
"* Все массивы приводятся к нужному типу Float(iX)Array.",
"* @memberof BinWriter",
"* @tparam Float(iX)Array arrFloat массив float(iX).",
"* @tparam int iX размер элемента в битах (32,
 64).",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "arrFloat",
"isOptional" : false,
"type" : "ArrayBufferView"},
{ "name" : "iX",
"isOptional" : false,
"type" : "uint"} ],
"type" : "void",
"isInline" : false},
"float32Array" : { "comments" : [ [ "/**",
"* @property float32Array(arrFloat)",
"* Запись массива типа Float32Array. До начала записи элементов записывает общее",
"* количество элементов как число uint32. Если в качестве параметра функции",
"* передано null или undefined то количество элементов записывается",
"* равным 0xffffffff.",
"* Все переданные массивы приводятся к типу Float32Array.",
"* Сокращенная запись функции floatXArray(arrFloat,
 32).",
"* @memberof BinWriter",
"* @tparam Float32Array arrFloat массив float32.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "arrFloat",
"isOptional" : false,
"type" : "Float32Array"} ],
"type" : "void",
"isInline" : true},
"float64Array" : { "comments" : [ [ "/**",
"* @property float64Array(arrFloat)",
"* Запись массива типа Float64Array. До начала записи элементов записывает общее",
"* количество элементов как число uint32. Если в качестве параметра функции",
"* передано null или undefined то количество элементов записывается",
"* равным 0xffffffff.",
"* Все переданные массивы приводятся к типу Float64Array.",
"* Сокращенная запись функции floatXArray(arrFloat,
 64).",
"* @memberof BinWriter",
"* @tparam Float64Array arrFloat массив float64.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "arrFloat",
"isOptional" : false,
"type" : "Float64Array"} ],
"type" : "void",
"isInline" : true},
"data" : { "comments" : [ [ "/**",
"* @property data()",
"* Берет все данные из массива _pArrData и записывает их в массив",
"* типа ArrayBuffer.",
"* @memberof BinWriter",
"* @treturn ArrayBuffer.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [  ],
"type" : "ArrayBuffer",
"isInline" : true},
"dataAsString" : { "comments" : [ [ "/**",
"* @property data()",
"* Берет все данные из массива _pArrData и записывает их в строку.",
"* @memberof BinWriter",
"* @treturn String.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [  ],
"type" : "string",
"isInline" : false},
"dataAsUint8Array" : { "comments" : [ [ "/**",
"* @property toUint8Array()",
"* Берет все данные из массива _pArrData и вернет Uint8Array.",
"* @memberof BinWriter",
"* @treturn Uint8Array.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [  ],
"type" : "Uint8Array",
"isInline" : false},
"rawStringToBuffer" : { "comments" : [ [ "/**",
"* @property rawStringToBuffer()",
"* Берет строку и преобразует ее в массив Uint8Array.",
"* @memberof BinWriter",
"* @treturn Uint8Array.",
"*/" ] ],
"location" : "akra.io.BinWriter",
"arguments" : [ { "name" : "str",
"isOptional" : false,
"type" : "any"} ],
"type" : "Uint8Array",
"isInline" : false}}}