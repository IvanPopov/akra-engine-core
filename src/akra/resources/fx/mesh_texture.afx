provide akra.system;

include "common.afx";

struct VS_IN_2{
    float3 tex_coord0: TEXCOORD0;
    float3 tex_coord1: TEXCOORD1;
    float3 tex_coord2: TEXCOORD2;
    float3 tex_coord3: TEXCOORD3;
    float3 tex_coord4: TEXCOORD4;
    float3 tex_coord5: TEXCOORD5;
    float3 tex_coord6: TEXCOORD6;
    float3 tex_coord7: TEXCOORD7;
    float3 tex_coord8: TEXCOORD8;
    float3 tex_coord9: TEXCOORD9;
    float3 tex_coord10: TEXCOORD10;
    float3 tex_coord11: TEXCOORD11;
    float3 tex_coord12: TEXCOORD12;
    float3 tex_coord13: TEXCOORD13;
    float3 tex_coord14: TEXCOORD14;
    float3 tex_coord15: TEXCOORD15;
};

struct VS_OUT_2{
    float3 vert:VERTEX;
    float3 norm:NORMAL;
//    float4x4 normal_mat:NORMAL_MAT;
    float3 tc_diffuse: TEXCOORD0;
    float3 tc_ambient: TEXCOORD1;
    float3 tc_specular: TEXCOORD2;
    float3 tc_emissive: TEXCOORD3;
    float3 tc_normal: TEXCOORD4;
    float3 tc_shininess: TEXCOORD5;
};

texture tex0:TEXTURE0;
texture tex1:TEXTURE1;
texture tex2:TEXTURE2;
texture tex3:TEXTURE3;
texture tex4:TEXTURE4;
texture tex5:TEXTURE5;

foreign bool isUseAlphatest : IS_USE_ALPHATEST;

texture textureAlphatest : ALPHATEST_TEXTURE;

float Alphatest_treshold : ALPHATEST_THRESHOLD = -1.;
float Alphatest_width : ALPHATEST_WIDTH = 0.03;

sampler sampler_diffuse:S_DIFFUSE  = sampler_state
{
    Texture = <tex0>;
};
sampler sampler_ambient:S_AMBIENT  = sampler_state
{
    Texture = <tex1>;
};
sampler sampler_specular:S_SPECULAR  = sampler_state
{
    Texture = <tex2>;
};
sampler sampler_emissive:S_EMISSIVE  = sampler_state
{
    Texture = <tex3>;
};
sampler sampler_normal:S_NORMAL  = sampler_state
{
    Texture = <tex4>;
};

sampler sampler_shininess: S_SHININESS = sampler_state
{
    Texture = <tex5>;
};

sampler sampler_ALPHATEST: SAMPLER_ALPHATEST = sampler_state
{
    Texture = <textureAlphatest>;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
};

VS_OUT_2 vs_mesh_texture(VS_IN_2 IN) {
    VS_OUT_2 Out;

    Out.tc_diffuse = IN.tex_coord0;
    Out.tc_ambient = IN.tex_coord1;
    Out.tc_specular = IN.tex_coord2;
    Out.tc_emissive = IN.tex_coord3;
    Out.tc_normal = IN.tex_coord4;
    Out.tc_shininess = IN.tex_coord5;

    return Out;
}

shared PixelData pixelData;
UniformMaterial defaultMaterial : MATERIAL;

float4x4 model_mat : MODEL_MATRIX;
float4x4 view_mat : VIEW_MATRIX;

bool useNormal;
bool normalFix;


void fs_mesh_texture_deferre_pass_1(VS_OUT_2 IN){
    float3 texNormal = tex2D(sampler_normal, float2(IN.tc_normal.xy)).xyz;    
    pixelData.normal = calcNormal(texNormal, IN.norm.xyz, IN.tc_normal.xy);

    pixelData.material.emissive = clamp(defaultMaterial.emissive + tex2D(sampler_emissive, float2(IN.tc_emissive.xy)), 0., 1.);
    pixelData.material.diffuse = clamp(defaultMaterial.diffuse + tex2D(sampler_diffuse, float2(IN.tc_diffuse.xy)), 0., 1.);
    
    if(!normalFix){
        pixelData.material.shininess = clamp(defaultMaterial.shininess + tex2D(sampler_shininess, float2(IN.tc_shininess.xy)).r, 0., 1.);
    }

        applyAlphatestDegrade(IN.tc_diffuse.xy);
    if(IS_USED_MIRROR_REFLECTION){
        applyMirrorReflection();
    }
}

void fs_mesh_texture_deferre_pass_2(VS_OUT_2 IN){
    pixelData.material.specular = clamp(defaultMaterial.specular + tex2D(sampler_specular, float2(IN.tc_specular.xy)), 0., 1.);
    pixelData.material.ambient = clamp(defaultMaterial.ambient + tex2D(sampler_ambient, float2(IN.tc_ambient.xy)), 0., 1.);

    if(normalFix){
        pixelData.material.shininess = clamp(defaultMaterial.shininess + tex2D(sampler_shininess, float2(IN.tc_shininess.xy)).r, 0., 1.);
    }
}

void fs_mesh_texture_normal_shininess(VS_OUT_2 IN){
    float3 texNormal = tex2D(sampler_normal, float2(IN.tc_normal.xy)).xyz;    
    pixelData.normal = calcNormal(texNormal, IN.norm.xyz, IN.tc_normal.xy);

        applyAlphatestDegrade(IN.tc_diffuse.xy);
    pixelData.material.shininess = clamp(defaultMaterial.shininess + tex2D(sampler_shininess, float2(IN.tc_shininess.xy)).r, 0., 1.);
}

void fs_mesh_texture_material(VS_OUT_2 IN){
    pixelData.material.emissive = clamp(defaultMaterial.emissive + tex2D(sampler_emissive, float2(IN.tc_emissive.xy)), 0., 1.);
    pixelData.material.diffuse = clamp(defaultMaterial.diffuse + tex2D(sampler_diffuse, float2(IN.tc_diffuse.xy)), 0., 1.);
    pixelData.material.specular = clamp(defaultMaterial.specular + tex2D(sampler_specular, float2(IN.tc_specular.xy)), 0., 1.);
    pixelData.material.ambient = clamp(defaultMaterial.ambient + tex2D(sampler_ambient, float2(IN.tc_ambient.xy)), 0., 1.);

    pixelData.material.shininess = clamp(defaultMaterial.shininess + tex2D(sampler_shininess, float2(IN.tc_shininess.xy)).r, 0., 1.);
    pixelData.material.transparency = defaultMaterial.transparency;
    
        applyAlphatestDegrade(IN.tc_diffuse.xy);
    if(IS_USED_MIRROR_REFLECTION){
        applyMirrorReflection();
    }
}

void fs_mesh_texture_full(VS_OUT_2 IN){

    float3 texNormal = tex2D(sampler_normal, float2(IN.tc_normal.xy)).xyz;    
    
    pixelData.normal = calcNormal(texNormal, IN.norm.xyz, IN.tc_normal.xy);
    pixelData.material.emissive = clamp(defaultMaterial.emissive + tex2D(sampler_emissive, float2(IN.tc_emissive.xy)), 0., 1.);
    pixelData.material.diffuse = clamp(defaultMaterial.diffuse + tex2D(sampler_diffuse, float2(IN.tc_diffuse.xy)), 0., 1.);
    pixelData.material.specular = clamp(defaultMaterial.specular + tex2D(sampler_specular, float2(IN.tc_specular.xy)), 0., 1.);
    pixelData.material.ambient = clamp(defaultMaterial.ambient + tex2D(sampler_ambient, float2(IN.tc_ambient.xy)), 0., 1.);

    pixelData.material.shininess = clamp(defaultMaterial.shininess + tex2D(sampler_shininess, float2(IN.tc_shininess.xy)).r, 0., 1.);
    pixelData.material.transparency = defaultMaterial.transparency;
    
    //pixelData.material.emissive = float4(pixelData.normal, 1.);;
        applyAlphatestDegrade(IN.tc_diffuse.xy);
    if(IS_USED_MIRROR_REFLECTION){
        applyMirrorReflection();
    }
}

float3 calcNormal(float3 texNormal, float3 vertexNormal, float2 tc_normal) {
    float3 result_normal = float3(0.);

    if(texNormal == float3(0.) || !useNormal){
        result_normal = vertexNormal;
    }
    else {        
        float3 normal = normalize(vertexNormal);
        float3 tangent = float3(dFdx(tc_normal.x), dFdy(tc_normal.x), 0.);
        tangent.z = -dot(tangent.xy,normal.xy)/normal.z;
        tangent = normalize(tangent);
        float3 binormal = cross(tangent, normal);

        //формируем матрицу трансформации
        float3x3 m3fTransform;
        m3fTransform[0] = tangent;
        m3fTransform[1] = binormal;
        m3fTransform[2] = normal;

        texNormal.xy = (texNormal.xy - 0.5) * 2.;

        texNormal = normalize(texNormal);

        result_normal = m3fTransform * texNormal;
    }

    return normalize(result_normal);
}

foreign bool OPTIMIZE_FOR_DEFERRED_PASS0;
foreign bool OPTIMIZE_FOR_DEFERRED_PASS1;
foreign bool OPTIMIZE_FOR_LPP_PREPARE;
foreign bool OPTIMIZE_FOR_LPP_APPLY;

foreign bool IS_USED_MIRROR_REFLECTION = false;
float2 viewportSize: VIEWPORT_SIZE;

texture mirrorTexture: MIRROR_TEXTURE;
sampler mirrorSampler = sampler_state{
    Texture = <mirrorTexture>;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
};

void applyMirrorReflection(){
    pixelData.material.emissive += .3 * tex2D(mirrorSampler, float2(1. - fragCoord.x/viewportSize.x, fragCoord.y/viewportSize.y));
}

void applyAlphatestDegrade(float2 texPos){
    if(isUseAlphatest) {
        float temp = tex2D(sampler_ALPHATEST, texPos).r;
        if(temp >= Alphatest_treshold) {
            if(temp < Alphatest_treshold+Alphatest_width) {
                float dr = (Alphatest_treshold+Alphatest_width-temp)/Alphatest_width;
                // float r = clamp(6.*abs(dr-0.5)-1., 0., 1.);
                // float g = clamp(-6.*abs(dr-0.333)+2.,0.,1.);
                // float b = clamp(-6.*abs(dr-0.666)+2.,0.,1.);
                float4 color2 = float4(1.,0.3,0.1,1.);
                float4 color1 = float4(1.,0.9,0.3,0.3);
                pixelData.material.emissive = color1*(1.-dr) + color2*dr;
                // pixelData.material.emissive = float4(r,g,b,1.);
            }
        }
        else {
            discard;
        }
    }
    //pixelData.material.diffuse = float4(float3(temp),1.);
}

technique mesh_texture {
    import akra.system.mesh_geometry;
    pass p0 {
        VertexShader = compile vs_mesh_texture();
        if(OPTIMIZE_FOR_DEFERRED_PASS0) {
            PixelShader = compile fs_mesh_texture_deferre_pass_1();
        }
        else if(OPTIMIZE_FOR_DEFERRED_PASS1) {
            PixelShader = compile fs_mesh_texture_deferre_pass_2();
        }
        else if(OPTIMIZE_FOR_LPP_PREPARE) {
            PixelShader = compile fs_mesh_texture_normal_shininess();
        }
        else if(OPTIMIZE_FOR_LPP_APPLY) {
            PixelShader = compile fs_mesh_texture_material();
        }
        else {
            PixelShader = compile fs_mesh_texture_full();
        }
    }
}