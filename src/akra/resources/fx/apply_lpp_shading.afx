provide akra.system;

include "common.afx";
include "brdf.afx";

shared PixelData pixelData;

texture tex0 : LPP_LIGHT_BUFFER_A;
texture tex1 : LPP_LIGHT_BUFFER_B;
texture tex2 : LPP_NORMAL_BUFFER_TEXTURE;

sampler sampler_lpp_dif_spec:LPP_LIGHT_SAMPLER_A  = sampler_state
{
    Texture = <tex0>;
    MinFilter = NEAREST;
    MagFilter = NEAREST;
};

sampler sampler_lpp_amb_shad:LPP_LIGHT_SAMPLER_B  = sampler_state
{
    Texture = <tex1>;
    MinFilter = NEAREST;
    MagFilter = NEAREST;
};

sampler sampler_lpp_normal_buffer : SAMPLER_NORMAL_BUFFER = sampler_state
{
    Texture = <tex2>;
    MinFilter = NEAREST;
    MagFilter = NEAREST;
};

float2 screenTextureRatio : SCREEN_TEXTURE_RATIO;
float2 screenSize: SCREEN_SIZE;

foreign bool IS_USED_BLINN_PNONG = false;
foreign bool IS_USED_PNONG = true;
foreign bool IS_USED_PBS_SIMPLE = false;
foreign bool IS_USED_PBS_REFLECTIONS = false;

const float MAX_SHININESS = 1.;

float4 fs_apply_lpp_shading(float3 vert: VERTEX) : COLOR {
    float2 texcoords = fragCoord.xy / screenSize * screenTextureRatio;
    float4 lightsDataA = tex2D(sampler_lpp_dif_spec, texcoords);
    float4 lightsDataB = tex2D(sampler_lpp_amb_shad, texcoords);

    float4 color = pixelData.material.emissive;

    if(IS_USED_PBS_SIMPLE){
        //float3 lightDif = lightsDataA.xyz;
        //float k1 = lightsDataA.w;
        //float k1_k2 = lightsDataB.x;
//
        //float3 F0 = pixelData.material.specular.xyz;
        //float3 specular = F0 * k1 + ( float3(1.)-F0 ) * k1_k2;
        //float visibilityFunction = 1.;

        //lightDif *= (float3(1.) - specular);
        //color += pixelData.material.diffuse * float4(lightDif * specular, 1.) * visibilityFunction;
        //color += float4(float3(k1)/10., 1.); 

        float3 SpecularColorMat = pixelData.material.specular.xyz;
        float3 SchliSpecMult = schlick_specular_modifier(SpecularColorMat);
        float3 specular = SpecularColorMat * lightsDataA.rgb + 
                            SchliSpecMult * lightsDataA.rgb * lightsDataA.a;

        float3 diffuse = Diffuse_Lambert(pixelData.material.diffuse.rgb) * lightsDataB.rgb;
        //diffuse *= (1. - specular);

        color += float4(specular + diffuse, 1.);
    }
    else {
        if(IS_USED_PNONG){
            color += pixelData.material.ambient * float4(lightsDataB.xyz, 1.);
        }
        
        color += pixelData.material.diffuse * float4(lightsDataA.xyz, 1.);
        color += pixelData.material.specular * float4(lightsDataA.www, 1.);
    }

    if (IS_USED_PBS_REFLECTIONS) {
        float4 normalBufferData = tex2D(sampler_lpp_normal_buffer, texcoords);
        pixelData.position = vert;

        pixelData.normal = float3(normalBufferData.xy, sqrt(1. - dot(normalBufferData.xy, normalBufferData.xy)));

        if(normalBufferData.z > MAX_SHININESS){
            pixelData.normal.z *= -1.;
        }
    }

    //float3 n = (pixelData.normal + 1.) / 2.;
    //return float4(pow(n.x, 5.), pow(n.y, 5.), pow(n.z, 5.), 1.);
    return float4(color.xyz, 1.);
}

technique apply_lpp_shading{
    pass p1 {
        PixelShader = compile fs_apply_lpp_shading();
    }
}