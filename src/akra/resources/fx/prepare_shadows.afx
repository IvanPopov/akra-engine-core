provide akra.system;

float4x4 model_mat:MODEL_MATRIX;
float4x4 view_mat:VIEW_MATRIX;
float4x4 proj_mat:OPTIMIZED_PROJ_MATRIX;
float4x4 bind_matrix:BIND_SHAPE_MATRIX;

float4 vs_simple_geometry(float4 position : POSITION) : POSITION {
    float4 pos = float4(position.xyz, 1.0);
    return proj_mat * view_mat * model_mat * pos;
}

float4 vs_advanced_index_geometry(float4 position[][] : POSITION) : POSITION {
    float4 pos = float4(position.xyz, 1.0);
    return proj_mat * view_mat * model_mat * pos;
}

float4 vs_skin_geometry(float4 position[] : POSITION) : POSITION {
    float4 pos = float4(position.xyz, 1.);

    float2 meta_data[](memof position);

    float2 bone_inf[](memof position);
    float4x4 bone_matrix[](memof position);
    float weight[](memof position);

    float4x4 result_mat = float4x4(0.0);

    @(meta_data) = position.w;

    float number_matrix = meta_data.x;
    float bone_inf_ptr = meta_data.y;

    for(float i = 0.; i < 16.; i++){
        if(i < number_matrix){
            @bone_inf = bone_inf_ptr + i * 2.;
       
            @bone_matrix = bone_inf.x;
            weight = bone_inf.y;

            result_mat += bone_matrix * weight;
        }
        else {
           break;            
        }
    }

    return proj_mat * view_mat * result_mat * bind_matrix * pos;
}

float4 vs_optimized_skin_geometry(float4 position : SKINNED_POSITION) : POSITION {
    float4 pos = float4(position.xyz, 1.0);
    return proj_mat * view_mat * pos;
}

technique prepareShadows{
    pass pass1{
        if(engine.mesh.isSkinned){
            if(engine.mesh.isOptimizedSkinned){
                VertexShader = compile vs_optimized_skin_geometry();
            }
            else{
                VertexShader = compile vs_skin_geometry();
            }
        }
//        else if(engine.isAdvancedIndex) {
//            VertexShader = compile vs_advanced_index_geometry();
//        }
        else {
            VertexShader = compile vs_simple_geometry();
        }
    };
};


int scene_object_id: SCENE_OBJECT_ID;
int renderable_id: RENDERABLE_ID;

//float4 color;

float rand(float2 co){
    return fract(sin(dot(co.xy, float2(12.9898,78.233))) * 43758.5453);
}

float4 fs_color_picker() : COLOR{
    float4 color = float4(float(scene_object_id) / 255., float(renderable_id) / 255., 1., 1.);
    color.b = rand(color.xy);
    return color;
}

technique colorPicker {
    pass color_maps {

         if(engine.mesh.isSkinned){
            if(engine.mesh.isOptimizedSkinned){
                VertexShader = compile vs_optimized_skin_geometry();
            }
            else{
                VertexShader = compile vs_skin_geometry();
            }
        }
        else if(engine.renderable.isAdvancedIndex) {
            VertexShader = compile vs_advanced_index_geometry();
        }
        else {
            VertexShader = compile vs_simple_geometry();
        }

        PixelShader = compile fs_color_picker();
    };
};