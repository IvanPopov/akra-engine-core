include "common.afx";
include "brdf.afx";

struct LightData {
    float4 diffuse     : DIFFUSE;
    float4 ambient     : AMBIENT;
    float4 specular    : SPECULAR;
    float3 attenuation : ATTENUATION;
    float3 position    : POSITION; //in camera space
};

struct SunLightData {
    float3 sunDir: SUN_DIRECTION;
    float3 eyePos: EYE_POSITION;
    float3 ground0: GROUNDC0;
    float3 ground1: GROUNDC1;
    float3 hg: HG;
    int skyDomeId: SKY_DOME_ID; 
};

struct LightOmni{
    LightData lightData : LIGHT_DATA;
};

struct LightProject{
    LightData lightData   : LIGHT_DATA;
    float4x4 shadow_matrix : SHADOW_MATRIX;
};

struct LightOmniShadows{
    LightData lightData      : LIGHT_DATA;
    float4x4 toLightSpace[6] : TO_LIGHT_SPACE;
    float4x4 optimized_projection_matrix[6] : OPTIMIZED_PROJECTION_MATRIX;
};

struct LightProjectShadows{
    LightData lightData   : LIGHT_DATA;
    float4x4 toLightSpace : TO_LIGHT_SPACE;
    float4x4 real_projection_matrix : REAL_PROJECTION_MATRIX;
    float4x4 optimized_projection_matrix : OPTIMIZED_PROJECTION_MATRIX;
};

struct LightSun{
    SunLightData lightData : LIGHT_DATA;
};

struct LightSunShadows{
    SunLightData lightData : LIGHT_DATA;
    float4x4 toLightSpace : TO_LIGHT_SPACE;
    float4x4 optimized_projection_matrix : OPTIMIZED_PROJECTION_MATRIX;
};

struct LightOmniRestricted {
    LightData lightData : LIGHT_DATA;

    float3 point0: POINT0;
    float3 point1: POINT1;
    float4x4 toLightSpace : TO_LIGHT_SPACE;
};

// struct LightProjectRestricted {
// 	LightProject light: LIGHT;
// 	float3 point0: POINT0;
// 	float3 point1: POINT1;
// 	float4x4 toLightSpace : TO_LIGHT_SPACE;
// };


struct CalculatedLightParams {
    float3 ambient;
    float3 diffuse;
    float3 specular;
};

struct CalculatedLightParamsPBS {
    float3 diffuse;
    float k1;
    float k2;
};


bool isPointInBox(float3 point, float3 pointBox0, float3 pointBox1){
    return pointBox0.x <= point.x && pointBox1.x >= point.x &&
           pointBox0.y <= point.y && pointBox1.y >= point.y &&
           pointBox0.z <= point.z && pointBox1.z >= point.z;
}

float calcAttenuation(float light_dir_length, float3 attenuation) {
    return  1.0 / (attenuation.x + attenuation.y * light_dir_length + attenuation.z * light_dir_length * light_dir_length);
}

foreign bool SKIP_ALPHA = true;
float4 returnColor(float4 color) {
    if(SKIP_ALPHA){
        return float4(color.xyz, 1.);
    }
    else {
        return color;
    }
}

foreign bool IS_FOR_LPP_PASS0 = false;
foreign bool IS_FOR_LPP_PASS1 = false;
foreign bool IS_FOR_REAL_SHADING = true;
foreign bool IS_USED_BLINN_PNONG = false;
foreign bool IS_USED_PNONG = true;
foreign bool IS_USED_PBS_SIMPLE = false;
foreign bool IS_USED_PBS_REFLECTIONS = false;

CalculatedLightParams prepareBaseLightParams(PixelData pixelData, LightData lightData) {
    CalculatedLightParams lightParams;

    float3 light_dir = lightData.position - pixelData.position;
    float attenuation = calcAttenuation(length(light_dir), lightData.attenuation);

    light_dir = normalize(light_dir);

    if(IS_FOR_REAL_SHADING || IS_FOR_LPP_PASS0){
        float light_distancedotVpow = 0.5;

        if(pixelData.material.shininess != 0.){
            float3 view_dir = normalize(-pixelData.position);
            float3 reflect_dir = normalize(reflect(-light_dir, pixelData.normal));

            light_distancedotVpow = pow(max(0., min(1., dot(reflect_dir, view_dir))), pixelData.material.shininess * 128.);
        }

        lightParams.diffuse = lightData.diffuse.xyz * max(dot(pixelData.normal, light_dir), .0) * attenuation;
        lightParams.specular = lightData.specular.xyz * light_distancedotVpow * attenuation;
    }

    if(IS_USED_PNONG && (IS_FOR_REAL_SHADING || IS_FOR_LPP_PASS1)) {
        lightParams.ambient = lightData.ambient.xyz * attenuation;
    }

    return lightParams;
}

CalculatedLightParams prepareBaseLightParamsSun(PixelData pixelData, float3 light_dir, float4 diffuse, float4 ambient, float4 specular){
    CalculatedLightParams lightParams;
    
    if(IS_FOR_REAL_SHADING || IS_FOR_LPP_PASS0){
        light_dir = normalize(light_dir);
        float3 fixNormal = lerp(light_dir, pixelData.normal, kFixNormal);
        float light_distancedotVpow = 0.;

        if(pixelData.material.shininess != 0. && specular.xyz != float3(0.)){
            float3 view_dir = normalize(-pixelData.position);
            float3 reflect_dir = normalize(reflect(-light_dir, fixNormal));

            light_distancedotVpow = pow(max(0., min(1., dot(reflect_dir, view_dir))), pixelData.material.shininess * 128.);
        }

        lightParams.diffuse = diffuse.xyz * max(dot(fixNormal, light_dir), .0);
        lightParams.specular = specular.xyz * light_distancedotVpow;
    }

    if(IS_USED_PNONG && (IS_FOR_REAL_SHADING || IS_FOR_LPP_PASS1)) {
        lightParams.ambient = ambient.xyz;
    }
    
    return lightParams;
}

float4 applyBaseLightParams(PixelData pixelData, LightData lightData){
    if(IS_USED_PBS_SIMPLE){
        return applyPBSLightParams(pixelData, lightData.position, lightData.diffuse.xyz, lightData.attenuation);
    }

    float4 color = float4(0.);
    CalculatedLightParams lightParams = prepareBaseLightParams(pixelData, lightData);

    if(IS_FOR_REAL_SHADING){
        color = pixelData.material.diffuse * float4(lightParams.diffuse, 0.0) + pixelData.material.specular * float4(lightParams.specular, 0.0);

        if(!IS_USED_BLINN_PNONG){
            color += pixelData.material.ambient * float4(lightParams.ambient, 0.0);
        }
    }
    else if(IS_FOR_LPP_PASS0) {
        color = float4(lightParams.diffuse, lightParams.specular.x);
    }
    else if(IS_FOR_LPP_PASS1) {
        color = float4(lightParams.ambient, 0.);
    }

    return color;
}

float kFixNormal = 0.5;
float fSunSpecular = 0.;
float fSunAmbient = 0.;
float3 camPos: CAMERA_POSITION;
float4x4 invView: INV_VIEW_CAMERA_MAT;
float4x4 view: VIEW_MATRIX;

float4 applyBaseLightParamsSun(PixelData pixelData, SunLightData lightData, float3 worldPos) {
/*	
    if(IS_USED_PBS_SIMPLE){
        return applyPBSLightParams(pixelData, lightData.position, lightData.diffuse.xyz, lightData.attenuation);
    }
*/

    float4 color = float4(0.);

    float3 v3Pos = lightData.eyePos - pixelData.position.xyz;
    float fCos = dot(lightData.sunDir, v3Pos)/length(v3Pos);
    float fCos2 = fCos * fCos;

    float3 Mie = getMiePhase(fCos, fCos2, lightData.hg) * lightData.ground1;
    float4 lightDiffuse = float4(0.);

    lightDiffuse.rgb = getRayleighPhase(fCos2) * lightData.ground0 + Mie;
    lightDiffuse.rgb = HDR(lightDiffuse.rgb);
    float fFogValue = ComputeVolumetricFog(worldPos - camPos);
    
    CalculatedLightParams lightParams = prepareBaseLightParamsSun(pixelData, float4(view * float4(lightData.sunDir, 0.)).xyz, lightDiffuse, float4(fSunAmbient), float4(fSunSpecular));

    if(IS_FOR_REAL_SHADING){
        color = pixelData.material.ambient * float4(lightParams.ambient, 1.0) + pixelData.material.diffuse * float4(lightParams.diffuse, 1.0) + pixelData.material.specular * float4(lightParams.specular, 1.0);
    }
    else if(IS_FOR_LPP_PASS0) {
        color = float4(lightParams.diffuse, lightParams.specular.x);
    }
    else if(IS_FOR_LPP_PASS1) {
        color = float4(lightParams.ambient, 0.);
    }

    return color;
}

float calcProjectLightInfluence(float4x4 toLightProjectSpace, float3 position){
    float lightAttenuation = -1.;

    float4 v4fTmp = toLightProjectSpace * float4(position, 1.);
    float3 v3fTest = abs(v4fTmp.xyz/v4fTmp.w);

    //тест на попадание в область действия источника
    //if(all(lessThanEqual(v3fTest,float3(1.)))){
    if(length(v3fTest) <= sqrt(3.) && v4fTmp.w >= 0.){ //более приятно выглядит
        float alpha = 0.05;
        lightAttenuation = (exp(-alpha*dot(v3fTest,v3fTest)) - exp(-alpha*3.))/(1. - exp(-alpha*3.));
    }

    return lightAttenuation;
}

bool isUnderShadowInfluence(float4x4 toLightSpace, float4x4 projMat, float3 position, out float2 shadowTexCoords, out float realDepth) {
    float4 v4fLightSpace = toLightSpace *float4(position, 1.);

    float4 v4fTmp = projMat * v4fLightSpace;
    float3 v3fOptimizedLightSpacePosition = v4fTmp.xyz/v4fTmp.w;

    float3 v3fTest = abs(v3fOptimizedLightSpacePosition.xyz);

    //тест на попадание в область действия источника
    //так как здесь происходит считывание из текстуру другой тест не корректен
    if(all(lessThanEqual(v3fTest.xy, float2(1.))) && v3fOptimizedLightSpacePosition.z >= -1. && v4fTmp.w >= 0.){
        shadowTexCoords = (v3fOptimizedLightSpacePosition.xy + 1.)/2.;
        realDepth = v4fLightSpace.z;
        return true;
    }
    
    return false;
}

float fMinShadow : MIN_SHADOW_VALUE = 0.5;
float shadowConstant : SHADOW_CONSTANT = 5.e+2;
float shadowAttenuationConstant: SHADOW_ATTENUATION_CONSTANT = 0.2;

float calculateShadowMultiplier(sampler shadowSampler, float2 v2fShadowTextureCoords, float4x4 projMat, float realDepth){
    float lightDepth = tex2D(shadowSampler, v2fShadowTextureCoords).x*2. - 1.;
    //float lightDepth = blur(shadowSampler,v2fShadowTextureCoords,float2(1./512.)).x*2. - 1.;
    if(lightDepth == 1.){
        return 1.;
    }

    float lightRealDepth = unprojZ(projMat, lightDepth); //negative

    float fShadowMultiplier = clamp(exp(shadowConstant*(1.e-2 - lightRealDepth + realDepth)), fMinShadow, 1.);
    fShadowMultiplier = 1. - (1. - fShadowMultiplier) * exp(shadowAttenuationConstant*(realDepth - lightRealDepth));
    return fShadowMultiplier;
}

float alpha = 3.;

float4 blur(sampler Sampler,float2 texCoords, float2 invTexSize){
    const int blurX = 2;
    const int blurY = 2;

    float4 value = float4(0.);
    float totalWeight = 0.;
    for(int i=-blurX;i<=blurX;i++){
        for(int j=-blurY;j<=blurY;j++){
            float fX = float(i);
            float fY = float(j);
            float weight = exp(-alpha*(fX*fX + fY*fY));
            totalWeight += weight;
            value += weight * tex2D(Sampler,texCoords + invTexSize*float2(fX,fY));
        }
    }
    return value/totalWeight;
}




float Exposure = -2.0;
float c = 0.002f; // height falloff
float b = 0.002f; // global density

float3 HDR( float3 LDR){
    return 1.0f - exp( Exposure * LDR );
}

float getMiePhase(float fCos, float fCos2, float3 vHG){
    //return 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + fCos2) / pow(1.0 + g2 - 2.0*g*fCos, 1.5);
    return vHG.x * (1.0 + fCos2) / pow(abs(vHG.y - vHG.z * fCos), 1.5);
}

// Calculates the Rayleigh phase function
float getRayleighPhase(float fCos2){
    return 0.75 + 0.75 * fCos2;
}

float cHeightFalloff = 0.002f; 
float cGlobalDensity  = 0.002f;

float ComputeVolumetricFog(float3 cameraToWorldPos) 
{  
  //float3 cameraToWorldPos = v3Pos - camPos;
  float cVolFogHeightDensityAtViewer = exp(-cHeightFalloff * camPos.y); 
  float fogInt = length( cameraToWorldPos ) * cVolFogHeightDensityAtViewer; 
  const float cSlopeThreshold = 0.01; 
  if(abs(cameraToWorldPos.y) > cSlopeThreshold) 
  { 
    float t = cHeightFalloff * cameraToWorldPos.y; 
    fogInt *= (1.0 - exp(-t)) / t; 
  } 
  return exp(-cGlobalDensity * fogInt); 
}

float calculateSunShadowMultiplier(sampler shadowSampler, float2 v2fShadowTextureCoords, float4x4 projMat, float realDepth){

    float lightDepth = tex2D(shadowSampler, v2fShadowTextureCoords).x*2. - 1.;
    if(lightDepth == 1.){
        return 1.;
    }

    float lightRealDepth = unprojOrthoZ(projMat, lightDepth); //negative

    return clamp(exp(shadowConstant*(0.08 - lightRealDepth + realDepth)), fMinShadow, 1.);
};

float readRealLightDepth(sampler shadowSampler, float2 v2fShadowTextureCoords, float4x4 projMat){
    float lightDepth = tex2D(shadowSampler, v2fShadowTextureCoords).x*2. - 1.;
    if(lightDepth == 1.){
        return 1.;
    }

    return unprojOrthoZ(projMat, lightDepth); //negative
};

float2 v2fShadowTexSize = float2(2048.);

float calculateSunShadowMultiplierUpgraded(sampler shadowSampler, float2 v2fShadowTextureCoords, float4x4 projMat, float realDepth){

    float2 v2fTexPos = v2fShadowTextureCoords * v2fShadowTexSize - float2(0.5);
    float2 v2fTmp = floor(v2fTexPos);
    float2 alpha = v2fTexPos - v2fTmp;
    float2 beta = float2(1.) - alpha;

    float2 v2fTex1 = (v2fTmp + float2(0.5))/v2fShadowTexSize;
    float2 v2fTex2 = v2fTex1 + float2(1.)/v2fShadowTexSize;

    float lightDepth1 = readRealLightDepth(shadowSampler, float2(v2fTex1.x, v2fTex1.y), projMat);
    float lightDepth2 = readRealLightDepth(shadowSampler, float2(v2fTex1.x, v2fTex2.y), projMat);
    float lightDepth3 = readRealLightDepth(shadowSampler, float2(v2fTex2.x, v2fTex1.y), projMat);
    float lightDepth4 = readRealLightDepth(shadowSampler, float2(v2fTex2.x, v2fTex2.y), projMat);

    float lightRealDepth = 0.;
    float quantity = 0.;
    float minDepth = -1000000.;

    if(lightDepth1 < 0.){lightRealDepth += lightDepth1; quantity++; minDepth = max(minDepth, lightDepth1);}
    if(lightDepth2 < 0.){lightRealDepth += lightDepth2; quantity++; minDepth = max(minDepth, lightDepth2);}
    if(lightDepth3 < 0.){lightRealDepth += lightDepth3; quantity++; minDepth = max(minDepth, lightDepth3);}
    if(lightDepth4 < 0.){lightRealDepth += lightDepth4; quantity++; minDepth = max(minDepth, lightDepth4);}

    if(quantity == 0.){
        return 1.;
    }
    else{
        lightRealDepth = lightRealDepth/quantity;
    }

    float fShadowMultiplier;
    fShadowMultiplier = clamp(exp(shadowConstant*(0.08 - lightRealDepth + realDepth)), fMinShadow, 1.);
    fShadowMultiplier = 1. - (1. - fShadowMultiplier) * exp(shadowAttenuationConstant*(realDepth - minDepth));
    return fShadowMultiplier;

    // fShadowMultiplier = (shadowMult1 * alpha.y + shadowMult2 * beta.y) * alpha.x
    // 						+ (shadowMult3 * alpha.y + shadowMult4 * beta.y) * beta.x;   
    // return fShadowMultiplier;
};


float4 calulatePBSReflection(float3 position, float3 normal, 
                             float3 specular, float shininess, 
                             sampler2D envSampler){
    // calculating reflection separately
    float3 view_dir = normalize(-position);
    float3 normal_dir = normal;
    float3 reflect_dir = normalize(-view_dir + 2.*normal_dir*dot(normal_dir,view_dir));
    // float3 reflect_dir = reflect(view_dir, normal_dir);
    float3 directionInsideCube = (invView * float4(reflect_dir, 0.)).xyz;
    float NoV = saturate(dot(normal_dir, view_dir));

    float3 fresnelReflectance;

    // Too bright envmap! multiplier
    float3 envColor = getEnvMapColor(directionInsideCube, shininess, envSampler) * 0.5;
    //if (specular.g < 0.2){
        //fresnelReflectance = float3(EnvBRDFApproxNonmetal( 1. - shi, NoV ));
    //}
    //else {
        fresnelReflectance = EnvBRDFApprox( specular.xyz, 1. - shininess, NoV );//3 add 3 mul 1 pow
    //}

    float4 reflection = float4(fresnelReflectance * envColor, 1.);

    //if (reflection.r < 0.01){
        //reflection.b = 1.;
    //}
    //else if (reflection.r < 0.05){
        //reflection.r = 1.;
    //}
    //else if (reflection.r < 0.1){
        //reflection.g = 1.;
    //} 
    //else {
        //reflection.xyz = float3(1.);
    //}

    return reflection;
};


float PBS_gloss : PBS_GLOSS = 0.; // temporarily used as transparency (how dirty is object from inside)
float3 PBS_F0 : PBS_F0 = float3(0.); // temporarily used as reverse (1. - ) spectral transparency
//float3 PBS_Diffuse : PBS_DIFFUSE = float3(0.);

// @c http://seblagarde.wordpress.com/2011/08/17/feeding-a-physical-based-lighting-mode/
float3 FresnelSchlickWithRoughness(float3 SpecularColor, float NoV, float Gloss)
{
    // Canonical equation (from paper):
    //return SpecularColor + (max(float3(Gloss), SpecularColor) - SpecularColor) * pow(1. - dot_saturate(lightDir, normalDir), 5.);
    // Other possible function (used by Treyarch, Black Ops 2, Dimitar Lazarov):
    // @c http://blog.selfshadow.com/publications/s2013-shading-course/lazarov/s2013_pbs_black_ops_2_notes.pdf
    return SpecularColor + (float3(1.) - SpecularColor) * pow(1. - NoV, 5.) / (4. - 3. * Gloss);
}// 4 add 3 mul 1 rcp 1 pow

// Functions for getting pixel position from cubemap formatted as follows:
// zone3	nextlvl	zone4	zone5
// zone1	zone2	zone6	nextlvl
float2 getZone1z(float2 uv, int lod) {
    uv.x = .5 + (uv.x * 0.5 - 1.)  * exp2( -float(lod)-1.);
    uv.y = (1.0 + uv.y)*exp2(-float(lod)-1.);
    return uv;
}

float2 getZone2x(float2 uv, int lod) {
    uv.x = .5 + (uv.x - 1.) * exp2( -float(lod)-2.);
    uv.y = (1. + uv.y) * exp2(-float(lod)-1.);
    return uv;
}

float2 getZone3y(float2 uv, int lod) {
    uv.x = .5 + (uv.x * 0.5 - 1.)  * exp2( -float(lod)-1.);
    uv.y = uv.y * exp2(-float(lod)-1.);
    return uv;
}
float2 getZone4z(float2 uv, int lod) {
    uv.x = 1. + (uv.x*0.5 - 1.) * exp2(-float(lod)-1.);
    uv.y = 1. + (uv.y*0.5 - 1.) * exp2(-float(lod));
    return uv;
}

float2 getZone5x(float2 uv, int lod) {
    uv.x = 1. + (uv.x - 1.) * exp2(-float(lod)-2.);
    uv.y = 1. + (uv.y*0.5 - 1.) * exp2(-float(lod));
    return uv;
}

float2 getZone6y(float2 uv, int lod) {
    uv.x = 1. + (uv.x*0.5 - 1.) * exp2(-float(lod)-1.);
    uv.y = 1. + (uv.y - 1.) * exp2(-float(lod)-1.);
    return uv;
}

float4 getEnvLod(sampler2D envSampler, float3 direction, int lod) {
    float4 color = float4(0.);

    float2 uv = float2(0.);

    direction /= max(max(abs(direction.x), abs(direction.y)), abs(direction.z));

    // HACK: fixed cubemap size
    float2 local_texel = float2(exp2(-8.+float(lod)));
    float2 texel = float2(exp2(-10.),exp2(-9.));

    if(direction.z >= .99) { // calculations are not precise
        uv.x = -direction.x;
        uv.y = direction.y;
        uv = getZone1z(float2((1.+uv.x)*0.5, (1.-uv.y)*0.5)*(float2(1.)-local_texel), lod);
    }
    else if(direction.x <= -.99) {
        uv.x = -direction.z;
        uv.y = direction.y;
        uv = getZone2x(float2((1.+uv.x)*0.5, (1.-uv.y)*0.5)*(float2(1.)-local_texel), lod);
    }
    else if(direction.y >= .99) {
        uv.x = -direction.x;
        uv.y = -direction.z;
        uv = getZone3y(float2((1.+uv.x)*0.5, (1.-uv.y)*0.5)*(float2(1.)-local_texel), lod);
    }
    else if(direction.z <= -.99) {
        uv.x = direction.x;
        uv.y = direction.y;
        uv = getZone4z(float2((1.+uv.x)*0.5, (1.-uv.y)*0.5)*(float2(1.)-local_texel), lod);
    }
    else if(direction.x >= .99) {
        uv.x = direction.z;
        uv.y = direction.y;
        uv = getZone5x(float2((1.+uv.x)*0.5, (1.-uv.y)*0.5)*(float2(1.)-local_texel), lod);
    }
    else {//(direction.y <= -.99) {
        uv.x = direction.x;
        uv.y = -direction.z;
        uv = getZone6y(float2((1.+uv.x)*0.5, (1.-uv.y)*0.5)*(float2(1.)-local_texel), lod);
    }

    color = tex2D(envSampler, uv+texel/2.);

    return color;
}

float glossToQualityConverter(float Gloss, float MaxLod)
{
    return (1.-pow(Gloss,2.))*MaxLod;
}

//float3 EnvBRDF( float3 SpecularColor, float Roughness, float NoV )
//{
    //// Importance sampled preintegrated G * F
    //float2 AB = Texture2DSampleLevel( PreIntegratedGF, PreIntegratedGFSampler, float2( NoV, Roughness ), 0 ).rg;
//
    //// Anything less than 2% is physically impossible and is instead considered to be shadowing 
    //float3 GF = SpecularColor * AB.x + saturate( 50.0 * SpecularColor.g ) * AB.y;
    //return GF;
//}

//// [Schlick 1994, "An Inexpensive BRDF Model for Physically-Based Rendering"]
//// [Lagarde 2012, "Spherical Gaussian approximation for Blinn-Phong, Phong and Fresnel"]
//float3 FresnelSchlickRoughness( float3 SpecularColor, float VoH, float Roughness )
//{ 
    //return SpecularColor + ( saturate( 50.0 * SpecularColor.g ) - SpecularColor )
                            //* exp2( (-5.55473 * VoH - 6.98316) * VoH ) / (4. - 3. * Roughness);
//}

float3 getEnvMapColor(float3 R, float Gloss, sampler2D envSampler)
{

    // Exactly 6 lod supported. Increase multiplier if mipmap is better.
    // HACK: get maximum level of detail from size of texture
    // HardcodedNumCaptureArrayMips - 1 - REFLECTION_CAPTURE_ROUGHEST_MIP 
    // 		+ REFLECTION_CAPTURE_ROUGHNESS_MIP_SCALE * log2(Roughness)
    // 7 - 1 - 1 
    // 		+ 1.2 * log2(Roughness)
    int lod1 = int(floor(glossToQualityConverter(Gloss, 6.)));
    int lod2 = int(ceil(glossToQualityConverter(Gloss, 6.)));
    float alpha = glossToQualityConverter(Gloss, 6.) - float(lod1);

    float3 Envcolor = getEnvLod(envSampler, R, lod1).rgb * (1. - alpha)
        + getEnvLod(envSampler, R, lod2).rgb * alpha;

    return Envcolor;
}

int nLights: NUM_LIGHTS_WITH_PBS = 0;
// @c http://seblagarde.wordpress.com/2011/08/17/hello-world/
float4 applyPBSLightParams(PixelData pixelData, 
                           float3 lightPosition, 
                           float3 lightDiffOrig, 
                           float3 lightAttenuation) {
    float4 color = float4(0.);
    
    // ESSENTIAL CONSTANTS DEF
    float3 light_dir = normalize(lightPosition - pixelData.position);
    float3 view_dir = normalize(-pixelData.position);
    float3 normal_dir = normalize(pixelData.normal);
    float3 half_vector = normalize(view_dir + light_dir);

    float NoL = saturate(dot(normal_dir, light_dir));
    float NoH = saturate(dot(normal_dir, half_vector));
    float NoV = saturate(dot(normal_dir, view_dir));
    float VoH = saturate(dot(view_dir, half_vector));

    float Roughness = 1. - pixelData.material.shininess;
    float3 DiffuseColor = pixelData.material.diffuse.xyz;
    float3 SpecularColor = pixelData.material.specular.xyz;

    // ATTENUATION
    // multiplicator for better visibility REMOVED(bill-phong is much more shiny)
    float light_dir_length = length(light_dir);
    float attenuation = 1.0 / (lightAttenuation.x +
                               lightAttenuation.y * light_dir_length + 
                               lightAttenuation.z * light_dir_length * light_dir_length);
    float ShadowedAttenuation = attenuation * saturate(dot(light_dir, normal_dir) * 100000.);

    // ENERGY CONSERVATION
    float Energy = 1.;
    // additional conservation needed for prolonged light sources

    if (IS_FOR_LPP_PASS0){
        float D = D_Func( Roughness, NoH );
        float Geom = GeometricVisibility( Roughness, NoV, NoL, light_dir, view_dir );
        float3 xi = Energy * D * Geom * NoL * ShadowedAttenuation * lightDiffOrig;
        //Fix only for lpp. Approximate correct sum of params
        float schlickE = LPP_F_Schlick_Exp(VoH)/float(nLights);

        // if (dot(light_dir, normal_dir) <= -0.0){	//tambourine
        // 	return float4(0., 1., 0., 0.);
        // }

        return float4(xi, schlickE);
    }

    if (IS_FOR_LPP_PASS1){
        float3 xi = ShadowedAttenuation * NoL * lightDiffOrig;
        return float4(xi, 0.);
    }

    if (IS_FOR_REAL_SHADING) {
        float D = D_Func( Roughness, NoH ); //6 mul 1 rcp
        float Geom = GeometricVisibility( Roughness, NoV, NoL, light_dir, view_dir ); //7 mul 1 rcp
        float3 Fres = Fresnel( SpecularColor, VoH );	//3 mul 1 exp
        float3 SpecularLighting = Energy * Fres * D * Geom; //3 mul

        float3 DiffuseLighting = Diffuse_Func( DiffuseColor, Roughness, NoV, NoL, VoH ); // 1 rcp 1 mul
        //DiffuseLighting *= (1. - SpecularLighting);


        color = float4( (SpecularLighting + DiffuseLighting)
                        * lightDiffOrig * ShadowedAttenuation * NoL, 1. ); // 3 mul
        //color = float4( float3(D/10.), 1. );

        return color;
    }	//23 mul 3 rcp 1 exp

    return color;	
}
